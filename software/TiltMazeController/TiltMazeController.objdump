
TiltMazeController.elf:     file format elf32-littlenios2
TiltMazeController.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x0001c934 memsz 0x0001c934 flags r-x
    LOAD off    0x0001ead4 vaddr 0x0081cad4 paddr 0x0081e63c align 2**12
         filesz 0x00001b68 memsz 0x00001b68 flags rw-
    LOAD off    0x000211a4 vaddr 0x008201a4 paddr 0x008201a4 align 2**12
         filesz 0x00000000 memsz 0x000096cc flags rw-
    LOAD off    0x00021000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c048  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008ec  0081c1e8  0081c1e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b68  0081cad4  0081e63c  0001ead4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000096cc  008201a4  008201a4  000211a4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001278  00000000  00000000  00021048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002957  00000000  00000000  000222c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003fc4a  00000000  00000000  00024c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c685  00000000  00000000  00064861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000240cb  00000000  00000000  00070ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f70  00000000  00000000  00094fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003010  00000000  00000000  00097f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000133f3  00000000  00000000  0009af34  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000ae328  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bb8  00000000  00000000  000ae338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000b45b7  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000b45bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b45c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b45ca  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000b45cb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000b45cf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000b45d3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000b45d7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000b45e2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000b45ed  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000b45f8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  000b4605  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  000b4651  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007da26  00000000  00000000  000b982c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
0081c1e8 l    d  .rodata	00000000 .rodata
0081cad4 l    d  .rwdata	00000000 .rwdata
008201a4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 command.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 servo.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00801700 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00801978 l     F .text	00000058 __sprint_r
0081c3b6 l     O .rodata	00000010 blanks.3452
0081c3a6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0081c3ce l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0081c4f1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0080517c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806ba4 l     F .text	00000058 std
00806cb0 l     F .text	00000008 __fp_lock
00806cb8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081cedc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0081e594 l     O .rwdata	00000004 charset
0081c698 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081c7e0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00809bf0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
00809f4c l     F .text	00000048 match
0081d2fc l     O .rwdata	00000014 fpi.1950
0081c7fc l     O .rodata	00000028 tinytens
0081d2e8 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080c8a8 l     F .text	00000024 htinit
0080c934 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080d1e0 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080e5d0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080f7f8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0081030c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081036c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810470 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00810594 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810674 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008107d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00810a20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e5b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00810cd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081e5b4 l     O .rwdata	00000004 lockid
008201e8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081e5b8 l     O .rwdata	00000004 lockid
008201f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00812710 l     F .text	00000044 OS_InitMisc
00812754 l     F .text	0000006c OS_InitRdyList
008128b8 l     F .text	000000e0 OS_InitTCBList
00812634 l     F .text	000000dc OS_InitEventList
008127c0 l     F .text	0000007c OS_InitTaskIdle
0081283c l     F .text	0000007c OS_InitTaskStat
00812b2c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00814a4c l     F .text	00000110 OS_FlagTaskRdy
008147a4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081d4b8 l     O .rwdata	0000106c jtag_uart_0
0081e524 l     O .rwdata	0000002c character_lcd_0
0081e550 l     O .rwdata	0000002c rs232_0
008193b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00819668 l     F .text	000002c8 altera_avalon_jtag_uart_irq
00819930 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081a148 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081ad30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081af08 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081b218 l     F .text	000000f8 alt_file_locked
0081b49c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081bfc4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081c178 l     F .text	00000040 alt_sim_halt
008014e4 g     F .text	0000001c putchar
008085cc g     F .text	00000094 _mprec_log10
0081e606 g     O .rwdata	00000002 OSTaskNameSize
008086b8 g     F .text	00000088 __any_on
0080d474 g     F .text	00000070 _isatty_r
0081c7b8 g     O .rodata	00000028 __mprec_tinytens
00810834 g     F .text	000000c8 alt_main
00801508 g     F .text	000000a0 _puts_r
008295e0 g     O .bss	00000100 alt_irq
0082027c g     O .bss	00000040 cmdarr
0080d4e4 g     F .text	00000078 _lseek_r
00815340 g     F .text	000000d4 OS_MemInit
00800680 g     F .text	00000048 servo_init
0081e63c g       *ABS*	00000000 __flash_rwdata_start
008192a0 g     F .text	00000064 OSTimeSet
0081a2c0 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080f0f0 g     F .text	00000088 __eqdf2
0081128c g     F .text	000006b4 OSEventPendMulti
00829870 g       *ABS*	00000000 __alt_heap_start
0081baa4 g     F .text	00000020 OSTaskCreateHook
0080146c g     F .text	00000044 printf
0081e5de g     O .rwdata	00000002 OSMboxEn
00811994 g     F .text	0000007c OSIntEnter
00809d4c g     F .text	00000068 __sseek
00806c0c g     F .text	000000a4 __sinit
0080c414 g     F .text	00000130 __swbuf_r
0081e5ee g     O .rwdata	00000002 OSQEn
00807b90 g     F .text	00000084 _setlocale_r
00806d0c g     F .text	0000009c __sfmoreglue
0080c3f8 g     F .text	0000001c ungetc
00810f48 g     F .text	000000d0 __malloc_unlock
0081bb00 g     F .text	0000001c OSTaskStatHook
0081a9a8 g     F .text	00000090 alt_up_rs232_read_fd
008201f8 g     O .bss	00000001 OSLockNesting
00809f94 g     F .text	000015cc _strtod_r
0081e62c g     O .rwdata	00000002 OSDataSize
008201f9 g     O .bss	00000001 OSRunning
008006c8 g     F .text	000000ac servotask
00808048 g     F .text	000000e0 memmove
0081bb38 g     F .text	0000001c OSInitHookBegin
0081e624 g     O .rwdata	00000002 OSTmrSize
00806cfc g     F .text	00000010 _cleanup
00808740 g     F .text	000000bc _Balloc
008201fc g     O .bss	00000004 OSIdleCtr
0080f200 g     F .text	00000088 __gtdf2
0081b770 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0081a244 g     F .text	0000007c get_DDRAM_addr
00812e60 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000000c __reset
0081e62a g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081e5ca g     O .rwdata	00000002 OSEventSize
00820200 g     O .bss	00000001 OSPrioHighRdy
0080c834 g     F .text	00000074 _fstat_r
0081bac4 g     F .text	00000020 OSTaskDelHook
008201c8 g     O .bss	00000004 errno
00804f40 g     F .text	00000024 __svfscanf
0081b750 g       .text	00000000 OSStartHighRdy
00817a58 g     F .text	00000200 OSTaskCreateExt
008142c0 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081e60a g     O .rwdata	00000002 OSTaskStatStkSize
0080fb6c g     F .text	0000002c __make_fp
008132cc g     F .text	00000334 OSFlagAccept
00815a7c g     F .text	000000c8 OSQFlush
00815414 g     F .text	00000154 OSQAccept
008201e0 g     O .bss	00000004 alt_argv
0082657c g       *ABS*	00000000 _gp
00817884 g     F .text	000001d4 OSTaskCreate
00800bf8 g     F .text	0000010c uart_write
00817310 g     F .text	00000574 OSTaskChangePrio
008201f4 g     O .bss	00000004 alt_heapsem
00813140 g     F .text	0000018c OSDebugInit
00817c58 g     F .text	0000040c OSTaskDel
0081d338 g     O .rwdata	00000180 alt_fd_list
008263bc g     O .bss	00000370 OSFlagTbl
008201a4 g     O .bss	00000004 servo1Sem
00801500 g     F .text	00000008 _putchar_r
00812410 g     F .text	000000b8 OS_EventTaskRemove
0081ae58 g     F .text	00000094 alt_find_dev
00807fa8 g     F .text	000000a0 memcpy
0080d22c g     F .text	00000248 __hexnan
0081e5f4 g     O .rwdata	00000002 OSRdyTblSize
0081a458 g     F .text	0000004c alt_up_character_lcd_write_fd
00806cf0 g     F .text	0000000c _cleanup_r
0080f420 g     F .text	000000f8 __floatsidf
0081afe0 g     F .text	00000078 alt_io_redirect
0080f310 g     F .text	00000088 __ltdf2
0081c1e8 g       *ABS*	00000000 __DTOR_END__
0081a934 g     F .text	00000074 alt_up_rs232_read_data
008015a8 g     F .text	00000014 puts
00811018 g     F .text	00000130 OSEventNameGet
008201b0 g     O .bss	00000002 servo0Angle
0081e5d8 g     O .rwdata	00000002 OSFlagMax
00807e44 g     F .text	00000040 mbrtowc
00804f64 g     F .text	00000068 _vfscanf_r
0080851c g     F .text	000000b0 __ratio
00811a10 g     F .text	00000100 OSIntExit
0081e612 g     O .rwdata	00000002 OSTCBSize
00820201 g     O .bss	00000001 OSPrioCur
00819bac g     F .text	000002c0 altera_avalon_jtag_uart_read
00800d18 g     F .text	00000014 malloc
008014b0 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080f934 g     F .text	00000008 __udivsi3
008104d0 g     F .text	000000c4 isatty
0081e5f8 g     O .rwdata	00000002 OSStkWidth
00807b40 g     F .text	0000002c iswspace
0081c6c8 g     O .rodata	000000c8 __mprec_tens
0081e5ec g     O .rwdata	00000002 OSPtrSize
00807b6c g     F .text	00000008 __locale_charset
0081e5cc g     O .rwdata	00000002 OSEventTblSize
0080d6f8 g     F .text	000000a4 __fixunsdfsi
0081b6c4 g       .text	00000000 OSCtxSw
008201bc g     O .bss	00000004 __malloc_top_pad
00820204 g     O .bss	00000004 OSTCBList
008201d8 g     O .bss	00000004 alt_fd_list_lock
0080be6c g     F .text	00000024 strtoul
0081e590 g     O .rwdata	00000004 __mb_cur_max
00807b74 g     F .text	0000000c _localeconv_r
0080be90 g     F .text	000002f0 _strtoull_r
00808ea4 g     F .text	0000003c __i2b
00807524 g     F .text	0000049c __sfvwrite_r
0082672c g     O .bss	00000c30 OSMemTbl
00820208 g     O .bss	00000001 OSTickStepState
008015bc g     F .text	00000070 _sbrk_r
0081e5f0 g     O .rwdata	00000002 OSQMax
0082735c g     O .bss	00000800 OSTaskStatStk
00814f28 g     F .text	0000010c OSMemNameGet
0081e5d0 g     O .rwdata	00000002 OSFlagEn
0080d55c g     F .text	00000078 _read_r
0081e616 g     O .rwdata	00000002 OSTimeTickHookEn
00814b5c g     F .text	000000ac OS_FlagUnlink
00815fe0 g     F .text	00000180 OSQPost
0081d2dc g     O .rwdata	0000000c __lc_ctype
0081e5a8 g     O .rwdata	00000004 alt_max_fd
0081a89c g     F .text	00000050 alt_up_rs232_check_parity
008129ec g     F .text	0000006c OS_MemCopy
00812a58 g     F .text	000000d4 OS_Sched
0080feac g     F .text	00000138 __unpack_d
0080c710 g     F .text	00000110 _fclose_r
008201a8 g     O .bss	00000004 servo0Sem
00814e24 g     F .text	00000104 OSMemGet
0081838c g     F .text	000001c4 OSTaskNameSet
00806b70 g     F .text	00000034 fflush
008201c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0082020c g     O .bss	00000004 OSCtxSwCtr
0081bb1c g     F .text	0000001c OSTimeTickHook
0081b058 g     F .text	000001c0 alt_irq_register
0081e5da g     O .rwdata	00000002 OSFlagNameSize
008124c8 g     F .text	00000104 OS_EventTaskRemoveMulti
0080ea60 g     F .text	00000074 __adddf3
0080e468 g     F .text	00000078 __nesf2
008122bc g     F .text	00000154 OS_EventTaskWaitMulti
008083fc g     F .text	00000120 __b2d
0081e5f2 g     O .rwdata	00000002 OSQSize
0080de08 g     F .text	00000660 __umoddi3
008106e0 g     F .text	000000f4 lseek
00816bbc g     F .text	0000027c OSSemPend
0081e58c g     O .rwdata	00000004 _global_impure_ptr
00809438 g     F .text	000005f4 _realloc_r
0081e5dc g     O .rwdata	00000002 OSLowestPrio
00829870 g       *ABS*	00000000 __bss_end
0081bb8c g     F .text	00000020 OSTCBInitHook
0081e622 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081b594 g     F .text	00000110 alt_tick
008262bc g     O .bss	00000100 __hexdig
0080d79c g     F .text	0000066c __udivdi3
0081e5c4 g     O .rwdata	00000002 OSEventEn
0081c790 g     O .rodata	00000028 __mprec_bigtens
0080912c g     F .text	00000120 __s2b
0081e61e g     O .rwdata	00000002 OSTmrCfgNameSize
0080f664 g     F .text	00000194 __floatunsidf
0080831c g     F .text	00000060 __mcmp
0081e584 g     O .rwdata	00000004 __ctype_ptr
00806cd8 g     F .text	00000018 __fp_lock_all
00814968 g     F .text	000000e4 OS_FlagInit
0081b4fc g     F .text	00000098 alt_alarm_stop
0080b8f0 g     F .text	00000024 strtol
0081e600 g     O .rwdata	00000002 OSTaskIdleStkSize
00820248 g     O .bss	00000004 alt_irq_active
00816748 g     F .text	000000c0 OSSemAccept
00815154 g     F .text	000000f0 OSMemPut
00814c08 g     F .text	0000021c OSMemCreate
00820210 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d4 alt_irq_handler
0081d310 g     O .rwdata	00000028 alt_dev_null
0081e614 g     O .rwdata	00000002 OSTicksPerSec
0080f9fc g     F .text	000000c8 __unpack_f
0081a740 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0081b6c4 g       .text	00000000 OSIntCtxSw
0081ac60 g     F .text	0000001c alt_dcache_flush_all
008081e8 g     F .text	00000070 __hi0bits
0080f518 g     F .text	000000d8 __fixdfsi
0080b684 g     F .text	0000001c strtod
00820214 g     O .bss	00000004 OSTCBFreeList
0081e63c g       *ABS*	00000000 __ram_rwdata_end
00816e38 g     F .text	0000017c OSSemPendAbort
0081e5a0 g     O .rwdata	00000008 alt_dev_list
00810bb4 g     F .text	00000124 write
00809350 g     F .text	000000e8 _putc_r
0081e618 g     O .rwdata	00000002 OSVersionNbr
0080e4e0 g     F .text	00000078 __gtsf2
0081cad4 g       *ABS*	00000000 __ram_rodata_end
00810398 g     F .text	000000d8 fstat
0081aa38 g     F .text	00000094 alt_up_rs232_write_fd
0080f398 g     F .text	00000088 __ledf2
008001dc g     F .text	00000144 process_cmd_buf
0081e5c0 g     O .rwdata	00000004 OSEndiannessTest
0080900c g     F .text	00000120 __pow5mult
008201cc g     O .bss	00000004 __nlocale_changed
0080f93c g     F .text	00000008 __umodsi3
0081e5d2 g     O .rwdata	00000002 OSFlagGrpSize
00800918 g     F .text	000002e0 uarttask
00829870 g       *ABS*	00000000 end
008100ac g     F .text	00000160 __pack_f
00819538 g     F .text	00000130 altera_avalon_jtag_uart_init
00812cd0 g     F .text	000000c8 OS_TaskStat
0081c1e4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081a1bc g     F .text	00000088 alt_avalon_timer_sc_init
0080f97c g     F .text	00000080 __clzsi2
00819e6c g     F .text	000002dc altera_avalon_jtag_uart_write
008008d0 g     F .text	00000048 uart_init
00806bfc g     F .text	00000004 __sfp_lock_acquire
00807ec4 g     F .text	000000e4 memchr
00812998 g     F .text	00000054 OS_MemClr
0081a368 g     F .text	00000078 alt_up_character_lcd_write
008019d0 g     F .text	00001ec4 ___vfprintf_internal_r
0081b794 g     F .text	00000310 OSTaskStkInit
008016a0 g     F .text	00000060 _sprintf_r
00807210 g     F .text	00000314 _free_r
00812018 g     F .text	00000194 OS_EventTaskRdy
0081bfc8 g     F .text	000001b0 __call_exitprocs
00820218 g     O .bss	00000001 OSCPUUsage
008201d0 g     O .bss	00000004 __mlocale_changed
0081e580 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000003c _start
0082024c g     O .bss	00000004 _alt_tick_rate
00815b44 g     F .text	00000320 OSQPend
0080b914 g     F .text	00000318 _strtoll_r
00818d50 g     F .text	0000014c OSTimeDly
00808b04 g     F .text	0000014c __lshift
00820250 g     O .bss	00000004 _alt_nticks
008108fc g     F .text	00000124 read
00819338 g     F .text	00000080 alt_sys_init
0081a5cc g     F .text	000000b0 alt_up_character_lcd_shift_display
0081be90 g     F .text	00000134 __register_exitproc
00820219 g     O .bss	00000001 OSTaskCtr
00801888 g     F .text	000000f0 strncmp
0081a85c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00818e9c g     F .text	00000190 OSTimeDlyHMSM
00808c50 g     F .text	00000254 __multiply
0081a67c g     F .text	00000090 alt_up_character_lcd_erase_pos
00819a44 g     F .text	00000074 altera_avalon_jtag_uart_close
0080f944 g     F .text	00000038 __mulsi3
0081cad4 g       *ABS*	00000000 __ram_rwdata_start
0081c1e8 g       *ABS*	00000000 __ram_rodata_start
00820254 g     O .bss	00000028 __malloc_current_mallinfo
0081e5c6 g     O .rwdata	00000002 OSEventMax
008087fc g     F .text	0000017c __d2b
00816fb4 g     F .text	00000128 OSSemPost
00811b9c g     F .text	000000e4 OSSchedUnlock
008193f0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080bc2c g     F .text	00000240 _strtoul_r
0081bccc g     F .text	00000104 alt_get_fd
0082021c g     O .bss	00000004 OSMemFreeList
00811cf0 g     F .text	000000ac OSStatInit
008146d0 g     F .text	000000d4 OSFlagQuery
0080ffe4 g     F .text	000000c8 __fpcmp_parts_d
0081e5fc g     O .rwdata	00000002 OSTaskCreateExtEn
0080c6a0 g     F .text	00000070 _close_r
0081be1c g     F .text	00000074 memcmp
00811ffc g     F .text	0000001c OS_Dummy
008194a0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00829870 g       *ABS*	00000000 __alt_stack_base
008194e8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008202bc g     O .bss	00002000 task_servo_stk
00801790 g     F .text	00000084 sscanf
00805040 g     F .text	0000013c __swsetup_r
00827b5c g     O .bss	000001e0 OSQTbl
0080ee98 g     F .text	00000258 __divdf3
00806da8 g     F .text	000000f0 __sfp
00808660 g     F .text	00000058 __copybits
0081cad4 g     O .rwdata	00000408 __malloc_av_
00806c08 g     F .text	00000004 __sinit_lock_release
00820220 g     O .bss	00000004 OSTCBHighRdy
0080ead4 g     F .text	000003c4 __muldf3
00809e30 g     F .text	00000060 __sread
008070a4 g     F .text	00000040 fread
00820224 g     O .bss	00000004 OSQFreeList
0081a7c8 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0081bbac g     F .text	00000120 alt_find_file
0081ac7c g     F .text	000000b4 alt_dev_llist_insert
00810e40 g     F .text	00000108 __malloc_lock
008222bc g     O .bss	00002000 task_main_stk
00810af8 g     F .text	000000bc sbrk
00811148 g     F .text	00000144 OSEventNameSet
00806974 g     F .text	000001fc _fflush_r
0080c5d8 g     F .text	000000c8 _calloc_r
008007cc g     F .text	00000104 button_read
00820228 g     O .bss	00000001 OSRdyGrp
008242bc g     O .bss	00002000 task_uart_stk
008201a4 g       *ABS*	00000000 __bss_start
00808128 g     F .text	00000098 memset
008201b2 g     O .bss	00000001 err
00800548 g     F .text	00000138 main
008201e4 g     O .bss	00000004 alt_envp
008201c4 g     O .bss	00000004 __malloc_max_total_mem
00819448 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080c544 g     F .text	0000001c __swbuf
0081c974 g     O .rodata	00000100 OSUnMapTbl
0080e558 g     F .text	00000078 __ltsf2
00806e98 g     F .text	0000020c _fread_r
0081e5f6 g     O .rwdata	00000002 OSSemEn
0081a51c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00814328 g     F .text	000003a8 OSFlagPost
00809d44 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c820 g     F .text	00000014 fclose
008121ac g     F .text	00000110 OS_EventTaskWait
0080b6a0 g     F .text	00000250 _strtol_r
0080f5f0 g     F .text	00000074 __truncdfsf2
00812d98 g     F .text	000000c8 OS_TaskStatStkChk
008296e0 g     O .bss	00000190 _atexit0
00818064 g     F .text	00000170 OSTaskDelReq
008053c0 g     F .text	000015b4 _dtoa_r
00800d2c g     F .text	00000740 _malloc_r
0081e5ac g     O .rwdata	00000004 alt_errno
00811c80 g     F .text	00000070 OSStart
0080c180 g     F .text	000000dc __submore
00810de4 g     F .text	0000005c __env_unlock
00807a88 g     F .text	000000b8 _fwalk
00818550 g     F .text	00000218 OSTaskResume
00815244 g     F .text	000000fc OSMemQuery
0081e608 g     O .rwdata	00000002 OSTaskStatEn
00807e84 g     F .text	00000040 _mbtowc_r
0081e5e2 g     O .rwdata	00000002 OSMemMax
00816160 g     F .text	00000188 OSQPostFront
0080924c g     F .text	00000104 putc
0080f874 g     F .text	00000060 __divsi3
00820229 g     O .bss	00000003 OSRdyTbl
0081e5bc g     O .rwdata	00000002 OSDebugEn
0081c840 g     O .rodata	00000014 __thenan_df
0081a328 g     F .text	00000040 alt_up_character_lcd_open_dev
008070e4 g     F .text	0000012c _malloc_trim_r
0081c1e8 g       *ABS*	00000000 __CTOR_END__
00800774 g     F .text	00000058 checkRotationLimits
0081e5d4 g     O .rwdata	00000002 OSFlagNodeSize
0081e61c g     O .rwdata	00000002 OSTmrCfgMax
0081a2f4 g     F .text	00000034 alt_up_character_lcd_init
00809e90 g     F .text	000000bc strcmp
00815568 g     F .text	00000214 OSQCreate
008181d4 g     F .text	000001b8 OSTaskNameGet
0081c1e8 g       *ABS*	00000000 __flash_rodata_start
008162e8 g     F .text	00000234 OSQPostOpt
00811d9c g     F .text	00000240 OSTimeTick
0081e604 g     O .rwdata	00000002 OSTaskMax
0081c1e8 g       *ABS*	00000000 __DTOR_LIST__
00816808 g     F .text	00000114 OSSemCreate
0081e628 g     O .rwdata	00000002 OSTmrWheelSize
0081aacc g     F .text	00000040 alt_up_rs232_open_dev
0080f178 g     F .text	00000088 __nedf2
0081e5fe g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
008170dc g     F .text	00000130 OSSemQuery
0081577c g     F .text	00000300 OSQDel
00815e64 g     F .text	0000017c OSQPendAbort
00819304 g     F .text	00000034 alt_irq_init
00810a80 g     F .text	00000078 alt_release_fd
0080162c g     F .text	00000074 sprintf
0081a70c g     F .text	00000034 alt_up_character_lcd_cursor_off
0081c854 g     O .rodata	00000100 __clz_tab
00800320 g     F .text	00000048 get_arg
008201d4 g     O .bss	00000004 _PathLocale
0080b560 g     F .text	00000124 strtof
0081bdd0 g     F .text	00000014 atexit
0080c560 g     F .text	00000078 _write_r
00811b10 g     F .text	0000008c OSSchedLock
00807c14 g     F .text	0000001c setlocale
00813600 g     F .text	0000013c OSFlagCreate
00809d3c g     F .text	00000008 nanf
0081e588 g     O .rwdata	00000004 _impure_ptr
008201dc g     O .bss	00000004 alt_argc
00807dc4 g     F .text	00000080 _mbrtowc_r
0081adf4 g     F .text	00000064 _do_dtors
0081e5ce g     O .rwdata	00000002 OSEventMultiEn
00809a2c g     F .text	000001c4 __srefill_r
0081373c g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0082022c g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
0080837c g     F .text	00000080 __ulp
00809c0c g     F .text	00000040 __isinfd
00813c7c g     F .text	00000644 OSFlagPend
0081e61a g     O .rwdata	00000002 OSTmrEn
00806cc0 g     F .text	00000018 __fp_unlock_all
0081e598 g     O .rwdata	00000008 alt_fs_list
00812b9c g     F .text	00000080 OS_StrCopy
0081a774 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0081a8ec g     F .text	00000048 alt_up_rs232_write_data
0081e5e4 g     O .rwdata	00000002 OSMemNameSize
0081bb54 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
0081e610 g     O .rwdata	00000002 OSTCBPrioTblMax
00807b80 g     F .text	00000010 localeconv
0081e60c g     O .rwdata	00000002 OSTaskStatStkChkEn
0081e5e0 g     O .rwdata	00000002 OSMemEn
0080c8cc g     F .text	00000068 __hexdig_init
00801708 g     F .text	00000088 _sscanf_r
0081e5ea g     O .rwdata	00000002 OSMutexEn
0081e63c g       *ABS*	00000000 _edata
00829870 g       *ABS*	00000000 _end
00820230 g     O .bss	00000001 OSIntNesting
008201ac g     O .bss	00000004 cmdQ
011041c0 g       *ABS*	00000000 __ram_exceptions_end
00804fcc g     F .text	00000074 vfscanf
00819ab8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0081902c g     F .text	00000210 OSTimeDlyResume
00813b28 g     F .text	00000154 OSFlagNameSet
00800368 g     F .text	000001e0 maintask
00818768 g     F .text	000001fc OSTaskStkChk
0081e5e6 g     O .rwdata	00000002 OSMemSize
00809db4 g     F .text	0000007c __swrite
0081e57c g     O .rwdata	00000004 __malloc_trim_threshold
0081b6a4 g     F .text	00000020 altera_nios2_qsys_irq_init
00820234 g     O .bss	00000004 OSTCBCur
0081bde4 g     F .text	00000038 exit
0081e5e8 g     O .rwdata	00000002 OSMemTblSize
008079c0 g     F .text	000000c8 _fwalk_reent
00808978 g     F .text	0000018c __mdiff
0080f8d4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
008201b8 g     O .bss	00000004 uart
00806c00 g     F .text	00000004 __sfp_lock_release
00811940 g     F .text	00000054 OSInit
00818b90 g     F .text	00000144 OSTaskQuery
0081a3e0 g     F .text	00000078 alt_up_character_lcd_string
0081669c g     F .text	000000ac OS_QInit
00809c7c g     F .text	000000c0 __sccl
00812c1c g     F .text	00000058 OS_StrLen
00815034 g     F .text	00000120 OSMemNameSet
0081c3f0 g     O .rodata	00000101 _ctype_
0081e602 g     O .rwdata	00000002 OSTaskProfileEn
00820238 g     O .bss	00000004 OSTime
0080fac4 g     F .text	000000a8 __fpcmp_parts_f
00827d3c g     O .bss	00000800 OSTaskIdleStk
0081c1b8 g     F .text	0000002c _exit
00809c4c g     F .text	00000030 __isnand
0081ab0c g     F .text	00000154 alt_alarm_start
008139e4 g     F .text	00000144 OSFlagNameGet
0081923c g     F .text	00000064 OSTimeGet
0080d5d4 g     F .text	00000124 __muldi3
00807c30 g     F .text	00000194 __smakebuf_r
00801814 g     F .text	00000074 strlen
0081bae4 g     F .text	0000001c OSTaskSwHook
0081b310 g     F .text	0000018c open
0082853c g     O .bss	00000b40 OSEventTbl
0080f288 g     F .text	00000088 __gedf2
0082907c g     O .bss	00000510 OSTCBTbl
0080c9e4 g     F .text	000007fc __gethex
0081720c g     F .text	00000104 OSSemSet
0081aeec g     F .text	0000001c alt_icache_flush_all
0081a4a4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081e630 g     O .rwdata	00000004 alt_priority_mask
0081691c g     F .text	000002a0 OSSemDel
0082023c g     O .bss	00000004 OSFlagFreeList
0081e5c8 g     O .rwdata	00000002 OSEventNameSize
00803894 g     F .text	00000024 __vfprintf_internal
00820240 g     O .bss	00000001 OSStatRdy
0082958c g     O .bss	00000054 OSTCBPrioTbl
00810d38 g     F .text	000000ac __env_lock
0081e60e g     O .rwdata	00000002 OSTaskSwHookEn
0080e9e0 g     F .text	00000080 __subdf3
00808258 g     F .text	000000c4 __lo0bits
008038b8 g     F .text	00001688 __svfscanf_r
008201b4 g     O .bss	00000002 servo1Angle
0081e634 g     O .rwdata	00000008 alt_alarm_list
0080c25c g     F .text	0000019c _ungetc_r
0081e5d6 g     O .rwdata	00000002 OSFlagWidth
0081ad90 g     F .text	00000064 _do_ctors
0081a820 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0081020c g     F .text	00000100 close
008201ec g     O .bss	00000004 alt_envsem
00820244 g     O .bss	00000004 OSIdleCtrRun
00811fdc g     F .text	00000020 OSVersion
0081e620 g     O .rwdata	00000002 OSTmrCfgWheelSize
008105f4 g     F .text	00000080 alt_load
00818cd4 g     F .text	0000007c OS_TaskStkClr
0080fb98 g     F .text	00000314 __pack_d
0081e5fa g     O .rwdata	00000002 OSTaskCreateEn
008125cc g     F .text	00000068 OS_EventWaitListInit
0081bb70 g     F .text	0000001c OSTaskIdleHook
00800d04 g     F .text	00000014 free
00806c04 g     F .text	00000004 __sinit_lock_acquire
00808ee0 g     F .text	0000012c __multadd
00818964 g     F .text	0000022c OSTaskSuspend
008081c0 g     F .text	00000028 _Bfree
00812c74 g     F .text	0000005c OS_TaskIdle
0081e626 g     O .rwdata	00000002 OSTmrTblSize
0081651c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08406814 	ori	at,at,416
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	08119940 	call	811994 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000171e 	bne	r2,zero,110418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020f4 	movhi	r3,131
 1104138:	18e57804 	addi	r3,r3,-27168
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11800017 	ldw	r6,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020f4 	movhi	r3,131
 1104150:	18e57804 	addi	r3,r3,-27168
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	e17ffd17 	ldw	r5,-12(fp)
 1104168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110416c:	0005313a 	rdctl	r2,ipending
 1104170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 110417c:	e0bfff17 	ldw	r2,-4(fp)
 1104180:	1004c03a 	cmpne	r2,r2,zero
 1104184:	103fe21e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104188:	00000706 	br	11041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 110418c:	e0bffe17 	ldw	r2,-8(fp)
 1104190:	1085883a 	add	r2,r2,r2
 1104194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104198:	e0bffd17 	ldw	r2,-12(fp)
 110419c:	10800044 	addi	r2,r2,1
 11041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a4:	003fdd06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a8:	0811a100 	call	811a10 <OSIntExit>
}
 11041ac:	e037883a 	mov	sp,fp
 11041b0:	dfc00117 	ldw	ra,4(sp)
 11041b4:	df000017 	ldw	fp,0(sp)
 11041b8:	dec00204 	addi	sp,sp,8
 11041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001ac:	d6995f14 	ori	gp,gp,25980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001b4:	10806914 	ori	r2,r2,420

    movhi r3, %hi(__bss_end)
  8001b8:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001bc:	18e61c14 	ori	r3,r3,39024

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	08105f40 	call	8105f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	08108340 	call	810834 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <process_cmd_buf>:
 *      Author: dktrotti
 */

#include "command.h"

cmd_t process_cmd_buf(char *buf, INT16U *arg) {
  8001dc:	defffb04 	addi	sp,sp,-20
  8001e0:	dfc00415 	stw	ra,16(sp)
  8001e4:	df000315 	stw	fp,12(sp)
  8001e8:	df000304 	addi	fp,sp,12
  8001ec:	e13ffd15 	stw	r4,-12(fp)
  8001f0:	e17ffe15 	stw	r5,-8(fp)
	if (strncmp(buf, CMD_PING, CMD_LEN) == 0) {
  8001f4:	e13ffd17 	ldw	r4,-12(fp)
  8001f8:	014020b4 	movhi	r5,130
  8001fc:	29707a04 	addi	r5,r5,-15896
  800200:	01800084 	movi	r6,2
  800204:	08018880 	call	801888 <strncmp>
  800208:	1004c03a 	cmpne	r2,r2,zero
  80020c:	1000051e 	bne	r2,zero,800224 <process_cmd_buf+0x48>
		*arg = 0;
  800210:	e0bffe17 	ldw	r2,-8(fp)
  800214:	1000000d 	sth	zero,0(r2)
		return PING;
  800218:	00800044 	movi	r2,1
  80021c:	e0bfff15 	stw	r2,-4(fp)
  800220:	00003906 	br	800308 <process_cmd_buf+0x12c>
	} else if (strncmp(buf, CMD_SETX, CMD_LEN) == 0) {
  800224:	e13ffd17 	ldw	r4,-12(fp)
  800228:	014020b4 	movhi	r5,130
  80022c:	29707b04 	addi	r5,r5,-15892
  800230:	01800084 	movi	r6,2
  800234:	08018880 	call	801888 <strncmp>
  800238:	1004c03a 	cmpne	r2,r2,zero
  80023c:	1000081e 	bne	r2,zero,800260 <process_cmd_buf+0x84>
		// TODO: Make sure argument is there
		//*arg = ((INT16U) buf[CMD_ARGPOS] << 8) + ((INT16U) buf[CMD_ARGPOS + 1]);
		*arg = get_arg(buf);
  800240:	e13ffd17 	ldw	r4,-12(fp)
  800244:	08003200 	call	800320 <get_arg>
  800248:	1007883a 	mov	r3,r2
  80024c:	e0bffe17 	ldw	r2,-8(fp)
  800250:	10c0000d 	sth	r3,0(r2)
		return SET_X_ACC;
  800254:	00800084 	movi	r2,2
  800258:	e0bfff15 	stw	r2,-4(fp)
  80025c:	00002a06 	br	800308 <process_cmd_buf+0x12c>
	} else if (strncmp(buf, CMD_SETY, CMD_LEN) == 0) {
  800260:	e13ffd17 	ldw	r4,-12(fp)
  800264:	014020b4 	movhi	r5,130
  800268:	29707c04 	addi	r5,r5,-15888
  80026c:	01800084 	movi	r6,2
  800270:	08018880 	call	801888 <strncmp>
  800274:	1004c03a 	cmpne	r2,r2,zero
  800278:	1000081e 	bne	r2,zero,80029c <process_cmd_buf+0xc0>
		// TODO: Make sure argument is there
		//*arg = ((INT16U) buf[CMD_ARGPOS] << 8) + ((INT16U) buf[CMD_ARGPOS + 1]);
		*arg = get_arg(buf);
  80027c:	e13ffd17 	ldw	r4,-12(fp)
  800280:	08003200 	call	800320 <get_arg>
  800284:	1007883a 	mov	r3,r2
  800288:	e0bffe17 	ldw	r2,-8(fp)
  80028c:	10c0000d 	sth	r3,0(r2)
		return SET_Y_ACC;
  800290:	008000c4 	movi	r2,3
  800294:	e0bfff15 	stw	r2,-4(fp)
  800298:	00001b06 	br	800308 <process_cmd_buf+0x12c>
	} else if (strncmp(buf, CMD_GETX, CMD_LEN) == 0) {
  80029c:	e13ffd17 	ldw	r4,-12(fp)
  8002a0:	014020b4 	movhi	r5,130
  8002a4:	29707d04 	addi	r5,r5,-15884
  8002a8:	01800084 	movi	r6,2
  8002ac:	08018880 	call	801888 <strncmp>
  8002b0:	1004c03a 	cmpne	r2,r2,zero
  8002b4:	1000051e 	bne	r2,zero,8002cc <process_cmd_buf+0xf0>
		*arg = 0;
  8002b8:	e0bffe17 	ldw	r2,-8(fp)
  8002bc:	1000000d 	sth	zero,0(r2)
		return GET_X_ACC;
  8002c0:	00800104 	movi	r2,4
  8002c4:	e0bfff15 	stw	r2,-4(fp)
  8002c8:	00000f06 	br	800308 <process_cmd_buf+0x12c>
	} else if (strncmp(buf, CMD_GETY, CMD_LEN) == 0) {
  8002cc:	e13ffd17 	ldw	r4,-12(fp)
  8002d0:	014020b4 	movhi	r5,130
  8002d4:	29707e04 	addi	r5,r5,-15880
  8002d8:	01800084 	movi	r6,2
  8002dc:	08018880 	call	801888 <strncmp>
  8002e0:	1004c03a 	cmpne	r2,r2,zero
  8002e4:	1000051e 	bne	r2,zero,8002fc <process_cmd_buf+0x120>
		*arg = 0;
  8002e8:	e0bffe17 	ldw	r2,-8(fp)
  8002ec:	1000000d 	sth	zero,0(r2)
		return GET_Y_ACC;
  8002f0:	00800144 	movi	r2,5
  8002f4:	e0bfff15 	stw	r2,-4(fp)
  8002f8:	00000306 	br	800308 <process_cmd_buf+0x12c>
	} else {
		*arg = 0;
  8002fc:	e0bffe17 	ldw	r2,-8(fp)
  800300:	1000000d 	sth	zero,0(r2)
		return INVALID;
  800304:	e03fff15 	stw	zero,-4(fp)
  800308:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  80030c:	e037883a 	mov	sp,fp
  800310:	dfc00117 	ldw	ra,4(sp)
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00204 	addi	sp,sp,8
  80031c:	f800283a 	ret

00800320 <get_arg>:

INT16U get_arg(char *buf) {
  800320:	defffc04 	addi	sp,sp,-16
  800324:	dfc00315 	stw	ra,12(sp)
  800328:	df000215 	stw	fp,8(sp)
  80032c:	df000204 	addi	fp,sp,8
  800330:	e13fff15 	stw	r4,-4(fp)
	INT16U rv;

	sscanf(&buf[CMD_ARGPOS], "%x", &rv);
  800334:	e0bfff17 	ldw	r2,-4(fp)
  800338:	11000084 	addi	r4,r2,2
  80033c:	014020b4 	movhi	r5,130
  800340:	29707f04 	addi	r5,r5,-15876
  800344:	e1bffe04 	addi	r6,fp,-8
  800348:	08017900 	call	801790 <sscanf>

	return rv;
  80034c:	e0bffe0b 	ldhu	r2,-8(fp)
  800350:	10bfffcc 	andi	r2,r2,65535
}
  800354:	e037883a 	mov	sp,fp
  800358:	dfc00117 	ldw	ra,4(sp)
  80035c:	df000017 	ldw	fp,0(sp)
  800360:	dec00204 	addi	sp,sp,8
  800364:	f800283a 	ret

00800368 <maintask>:
OS_EVENT *cmdQ;
OS_EVENT *servo0Sem;
OS_EVENT *servo1Sem;
void *cmdarr[16];

void maintask(void* pdata) {
  800368:	defff704 	addi	sp,sp,-36
  80036c:	dfc00815 	stw	ra,32(sp)
  800370:	df000715 	stw	fp,28(sp)
  800374:	df000704 	addi	fp,sp,28
  800378:	e13fff15 	stw	r4,-4(fp)
	INT16U tempy;
	extern short servo0Angle;
	extern short servo1Angle;

	while (1) {
		buf = (char *) OSQPend(cmdQ, 0, &err);
  80037c:	d1270c17 	ldw	r4,-25552(gp)
  800380:	e1bffc04 	addi	r6,fp,-16
  800384:	000b883a 	mov	r5,zero
  800388:	0815b440 	call	815b44 <OSQPend>
  80038c:	e0bffa15 	stw	r2,-24(fp)

		if (err != OS_NO_ERR) {
  800390:	e0bffc03 	ldbu	r2,-16(fp)
  800394:	10803fcc 	andi	r2,r2,255
  800398:	1005003a 	cmpeq	r2,r2,zero
  80039c:	1000031e 	bne	r2,zero,8003ac <maintask+0x44>
			printf("Queue pend error\n");
  8003a0:	010020b4 	movhi	r4,130
  8003a4:	21308004 	addi	r4,r4,-15872
  8003a8:	08015a80 	call	8015a8 <puts>
		}

		command_type = process_cmd_buf(buf, &command_arg);
  8003ac:	e17ffc84 	addi	r5,fp,-14
  8003b0:	e13ffa17 	ldw	r4,-24(fp)
  8003b4:	08001dc0 	call	8001dc <process_cmd_buf>
  8003b8:	e0bffb15 	stw	r2,-20(fp)

		switch (command_type) {
  8003bc:	e0bffb17 	ldw	r2,-20(fp)
  8003c0:	108001a8 	cmpgeui	r2,r2,6
  8003c4:	10005d1e 	bne	r2,zero,80053c <maintask+0x1d4>
  8003c8:	e0bffb17 	ldw	r2,-20(fp)
  8003cc:	1085883a 	add	r2,r2,r2
  8003d0:	1087883a 	add	r3,r2,r2
  8003d4:	00802034 	movhi	r2,128
  8003d8:	1080fa04 	addi	r2,r2,1000
  8003dc:	1885883a 	add	r2,r3,r2
  8003e0:	10800017 	ldw	r2,0(r2)
  8003e4:	1000683a 	jmp	r2
  8003e8:	00800520 	cmpeqi	r2,zero,20
  8003ec:	00800400 	call	80040 <OSCtxSw_SWITCH_PC+0x80000>
  8003f0:	00800420 	cmpeqi	r2,zero,16
  8003f4:	0080045c 	xori	r2,zero,17
  8003f8:	00800498 	cmpnei	r2,zero,18
  8003fc:	008004dc 	xori	r2,zero,19
		case PING:
			uart_write(ACK_STR, ACK_LEN);
  800400:	010020b4 	movhi	r4,130
  800404:	21308504 	addi	r4,r4,-15852
  800408:	014000c4 	movi	r5,3
  80040c:	0800bf80 	call	800bf8 <uart_write>
			printf("Received PING\n");
  800410:	010020b4 	movhi	r4,130
  800414:	21308604 	addi	r4,r4,-15848
  800418:	08015a80 	call	8015a8 <puts>
			break;
  80041c:	00004706 	br	80053c <maintask+0x1d4>
		case SET_X_ACC:
			servo0Angle = (short) command_arg;
  800420:	e0bffc8b 	ldhu	r2,-14(fp)
  800424:	1007883a 	mov	r3,r2
  800428:	008020b4 	movhi	r2,130
  80042c:	10806c04 	addi	r2,r2,432
  800430:	10c0000d 	sth	r3,0(r2)
			uart_write(ACK_STR, ACK_LEN);
  800434:	010020b4 	movhi	r4,130
  800438:	21308504 	addi	r4,r4,-15852
  80043c:	014000c4 	movi	r5,3
  800440:	0800bf80 	call	800bf8 <uart_write>
			printf("Received SET_X_ACC with arg: %d\n", command_arg);
  800444:	e0bffc8b 	ldhu	r2,-14(fp)
  800448:	117fffcc 	andi	r5,r2,65535
  80044c:	010020b4 	movhi	r4,130
  800450:	21308a04 	addi	r4,r4,-15832
  800454:	080146c0 	call	80146c <printf>
			break;
  800458:	00003806 	br	80053c <maintask+0x1d4>
		case SET_Y_ACC:
			servo1Angle = (short) command_arg;
  80045c:	e0bffc8b 	ldhu	r2,-14(fp)
  800460:	1007883a 	mov	r3,r2
  800464:	008020b4 	movhi	r2,130
  800468:	10806d04 	addi	r2,r2,436
  80046c:	10c0000d 	sth	r3,0(r2)
			uart_write(ACK_STR, ACK_LEN);
  800470:	010020b4 	movhi	r4,130
  800474:	21308504 	addi	r4,r4,-15852
  800478:	014000c4 	movi	r5,3
  80047c:	0800bf80 	call	800bf8 <uart_write>
			printf("Received SET_Y_ACC with arg: %d\n", command_arg);
  800480:	e0bffc8b 	ldhu	r2,-14(fp)
  800484:	117fffcc 	andi	r5,r2,65535
  800488:	010020b4 	movhi	r4,130
  80048c:	21309304 	addi	r4,r4,-15796
  800490:	080146c0 	call	80146c <printf>
			break;
  800494:	00002906 	br	80053c <maintask+0x1d4>
		case GET_X_ACC:
			//sprintf(resp_buf, "%s%c%c", CMD_GETX, (char) ((tempx & 0xff00) >> 8), (char) (tempx & 0x00ff));
			sprintf(resp_buf, "%s%.4x", CMD_GETX, (INT16U) servo0Angle);
  800498:	008020b4 	movhi	r2,130
  80049c:	10806c04 	addi	r2,r2,432
  8004a0:	1080000b 	ldhu	r2,0(r2)
  8004a4:	11ffffcc 	andi	r7,r2,65535
  8004a8:	e13ffd04 	addi	r4,fp,-12
  8004ac:	014020b4 	movhi	r5,130
  8004b0:	29709c04 	addi	r5,r5,-15760
  8004b4:	018020b4 	movhi	r6,130
  8004b8:	31b09e04 	addi	r6,r6,-15752
  8004bc:	080162c0 	call	80162c <sprintf>
			uart_write(resp_buf, CMD_LEN + CMD_ARGLEN);
  8004c0:	e13ffd04 	addi	r4,fp,-12
  8004c4:	01400184 	movi	r5,6
  8004c8:	0800bf80 	call	800bf8 <uart_write>
			printf("Received GET_X_ACC\n");
  8004cc:	010020b4 	movhi	r4,130
  8004d0:	21309f04 	addi	r4,r4,-15748
  8004d4:	08015a80 	call	8015a8 <puts>
			break;
  8004d8:	00001806 	br	80053c <maintask+0x1d4>
		case GET_Y_ACC:
			//sprintf(resp_buf, "%s%c%c", CMD_GETY, (char) ((tempy & 0xff00) >> 8), (char) (tempy & 0x00ff));
			sprintf(resp_buf, "%s%.4x", CMD_GETY, (INT16U) servo1Angle);
  8004dc:	008020b4 	movhi	r2,130
  8004e0:	10806d04 	addi	r2,r2,436
  8004e4:	1080000b 	ldhu	r2,0(r2)
  8004e8:	11ffffcc 	andi	r7,r2,65535
  8004ec:	e13ffd04 	addi	r4,fp,-12
  8004f0:	014020b4 	movhi	r5,130
  8004f4:	29709c04 	addi	r5,r5,-15760
  8004f8:	018020b4 	movhi	r6,130
  8004fc:	31b0a404 	addi	r6,r6,-15728
  800500:	080162c0 	call	80162c <sprintf>
			uart_write(resp_buf, CMD_LEN + CMD_ARGLEN);
  800504:	e13ffd04 	addi	r4,fp,-12
  800508:	01400184 	movi	r5,6
  80050c:	0800bf80 	call	800bf8 <uart_write>
			printf("Received GET_Y_ACC\n");
  800510:	010020b4 	movhi	r4,130
  800514:	2130a504 	addi	r4,r4,-15724
  800518:	08015a80 	call	8015a8 <puts>
			break;
  80051c:	00000706 	br	80053c <maintask+0x1d4>
		case INVALID:
			uart_write(NACK_STR, NACK_LEN);
  800520:	010020b4 	movhi	r4,130
  800524:	2130aa04 	addi	r4,r4,-15704
  800528:	01400104 	movi	r5,4
  80052c:	0800bf80 	call	800bf8 <uart_write>
			printf("Received INVALID\n");
  800530:	010020b4 	movhi	r4,130
  800534:	2130ac04 	addi	r4,r4,-15696
  800538:	08015a80 	call	8015a8 <puts>
			break;
		}

		free(buf);
  80053c:	e13ffa17 	ldw	r4,-24(fp)
  800540:	0800d040 	call	800d04 <free>
	}
  800544:	003f8d06 	br	80037c <maintask+0x14>

00800548 <main>:
}

int main(void)
{
  800548:	defff904 	addi	sp,sp,-28
  80054c:	dfc00615 	stw	ra,24(sp)
  800550:	df000515 	stw	fp,20(sp)
  800554:	df000504 	addi	fp,sp,20
	printf("Hello world\n");
  800558:	010020b4 	movhi	r4,130
  80055c:	2130b104 	addi	r4,r4,-15676
  800560:	08015a80 	call	8015a8 <puts>

	cmdQ = OSQCreate(&cmdarr[0], 16);
  800564:	010020b4 	movhi	r4,130
  800568:	21009f04 	addi	r4,r4,636
  80056c:	01400404 	movi	r5,16
  800570:	08155680 	call	815568 <OSQCreate>
  800574:	d0a70c15 	stw	r2,-25552(gp)
	servo0Sem = OSSemCreate(1);
  800578:	01000044 	movi	r4,1
  80057c:	08168080 	call	816808 <OSSemCreate>
  800580:	d0a70b15 	stw	r2,-25556(gp)
	servo1Sem = OSSemCreate(1);
  800584:	01000044 	movi	r4,1
  800588:	08168080 	call	816808 <OSSemCreate>
  80058c:	d0a70a15 	stw	r2,-25560(gp)

	uart_init(cmdQ);
  800590:	d1270c17 	ldw	r4,-25552(gp)
  800594:	08008d00 	call	8008d0 <uart_init>
	servo_init(servo0Sem, servo1Sem);
  800598:	d1270b17 	ldw	r4,-25556(gp)
  80059c:	d1670a17 	ldw	r5,-25560(gp)
  8005a0:	08006800 	call	800680 <servo_init>

	OSTaskCreateExt(servotask,
  8005a4:	018020b4 	movhi	r6,130
  8005a8:	3188ae04 	addi	r6,r6,8888
  8005ac:	00800084 	movi	r2,2
  8005b0:	d8800015 	stw	r2,0(sp)
  8005b4:	008020b4 	movhi	r2,130
  8005b8:	1080af04 	addi	r2,r2,700
  8005bc:	d8800115 	stw	r2,4(sp)
  8005c0:	00820004 	movi	r2,2048
  8005c4:	d8800215 	stw	r2,8(sp)
  8005c8:	d8000315 	stw	zero,12(sp)
  8005cc:	d8000415 	stw	zero,16(sp)
  8005d0:	01002034 	movhi	r4,128
  8005d4:	2101b204 	addi	r4,r4,1736
  8005d8:	000b883a 	mov	r5,zero
  8005dc:	01c00084 	movi	r7,2
  8005e0:	0817a580 	call	817a58 <OSTaskCreateExt>
				task_servo_stk,
				TASK_STACKSIZE,
				NULL,
				0);

	OSTaskCreateExt(uarttask,
  8005e4:	018020b4 	movhi	r6,130
  8005e8:	3198ae04 	addi	r6,r6,25272
  8005ec:	008000c4 	movi	r2,3
  8005f0:	d8800015 	stw	r2,0(sp)
  8005f4:	008020b4 	movhi	r2,130
  8005f8:	1090af04 	addi	r2,r2,17084
  8005fc:	d8800115 	stw	r2,4(sp)
  800600:	00820004 	movi	r2,2048
  800604:	d8800215 	stw	r2,8(sp)
  800608:	d8000315 	stw	zero,12(sp)
  80060c:	d8000415 	stw	zero,16(sp)
  800610:	01002034 	movhi	r4,128
  800614:	21024604 	addi	r4,r4,2328
  800618:	000b883a 	mov	r5,zero
  80061c:	01c000c4 	movi	r7,3
  800620:	0817a580 	call	817a58 <OSTaskCreateExt>
			task_uart_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(maintask,
  800624:	018020b4 	movhi	r6,130
  800628:	3190ae04 	addi	r6,r6,17080
  80062c:	00800044 	movi	r2,1
  800630:	d8800015 	stw	r2,0(sp)
  800634:	008020b4 	movhi	r2,130
  800638:	1088af04 	addi	r2,r2,8892
  80063c:	d8800115 	stw	r2,4(sp)
  800640:	00820004 	movi	r2,2048
  800644:	d8800215 	stw	r2,8(sp)
  800648:	d8000315 	stw	zero,12(sp)
  80064c:	d8000415 	stw	zero,16(sp)
  800650:	01002034 	movhi	r4,128
  800654:	2100da04 	addi	r4,r4,872
  800658:	000b883a 	mov	r5,zero
  80065c:	01c00044 	movi	r7,1
  800660:	0817a580 	call	817a58 <OSTaskCreateExt>
			task_main_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSStart();
  800664:	0811c800 	call	811c80 <OSStart>
	return 0;
  800668:	0005883a 	mov	r2,zero
}
  80066c:	e037883a 	mov	sp,fp
  800670:	dfc00117 	ldw	ra,4(sp)
  800674:	df000017 	ldw	fp,0(sp)
  800678:	dec00204 	addi	sp,sp,8
  80067c:	f800283a 	ret

00800680 <servo_init>:

OS_EVENT *servo0Sem;
OS_EVENT *servo1Sem;
INT8U err;

void servo_init(OS_EVENT *servo0, OS_EVENT *servo1){
  800680:	defffc04 	addi	sp,sp,-16
  800684:	dfc00315 	stw	ra,12(sp)
  800688:	df000215 	stw	fp,8(sp)
  80068c:	df000204 	addi	fp,sp,8
  800690:	e13ffe15 	stw	r4,-8(fp)
  800694:	e17fff15 	stw	r5,-4(fp)

	servo0Sem = servo0;
  800698:	e0bffe17 	ldw	r2,-8(fp)
  80069c:	d0a70b15 	stw	r2,-25556(gp)
	servo1Sem = servo1;
  8006a0:	e0bfff17 	ldw	r2,-4(fp)
  8006a4:	d0a70a15 	stw	r2,-25560(gp)
	printf("Init!\n");
  8006a8:	010020b4 	movhi	r4,130
  8006ac:	2130b404 	addi	r4,r4,-15664
  8006b0:	08015a80 	call	8015a8 <puts>
}
  8006b4:	e037883a 	mov	sp,fp
  8006b8:	dfc00117 	ldw	ra,4(sp)
  8006bc:	df000017 	ldw	fp,0(sp)
  8006c0:	dec00204 	addi	sp,sp,8
  8006c4:	f800283a 	ret

008006c8 <servotask>:

void servotask(void *pdata) {
  8006c8:	defffd04 	addi	sp,sp,-12
  8006cc:	dfc00215 	stw	ra,8(sp)
  8006d0:	df000115 	stw	fp,4(sp)
  8006d4:	df000104 	addi	fp,sp,4
  8006d8:	e13fff15 	stw	r4,-4(fp)
	printf("Started Task!\n");
  8006dc:	010020b4 	movhi	r4,130
  8006e0:	2130b604 	addi	r4,r4,-15656
  8006e4:	08015a80 	call	8015a8 <puts>
	servo0Angle = 0;
  8006e8:	d0270d0d 	sth	zero,-25548(gp)
	servo1Angle = 0;
  8006ec:	d0270e0d 	sth	zero,-25544(gp)


	while(1){
		button_read();
  8006f0:	08007cc0 	call	8007cc <button_read>

		servo0Angle = checkRotationLimits(servo0Angle);
  8006f4:	d0a70d0b 	ldhu	r2,-25548(gp)
  8006f8:	113fffcc 	andi	r4,r2,65535
  8006fc:	2120001c 	xori	r4,r4,32768
  800700:	21200004 	addi	r4,r4,-32768
  800704:	08007740 	call	800774 <checkRotationLimits>
  800708:	d0a70d0d 	sth	r2,-25548(gp)
		servo1Angle = checkRotationLimits(servo1Angle);
  80070c:	d0a70e0b 	ldhu	r2,-25544(gp)
  800710:	113fffcc 	andi	r4,r2,65535
  800714:	2120001c 	xori	r4,r4,32768
  800718:	21200004 	addi	r4,r4,-32768
  80071c:	08007740 	call	800774 <checkRotationLimits>
  800720:	d0a70e0d 	sth	r2,-25544(gp)

		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_0_BASE, servo0Angle);
  800724:	d0a70d0b 	ldhu	r2,-25548(gp)
  800728:	10ffffcc 	andi	r3,r2,65535
  80072c:	18e0001c 	xori	r3,r3,32768
  800730:	18e00004 	addi	r3,r3,-32768
  800734:	00804474 	movhi	r2,273
  800738:	10a42b04 	addi	r2,r2,-28500
  80073c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_1_BASE, servo1Angle);
  800740:	d0a70e0b 	ldhu	r2,-25544(gp)
  800744:	10ffffcc 	andi	r3,r2,65535
  800748:	18e0001c 	xori	r3,r3,32768
  80074c:	18e00004 	addi	r3,r3,-32768
  800750:	00804474 	movhi	r2,273
  800754:	10a42a04 	addi	r2,r2,-28504
  800758:	10c00035 	stwio	r3,0(r2)
		OSTimeDlyHMSM(0, 0, 0, 20);
  80075c:	0009883a 	mov	r4,zero
  800760:	000b883a 	mov	r5,zero
  800764:	000d883a 	mov	r6,zero
  800768:	01c00504 	movi	r7,20
  80076c:	0818e9c0 	call	818e9c <OSTimeDlyHMSM>
	}
  800770:	003fdf06 	br	8006f0 <servotask+0x28>

00800774 <checkRotationLimits>:
}

short checkRotationLimits(short angle){
  800774:	defffd04 	addi	sp,sp,-12
  800778:	df000215 	stw	fp,8(sp)
  80077c:	df000204 	addi	fp,sp,8
  800780:	e13fff0d 	sth	r4,-4(fp)
	short newAngle = angle;
  800784:	e0bfff0b 	ldhu	r2,-4(fp)
  800788:	e0bffe0d 	sth	r2,-8(fp)
	if(angle > MAX_ROTATION){
  80078c:	e0bfff0f 	ldh	r2,-4(fp)
  800790:	10801450 	cmplti	r2,r2,81
  800794:	1000031e 	bne	r2,zero,8007a4 <checkRotationLimits+0x30>
		newAngle = MAX_ROTATION;
  800798:	00801404 	movi	r2,80
  80079c:	e0bffe0d 	sth	r2,-8(fp)
  8007a0:	00000506 	br	8007b8 <checkRotationLimits+0x44>
	}else if(angle < MIN_ROTATION){
  8007a4:	e0bfff0f 	ldh	r2,-4(fp)
  8007a8:	10bfec08 	cmpgei	r2,r2,-80
  8007ac:	1000021e 	bne	r2,zero,8007b8 <checkRotationLimits+0x44>
		newAngle = MIN_ROTATION;
  8007b0:	00bfec04 	movi	r2,-80
  8007b4:	e0bffe0d 	sth	r2,-8(fp)
	}
	return newAngle;
  8007b8:	e0bffe0f 	ldh	r2,-8(fp)
}
  8007bc:	e037883a 	mov	sp,fp
  8007c0:	df000017 	ldw	fp,0(sp)
  8007c4:	dec00104 	addi	sp,sp,4
  8007c8:	f800283a 	ret

008007cc <button_read>:

void button_read(){
  8007cc:	defffe04 	addi	sp,sp,-8
  8007d0:	dfc00115 	stw	ra,4(sp)
  8007d4:	df000015 	stw	fp,0(sp)
  8007d8:	d839883a 	mov	fp,sp
	if(IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE) == 0 || IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE) == 0){
  8007dc:	00804474 	movhi	r2,273
  8007e0:	10a41004 	addi	r2,r2,-28608
  8007e4:	10800037 	ldwio	r2,0(r2)
  8007e8:	1005003a 	cmpeq	r2,r2,zero
  8007ec:	1000051e 	bne	r2,zero,800804 <button_read+0x38>
  8007f0:	00804474 	movhi	r2,273
  8007f4:	10a41404 	addi	r2,r2,-28592
  8007f8:	10800037 	ldwio	r2,0(r2)
  8007fc:	1004c03a 	cmpne	r2,r2,zero
  800800:	1000121e 	bne	r2,zero,80084c <button_read+0x80>
	  OSSemPend(servo0Sem, 0, &err);
  800804:	d1270b17 	ldw	r4,-25556(gp)
  800808:	000b883a 	mov	r5,zero
  80080c:	d1a70d84 	addi	r6,gp,-25546
  800810:	0816bbc0 	call	816bbc <OSSemPend>
		  if(IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE) == 0){
  800814:	00804474 	movhi	r2,273
  800818:	10a41004 	addi	r2,r2,-28608
  80081c:	10800037 	ldwio	r2,0(r2)
  800820:	1004c03a 	cmpne	r2,r2,zero
  800824:	1000041e 	bne	r2,zero,800838 <button_read+0x6c>
			servo0Angle++;
  800828:	d0a70d0b 	ldhu	r2,-25548(gp)
  80082c:	10800044 	addi	r2,r2,1
  800830:	d0a70d0d 	sth	r2,-25548(gp)
  800834:	00000306 	br	800844 <button_read+0x78>
		  }
		  else{
			servo0Angle--;
  800838:	d0a70d0b 	ldhu	r2,-25548(gp)
  80083c:	10bfffc4 	addi	r2,r2,-1
  800840:	d0a70d0d 	sth	r2,-25548(gp)
		  }
	  OSSemPost(servo0Sem);
  800844:	d1270b17 	ldw	r4,-25556(gp)
  800848:	0816fb40 	call	816fb4 <OSSemPost>
	}

	if(IORD_ALTERA_AVALON_PIO_DATA(KEY_2_BASE) == 0 || IORD_ALTERA_AVALON_PIO_DATA(KEY_3_BASE) == 0){
  80084c:	00804474 	movhi	r2,273
  800850:	10a40c04 	addi	r2,r2,-28624
  800854:	10800037 	ldwio	r2,0(r2)
  800858:	1005003a 	cmpeq	r2,r2,zero
  80085c:	1000051e 	bne	r2,zero,800874 <button_read+0xa8>
  800860:	00804474 	movhi	r2,273
  800864:	10a40804 	addi	r2,r2,-28640
  800868:	10800037 	ldwio	r2,0(r2)
  80086c:	1004c03a 	cmpne	r2,r2,zero
  800870:	1000121e 	bne	r2,zero,8008bc <button_read+0xf0>
	  OSSemPend(servo1Sem, 0, &err);
  800874:	d1270a17 	ldw	r4,-25560(gp)
  800878:	000b883a 	mov	r5,zero
  80087c:	d1a70d84 	addi	r6,gp,-25546
  800880:	0816bbc0 	call	816bbc <OSSemPend>
		  if(IORD_ALTERA_AVALON_PIO_DATA(KEY_2_BASE) == 0){
  800884:	00804474 	movhi	r2,273
  800888:	10a40c04 	addi	r2,r2,-28624
  80088c:	10800037 	ldwio	r2,0(r2)
  800890:	1004c03a 	cmpne	r2,r2,zero
  800894:	1000041e 	bne	r2,zero,8008a8 <button_read+0xdc>
			servo1Angle++;
  800898:	d0a70e0b 	ldhu	r2,-25544(gp)
  80089c:	10800044 	addi	r2,r2,1
  8008a0:	d0a70e0d 	sth	r2,-25544(gp)
  8008a4:	00000306 	br	8008b4 <button_read+0xe8>
		  }
		  else{
			servo1Angle--;
  8008a8:	d0a70e0b 	ldhu	r2,-25544(gp)
  8008ac:	10bfffc4 	addi	r2,r2,-1
  8008b0:	d0a70e0d 	sth	r2,-25544(gp)
		  }
	  OSSemPost(servo1Sem);
  8008b4:	d1270a17 	ldw	r4,-25560(gp)
  8008b8:	0816fb40 	call	816fb4 <OSSemPost>
	}
}
  8008bc:	e037883a 	mov	sp,fp
  8008c0:	dfc00117 	ldw	ra,4(sp)
  8008c4:	df000017 	ldw	fp,0(sp)
  8008c8:	dec00204 	addi	sp,sp,8
  8008cc:	f800283a 	ret

008008d0 <uart_init>:

/* System and Synchronization Variables*/
alt_up_rs232_dev *uart;
OS_EVENT *cmdQ;

void uart_init(OS_EVENT *cmdQueue) {
  8008d0:	defffd04 	addi	sp,sp,-12
  8008d4:	dfc00215 	stw	ra,8(sp)
  8008d8:	df000115 	stw	fp,4(sp)
  8008dc:	df000104 	addi	fp,sp,4
  8008e0:	e13fff15 	stw	r4,-4(fp)
	uart = alt_up_rs232_open_dev(RS232_0_NAME);
  8008e4:	010020b4 	movhi	r4,130
  8008e8:	2130ba04 	addi	r4,r4,-15640
  8008ec:	081aacc0 	call	81aacc <alt_up_rs232_open_dev>
  8008f0:	d0a70f15 	stw	r2,-25540(gp)
	cmdQ = cmdQueue;
  8008f4:	e0bfff17 	ldw	r2,-4(fp)
  8008f8:	d0a70c15 	stw	r2,-25552(gp)

	alt_up_rs232_enable_read_interrupt(uart);
  8008fc:	d1270f17 	ldw	r4,-25540(gp)
  800900:	081a7740 	call	81a774 <alt_up_rs232_enable_read_interrupt>
}
  800904:	e037883a 	mov	sp,fp
  800908:	dfc00117 	ldw	ra,4(sp)
  80090c:	df000017 	ldw	fp,0(sp)
  800910:	dec00204 	addi	sp,sp,8
  800914:	f800283a 	ret

00800918 <uarttask>:

void uarttask(void *pdata) {
  800918:	defff704 	addi	sp,sp,-36
  80091c:	dfc00815 	stw	ra,32(sp)
  800920:	df000715 	stw	fp,28(sp)
  800924:	df000704 	addi	fp,sp,28
  800928:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x00);
  80092c:	00804474 	movhi	r2,273
  800930:	10a41c04 	addi	r2,r2,-28560
  800934:	10000035 	stwio	zero,0(r2)

	long time = 0;
  800938:	e03ffd15 	stw	zero,-12(fp)
	char *buf;
	alt_u8 curr;
	alt_u8 parity;
	int index = 0;
  80093c:	e03ffb15 	stw	zero,-20(fp)
	int err;
	bool inframe = false;
  800940:	e03ff905 	stb	zero,-28(fp)

	buf = (char *) malloc(sizeof(char) * (MSG_MAX_LEN + 1));
  800944:	01000244 	movi	r4,9
  800948:	0800d180 	call	800d18 <malloc>
  80094c:	e0bffc15 	stw	r2,-16(fp)
	memset(buf, 0, MSG_MAX_LEN + 1);
  800950:	e0bffc17 	ldw	r2,-16(fp)
  800954:	10000005 	stb	zero,0(r2)
  800958:	10000045 	stb	zero,1(r2)
  80095c:	10000085 	stb	zero,2(r2)
  800960:	100000c5 	stb	zero,3(r2)
  800964:	10000105 	stb	zero,4(r2)
  800968:	10000145 	stb	zero,5(r2)
  80096c:	10000185 	stb	zero,6(r2)
  800970:	100001c5 	stb	zero,7(r2)
  800974:	10000205 	stb	zero,8(r2)
  800978:	00000006 	br	80097c <uarttask+0x64>

	while (1) {
		if (alt_up_rs232_get_used_space_in_read_FIFO(uart) > 0) {
  80097c:	d1270f17 	ldw	r4,-25540(gp)
  800980:	081a8200 	call	81a820 <alt_up_rs232_get_used_space_in_read_FIFO>
  800984:	1005003a 	cmpeq	r2,r2,zero
  800988:	103ffc1e 	bne	r2,zero,80097c <uarttask+0x64>

			if (OSTimeGet() - time > MSG_TIMEOUT) {
  80098c:	081923c0 	call	81923c <OSTimeGet>
  800990:	1007883a 	mov	r3,r2
  800994:	e0bffd17 	ldw	r2,-12(fp)
  800998:	1885c83a 	sub	r2,r3,r2
  80099c:	10807d70 	cmpltui	r2,r2,501
  8009a0:	10000f1e 	bne	r2,zero,8009e0 <uarttask+0xc8>
				// Clear the message
		    	index = 0;
  8009a4:	e03ffb15 	stw	zero,-20(fp)
	        	memset(buf, 0, MSG_MAX_LEN + 1);
  8009a8:	e0bffc17 	ldw	r2,-16(fp)
  8009ac:	10000005 	stb	zero,0(r2)
  8009b0:	10000045 	stb	zero,1(r2)
  8009b4:	10000085 	stb	zero,2(r2)
  8009b8:	100000c5 	stb	zero,3(r2)
  8009bc:	10000105 	stb	zero,4(r2)
  8009c0:	10000145 	stb	zero,5(r2)
  8009c4:	10000185 	stb	zero,6(r2)
  8009c8:	100001c5 	stb	zero,7(r2)
  8009cc:	10000205 	stb	zero,8(r2)
		    	inframe = false;
  8009d0:	e03ff905 	stb	zero,-28(fp)
		    	printf("Message timeout\n");
  8009d4:	010020b4 	movhi	r4,130
  8009d8:	2130be04 	addi	r4,r4,-15624
  8009dc:	08015a80 	call	8015a8 <puts>
			}

			time = OSTimeGet();
  8009e0:	081923c0 	call	81923c <OSTimeGet>
  8009e4:	e0bffd15 	stw	r2,-12(fp)

	        err = alt_up_rs232_read_data(uart, &curr, &parity);
  8009e8:	d1270f17 	ldw	r4,-25540(gp)
  8009ec:	e17ffe04 	addi	r5,fp,-8
  8009f0:	e1bffe44 	addi	r6,fp,-7
  8009f4:	081a9340 	call	81a934 <alt_up_rs232_read_data>
  8009f8:	e0bffa15 	stw	r2,-24(fp)

			printf("%c", curr);
  8009fc:	e0bffe03 	ldbu	r2,-8(fp)
  800a00:	11003fcc 	andi	r4,r2,255
  800a04:	08014e40 	call	8014e4 <putchar>

	        if (err != 0) {
  800a08:	e0bffa17 	ldw	r2,-24(fp)
  800a0c:	1005003a 	cmpeq	r2,r2,zero
  800a10:	1000071e 	bne	r2,zero,800a30 <uarttask+0x118>
	        	// TODO: There was an error, deal with it
	        	printf("read error\n");
  800a14:	010020b4 	movhi	r4,130
  800a18:	2130c204 	addi	r4,r4,-15608
  800a1c:	08015a80 	call	8015a8 <puts>
	        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x01);
  800a20:	00c04474 	movhi	r3,273
  800a24:	18e41c04 	addi	r3,r3,-28560
  800a28:	00800044 	movi	r2,1
  800a2c:	18800035 	stwio	r2,0(r3)
	        }

	        if (parity != 0) {
  800a30:	e0bffe43 	ldbu	r2,-7(fp)
  800a34:	10803fcc 	andi	r2,r2,255
  800a38:	1005003a 	cmpeq	r2,r2,zero
  800a3c:	1000071e 	bne	r2,zero,800a5c <uarttask+0x144>
	        	// TODO: Error in byte, discard buffer
	        	printf("parity error\n");
  800a40:	010020b4 	movhi	r4,130
  800a44:	2130c504 	addi	r4,r4,-15596
  800a48:	08015a80 	call	8015a8 <puts>
	        	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0x02);
  800a4c:	00c04474 	movhi	r3,273
  800a50:	18e41c04 	addi	r3,r3,-28560
  800a54:	00800084 	movi	r2,2
  800a58:	18800035 	stwio	r2,0(r3)
	        }

	        if (curr == MSG_OPEN_CHAR) {
  800a5c:	e0bffe03 	ldbu	r2,-8(fp)
  800a60:	10803fcc 	andi	r2,r2,255
  800a64:	10800f18 	cmpnei	r2,r2,60
  800a68:	10000e1e 	bne	r2,zero,800aa4 <uarttask+0x18c>
	        	index = 0;
  800a6c:	e03ffb15 	stw	zero,-20(fp)
	        	memset(buf, 0, MSG_MAX_LEN + 1);
  800a70:	e0bffc17 	ldw	r2,-16(fp)
  800a74:	10000005 	stb	zero,0(r2)
  800a78:	10000045 	stb	zero,1(r2)
  800a7c:	10000085 	stb	zero,2(r2)
  800a80:	100000c5 	stb	zero,3(r2)
  800a84:	10000105 	stb	zero,4(r2)
  800a88:	10000145 	stb	zero,5(r2)
  800a8c:	10000185 	stb	zero,6(r2)
  800a90:	100001c5 	stb	zero,7(r2)
  800a94:	10000205 	stb	zero,8(r2)
	        	inframe = true;
  800a98:	00800044 	movi	r2,1
  800a9c:	e0bff905 	stb	r2,-28(fp)
  800aa0:	00004506 	br	800bb8 <uarttask+0x2a0>
	        } else if (curr == MSG_CLOSE_CHAR && inframe) {
  800aa4:	e0bffe03 	ldbu	r2,-8(fp)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	10800f98 	cmpnei	r2,r2,62
  800ab0:	1000291e 	bne	r2,zero,800b58 <uarttask+0x240>
  800ab4:	e0bff903 	ldbu	r2,-28(fp)
  800ab8:	1080005c 	xori	r2,r2,1
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1004c03a 	cmpne	r2,r2,zero
  800ac4:	1000241e 	bne	r2,zero,800b58 <uarttask+0x240>
	        	buf[index] = '\0';
  800ac8:	e0bffb17 	ldw	r2,-20(fp)
  800acc:	1007883a 	mov	r3,r2
  800ad0:	e0bffc17 	ldw	r2,-16(fp)
  800ad4:	1885883a 	add	r2,r3,r2
  800ad8:	10000005 	stb	zero,0(r2)

	        	printf("\nMsg: %s\n", buf);
  800adc:	010020b4 	movhi	r4,130
  800ae0:	2130c904 	addi	r4,r4,-15580
  800ae4:	e17ffc17 	ldw	r5,-16(fp)
  800ae8:	080146c0 	call	80146c <printf>
	        	err = OSQPost(cmdQ, (void *)buf);
  800aec:	d1270c17 	ldw	r4,-25552(gp)
  800af0:	e17ffc17 	ldw	r5,-16(fp)
  800af4:	0815fe00 	call	815fe0 <OSQPost>
  800af8:	10803fcc 	andi	r2,r2,255
  800afc:	e0bffa15 	stw	r2,-24(fp)

	        	if (err != OS_NO_ERR) {
  800b00:	e0bffa17 	ldw	r2,-24(fp)
  800b04:	1005003a 	cmpeq	r2,r2,zero
  800b08:	1000031e 	bne	r2,zero,800b18 <uarttask+0x200>
	        		printf("Queue post error\n");
  800b0c:	010020b4 	movhi	r4,130
  800b10:	2130cc04 	addi	r4,r4,-15568
  800b14:	08015a80 	call	8015a8 <puts>
	        	}

	        	index = 0;
  800b18:	e03ffb15 	stw	zero,-20(fp)
	        	buf = malloc(sizeof(char) * (MSG_MAX_LEN + 1));
  800b1c:	01000244 	movi	r4,9
  800b20:	0800d180 	call	800d18 <malloc>
  800b24:	e0bffc15 	stw	r2,-16(fp)
	        	memset(buf, 0, MSG_MAX_LEN + 1);
  800b28:	e0bffc17 	ldw	r2,-16(fp)
  800b2c:	10000005 	stb	zero,0(r2)
  800b30:	10000045 	stb	zero,1(r2)
  800b34:	10000085 	stb	zero,2(r2)
  800b38:	100000c5 	stb	zero,3(r2)
  800b3c:	10000105 	stb	zero,4(r2)
  800b40:	10000145 	stb	zero,5(r2)
  800b44:	10000185 	stb	zero,6(r2)
  800b48:	100001c5 	stb	zero,7(r2)
  800b4c:	10000205 	stb	zero,8(r2)

	        	inframe = false;
  800b50:	e03ff905 	stb	zero,-28(fp)

	        if (curr == MSG_OPEN_CHAR) {
	        	index = 0;
	        	memset(buf, 0, MSG_MAX_LEN + 1);
	        	inframe = true;
	        } else if (curr == MSG_CLOSE_CHAR && inframe) {
  800b54:	00001806 	br	800bb8 <uarttask+0x2a0>
	        	buf = malloc(sizeof(char) * (MSG_MAX_LEN + 1));
	        	memset(buf, 0, MSG_MAX_LEN + 1);

	        	inframe = false;

	        } else if (inframe){
  800b58:	e0bff903 	ldbu	r2,-28(fp)
  800b5c:	1005003a 	cmpeq	r2,r2,zero
  800b60:	10000a1e 	bne	r2,zero,800b8c <uarttask+0x274>
	        	buf[index] = curr;
  800b64:	e0bffb17 	ldw	r2,-20(fp)
  800b68:	1007883a 	mov	r3,r2
  800b6c:	e0bffc17 	ldw	r2,-16(fp)
  800b70:	1887883a 	add	r3,r3,r2
  800b74:	e0bffe03 	ldbu	r2,-8(fp)
  800b78:	18800005 	stb	r2,0(r3)
	        	index++;
  800b7c:	e0bffb17 	ldw	r2,-20(fp)
  800b80:	10800044 	addi	r2,r2,1
  800b84:	e0bffb15 	stw	r2,-20(fp)
  800b88:	00000b06 	br	800bb8 <uarttask+0x2a0>
	        } else {
	        	// Ignore char
	        	index = 0;
  800b8c:	e03ffb15 	stw	zero,-20(fp)
	        	memset(buf, 0, MSG_MAX_LEN + 1);
  800b90:	e0bffc17 	ldw	r2,-16(fp)
  800b94:	10000005 	stb	zero,0(r2)
  800b98:	10000045 	stb	zero,1(r2)
  800b9c:	10000085 	stb	zero,2(r2)
  800ba0:	100000c5 	stb	zero,3(r2)
  800ba4:	10000105 	stb	zero,4(r2)
  800ba8:	10000145 	stb	zero,5(r2)
  800bac:	10000185 	stb	zero,6(r2)
  800bb0:	100001c5 	stb	zero,7(r2)
  800bb4:	10000205 	stb	zero,8(r2)
	        }

        	if (index > MSG_MAX_LEN) {
  800bb8:	e0bffb17 	ldw	r2,-20(fp)
  800bbc:	10800250 	cmplti	r2,r2,9
  800bc0:	103f6e1e 	bne	r2,zero,80097c <uarttask+0x64>
	        	index = 0;
  800bc4:	e03ffb15 	stw	zero,-20(fp)
	        	memset(buf, 0, MSG_MAX_LEN + 1);
  800bc8:	e0bffc17 	ldw	r2,-16(fp)
  800bcc:	10000005 	stb	zero,0(r2)
  800bd0:	10000045 	stb	zero,1(r2)
  800bd4:	10000085 	stb	zero,2(r2)
  800bd8:	100000c5 	stb	zero,3(r2)
  800bdc:	10000105 	stb	zero,4(r2)
  800be0:	10000145 	stb	zero,5(r2)
  800be4:	10000185 	stb	zero,6(r2)
  800be8:	100001c5 	stb	zero,7(r2)
  800bec:	10000205 	stb	zero,8(r2)
	        	inframe = false;
  800bf0:	e03ff905 	stb	zero,-28(fp)
        	}
		}

		//OSTimeDlyHMSM(0, 0, 0, 0);
	}
  800bf4:	003f6106 	br	80097c <uarttask+0x64>

00800bf8 <uart_write>:
}

int uart_write(char *buf, int len) {
  800bf8:	defff904 	addi	sp,sp,-28
  800bfc:	dfc00615 	stw	ra,24(sp)
  800c00:	df000515 	stw	fp,20(sp)
  800c04:	df000504 	addi	fp,sp,20
  800c08:	e13ffd15 	stw	r4,-12(fp)
  800c0c:	e17ffe15 	stw	r5,-8(fp)
	// TODO: Not thread safe, need lock
	int err;

	err = alt_up_rs232_write_data(uart, MSG_OPEN_CHAR);
  800c10:	d1270f17 	ldw	r4,-25540(gp)
  800c14:	01400f04 	movi	r5,60
  800c18:	081a8ec0 	call	81a8ec <alt_up_rs232_write_data>
  800c1c:	e0bffc15 	stw	r2,-16(fp)
	if (err != 0) {
  800c20:	e0bffc17 	ldw	r2,-16(fp)
  800c24:	1005003a 	cmpeq	r2,r2,zero
  800c28:	1000031e 	bne	r2,zero,800c38 <uart_write+0x40>
		return err;
  800c2c:	e0bffc17 	ldw	r2,-16(fp)
  800c30:	e0bfff15 	stw	r2,-4(fp)
  800c34:	00002d06 	br	800cec <uart_write+0xf4>
	}

	int i = 0;
  800c38:	e03ffb15 	stw	zero,-20(fp)
	for (i = 0; i < len; i++) {
  800c3c:	e03ffb15 	stw	zero,-20(fp)
  800c40:	00001c06 	br	800cb4 <uart_write+0xbc>
		if (buf[i] == '\0') {
  800c44:	e0bffb17 	ldw	r2,-20(fp)
  800c48:	1007883a 	mov	r3,r2
  800c4c:	e0bffd17 	ldw	r2,-12(fp)
  800c50:	1885883a 	add	r2,r3,r2
  800c54:	10800003 	ldbu	r2,0(r2)
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	1080201c 	xori	r2,r2,128
  800c60:	10bfe004 	addi	r2,r2,-128
  800c64:	1005003a 	cmpeq	r2,r2,zero
  800c68:	1000151e 	bne	r2,zero,800cc0 <uart_write+0xc8>
			break;
		} else {
			err = alt_up_rs232_write_data(uart, buf[i]);
  800c6c:	d1270f17 	ldw	r4,-25540(gp)
  800c70:	e0bffb17 	ldw	r2,-20(fp)
  800c74:	1007883a 	mov	r3,r2
  800c78:	e0bffd17 	ldw	r2,-12(fp)
  800c7c:	1885883a 	add	r2,r3,r2
  800c80:	10800003 	ldbu	r2,0(r2)
  800c84:	11403fcc 	andi	r5,r2,255
  800c88:	081a8ec0 	call	81a8ec <alt_up_rs232_write_data>
  800c8c:	e0bffc15 	stw	r2,-16(fp)
			if (err != 0) {
  800c90:	e0bffc17 	ldw	r2,-16(fp)
  800c94:	1005003a 	cmpeq	r2,r2,zero
  800c98:	1000031e 	bne	r2,zero,800ca8 <uart_write+0xb0>
				return err;
  800c9c:	e0bffc17 	ldw	r2,-16(fp)
  800ca0:	e0bfff15 	stw	r2,-4(fp)
  800ca4:	00001106 	br	800cec <uart_write+0xf4>
	if (err != 0) {
		return err;
	}

	int i = 0;
	for (i = 0; i < len; i++) {
  800ca8:	e0bffb17 	ldw	r2,-20(fp)
  800cac:	10800044 	addi	r2,r2,1
  800cb0:	e0bffb15 	stw	r2,-20(fp)
  800cb4:	e0fffb17 	ldw	r3,-20(fp)
  800cb8:	e0bffe17 	ldw	r2,-8(fp)
  800cbc:	18bfe116 	blt	r3,r2,800c44 <uart_write+0x4c>
				return err;
			}
		}
	}

	err = alt_up_rs232_write_data(uart, MSG_CLOSE_CHAR);
  800cc0:	d1270f17 	ldw	r4,-25540(gp)
  800cc4:	01400f84 	movi	r5,62
  800cc8:	081a8ec0 	call	81a8ec <alt_up_rs232_write_data>
  800ccc:	e0bffc15 	stw	r2,-16(fp)
	if (err != 0) {
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	1005003a 	cmpeq	r2,r2,zero
  800cd8:	1000031e 	bne	r2,zero,800ce8 <uart_write+0xf0>
		return err;
  800cdc:	e0bffc17 	ldw	r2,-16(fp)
  800ce0:	e0bfff15 	stw	r2,-4(fp)
  800ce4:	00000106 	br	800cec <uart_write+0xf4>
	}

	// TODO: Replace with defined value
	return 0;
  800ce8:	e03fff15 	stw	zero,-4(fp)
  800cec:	e0bfff17 	ldw	r2,-4(fp)
}
  800cf0:	e037883a 	mov	sp,fp
  800cf4:	dfc00117 	ldw	ra,4(sp)
  800cf8:	df000017 	ldw	fp,0(sp)
  800cfc:	dec00204 	addi	sp,sp,8
  800d00:	f800283a 	ret

00800d04 <free>:
  800d04:	008020b4 	movhi	r2,130
  800d08:	10b96204 	addi	r2,r2,-6776
  800d0c:	200b883a 	mov	r5,r4
  800d10:	11000017 	ldw	r4,0(r2)
  800d14:	08072101 	jmpi	807210 <_free_r>

00800d18 <malloc>:
  800d18:	008020b4 	movhi	r2,130
  800d1c:	10b96204 	addi	r2,r2,-6776
  800d20:	200b883a 	mov	r5,r4
  800d24:	11000017 	ldw	r4,0(r2)
  800d28:	0800d2c1 	jmpi	800d2c <_malloc_r>

00800d2c <_malloc_r>:
  800d2c:	defff604 	addi	sp,sp,-40
  800d30:	28c002c4 	addi	r3,r5,11
  800d34:	00800584 	movi	r2,22
  800d38:	dc800215 	stw	r18,8(sp)
  800d3c:	dfc00915 	stw	ra,36(sp)
  800d40:	df000815 	stw	fp,32(sp)
  800d44:	ddc00715 	stw	r23,28(sp)
  800d48:	dd800615 	stw	r22,24(sp)
  800d4c:	dd400515 	stw	r21,20(sp)
  800d50:	dd000415 	stw	r20,16(sp)
  800d54:	dcc00315 	stw	r19,12(sp)
  800d58:	dc400115 	stw	r17,4(sp)
  800d5c:	dc000015 	stw	r16,0(sp)
  800d60:	2025883a 	mov	r18,r4
  800d64:	10c01236 	bltu	r2,r3,800db0 <_malloc_r+0x84>
  800d68:	04400404 	movi	r17,16
  800d6c:	8940142e 	bgeu	r17,r5,800dc0 <_malloc_r+0x94>
  800d70:	00800304 	movi	r2,12
  800d74:	0007883a 	mov	r3,zero
  800d78:	90800015 	stw	r2,0(r18)
  800d7c:	1805883a 	mov	r2,r3
  800d80:	dfc00917 	ldw	ra,36(sp)
  800d84:	df000817 	ldw	fp,32(sp)
  800d88:	ddc00717 	ldw	r23,28(sp)
  800d8c:	dd800617 	ldw	r22,24(sp)
  800d90:	dd400517 	ldw	r21,20(sp)
  800d94:	dd000417 	ldw	r20,16(sp)
  800d98:	dcc00317 	ldw	r19,12(sp)
  800d9c:	dc800217 	ldw	r18,8(sp)
  800da0:	dc400117 	ldw	r17,4(sp)
  800da4:	dc000017 	ldw	r16,0(sp)
  800da8:	dec00a04 	addi	sp,sp,40
  800dac:	f800283a 	ret
  800db0:	00bffe04 	movi	r2,-8
  800db4:	18a2703a 	and	r17,r3,r2
  800db8:	883fed16 	blt	r17,zero,800d70 <_malloc_r+0x44>
  800dbc:	897fec36 	bltu	r17,r5,800d70 <_malloc_r+0x44>
  800dc0:	9009883a 	mov	r4,r18
  800dc4:	0810e400 	call	810e40 <__malloc_lock>
  800dc8:	00807dc4 	movi	r2,503
  800dcc:	14402b2e 	bgeu	r2,r17,800e7c <_malloc_r+0x150>
  800dd0:	8806d27a 	srli	r3,r17,9
  800dd4:	18003f1e 	bne	r3,zero,800ed4 <_malloc_r+0x1a8>
  800dd8:	880cd0fa 	srli	r6,r17,3
  800ddc:	300490fa 	slli	r2,r6,3
  800de0:	02c020b4 	movhi	r11,130
  800de4:	5af2b504 	addi	r11,r11,-13612
  800de8:	12cb883a 	add	r5,r2,r11
  800dec:	2c000317 	ldw	r16,12(r5)
  800df0:	580f883a 	mov	r7,r11
  800df4:	2c00041e 	bne	r5,r16,800e08 <_malloc_r+0xdc>
  800df8:	00000a06 	br	800e24 <_malloc_r+0xf8>
  800dfc:	1800860e 	bge	r3,zero,801018 <_malloc_r+0x2ec>
  800e00:	84000317 	ldw	r16,12(r16)
  800e04:	2c000726 	beq	r5,r16,800e24 <_malloc_r+0xf8>
  800e08:	80800117 	ldw	r2,4(r16)
  800e0c:	00ffff04 	movi	r3,-4
  800e10:	10c8703a 	and	r4,r2,r3
  800e14:	2447c83a 	sub	r3,r4,r17
  800e18:	008003c4 	movi	r2,15
  800e1c:	10fff70e 	bge	r2,r3,800dfc <_malloc_r+0xd0>
  800e20:	31bfffc4 	addi	r6,r6,-1
  800e24:	32400044 	addi	r9,r6,1
  800e28:	028020b4 	movhi	r10,130
  800e2c:	52b2b704 	addi	r10,r10,-13604
  800e30:	54000217 	ldw	r16,8(r10)
  800e34:	8280a026 	beq	r16,r10,8010b8 <_malloc_r+0x38c>
  800e38:	80800117 	ldw	r2,4(r16)
  800e3c:	00ffff04 	movi	r3,-4
  800e40:	10ca703a 	and	r5,r2,r3
  800e44:	2c4dc83a 	sub	r6,r5,r17
  800e48:	008003c4 	movi	r2,15
  800e4c:	11808316 	blt	r2,r6,80105c <_malloc_r+0x330>
  800e50:	52800315 	stw	r10,12(r10)
  800e54:	52800215 	stw	r10,8(r10)
  800e58:	30002916 	blt	r6,zero,800f00 <_malloc_r+0x1d4>
  800e5c:	8147883a 	add	r3,r16,r5
  800e60:	18800117 	ldw	r2,4(r3)
  800e64:	9009883a 	mov	r4,r18
  800e68:	10800054 	ori	r2,r2,1
  800e6c:	18800115 	stw	r2,4(r3)
  800e70:	0810f480 	call	810f48 <__malloc_unlock>
  800e74:	80c00204 	addi	r3,r16,8
  800e78:	003fc006 	br	800d7c <_malloc_r+0x50>
  800e7c:	02c020b4 	movhi	r11,130
  800e80:	5af2b504 	addi	r11,r11,-13612
  800e84:	8ac5883a 	add	r2,r17,r11
  800e88:	14000317 	ldw	r16,12(r2)
  800e8c:	580f883a 	mov	r7,r11
  800e90:	8806d0fa 	srli	r3,r17,3
  800e94:	14006c26 	beq	r2,r16,801048 <_malloc_r+0x31c>
  800e98:	80c00117 	ldw	r3,4(r16)
  800e9c:	00bfff04 	movi	r2,-4
  800ea0:	81800317 	ldw	r6,12(r16)
  800ea4:	1886703a 	and	r3,r3,r2
  800ea8:	80c7883a 	add	r3,r16,r3
  800eac:	18800117 	ldw	r2,4(r3)
  800eb0:	81400217 	ldw	r5,8(r16)
  800eb4:	9009883a 	mov	r4,r18
  800eb8:	10800054 	ori	r2,r2,1
  800ebc:	18800115 	stw	r2,4(r3)
  800ec0:	31400215 	stw	r5,8(r6)
  800ec4:	29800315 	stw	r6,12(r5)
  800ec8:	0810f480 	call	810f48 <__malloc_unlock>
  800ecc:	80c00204 	addi	r3,r16,8
  800ed0:	003faa06 	br	800d7c <_malloc_r+0x50>
  800ed4:	00800104 	movi	r2,4
  800ed8:	10c0052e 	bgeu	r2,r3,800ef0 <_malloc_r+0x1c4>
  800edc:	00800504 	movi	r2,20
  800ee0:	10c07836 	bltu	r2,r3,8010c4 <_malloc_r+0x398>
  800ee4:	198016c4 	addi	r6,r3,91
  800ee8:	300490fa 	slli	r2,r6,3
  800eec:	003fbc06 	br	800de0 <_malloc_r+0xb4>
  800ef0:	8804d1ba 	srli	r2,r17,6
  800ef4:	11800e04 	addi	r6,r2,56
  800ef8:	300490fa 	slli	r2,r6,3
  800efc:	003fb806 	br	800de0 <_malloc_r+0xb4>
  800f00:	00807fc4 	movi	r2,511
  800f04:	1140bb36 	bltu	r2,r5,8011f4 <_malloc_r+0x4c8>
  800f08:	2806d0fa 	srli	r3,r5,3
  800f0c:	573ffe04 	addi	fp,r10,-8
  800f10:	00800044 	movi	r2,1
  800f14:	180890fa 	slli	r4,r3,3
  800f18:	1807d0ba 	srai	r3,r3,2
  800f1c:	e1c00117 	ldw	r7,4(fp)
  800f20:	5909883a 	add	r4,r11,r4
  800f24:	21400217 	ldw	r5,8(r4)
  800f28:	10c4983a 	sll	r2,r2,r3
  800f2c:	81000315 	stw	r4,12(r16)
  800f30:	81400215 	stw	r5,8(r16)
  800f34:	388eb03a 	or	r7,r7,r2
  800f38:	2c000315 	stw	r16,12(r5)
  800f3c:	24000215 	stw	r16,8(r4)
  800f40:	e1c00115 	stw	r7,4(fp)
  800f44:	4807883a 	mov	r3,r9
  800f48:	4800cd16 	blt	r9,zero,801280 <_malloc_r+0x554>
  800f4c:	1807d0ba 	srai	r3,r3,2
  800f50:	00800044 	movi	r2,1
  800f54:	10c8983a 	sll	r4,r2,r3
  800f58:	39004436 	bltu	r7,r4,80106c <_malloc_r+0x340>
  800f5c:	21c4703a 	and	r2,r4,r7
  800f60:	10000a1e 	bne	r2,zero,800f8c <_malloc_r+0x260>
  800f64:	2109883a 	add	r4,r4,r4
  800f68:	00bfff04 	movi	r2,-4
  800f6c:	4884703a 	and	r2,r9,r2
  800f70:	3906703a 	and	r3,r7,r4
  800f74:	12400104 	addi	r9,r2,4
  800f78:	1800041e 	bne	r3,zero,800f8c <_malloc_r+0x260>
  800f7c:	2109883a 	add	r4,r4,r4
  800f80:	3904703a 	and	r2,r7,r4
  800f84:	4a400104 	addi	r9,r9,4
  800f88:	103ffc26 	beq	r2,zero,800f7c <_malloc_r+0x250>
  800f8c:	480490fa 	slli	r2,r9,3
  800f90:	4819883a 	mov	r12,r9
  800f94:	023fff04 	movi	r8,-4
  800f98:	589b883a 	add	r13,r11,r2
  800f9c:	6807883a 	mov	r3,r13
  800fa0:	014003c4 	movi	r5,15
  800fa4:	1c000317 	ldw	r16,12(r3)
  800fa8:	1c00041e 	bne	r3,r16,800fbc <_malloc_r+0x290>
  800fac:	0000a706 	br	80124c <_malloc_r+0x520>
  800fb0:	3000ab0e 	bge	r6,zero,801260 <_malloc_r+0x534>
  800fb4:	84000317 	ldw	r16,12(r16)
  800fb8:	1c00a426 	beq	r3,r16,80124c <_malloc_r+0x520>
  800fbc:	80800117 	ldw	r2,4(r16)
  800fc0:	1204703a 	and	r2,r2,r8
  800fc4:	144dc83a 	sub	r6,r2,r17
  800fc8:	29bff90e 	bge	r5,r6,800fb0 <_malloc_r+0x284>
  800fcc:	81000317 	ldw	r4,12(r16)
  800fd0:	80c00217 	ldw	r3,8(r16)
  800fd4:	89400054 	ori	r5,r17,1
  800fd8:	8445883a 	add	r2,r16,r17
  800fdc:	20c00215 	stw	r3,8(r4)
  800fe0:	19000315 	stw	r4,12(r3)
  800fe4:	81400115 	stw	r5,4(r16)
  800fe8:	1187883a 	add	r3,r2,r6
  800fec:	31000054 	ori	r4,r6,1
  800ff0:	50800315 	stw	r2,12(r10)
  800ff4:	50800215 	stw	r2,8(r10)
  800ff8:	19800015 	stw	r6,0(r3)
  800ffc:	11000115 	stw	r4,4(r2)
  801000:	12800215 	stw	r10,8(r2)
  801004:	12800315 	stw	r10,12(r2)
  801008:	9009883a 	mov	r4,r18
  80100c:	0810f480 	call	810f48 <__malloc_unlock>
  801010:	80c00204 	addi	r3,r16,8
  801014:	003f5906 	br	800d7c <_malloc_r+0x50>
  801018:	8109883a 	add	r4,r16,r4
  80101c:	20800117 	ldw	r2,4(r4)
  801020:	80c00217 	ldw	r3,8(r16)
  801024:	81400317 	ldw	r5,12(r16)
  801028:	10800054 	ori	r2,r2,1
  80102c:	20800115 	stw	r2,4(r4)
  801030:	28c00215 	stw	r3,8(r5)
  801034:	19400315 	stw	r5,12(r3)
  801038:	9009883a 	mov	r4,r18
  80103c:	0810f480 	call	810f48 <__malloc_unlock>
  801040:	80c00204 	addi	r3,r16,8
  801044:	003f4d06 	br	800d7c <_malloc_r+0x50>
  801048:	80800204 	addi	r2,r16,8
  80104c:	14000317 	ldw	r16,12(r2)
  801050:	143f911e 	bne	r2,r16,800e98 <_malloc_r+0x16c>
  801054:	1a400084 	addi	r9,r3,2
  801058:	003f7306 	br	800e28 <_malloc_r+0xfc>
  80105c:	88c00054 	ori	r3,r17,1
  801060:	8445883a 	add	r2,r16,r17
  801064:	80c00115 	stw	r3,4(r16)
  801068:	003fdf06 	br	800fe8 <_malloc_r+0x2bc>
  80106c:	e4000217 	ldw	r16,8(fp)
  801070:	00bfff04 	movi	r2,-4
  801074:	80c00117 	ldw	r3,4(r16)
  801078:	802d883a 	mov	r22,r16
  80107c:	18aa703a 	and	r21,r3,r2
  801080:	ac401636 	bltu	r21,r17,8010dc <_malloc_r+0x3b0>
  801084:	ac49c83a 	sub	r4,r21,r17
  801088:	008003c4 	movi	r2,15
  80108c:	1100130e 	bge	r2,r4,8010dc <_malloc_r+0x3b0>
  801090:	88800054 	ori	r2,r17,1
  801094:	8447883a 	add	r3,r16,r17
  801098:	80800115 	stw	r2,4(r16)
  80109c:	20800054 	ori	r2,r4,1
  8010a0:	18800115 	stw	r2,4(r3)
  8010a4:	e0c00215 	stw	r3,8(fp)
  8010a8:	9009883a 	mov	r4,r18
  8010ac:	0810f480 	call	810f48 <__malloc_unlock>
  8010b0:	80c00204 	addi	r3,r16,8
  8010b4:	003f3106 	br	800d7c <_malloc_r+0x50>
  8010b8:	39c00117 	ldw	r7,4(r7)
  8010bc:	573ffe04 	addi	fp,r10,-8
  8010c0:	003fa006 	br	800f44 <_malloc_r+0x218>
  8010c4:	00801504 	movi	r2,84
  8010c8:	10c06736 	bltu	r2,r3,801268 <_malloc_r+0x53c>
  8010cc:	8804d33a 	srli	r2,r17,12
  8010d0:	11801b84 	addi	r6,r2,110
  8010d4:	300490fa 	slli	r2,r6,3
  8010d8:	003f4106 	br	800de0 <_malloc_r+0xb4>
  8010dc:	d0a71017 	ldw	r2,-25536(gp)
  8010e0:	d0e00117 	ldw	r3,-32764(gp)
  8010e4:	053fffc4 	movi	r20,-1
  8010e8:	10800404 	addi	r2,r2,16
  8010ec:	88a7883a 	add	r19,r17,r2
  8010f0:	1d000326 	beq	r3,r20,801100 <_malloc_r+0x3d4>
  8010f4:	98c3ffc4 	addi	r3,r19,4095
  8010f8:	00bc0004 	movi	r2,-4096
  8010fc:	18a6703a 	and	r19,r3,r2
  801100:	9009883a 	mov	r4,r18
  801104:	980b883a 	mov	r5,r19
  801108:	08015bc0 	call	8015bc <_sbrk_r>
  80110c:	1009883a 	mov	r4,r2
  801110:	15000426 	beq	r2,r20,801124 <_malloc_r+0x3f8>
  801114:	854b883a 	add	r5,r16,r21
  801118:	1029883a 	mov	r20,r2
  80111c:	11405a2e 	bgeu	r2,r5,801288 <_malloc_r+0x55c>
  801120:	87000c26 	beq	r16,fp,801154 <_malloc_r+0x428>
  801124:	e4000217 	ldw	r16,8(fp)
  801128:	80c00117 	ldw	r3,4(r16)
  80112c:	00bfff04 	movi	r2,-4
  801130:	1884703a 	and	r2,r3,r2
  801134:	14400336 	bltu	r2,r17,801144 <_malloc_r+0x418>
  801138:	1449c83a 	sub	r4,r2,r17
  80113c:	008003c4 	movi	r2,15
  801140:	113fd316 	blt	r2,r4,801090 <_malloc_r+0x364>
  801144:	9009883a 	mov	r4,r18
  801148:	0810f480 	call	810f48 <__malloc_unlock>
  80114c:	0007883a 	mov	r3,zero
  801150:	003f0a06 	br	800d7c <_malloc_r+0x50>
  801154:	05c020b4 	movhi	r23,130
  801158:	bdc09504 	addi	r23,r23,596
  80115c:	b8800017 	ldw	r2,0(r23)
  801160:	988d883a 	add	r6,r19,r2
  801164:	b9800015 	stw	r6,0(r23)
  801168:	d0e00117 	ldw	r3,-32764(gp)
  80116c:	00bfffc4 	movi	r2,-1
  801170:	18808e26 	beq	r3,r2,8013ac <_malloc_r+0x680>
  801174:	2145c83a 	sub	r2,r4,r5
  801178:	3085883a 	add	r2,r6,r2
  80117c:	b8800015 	stw	r2,0(r23)
  801180:	20c001cc 	andi	r3,r4,7
  801184:	18005f1e 	bne	r3,zero,801304 <_malloc_r+0x5d8>
  801188:	000b883a 	mov	r5,zero
  80118c:	a4c5883a 	add	r2,r20,r19
  801190:	1083ffcc 	andi	r2,r2,4095
  801194:	00c40004 	movi	r3,4096
  801198:	1887c83a 	sub	r3,r3,r2
  80119c:	28e7883a 	add	r19,r5,r3
  8011a0:	9009883a 	mov	r4,r18
  8011a4:	980b883a 	mov	r5,r19
  8011a8:	08015bc0 	call	8015bc <_sbrk_r>
  8011ac:	1007883a 	mov	r3,r2
  8011b0:	00bfffc4 	movi	r2,-1
  8011b4:	18807a26 	beq	r3,r2,8013a0 <_malloc_r+0x674>
  8011b8:	1d05c83a 	sub	r2,r3,r20
  8011bc:	9885883a 	add	r2,r19,r2
  8011c0:	10c00054 	ori	r3,r2,1
  8011c4:	b8800017 	ldw	r2,0(r23)
  8011c8:	a021883a 	mov	r16,r20
  8011cc:	a0c00115 	stw	r3,4(r20)
  8011d0:	9885883a 	add	r2,r19,r2
  8011d4:	b8800015 	stw	r2,0(r23)
  8011d8:	e5000215 	stw	r20,8(fp)
  8011dc:	b7003626 	beq	r22,fp,8012b8 <_malloc_r+0x58c>
  8011e0:	018003c4 	movi	r6,15
  8011e4:	35404b36 	bltu	r6,r21,801314 <_malloc_r+0x5e8>
  8011e8:	00800044 	movi	r2,1
  8011ec:	a0800115 	stw	r2,4(r20)
  8011f0:	003fcd06 	br	801128 <_malloc_r+0x3fc>
  8011f4:	2808d27a 	srli	r4,r5,9
  8011f8:	2000371e 	bne	r4,zero,8012d8 <_malloc_r+0x5ac>
  8011fc:	2808d0fa 	srli	r4,r5,3
  801200:	200690fa 	slli	r3,r4,3
  801204:	1ad1883a 	add	r8,r3,r11
  801208:	41800217 	ldw	r6,8(r8)
  80120c:	41805b26 	beq	r8,r6,80137c <_malloc_r+0x650>
  801210:	30800117 	ldw	r2,4(r6)
  801214:	00ffff04 	movi	r3,-4
  801218:	10c4703a 	and	r2,r2,r3
  80121c:	2880022e 	bgeu	r5,r2,801228 <_malloc_r+0x4fc>
  801220:	31800217 	ldw	r6,8(r6)
  801224:	41bffa1e 	bne	r8,r6,801210 <_malloc_r+0x4e4>
  801228:	32000317 	ldw	r8,12(r6)
  80122c:	39c00117 	ldw	r7,4(r7)
  801230:	82000315 	stw	r8,12(r16)
  801234:	81800215 	stw	r6,8(r16)
  801238:	070020b4 	movhi	fp,130
  80123c:	e732b504 	addi	fp,fp,-13612
  801240:	34000315 	stw	r16,12(r6)
  801244:	44000215 	stw	r16,8(r8)
  801248:	003f3e06 	br	800f44 <_malloc_r+0x218>
  80124c:	63000044 	addi	r12,r12,1
  801250:	608000cc 	andi	r2,r12,3
  801254:	10005d26 	beq	r2,zero,8013cc <_malloc_r+0x6a0>
  801258:	18c00204 	addi	r3,r3,8
  80125c:	003f5106 	br	800fa4 <_malloc_r+0x278>
  801260:	8089883a 	add	r4,r16,r2
  801264:	003f6d06 	br	80101c <_malloc_r+0x2f0>
  801268:	00805504 	movi	r2,340
  80126c:	10c02036 	bltu	r2,r3,8012f0 <_malloc_r+0x5c4>
  801270:	8804d3fa 	srli	r2,r17,15
  801274:	11801dc4 	addi	r6,r2,119
  801278:	300490fa 	slli	r2,r6,3
  80127c:	003ed806 	br	800de0 <_malloc_r+0xb4>
  801280:	48c000c4 	addi	r3,r9,3
  801284:	003f3106 	br	800f4c <_malloc_r+0x220>
  801288:	05c020b4 	movhi	r23,130
  80128c:	bdc09504 	addi	r23,r23,596
  801290:	b8800017 	ldw	r2,0(r23)
  801294:	988d883a 	add	r6,r19,r2
  801298:	b9800015 	stw	r6,0(r23)
  80129c:	293fb21e 	bne	r5,r4,801168 <_malloc_r+0x43c>
  8012a0:	2083ffcc 	andi	r2,r4,4095
  8012a4:	103fb01e 	bne	r2,zero,801168 <_malloc_r+0x43c>
  8012a8:	e4000217 	ldw	r16,8(fp)
  8012ac:	9d45883a 	add	r2,r19,r21
  8012b0:	10800054 	ori	r2,r2,1
  8012b4:	80800115 	stw	r2,4(r16)
  8012b8:	b8c00017 	ldw	r3,0(r23)
  8012bc:	d0a71117 	ldw	r2,-25532(gp)
  8012c0:	10c0012e 	bgeu	r2,r3,8012c8 <_malloc_r+0x59c>
  8012c4:	d0e71115 	stw	r3,-25532(gp)
  8012c8:	d0a71217 	ldw	r2,-25528(gp)
  8012cc:	10ff962e 	bgeu	r2,r3,801128 <_malloc_r+0x3fc>
  8012d0:	d0e71215 	stw	r3,-25528(gp)
  8012d4:	003f9406 	br	801128 <_malloc_r+0x3fc>
  8012d8:	00800104 	movi	r2,4
  8012dc:	11001e36 	bltu	r2,r4,801358 <_malloc_r+0x62c>
  8012e0:	2804d1ba 	srli	r2,r5,6
  8012e4:	11000e04 	addi	r4,r2,56
  8012e8:	200690fa 	slli	r3,r4,3
  8012ec:	003fc506 	br	801204 <_malloc_r+0x4d8>
  8012f0:	00815504 	movi	r2,1364
  8012f4:	10c01d2e 	bgeu	r2,r3,80136c <_malloc_r+0x640>
  8012f8:	01801f84 	movi	r6,126
  8012fc:	0080fc04 	movi	r2,1008
  801300:	003eb706 	br	800de0 <_malloc_r+0xb4>
  801304:	00800204 	movi	r2,8
  801308:	10cbc83a 	sub	r5,r2,r3
  80130c:	2169883a 	add	r20,r4,r5
  801310:	003f9e06 	br	80118c <_malloc_r+0x460>
  801314:	00bffe04 	movi	r2,-8
  801318:	a93ffd04 	addi	r4,r21,-12
  80131c:	2088703a 	and	r4,r4,r2
  801320:	b10b883a 	add	r5,r22,r4
  801324:	00c00144 	movi	r3,5
  801328:	28c00215 	stw	r3,8(r5)
  80132c:	28c00115 	stw	r3,4(r5)
  801330:	b0800117 	ldw	r2,4(r22)
  801334:	1080004c 	andi	r2,r2,1
  801338:	2084b03a 	or	r2,r4,r2
  80133c:	b0800115 	stw	r2,4(r22)
  801340:	313fdd2e 	bgeu	r6,r4,8012b8 <_malloc_r+0x58c>
  801344:	b1400204 	addi	r5,r22,8
  801348:	9009883a 	mov	r4,r18
  80134c:	08072100 	call	807210 <_free_r>
  801350:	e4000217 	ldw	r16,8(fp)
  801354:	003fd806 	br	8012b8 <_malloc_r+0x58c>
  801358:	00800504 	movi	r2,20
  80135c:	11001536 	bltu	r2,r4,8013b4 <_malloc_r+0x688>
  801360:	210016c4 	addi	r4,r4,91
  801364:	200690fa 	slli	r3,r4,3
  801368:	003fa606 	br	801204 <_malloc_r+0x4d8>
  80136c:	8804d4ba 	srli	r2,r17,18
  801370:	11801f04 	addi	r6,r2,124
  801374:	300490fa 	slli	r2,r6,3
  801378:	003e9906 	br	800de0 <_malloc_r+0xb4>
  80137c:	2009d0ba 	srai	r4,r4,2
  801380:	014020b4 	movhi	r5,130
  801384:	2972b504 	addi	r5,r5,-13612
  801388:	00c00044 	movi	r3,1
  80138c:	28800117 	ldw	r2,4(r5)
  801390:	1906983a 	sll	r3,r3,r4
  801394:	10c4b03a 	or	r2,r2,r3
  801398:	28800115 	stw	r2,4(r5)
  80139c:	003fa306 	br	80122c <_malloc_r+0x500>
  8013a0:	0027883a 	mov	r19,zero
  8013a4:	00c00044 	movi	r3,1
  8013a8:	003f8606 	br	8011c4 <_malloc_r+0x498>
  8013ac:	d1200115 	stw	r4,-32764(gp)
  8013b0:	003f7306 	br	801180 <_malloc_r+0x454>
  8013b4:	00801504 	movi	r2,84
  8013b8:	11001936 	bltu	r2,r4,801420 <_malloc_r+0x6f4>
  8013bc:	2804d33a 	srli	r2,r5,12
  8013c0:	11001b84 	addi	r4,r2,110
  8013c4:	200690fa 	slli	r3,r4,3
  8013c8:	003f8e06 	br	801204 <_malloc_r+0x4d8>
  8013cc:	480b883a 	mov	r5,r9
  8013d0:	6807883a 	mov	r3,r13
  8013d4:	288000cc 	andi	r2,r5,3
  8013d8:	18fffe04 	addi	r3,r3,-8
  8013dc:	297fffc4 	addi	r5,r5,-1
  8013e0:	10001526 	beq	r2,zero,801438 <_malloc_r+0x70c>
  8013e4:	18800217 	ldw	r2,8(r3)
  8013e8:	10fffa26 	beq	r2,r3,8013d4 <_malloc_r+0x6a8>
  8013ec:	2109883a 	add	r4,r4,r4
  8013f0:	393f1e36 	bltu	r7,r4,80106c <_malloc_r+0x340>
  8013f4:	203f1d26 	beq	r4,zero,80106c <_malloc_r+0x340>
  8013f8:	21c4703a 	and	r2,r4,r7
  8013fc:	10000226 	beq	r2,zero,801408 <_malloc_r+0x6dc>
  801400:	6013883a 	mov	r9,r12
  801404:	003ee106 	br	800f8c <_malloc_r+0x260>
  801408:	2109883a 	add	r4,r4,r4
  80140c:	3904703a 	and	r2,r7,r4
  801410:	63000104 	addi	r12,r12,4
  801414:	103ffc26 	beq	r2,zero,801408 <_malloc_r+0x6dc>
  801418:	6013883a 	mov	r9,r12
  80141c:	003edb06 	br	800f8c <_malloc_r+0x260>
  801420:	00805504 	movi	r2,340
  801424:	11000836 	bltu	r2,r4,801448 <_malloc_r+0x71c>
  801428:	2804d3fa 	srli	r2,r5,15
  80142c:	11001dc4 	addi	r4,r2,119
  801430:	200690fa 	slli	r3,r4,3
  801434:	003f7306 	br	801204 <_malloc_r+0x4d8>
  801438:	0104303a 	nor	r2,zero,r4
  80143c:	388e703a 	and	r7,r7,r2
  801440:	e1c00115 	stw	r7,4(fp)
  801444:	003fe906 	br	8013ec <_malloc_r+0x6c0>
  801448:	00815504 	movi	r2,1364
  80144c:	1100032e 	bgeu	r2,r4,80145c <_malloc_r+0x730>
  801450:	01001f84 	movi	r4,126
  801454:	00c0fc04 	movi	r3,1008
  801458:	003f6a06 	br	801204 <_malloc_r+0x4d8>
  80145c:	2804d4ba 	srli	r2,r5,18
  801460:	11001f04 	addi	r4,r2,124
  801464:	200690fa 	slli	r3,r4,3
  801468:	003f6606 	br	801204 <_malloc_r+0x4d8>

0080146c <printf>:
  80146c:	defffb04 	addi	sp,sp,-20
  801470:	dfc00115 	stw	ra,4(sp)
  801474:	d9400215 	stw	r5,8(sp)
  801478:	d9800315 	stw	r6,12(sp)
  80147c:	d9c00415 	stw	r7,16(sp)
  801480:	008020b4 	movhi	r2,130
  801484:	10b96204 	addi	r2,r2,-6776
  801488:	10c00017 	ldw	r3,0(r2)
  80148c:	200b883a 	mov	r5,r4
  801490:	d8800204 	addi	r2,sp,8
  801494:	19000217 	ldw	r4,8(r3)
  801498:	100d883a 	mov	r6,r2
  80149c:	d8800015 	stw	r2,0(sp)
  8014a0:	08038940 	call	803894 <__vfprintf_internal>
  8014a4:	dfc00117 	ldw	ra,4(sp)
  8014a8:	dec00504 	addi	sp,sp,20
  8014ac:	f800283a 	ret

008014b0 <_printf_r>:
  8014b0:	defffc04 	addi	sp,sp,-16
  8014b4:	dfc00115 	stw	ra,4(sp)
  8014b8:	d9800215 	stw	r6,8(sp)
  8014bc:	d9c00315 	stw	r7,12(sp)
  8014c0:	280d883a 	mov	r6,r5
  8014c4:	21400217 	ldw	r5,8(r4)
  8014c8:	d8c00204 	addi	r3,sp,8
  8014cc:	180f883a 	mov	r7,r3
  8014d0:	d8c00015 	stw	r3,0(sp)
  8014d4:	08019d00 	call	8019d0 <___vfprintf_internal_r>
  8014d8:	dfc00117 	ldw	ra,4(sp)
  8014dc:	dec00404 	addi	sp,sp,16
  8014e0:	f800283a 	ret

008014e4 <putchar>:
  8014e4:	008020b4 	movhi	r2,130
  8014e8:	10b96204 	addi	r2,r2,-6776
  8014ec:	11800017 	ldw	r6,0(r2)
  8014f0:	200b883a 	mov	r5,r4
  8014f4:	3009883a 	mov	r4,r6
  8014f8:	31800217 	ldw	r6,8(r6)
  8014fc:	08093501 	jmpi	809350 <_putc_r>

00801500 <_putchar_r>:
  801500:	21800217 	ldw	r6,8(r4)
  801504:	08093501 	jmpi	809350 <_putc_r>

00801508 <_puts_r>:
  801508:	defff604 	addi	sp,sp,-40
  80150c:	dc400715 	stw	r17,28(sp)
  801510:	2023883a 	mov	r17,r4
  801514:	2809883a 	mov	r4,r5
  801518:	dfc00915 	stw	ra,36(sp)
  80151c:	dcc00815 	stw	r19,32(sp)
  801520:	2827883a 	mov	r19,r5
  801524:	08018140 	call	801814 <strlen>
  801528:	89400217 	ldw	r5,8(r17)
  80152c:	00c020b4 	movhi	r3,130
  801530:	18f0d104 	addi	r3,r3,-15548
  801534:	01c00044 	movi	r7,1
  801538:	12000044 	addi	r8,r2,1
  80153c:	d8c00515 	stw	r3,20(sp)
  801540:	d9c00615 	stw	r7,24(sp)
  801544:	d8c00304 	addi	r3,sp,12
  801548:	01c00084 	movi	r7,2
  80154c:	8809883a 	mov	r4,r17
  801550:	d80d883a 	mov	r6,sp
  801554:	d8c00015 	stw	r3,0(sp)
  801558:	dcc00315 	stw	r19,12(sp)
  80155c:	da000215 	stw	r8,8(sp)
  801560:	d9c00115 	stw	r7,4(sp)
  801564:	d8800415 	stw	r2,16(sp)
  801568:	08075240 	call	807524 <__sfvwrite_r>
  80156c:	00ffffc4 	movi	r3,-1
  801570:	10000626 	beq	r2,zero,80158c <_puts_r+0x84>
  801574:	1805883a 	mov	r2,r3
  801578:	dfc00917 	ldw	ra,36(sp)
  80157c:	dcc00817 	ldw	r19,32(sp)
  801580:	dc400717 	ldw	r17,28(sp)
  801584:	dec00a04 	addi	sp,sp,40
  801588:	f800283a 	ret
  80158c:	00c00284 	movi	r3,10
  801590:	1805883a 	mov	r2,r3
  801594:	dfc00917 	ldw	ra,36(sp)
  801598:	dcc00817 	ldw	r19,32(sp)
  80159c:	dc400717 	ldw	r17,28(sp)
  8015a0:	dec00a04 	addi	sp,sp,40
  8015a4:	f800283a 	ret

008015a8 <puts>:
  8015a8:	008020b4 	movhi	r2,130
  8015ac:	10b96204 	addi	r2,r2,-6776
  8015b0:	200b883a 	mov	r5,r4
  8015b4:	11000017 	ldw	r4,0(r2)
  8015b8:	08015081 	jmpi	801508 <_puts_r>

008015bc <_sbrk_r>:
  8015bc:	defffd04 	addi	sp,sp,-12
  8015c0:	dc000015 	stw	r16,0(sp)
  8015c4:	040020b4 	movhi	r16,130
  8015c8:	84007204 	addi	r16,r16,456
  8015cc:	dc400115 	stw	r17,4(sp)
  8015d0:	80000015 	stw	zero,0(r16)
  8015d4:	2023883a 	mov	r17,r4
  8015d8:	2809883a 	mov	r4,r5
  8015dc:	dfc00215 	stw	ra,8(sp)
  8015e0:	0810af80 	call	810af8 <sbrk>
  8015e4:	1007883a 	mov	r3,r2
  8015e8:	00bfffc4 	movi	r2,-1
  8015ec:	18800626 	beq	r3,r2,801608 <_sbrk_r+0x4c>
  8015f0:	1805883a 	mov	r2,r3
  8015f4:	dfc00217 	ldw	ra,8(sp)
  8015f8:	dc400117 	ldw	r17,4(sp)
  8015fc:	dc000017 	ldw	r16,0(sp)
  801600:	dec00304 	addi	sp,sp,12
  801604:	f800283a 	ret
  801608:	80800017 	ldw	r2,0(r16)
  80160c:	103ff826 	beq	r2,zero,8015f0 <_sbrk_r+0x34>
  801610:	88800015 	stw	r2,0(r17)
  801614:	1805883a 	mov	r2,r3
  801618:	dfc00217 	ldw	ra,8(sp)
  80161c:	dc400117 	ldw	r17,4(sp)
  801620:	dc000017 	ldw	r16,0(sp)
  801624:	dec00304 	addi	sp,sp,12
  801628:	f800283a 	ret

0080162c <sprintf>:
  80162c:	deffe504 	addi	sp,sp,-108
  801630:	2013883a 	mov	r9,r4
  801634:	dfc01815 	stw	ra,96(sp)
  801638:	d9801915 	stw	r6,100(sp)
  80163c:	d9c01a15 	stw	r7,104(sp)
  801640:	d8801904 	addi	r2,sp,100
  801644:	d8800015 	stw	r2,0(sp)
  801648:	008020b4 	movhi	r2,130
  80164c:	10b96204 	addi	r2,r2,-6776
  801650:	11000017 	ldw	r4,0(r2)
  801654:	d9c00017 	ldw	r7,0(sp)
  801658:	00808204 	movi	r2,520
  80165c:	00e00034 	movhi	r3,32768
  801660:	18ffffc4 	addi	r3,r3,-1
  801664:	280d883a 	mov	r6,r5
  801668:	d880040d 	sth	r2,16(sp)
  80166c:	d9400104 	addi	r5,sp,4
  801670:	00bfffc4 	movi	r2,-1
  801674:	d8c00615 	stw	r3,24(sp)
  801678:	d8c00315 	stw	r3,12(sp)
  80167c:	da400515 	stw	r9,20(sp)
  801680:	d880048d 	sth	r2,18(sp)
  801684:	da400115 	stw	r9,4(sp)
  801688:	08019d00 	call	8019d0 <___vfprintf_internal_r>
  80168c:	d8c00117 	ldw	r3,4(sp)
  801690:	18000005 	stb	zero,0(r3)
  801694:	dfc01817 	ldw	ra,96(sp)
  801698:	dec01b04 	addi	sp,sp,108
  80169c:	f800283a 	ret

008016a0 <_sprintf_r>:
  8016a0:	deffe604 	addi	sp,sp,-104
  8016a4:	2813883a 	mov	r9,r5
  8016a8:	dfc01815 	stw	ra,96(sp)
  8016ac:	d9c01915 	stw	r7,100(sp)
  8016b0:	d8801904 	addi	r2,sp,100
  8016b4:	d8800015 	stw	r2,0(sp)
  8016b8:	100f883a 	mov	r7,r2
  8016bc:	00808204 	movi	r2,520
  8016c0:	00e00034 	movhi	r3,32768
  8016c4:	18ffffc4 	addi	r3,r3,-1
  8016c8:	d880040d 	sth	r2,16(sp)
  8016cc:	d9400104 	addi	r5,sp,4
  8016d0:	00bfffc4 	movi	r2,-1
  8016d4:	d8c00615 	stw	r3,24(sp)
  8016d8:	d8c00315 	stw	r3,12(sp)
  8016dc:	da400515 	stw	r9,20(sp)
  8016e0:	d880048d 	sth	r2,18(sp)
  8016e4:	da400115 	stw	r9,4(sp)
  8016e8:	08019d00 	call	8019d0 <___vfprintf_internal_r>
  8016ec:	d8c00117 	ldw	r3,4(sp)
  8016f0:	18000005 	stb	zero,0(r3)
  8016f4:	dfc01817 	ldw	ra,96(sp)
  8016f8:	dec01a04 	addi	sp,sp,104
  8016fc:	f800283a 	ret

00801700 <eofread>:
  801700:	0005883a 	mov	r2,zero
  801704:	f800283a 	ret

00801708 <_sscanf_r>:
  801708:	deffe404 	addi	sp,sp,-112
  80170c:	dcc01915 	stw	r19,100(sp)
  801710:	2027883a 	mov	r19,r4
  801714:	dfc01a15 	stw	ra,104(sp)
  801718:	dc401815 	stw	r17,96(sp)
  80171c:	d9c01b15 	stw	r7,108(sp)
  801720:	00808104 	movi	r2,516
  801724:	2809883a 	mov	r4,r5
  801728:	3023883a 	mov	r17,r6
  80172c:	d9400115 	stw	r5,4(sp)
  801730:	d9400515 	stw	r5,20(sp)
  801734:	d880040d 	sth	r2,16(sp)
  801738:	08018140 	call	801814 <strlen>
  80173c:	d8c01b04 	addi	r3,sp,108
  801740:	d8c00015 	stw	r3,0(sp)
  801744:	180f883a 	mov	r7,r3
  801748:	023fffc4 	movi	r8,-1
  80174c:	00c02034 	movhi	r3,128
  801750:	18c5c004 	addi	r3,r3,5888
  801754:	9809883a 	mov	r4,r19
  801758:	880d883a 	mov	r6,r17
  80175c:	d9400104 	addi	r5,sp,4
  801760:	d8800615 	stw	r2,24(sp)
  801764:	d8c00915 	stw	r3,36(sp)
  801768:	da00048d 	sth	r8,18(sp)
  80176c:	d8800215 	stw	r2,8(sp)
  801770:	d8000d15 	stw	zero,52(sp)
  801774:	d8001215 	stw	zero,72(sp)
  801778:	08038b80 	call	8038b8 <__svfscanf_r>
  80177c:	dfc01a17 	ldw	ra,104(sp)
  801780:	dcc01917 	ldw	r19,100(sp)
  801784:	dc401817 	ldw	r17,96(sp)
  801788:	dec01c04 	addi	sp,sp,112
  80178c:	f800283a 	ret

00801790 <sscanf>:
  801790:	deffe404 	addi	sp,sp,-112
  801794:	dfc01915 	stw	ra,100(sp)
  801798:	dc401815 	stw	r17,96(sp)
  80179c:	d9801a15 	stw	r6,104(sp)
  8017a0:	d9c01b15 	stw	r7,108(sp)
  8017a4:	00808104 	movi	r2,516
  8017a8:	2823883a 	mov	r17,r5
  8017ac:	d9000515 	stw	r4,20(sp)
  8017b0:	d9000115 	stw	r4,4(sp)
  8017b4:	d880040d 	sth	r2,16(sp)
  8017b8:	08018140 	call	801814 <strlen>
  8017bc:	d8c01a04 	addi	r3,sp,104
  8017c0:	d8c00015 	stw	r3,0(sp)
  8017c4:	00c020b4 	movhi	r3,130
  8017c8:	18f96204 	addi	r3,r3,-6776
  8017cc:	19000017 	ldw	r4,0(r3)
  8017d0:	d9c00017 	ldw	r7,0(sp)
  8017d4:	00c02034 	movhi	r3,128
  8017d8:	18c5c004 	addi	r3,r3,5888
  8017dc:	023fffc4 	movi	r8,-1
  8017e0:	880d883a 	mov	r6,r17
  8017e4:	d9400104 	addi	r5,sp,4
  8017e8:	d8800615 	stw	r2,24(sp)
  8017ec:	d8c00915 	stw	r3,36(sp)
  8017f0:	da00048d 	sth	r8,18(sp)
  8017f4:	d8800215 	stw	r2,8(sp)
  8017f8:	d8000d15 	stw	zero,52(sp)
  8017fc:	d8001215 	stw	zero,72(sp)
  801800:	08038b80 	call	8038b8 <__svfscanf_r>
  801804:	dfc01917 	ldw	ra,100(sp)
  801808:	dc401817 	ldw	r17,96(sp)
  80180c:	dec01c04 	addi	sp,sp,112
  801810:	f800283a 	ret

00801814 <strlen>:
  801814:	208000cc 	andi	r2,r4,3
  801818:	2011883a 	mov	r8,r4
  80181c:	1000161e 	bne	r2,zero,801878 <strlen+0x64>
  801820:	20c00017 	ldw	r3,0(r4)
  801824:	017fbff4 	movhi	r5,65279
  801828:	297fbfc4 	addi	r5,r5,-257
  80182c:	01e02074 	movhi	r7,32897
  801830:	39e02004 	addi	r7,r7,-32640
  801834:	1945883a 	add	r2,r3,r5
  801838:	11c4703a 	and	r2,r2,r7
  80183c:	00c6303a 	nor	r3,zero,r3
  801840:	1886703a 	and	r3,r3,r2
  801844:	18000c1e 	bne	r3,zero,801878 <strlen+0x64>
  801848:	280d883a 	mov	r6,r5
  80184c:	380b883a 	mov	r5,r7
  801850:	21000104 	addi	r4,r4,4
  801854:	20800017 	ldw	r2,0(r4)
  801858:	1187883a 	add	r3,r2,r6
  80185c:	1946703a 	and	r3,r3,r5
  801860:	0084303a 	nor	r2,zero,r2
  801864:	10c4703a 	and	r2,r2,r3
  801868:	103ff926 	beq	r2,zero,801850 <strlen+0x3c>
  80186c:	20800007 	ldb	r2,0(r4)
  801870:	10000326 	beq	r2,zero,801880 <strlen+0x6c>
  801874:	21000044 	addi	r4,r4,1
  801878:	20800007 	ldb	r2,0(r4)
  80187c:	103ffd1e 	bne	r2,zero,801874 <strlen+0x60>
  801880:	2205c83a 	sub	r2,r4,r8
  801884:	f800283a 	ret

00801888 <strncmp>:
  801888:	30003926 	beq	r6,zero,801970 <strncmp+0xe8>
  80188c:	2144b03a 	or	r2,r4,r5
  801890:	108000cc 	andi	r2,r2,3
  801894:	028000c4 	movi	r10,3
  801898:	1000241e 	bne	r2,zero,80192c <strncmp+0xa4>
  80189c:	2011883a 	mov	r8,r4
  8018a0:	280f883a 	mov	r7,r5
  8018a4:	51801f2e 	bgeu	r10,r6,801924 <strncmp+0x9c>
  8018a8:	21000017 	ldw	r4,0(r4)
  8018ac:	28800017 	ldw	r2,0(r5)
  8018b0:	20801c1e 	bne	r4,r2,801924 <strncmp+0x9c>
  8018b4:	31bfff04 	addi	r6,r6,-4
  8018b8:	30002d26 	beq	r6,zero,801970 <strncmp+0xe8>
  8018bc:	027fbff4 	movhi	r9,65279
  8018c0:	4a7fbfc4 	addi	r9,r9,-257
  8018c4:	2247883a 	add	r3,r4,r9
  8018c8:	01602074 	movhi	r5,32897
  8018cc:	29602004 	addi	r5,r5,-32640
  8018d0:	1946703a 	and	r3,r3,r5
  8018d4:	0104303a 	nor	r2,zero,r4
  8018d8:	10c4703a 	and	r2,r2,r3
  8018dc:	1000241e 	bne	r2,zero,801970 <strncmp+0xe8>
  8018e0:	5017883a 	mov	r11,r10
  8018e4:	4815883a 	mov	r10,r9
  8018e8:	2813883a 	mov	r9,r5
  8018ec:	00000a06 	br	801918 <strncmp+0x90>
  8018f0:	41000017 	ldw	r4,0(r8)
  8018f4:	39400017 	ldw	r5,0(r7)
  8018f8:	2285883a 	add	r2,r4,r10
  8018fc:	1244703a 	and	r2,r2,r9
  801900:	0106303a 	nor	r3,zero,r4
  801904:	1886703a 	and	r3,r3,r2
  801908:	2140061e 	bne	r4,r5,801924 <strncmp+0x9c>
  80190c:	31bfff04 	addi	r6,r6,-4
  801910:	30001726 	beq	r6,zero,801970 <strncmp+0xe8>
  801914:	1800161e 	bne	r3,zero,801970 <strncmp+0xe8>
  801918:	42000104 	addi	r8,r8,4
  80191c:	39c00104 	addi	r7,r7,4
  801920:	59bff336 	bltu	r11,r6,8018f0 <strncmp+0x68>
  801924:	4009883a 	mov	r4,r8
  801928:	380b883a 	mov	r5,r7
  80192c:	31bfffc4 	addi	r6,r6,-1
  801930:	01ffffc4 	movi	r7,-1
  801934:	31c00a1e 	bne	r6,r7,801960 <strncmp+0xd8>
  801938:	20c00003 	ldbu	r3,0(r4)
  80193c:	28800003 	ldbu	r2,0(r5)
  801940:	1885c83a 	sub	r2,r3,r2
  801944:	f800283a 	ret
  801948:	30000926 	beq	r6,zero,801970 <strncmp+0xe8>
  80194c:	18000826 	beq	r3,zero,801970 <strncmp+0xe8>
  801950:	31bfffc4 	addi	r6,r6,-1
  801954:	21000044 	addi	r4,r4,1
  801958:	29400044 	addi	r5,r5,1
  80195c:	31fff626 	beq	r6,r7,801938 <strncmp+0xb0>
  801960:	20c00007 	ldb	r3,0(r4)
  801964:	28800007 	ldb	r2,0(r5)
  801968:	18bff726 	beq	r3,r2,801948 <strncmp+0xc0>
  80196c:	003ff206 	br	801938 <strncmp+0xb0>
  801970:	0005883a 	mov	r2,zero
  801974:	f800283a 	ret

00801978 <__sprint_r>:
  801978:	30800217 	ldw	r2,8(r6)
  80197c:	defffe04 	addi	sp,sp,-8
  801980:	dc000015 	stw	r16,0(sp)
  801984:	dfc00115 	stw	ra,4(sp)
  801988:	3021883a 	mov	r16,r6
  80198c:	0007883a 	mov	r3,zero
  801990:	1000061e 	bne	r2,zero,8019ac <__sprint_r+0x34>
  801994:	1805883a 	mov	r2,r3
  801998:	30000115 	stw	zero,4(r6)
  80199c:	dfc00117 	ldw	ra,4(sp)
  8019a0:	dc000017 	ldw	r16,0(sp)
  8019a4:	dec00204 	addi	sp,sp,8
  8019a8:	f800283a 	ret
  8019ac:	08075240 	call	807524 <__sfvwrite_r>
  8019b0:	1007883a 	mov	r3,r2
  8019b4:	1805883a 	mov	r2,r3
  8019b8:	80000115 	stw	zero,4(r16)
  8019bc:	80000215 	stw	zero,8(r16)
  8019c0:	dfc00117 	ldw	ra,4(sp)
  8019c4:	dc000017 	ldw	r16,0(sp)
  8019c8:	dec00204 	addi	sp,sp,8
  8019cc:	f800283a 	ret

008019d0 <___vfprintf_internal_r>:
  8019d0:	defea404 	addi	sp,sp,-1392
  8019d4:	dd815815 	stw	r22,1376(sp)
  8019d8:	dc015215 	stw	r16,1352(sp)
  8019dc:	d9c15115 	stw	r7,1348(sp)
  8019e0:	dfc15b15 	stw	ra,1388(sp)
  8019e4:	df015a15 	stw	fp,1384(sp)
  8019e8:	ddc15915 	stw	r23,1380(sp)
  8019ec:	dd415715 	stw	r21,1372(sp)
  8019f0:	dd015615 	stw	r20,1368(sp)
  8019f4:	dcc15515 	stw	r19,1364(sp)
  8019f8:	dc815415 	stw	r18,1360(sp)
  8019fc:	dc415315 	stw	r17,1356(sp)
  801a00:	282d883a 	mov	r22,r5
  801a04:	3021883a 	mov	r16,r6
  801a08:	d9014f15 	stw	r4,1340(sp)
  801a0c:	0807b740 	call	807b74 <_localeconv_r>
  801a10:	10800017 	ldw	r2,0(r2)
  801a14:	d9c15117 	ldw	r7,1348(sp)
  801a18:	d8814915 	stw	r2,1316(sp)
  801a1c:	d8814f17 	ldw	r2,1340(sp)
  801a20:	10000226 	beq	r2,zero,801a2c <___vfprintf_internal_r+0x5c>
  801a24:	10800e17 	ldw	r2,56(r2)
  801a28:	10020d26 	beq	r2,zero,802260 <___vfprintf_internal_r+0x890>
  801a2c:	b080030b 	ldhu	r2,12(r22)
  801a30:	1080020c 	andi	r2,r2,8
  801a34:	10020e26 	beq	r2,zero,802270 <___vfprintf_internal_r+0x8a0>
  801a38:	b0800417 	ldw	r2,16(r22)
  801a3c:	10020c26 	beq	r2,zero,802270 <___vfprintf_internal_r+0x8a0>
  801a40:	b200030b 	ldhu	r8,12(r22)
  801a44:	00800284 	movi	r2,10
  801a48:	40c0068c 	andi	r3,r8,26
  801a4c:	18802f1e 	bne	r3,r2,801b0c <___vfprintf_internal_r+0x13c>
  801a50:	b080038f 	ldh	r2,14(r22)
  801a54:	10002d16 	blt	r2,zero,801b0c <___vfprintf_internal_r+0x13c>
  801a58:	b240038b 	ldhu	r9,14(r22)
  801a5c:	b2800717 	ldw	r10,28(r22)
  801a60:	b2c00917 	ldw	r11,36(r22)
  801a64:	d9014f17 	ldw	r4,1340(sp)
  801a68:	dc402904 	addi	r17,sp,164
  801a6c:	d8804004 	addi	r2,sp,256
  801a70:	00c10004 	movi	r3,1024
  801a74:	423fff4c 	andi	r8,r8,65533
  801a78:	800d883a 	mov	r6,r16
  801a7c:	880b883a 	mov	r5,r17
  801a80:	da002c0d 	sth	r8,176(sp)
  801a84:	da402c8d 	sth	r9,178(sp)
  801a88:	da803015 	stw	r10,192(sp)
  801a8c:	dac03215 	stw	r11,200(sp)
  801a90:	d8802d15 	stw	r2,180(sp)
  801a94:	d8c02e15 	stw	r3,184(sp)
  801a98:	d8802915 	stw	r2,164(sp)
  801a9c:	d8c02b15 	stw	r3,172(sp)
  801aa0:	d8002f15 	stw	zero,188(sp)
  801aa4:	08019d00 	call	8019d0 <___vfprintf_internal_r>
  801aa8:	d8814b15 	stw	r2,1324(sp)
  801aac:	10000416 	blt	r2,zero,801ac0 <___vfprintf_internal_r+0xf0>
  801ab0:	d9014f17 	ldw	r4,1340(sp)
  801ab4:	880b883a 	mov	r5,r17
  801ab8:	08069740 	call	806974 <_fflush_r>
  801abc:	1002321e 	bne	r2,zero,802388 <___vfprintf_internal_r+0x9b8>
  801ac0:	d8802c0b 	ldhu	r2,176(sp)
  801ac4:	1080100c 	andi	r2,r2,64
  801ac8:	10000326 	beq	r2,zero,801ad8 <___vfprintf_internal_r+0x108>
  801acc:	b080030b 	ldhu	r2,12(r22)
  801ad0:	10801014 	ori	r2,r2,64
  801ad4:	b080030d 	sth	r2,12(r22)
  801ad8:	d8814b17 	ldw	r2,1324(sp)
  801adc:	dfc15b17 	ldw	ra,1388(sp)
  801ae0:	df015a17 	ldw	fp,1384(sp)
  801ae4:	ddc15917 	ldw	r23,1380(sp)
  801ae8:	dd815817 	ldw	r22,1376(sp)
  801aec:	dd415717 	ldw	r21,1372(sp)
  801af0:	dd015617 	ldw	r20,1368(sp)
  801af4:	dcc15517 	ldw	r19,1364(sp)
  801af8:	dc815417 	ldw	r18,1360(sp)
  801afc:	dc415317 	ldw	r17,1356(sp)
  801b00:	dc015217 	ldw	r16,1352(sp)
  801b04:	dec15c04 	addi	sp,sp,1392
  801b08:	f800283a 	ret
  801b0c:	0005883a 	mov	r2,zero
  801b10:	0007883a 	mov	r3,zero
  801b14:	dd401904 	addi	r21,sp,100
  801b18:	d8814215 	stw	r2,1288(sp)
  801b1c:	802f883a 	mov	r23,r16
  801b20:	d8c14315 	stw	r3,1292(sp)
  801b24:	d8014b15 	stw	zero,1324(sp)
  801b28:	d8014815 	stw	zero,1312(sp)
  801b2c:	d8014415 	stw	zero,1296(sp)
  801b30:	d8014715 	stw	zero,1308(sp)
  801b34:	dd400c15 	stw	r21,48(sp)
  801b38:	d8000e15 	stw	zero,56(sp)
  801b3c:	d8000d15 	stw	zero,52(sp)
  801b40:	b8800007 	ldb	r2,0(r23)
  801b44:	10001926 	beq	r2,zero,801bac <___vfprintf_internal_r+0x1dc>
  801b48:	00c00944 	movi	r3,37
  801b4c:	10c01726 	beq	r2,r3,801bac <___vfprintf_internal_r+0x1dc>
  801b50:	b821883a 	mov	r16,r23
  801b54:	00000106 	br	801b5c <___vfprintf_internal_r+0x18c>
  801b58:	10c00326 	beq	r2,r3,801b68 <___vfprintf_internal_r+0x198>
  801b5c:	84000044 	addi	r16,r16,1
  801b60:	80800007 	ldb	r2,0(r16)
  801b64:	103ffc1e 	bne	r2,zero,801b58 <___vfprintf_internal_r+0x188>
  801b68:	85e7c83a 	sub	r19,r16,r23
  801b6c:	98000e26 	beq	r19,zero,801ba8 <___vfprintf_internal_r+0x1d8>
  801b70:	dc800e17 	ldw	r18,56(sp)
  801b74:	dc400d17 	ldw	r17,52(sp)
  801b78:	008001c4 	movi	r2,7
  801b7c:	94e5883a 	add	r18,r18,r19
  801b80:	8c400044 	addi	r17,r17,1
  801b84:	adc00015 	stw	r23,0(r21)
  801b88:	dc800e15 	stw	r18,56(sp)
  801b8c:	acc00115 	stw	r19,4(r21)
  801b90:	dc400d15 	stw	r17,52(sp)
  801b94:	14428b16 	blt	r2,r17,8025c4 <___vfprintf_internal_r+0xbf4>
  801b98:	ad400204 	addi	r21,r21,8
  801b9c:	d9014b17 	ldw	r4,1324(sp)
  801ba0:	24c9883a 	add	r4,r4,r19
  801ba4:	d9014b15 	stw	r4,1324(sp)
  801ba8:	802f883a 	mov	r23,r16
  801bac:	b8800007 	ldb	r2,0(r23)
  801bb0:	10013c26 	beq	r2,zero,8020a4 <___vfprintf_internal_r+0x6d4>
  801bb4:	bdc00044 	addi	r23,r23,1
  801bb8:	d8000405 	stb	zero,16(sp)
  801bbc:	b8c00007 	ldb	r3,0(r23)
  801bc0:	04ffffc4 	movi	r19,-1
  801bc4:	d8014c15 	stw	zero,1328(sp)
  801bc8:	d8014a15 	stw	zero,1320(sp)
  801bcc:	d8c14d15 	stw	r3,1332(sp)
  801bd0:	bdc00044 	addi	r23,r23,1
  801bd4:	d9414d17 	ldw	r5,1332(sp)
  801bd8:	00801604 	movi	r2,88
  801bdc:	28fff804 	addi	r3,r5,-32
  801be0:	10c06036 	bltu	r2,r3,801d64 <___vfprintf_internal_r+0x394>
  801be4:	18c5883a 	add	r2,r3,r3
  801be8:	1085883a 	add	r2,r2,r2
  801bec:	00c02034 	movhi	r3,128
  801bf0:	18c70004 	addi	r3,r3,7168
  801bf4:	10c5883a 	add	r2,r2,r3
  801bf8:	11000017 	ldw	r4,0(r2)
  801bfc:	2000683a 	jmp	r4
  801c00:	00802b74 	movhi	r2,173
  801c04:	00801d64 	muli	r2,zero,117
  801c08:	00801d64 	muli	r2,zero,117
  801c0c:	00802b60 	cmpeqi	r2,zero,173
  801c10:	00801d64 	muli	r2,zero,117
  801c14:	00801d64 	muli	r2,zero,117
  801c18:	00801d64 	muli	r2,zero,117
  801c1c:	00801d64 	muli	r2,zero,117
  801c20:	00801d64 	muli	r2,zero,117
  801c24:	00801d64 	muli	r2,zero,117
  801c28:	00802940 	call	80294 <OSCtxSw_SWITCH_PC+0x80254>
  801c2c:	00802b50 	cmplti	r2,zero,173
  801c30:	00801d64 	muli	r2,zero,117
  801c34:	00802958 	cmpnei	r2,zero,165
  801c38:	00802bf8 	rdprs	r2,zero,175
  801c3c:	00801d64 	muli	r2,zero,117
  801c40:	00802be4 	muli	r2,zero,175
  801c44:	00802ba0 	cmpeqi	r2,zero,174
  801c48:	00802ba0 	cmpeqi	r2,zero,174
  801c4c:	00802ba0 	cmpeqi	r2,zero,174
  801c50:	00802ba0 	cmpeqi	r2,zero,174
  801c54:	00802ba0 	cmpeqi	r2,zero,174
  801c58:	00802ba0 	cmpeqi	r2,zero,174
  801c5c:	00802ba0 	cmpeqi	r2,zero,174
  801c60:	00802ba0 	cmpeqi	r2,zero,174
  801c64:	00802ba0 	cmpeqi	r2,zero,174
  801c68:	00801d64 	muli	r2,zero,117
  801c6c:	00801d64 	muli	r2,zero,117
  801c70:	00801d64 	muli	r2,zero,117
  801c74:	00801d64 	muli	r2,zero,117
  801c78:	00801d64 	muli	r2,zero,117
  801c7c:	00801d64 	muli	r2,zero,117
  801c80:	00801d64 	muli	r2,zero,117
  801c84:	00801d64 	muli	r2,zero,117
  801c88:	00801d64 	muli	r2,zero,117
  801c8c:	00801d64 	muli	r2,zero,117
  801c90:	008023bc 	xorhi	r2,zero,142
  801c94:	00802a28 	cmpgeui	r2,zero,168
  801c98:	00801d64 	muli	r2,zero,117
  801c9c:	00802a28 	cmpgeui	r2,zero,168
  801ca0:	00801d64 	muli	r2,zero,117
  801ca4:	00801d64 	muli	r2,zero,117
  801ca8:	00801d64 	muli	r2,zero,117
  801cac:	00801d64 	muli	r2,zero,117
  801cb0:	00802b8c 	andi	r2,zero,174
  801cb4:	00801d64 	muli	r2,zero,117
  801cb8:	00801d64 	muli	r2,zero,117
  801cbc:	00802470 	cmpltui	r2,zero,145
  801cc0:	00801d64 	muli	r2,zero,117
  801cc4:	00801d64 	muli	r2,zero,117
  801cc8:	00801d64 	muli	r2,zero,117
  801ccc:	00801d64 	muli	r2,zero,117
  801cd0:	00801d64 	muli	r2,zero,117
  801cd4:	008024bc 	xorhi	r2,zero,146
  801cd8:	00801d64 	muli	r2,zero,117
  801cdc:	00801d64 	muli	r2,zero,117
  801ce0:	00802adc 	xori	r2,zero,171
  801ce4:	00801d64 	muli	r2,zero,117
  801ce8:	00801d64 	muli	r2,zero,117
  801cec:	00801d64 	muli	r2,zero,117
  801cf0:	00801d64 	muli	r2,zero,117
  801cf4:	00801d64 	muli	r2,zero,117
  801cf8:	00801d64 	muli	r2,zero,117
  801cfc:	00801d64 	muli	r2,zero,117
  801d00:	00801d64 	muli	r2,zero,117
  801d04:	00801d64 	muli	r2,zero,117
  801d08:	00801d64 	muli	r2,zero,117
  801d0c:	00802ab0 	cmpltui	r2,zero,170
  801d10:	008023c8 	cmpgei	r2,zero,143
  801d14:	00802a28 	cmpgeui	r2,zero,168
  801d18:	00802a28 	cmpgeui	r2,zero,168
  801d1c:	00802a28 	cmpgeui	r2,zero,168
  801d20:	00802a14 	movui	r2,168
  801d24:	008023c8 	cmpgei	r2,zero,143
  801d28:	00801d64 	muli	r2,zero,117
  801d2c:	00801d64 	muli	r2,zero,117
  801d30:	0080299c 	xori	r2,zero,166
  801d34:	00801d64 	muli	r2,zero,117
  801d38:	0080296c 	andhi	r2,zero,165
  801d3c:	0080247c 	xorhi	r2,zero,145
  801d40:	008029cc 	andi	r2,zero,167
  801d44:	008029b8 	rdprs	r2,zero,166
  801d48:	00801d64 	muli	r2,zero,117
  801d4c:	00802c60 	cmpeqi	r2,zero,177
  801d50:	00801d64 	muli	r2,zero,117
  801d54:	008024c8 	cmpgei	r2,zero,147
  801d58:	00801d64 	muli	r2,zero,117
  801d5c:	00801d64 	muli	r2,zero,117
  801d60:	00802b40 	call	802b4 <OSCtxSw_SWITCH_PC+0x80274>
  801d64:	d9014d17 	ldw	r4,1332(sp)
  801d68:	2000ce26 	beq	r4,zero,8020a4 <___vfprintf_internal_r+0x6d4>
  801d6c:	01400044 	movi	r5,1
  801d70:	d9800f04 	addi	r6,sp,60
  801d74:	d9c14015 	stw	r7,1280(sp)
  801d78:	d9414515 	stw	r5,1300(sp)
  801d7c:	d9814115 	stw	r6,1284(sp)
  801d80:	280f883a 	mov	r7,r5
  801d84:	d9000f05 	stb	r4,60(sp)
  801d88:	d8000405 	stb	zero,16(sp)
  801d8c:	d8014615 	stw	zero,1304(sp)
  801d90:	d8c14c17 	ldw	r3,1328(sp)
  801d94:	1880008c 	andi	r2,r3,2
  801d98:	1005003a 	cmpeq	r2,r2,zero
  801d9c:	d8815015 	stw	r2,1344(sp)
  801da0:	1000031e 	bne	r2,zero,801db0 <___vfprintf_internal_r+0x3e0>
  801da4:	d9014517 	ldw	r4,1300(sp)
  801da8:	21000084 	addi	r4,r4,2
  801dac:	d9014515 	stw	r4,1300(sp)
  801db0:	d9414c17 	ldw	r5,1328(sp)
  801db4:	2940210c 	andi	r5,r5,132
  801db8:	d9414e15 	stw	r5,1336(sp)
  801dbc:	28002d1e 	bne	r5,zero,801e74 <___vfprintf_internal_r+0x4a4>
  801dc0:	d9814a17 	ldw	r6,1320(sp)
  801dc4:	d8814517 	ldw	r2,1300(sp)
  801dc8:	30a1c83a 	sub	r16,r6,r2
  801dcc:	0400290e 	bge	zero,r16,801e74 <___vfprintf_internal_r+0x4a4>
  801dd0:	00800404 	movi	r2,16
  801dd4:	14045e0e 	bge	r2,r16,802f50 <___vfprintf_internal_r+0x1580>
  801dd8:	dc800e17 	ldw	r18,56(sp)
  801ddc:	dc400d17 	ldw	r17,52(sp)
  801de0:	1027883a 	mov	r19,r2
  801de4:	070020b4 	movhi	fp,130
  801de8:	e730ed84 	addi	fp,fp,-15434
  801dec:	050001c4 	movi	r20,7
  801df0:	00000306 	br	801e00 <___vfprintf_internal_r+0x430>
  801df4:	843ffc04 	addi	r16,r16,-16
  801df8:	ad400204 	addi	r21,r21,8
  801dfc:	9c00130e 	bge	r19,r16,801e4c <___vfprintf_internal_r+0x47c>
  801e00:	94800404 	addi	r18,r18,16
  801e04:	8c400044 	addi	r17,r17,1
  801e08:	af000015 	stw	fp,0(r21)
  801e0c:	acc00115 	stw	r19,4(r21)
  801e10:	dc800e15 	stw	r18,56(sp)
  801e14:	dc400d15 	stw	r17,52(sp)
  801e18:	a47ff60e 	bge	r20,r17,801df4 <___vfprintf_internal_r+0x424>
  801e1c:	d9014f17 	ldw	r4,1340(sp)
  801e20:	b00b883a 	mov	r5,r22
  801e24:	d9800c04 	addi	r6,sp,48
  801e28:	d9c15115 	stw	r7,1348(sp)
  801e2c:	08019780 	call	801978 <__sprint_r>
  801e30:	d9c15117 	ldw	r7,1348(sp)
  801e34:	10009e1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  801e38:	843ffc04 	addi	r16,r16,-16
  801e3c:	dc800e17 	ldw	r18,56(sp)
  801e40:	dc400d17 	ldw	r17,52(sp)
  801e44:	dd401904 	addi	r21,sp,100
  801e48:	9c3fed16 	blt	r19,r16,801e00 <___vfprintf_internal_r+0x430>
  801e4c:	9425883a 	add	r18,r18,r16
  801e50:	8c400044 	addi	r17,r17,1
  801e54:	008001c4 	movi	r2,7
  801e58:	af000015 	stw	fp,0(r21)
  801e5c:	ac000115 	stw	r16,4(r21)
  801e60:	dc800e15 	stw	r18,56(sp)
  801e64:	dc400d15 	stw	r17,52(sp)
  801e68:	1441f516 	blt	r2,r17,802640 <___vfprintf_internal_r+0xc70>
  801e6c:	ad400204 	addi	r21,r21,8
  801e70:	00000206 	br	801e7c <___vfprintf_internal_r+0x4ac>
  801e74:	dc800e17 	ldw	r18,56(sp)
  801e78:	dc400d17 	ldw	r17,52(sp)
  801e7c:	d8800407 	ldb	r2,16(sp)
  801e80:	10000b26 	beq	r2,zero,801eb0 <___vfprintf_internal_r+0x4e0>
  801e84:	00800044 	movi	r2,1
  801e88:	94800044 	addi	r18,r18,1
  801e8c:	8c400044 	addi	r17,r17,1
  801e90:	a8800115 	stw	r2,4(r21)
  801e94:	d8c00404 	addi	r3,sp,16
  801e98:	008001c4 	movi	r2,7
  801e9c:	a8c00015 	stw	r3,0(r21)
  801ea0:	dc800e15 	stw	r18,56(sp)
  801ea4:	dc400d15 	stw	r17,52(sp)
  801ea8:	1441da16 	blt	r2,r17,802614 <___vfprintf_internal_r+0xc44>
  801eac:	ad400204 	addi	r21,r21,8
  801eb0:	d9015017 	ldw	r4,1344(sp)
  801eb4:	20000b1e 	bne	r4,zero,801ee4 <___vfprintf_internal_r+0x514>
  801eb8:	d8800444 	addi	r2,sp,17
  801ebc:	94800084 	addi	r18,r18,2
  801ec0:	8c400044 	addi	r17,r17,1
  801ec4:	a8800015 	stw	r2,0(r21)
  801ec8:	00c00084 	movi	r3,2
  801ecc:	008001c4 	movi	r2,7
  801ed0:	a8c00115 	stw	r3,4(r21)
  801ed4:	dc800e15 	stw	r18,56(sp)
  801ed8:	dc400d15 	stw	r17,52(sp)
  801edc:	1441c216 	blt	r2,r17,8025e8 <___vfprintf_internal_r+0xc18>
  801ee0:	ad400204 	addi	r21,r21,8
  801ee4:	d9414e17 	ldw	r5,1336(sp)
  801ee8:	00802004 	movi	r2,128
  801eec:	2880b126 	beq	r5,r2,8021b4 <___vfprintf_internal_r+0x7e4>
  801ef0:	d8c14617 	ldw	r3,1304(sp)
  801ef4:	19e1c83a 	sub	r16,r3,r7
  801ef8:	0400260e 	bge	zero,r16,801f94 <___vfprintf_internal_r+0x5c4>
  801efc:	00800404 	movi	r2,16
  801f00:	1403cf0e 	bge	r2,r16,802e40 <___vfprintf_internal_r+0x1470>
  801f04:	1027883a 	mov	r19,r2
  801f08:	070020b4 	movhi	fp,130
  801f0c:	e730e984 	addi	fp,fp,-15450
  801f10:	050001c4 	movi	r20,7
  801f14:	00000306 	br	801f24 <___vfprintf_internal_r+0x554>
  801f18:	843ffc04 	addi	r16,r16,-16
  801f1c:	ad400204 	addi	r21,r21,8
  801f20:	9c00130e 	bge	r19,r16,801f70 <___vfprintf_internal_r+0x5a0>
  801f24:	94800404 	addi	r18,r18,16
  801f28:	8c400044 	addi	r17,r17,1
  801f2c:	af000015 	stw	fp,0(r21)
  801f30:	acc00115 	stw	r19,4(r21)
  801f34:	dc800e15 	stw	r18,56(sp)
  801f38:	dc400d15 	stw	r17,52(sp)
  801f3c:	a47ff60e 	bge	r20,r17,801f18 <___vfprintf_internal_r+0x548>
  801f40:	d9014f17 	ldw	r4,1340(sp)
  801f44:	b00b883a 	mov	r5,r22
  801f48:	d9800c04 	addi	r6,sp,48
  801f4c:	d9c15115 	stw	r7,1348(sp)
  801f50:	08019780 	call	801978 <__sprint_r>
  801f54:	d9c15117 	ldw	r7,1348(sp)
  801f58:	1000551e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  801f5c:	843ffc04 	addi	r16,r16,-16
  801f60:	dc800e17 	ldw	r18,56(sp)
  801f64:	dc400d17 	ldw	r17,52(sp)
  801f68:	dd401904 	addi	r21,sp,100
  801f6c:	9c3fed16 	blt	r19,r16,801f24 <___vfprintf_internal_r+0x554>
  801f70:	9425883a 	add	r18,r18,r16
  801f74:	8c400044 	addi	r17,r17,1
  801f78:	008001c4 	movi	r2,7
  801f7c:	af000015 	stw	fp,0(r21)
  801f80:	ac000115 	stw	r16,4(r21)
  801f84:	dc800e15 	stw	r18,56(sp)
  801f88:	dc400d15 	stw	r17,52(sp)
  801f8c:	14418216 	blt	r2,r17,802598 <___vfprintf_internal_r+0xbc8>
  801f90:	ad400204 	addi	r21,r21,8
  801f94:	d9014c17 	ldw	r4,1328(sp)
  801f98:	2080400c 	andi	r2,r4,256
  801f9c:	10004a1e 	bne	r2,zero,8020c8 <___vfprintf_internal_r+0x6f8>
  801fa0:	d9414117 	ldw	r5,1284(sp)
  801fa4:	91e5883a 	add	r18,r18,r7
  801fa8:	8c400044 	addi	r17,r17,1
  801fac:	008001c4 	movi	r2,7
  801fb0:	a9400015 	stw	r5,0(r21)
  801fb4:	a9c00115 	stw	r7,4(r21)
  801fb8:	dc800e15 	stw	r18,56(sp)
  801fbc:	dc400d15 	stw	r17,52(sp)
  801fc0:	14416716 	blt	r2,r17,802560 <___vfprintf_internal_r+0xb90>
  801fc4:	a8c00204 	addi	r3,r21,8
  801fc8:	d9814c17 	ldw	r6,1328(sp)
  801fcc:	3080010c 	andi	r2,r6,4
  801fd0:	10002826 	beq	r2,zero,802074 <___vfprintf_internal_r+0x6a4>
  801fd4:	d8814a17 	ldw	r2,1320(sp)
  801fd8:	d9014517 	ldw	r4,1300(sp)
  801fdc:	1121c83a 	sub	r16,r2,r4
  801fe0:	0400240e 	bge	zero,r16,802074 <___vfprintf_internal_r+0x6a4>
  801fe4:	00800404 	movi	r2,16
  801fe8:	1404550e 	bge	r2,r16,803140 <___vfprintf_internal_r+0x1770>
  801fec:	dc400d17 	ldw	r17,52(sp)
  801ff0:	1027883a 	mov	r19,r2
  801ff4:	070020b4 	movhi	fp,130
  801ff8:	e730ed84 	addi	fp,fp,-15434
  801ffc:	050001c4 	movi	r20,7
  802000:	00000306 	br	802010 <___vfprintf_internal_r+0x640>
  802004:	843ffc04 	addi	r16,r16,-16
  802008:	18c00204 	addi	r3,r3,8
  80200c:	9c00110e 	bge	r19,r16,802054 <___vfprintf_internal_r+0x684>
  802010:	94800404 	addi	r18,r18,16
  802014:	8c400044 	addi	r17,r17,1
  802018:	1f000015 	stw	fp,0(r3)
  80201c:	1cc00115 	stw	r19,4(r3)
  802020:	dc800e15 	stw	r18,56(sp)
  802024:	dc400d15 	stw	r17,52(sp)
  802028:	a47ff60e 	bge	r20,r17,802004 <___vfprintf_internal_r+0x634>
  80202c:	d9014f17 	ldw	r4,1340(sp)
  802030:	b00b883a 	mov	r5,r22
  802034:	d9800c04 	addi	r6,sp,48
  802038:	08019780 	call	801978 <__sprint_r>
  80203c:	10001c1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802040:	843ffc04 	addi	r16,r16,-16
  802044:	dc800e17 	ldw	r18,56(sp)
  802048:	dc400d17 	ldw	r17,52(sp)
  80204c:	d8c01904 	addi	r3,sp,100
  802050:	9c3fef16 	blt	r19,r16,802010 <___vfprintf_internal_r+0x640>
  802054:	9425883a 	add	r18,r18,r16
  802058:	8c400044 	addi	r17,r17,1
  80205c:	008001c4 	movi	r2,7
  802060:	1f000015 	stw	fp,0(r3)
  802064:	1c000115 	stw	r16,4(r3)
  802068:	dc800e15 	stw	r18,56(sp)
  80206c:	dc400d15 	stw	r17,52(sp)
  802070:	1440cb16 	blt	r2,r17,8023a0 <___vfprintf_internal_r+0x9d0>
  802074:	d8814a17 	ldw	r2,1320(sp)
  802078:	d9414517 	ldw	r5,1300(sp)
  80207c:	1140010e 	bge	r2,r5,802084 <___vfprintf_internal_r+0x6b4>
  802080:	2805883a 	mov	r2,r5
  802084:	d9814b17 	ldw	r6,1324(sp)
  802088:	308d883a 	add	r6,r6,r2
  80208c:	d9814b15 	stw	r6,1324(sp)
  802090:	90013b1e 	bne	r18,zero,802580 <___vfprintf_internal_r+0xbb0>
  802094:	d9c14017 	ldw	r7,1280(sp)
  802098:	dd401904 	addi	r21,sp,100
  80209c:	d8000d15 	stw	zero,52(sp)
  8020a0:	003ea706 	br	801b40 <___vfprintf_internal_r+0x170>
  8020a4:	d8800e17 	ldw	r2,56(sp)
  8020a8:	1005451e 	bne	r2,zero,8035c0 <___vfprintf_internal_r+0x1bf0>
  8020ac:	d8000d15 	stw	zero,52(sp)
  8020b0:	b080030b 	ldhu	r2,12(r22)
  8020b4:	1080100c 	andi	r2,r2,64
  8020b8:	103e8726 	beq	r2,zero,801ad8 <___vfprintf_internal_r+0x108>
  8020bc:	00bfffc4 	movi	r2,-1
  8020c0:	d8814b15 	stw	r2,1324(sp)
  8020c4:	003e8406 	br	801ad8 <___vfprintf_internal_r+0x108>
  8020c8:	d9814d17 	ldw	r6,1332(sp)
  8020cc:	00801944 	movi	r2,101
  8020d0:	11806e16 	blt	r2,r6,80228c <___vfprintf_internal_r+0x8bc>
  8020d4:	d9414717 	ldw	r5,1308(sp)
  8020d8:	00c00044 	movi	r3,1
  8020dc:	1943490e 	bge	r3,r5,802e04 <___vfprintf_internal_r+0x1434>
  8020e0:	d8814117 	ldw	r2,1284(sp)
  8020e4:	94800044 	addi	r18,r18,1
  8020e8:	8c400044 	addi	r17,r17,1
  8020ec:	a8800015 	stw	r2,0(r21)
  8020f0:	008001c4 	movi	r2,7
  8020f4:	a8c00115 	stw	r3,4(r21)
  8020f8:	dc800e15 	stw	r18,56(sp)
  8020fc:	dc400d15 	stw	r17,52(sp)
  802100:	1441ca16 	blt	r2,r17,80282c <___vfprintf_internal_r+0xe5c>
  802104:	a8c00204 	addi	r3,r21,8
  802108:	d9014917 	ldw	r4,1316(sp)
  80210c:	00800044 	movi	r2,1
  802110:	94800044 	addi	r18,r18,1
  802114:	8c400044 	addi	r17,r17,1
  802118:	18800115 	stw	r2,4(r3)
  80211c:	008001c4 	movi	r2,7
  802120:	19000015 	stw	r4,0(r3)
  802124:	dc800e15 	stw	r18,56(sp)
  802128:	dc400d15 	stw	r17,52(sp)
  80212c:	1441b616 	blt	r2,r17,802808 <___vfprintf_internal_r+0xe38>
  802130:	1cc00204 	addi	r19,r3,8
  802134:	d9014217 	ldw	r4,1288(sp)
  802138:	d9414317 	ldw	r5,1292(sp)
  80213c:	000d883a 	mov	r6,zero
  802140:	000f883a 	mov	r7,zero
  802144:	080f1780 	call	80f178 <__nedf2>
  802148:	10017426 	beq	r2,zero,80271c <___vfprintf_internal_r+0xd4c>
  80214c:	d9414717 	ldw	r5,1308(sp)
  802150:	d9814117 	ldw	r6,1284(sp)
  802154:	8c400044 	addi	r17,r17,1
  802158:	2c85883a 	add	r2,r5,r18
  80215c:	14bfffc4 	addi	r18,r2,-1
  802160:	28bfffc4 	addi	r2,r5,-1
  802164:	30c00044 	addi	r3,r6,1
  802168:	98800115 	stw	r2,4(r19)
  80216c:	008001c4 	movi	r2,7
  802170:	98c00015 	stw	r3,0(r19)
  802174:	dc800e15 	stw	r18,56(sp)
  802178:	dc400d15 	stw	r17,52(sp)
  80217c:	14418e16 	blt	r2,r17,8027b8 <___vfprintf_internal_r+0xde8>
  802180:	9cc00204 	addi	r19,r19,8
  802184:	d9414817 	ldw	r5,1312(sp)
  802188:	d8800804 	addi	r2,sp,32
  80218c:	8c400044 	addi	r17,r17,1
  802190:	9165883a 	add	r18,r18,r5
  802194:	98800015 	stw	r2,0(r19)
  802198:	008001c4 	movi	r2,7
  80219c:	99400115 	stw	r5,4(r19)
  8021a0:	dc800e15 	stw	r18,56(sp)
  8021a4:	dc400d15 	stw	r17,52(sp)
  8021a8:	1440ed16 	blt	r2,r17,802560 <___vfprintf_internal_r+0xb90>
  8021ac:	98c00204 	addi	r3,r19,8
  8021b0:	003f8506 	br	801fc8 <___vfprintf_internal_r+0x5f8>
  8021b4:	d9814a17 	ldw	r6,1320(sp)
  8021b8:	d8814517 	ldw	r2,1300(sp)
  8021bc:	30a1c83a 	sub	r16,r6,r2
  8021c0:	043f4b0e 	bge	zero,r16,801ef0 <___vfprintf_internal_r+0x520>
  8021c4:	00800404 	movi	r2,16
  8021c8:	14043a0e 	bge	r2,r16,8032b4 <___vfprintf_internal_r+0x18e4>
  8021cc:	1027883a 	mov	r19,r2
  8021d0:	070020b4 	movhi	fp,130
  8021d4:	e730e984 	addi	fp,fp,-15450
  8021d8:	050001c4 	movi	r20,7
  8021dc:	00000306 	br	8021ec <___vfprintf_internal_r+0x81c>
  8021e0:	843ffc04 	addi	r16,r16,-16
  8021e4:	ad400204 	addi	r21,r21,8
  8021e8:	9c00130e 	bge	r19,r16,802238 <___vfprintf_internal_r+0x868>
  8021ec:	94800404 	addi	r18,r18,16
  8021f0:	8c400044 	addi	r17,r17,1
  8021f4:	af000015 	stw	fp,0(r21)
  8021f8:	acc00115 	stw	r19,4(r21)
  8021fc:	dc800e15 	stw	r18,56(sp)
  802200:	dc400d15 	stw	r17,52(sp)
  802204:	a47ff60e 	bge	r20,r17,8021e0 <___vfprintf_internal_r+0x810>
  802208:	d9014f17 	ldw	r4,1340(sp)
  80220c:	b00b883a 	mov	r5,r22
  802210:	d9800c04 	addi	r6,sp,48
  802214:	d9c15115 	stw	r7,1348(sp)
  802218:	08019780 	call	801978 <__sprint_r>
  80221c:	d9c15117 	ldw	r7,1348(sp)
  802220:	103fa31e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802224:	843ffc04 	addi	r16,r16,-16
  802228:	dc800e17 	ldw	r18,56(sp)
  80222c:	dc400d17 	ldw	r17,52(sp)
  802230:	dd401904 	addi	r21,sp,100
  802234:	9c3fed16 	blt	r19,r16,8021ec <___vfprintf_internal_r+0x81c>
  802238:	9425883a 	add	r18,r18,r16
  80223c:	8c400044 	addi	r17,r17,1
  802240:	008001c4 	movi	r2,7
  802244:	af000015 	stw	fp,0(r21)
  802248:	ac000115 	stw	r16,4(r21)
  80224c:	dc800e15 	stw	r18,56(sp)
  802250:	dc400d15 	stw	r17,52(sp)
  802254:	14416116 	blt	r2,r17,8027dc <___vfprintf_internal_r+0xe0c>
  802258:	ad400204 	addi	r21,r21,8
  80225c:	003f2406 	br	801ef0 <___vfprintf_internal_r+0x520>
  802260:	d9014f17 	ldw	r4,1340(sp)
  802264:	0806c0c0 	call	806c0c <__sinit>
  802268:	d9c15117 	ldw	r7,1348(sp)
  80226c:	003def06 	br	801a2c <___vfprintf_internal_r+0x5c>
  802270:	d9014f17 	ldw	r4,1340(sp)
  802274:	b00b883a 	mov	r5,r22
  802278:	d9c15115 	stw	r7,1348(sp)
  80227c:	08050400 	call	805040 <__swsetup_r>
  802280:	d9c15117 	ldw	r7,1348(sp)
  802284:	103dee26 	beq	r2,zero,801a40 <___vfprintf_internal_r+0x70>
  802288:	003f8c06 	br	8020bc <___vfprintf_internal_r+0x6ec>
  80228c:	d9014217 	ldw	r4,1288(sp)
  802290:	d9414317 	ldw	r5,1292(sp)
  802294:	000d883a 	mov	r6,zero
  802298:	000f883a 	mov	r7,zero
  80229c:	080f0f00 	call	80f0f0 <__eqdf2>
  8022a0:	1000f21e 	bne	r2,zero,80266c <___vfprintf_internal_r+0xc9c>
  8022a4:	008020b4 	movhi	r2,130
  8022a8:	10b0e904 	addi	r2,r2,-15452
  8022ac:	94800044 	addi	r18,r18,1
  8022b0:	8c400044 	addi	r17,r17,1
  8022b4:	a8800015 	stw	r2,0(r21)
  8022b8:	00c00044 	movi	r3,1
  8022bc:	008001c4 	movi	r2,7
  8022c0:	a8c00115 	stw	r3,4(r21)
  8022c4:	dc800e15 	stw	r18,56(sp)
  8022c8:	dc400d15 	stw	r17,52(sp)
  8022cc:	14430016 	blt	r2,r17,802ed0 <___vfprintf_internal_r+0x1500>
  8022d0:	a8c00204 	addi	r3,r21,8
  8022d4:	d8800517 	ldw	r2,20(sp)
  8022d8:	d9014717 	ldw	r4,1308(sp)
  8022dc:	11015c0e 	bge	r2,r4,802850 <___vfprintf_internal_r+0xe80>
  8022e0:	dc400d17 	ldw	r17,52(sp)
  8022e4:	d9814917 	ldw	r6,1316(sp)
  8022e8:	00800044 	movi	r2,1
  8022ec:	94800044 	addi	r18,r18,1
  8022f0:	8c400044 	addi	r17,r17,1
  8022f4:	18800115 	stw	r2,4(r3)
  8022f8:	008001c4 	movi	r2,7
  8022fc:	19800015 	stw	r6,0(r3)
  802300:	dc800e15 	stw	r18,56(sp)
  802304:	dc400d15 	stw	r17,52(sp)
  802308:	14431616 	blt	r2,r17,802f64 <___vfprintf_internal_r+0x1594>
  80230c:	18c00204 	addi	r3,r3,8
  802310:	d8814717 	ldw	r2,1308(sp)
  802314:	143fffc4 	addi	r16,r2,-1
  802318:	043f2b0e 	bge	zero,r16,801fc8 <___vfprintf_internal_r+0x5f8>
  80231c:	00800404 	movi	r2,16
  802320:	1402a80e 	bge	r2,r16,802dc4 <___vfprintf_internal_r+0x13f4>
  802324:	dc400d17 	ldw	r17,52(sp)
  802328:	1027883a 	mov	r19,r2
  80232c:	070020b4 	movhi	fp,130
  802330:	e730e984 	addi	fp,fp,-15450
  802334:	050001c4 	movi	r20,7
  802338:	00000306 	br	802348 <___vfprintf_internal_r+0x978>
  80233c:	18c00204 	addi	r3,r3,8
  802340:	843ffc04 	addi	r16,r16,-16
  802344:	9c02a20e 	bge	r19,r16,802dd0 <___vfprintf_internal_r+0x1400>
  802348:	94800404 	addi	r18,r18,16
  80234c:	8c400044 	addi	r17,r17,1
  802350:	1f000015 	stw	fp,0(r3)
  802354:	1cc00115 	stw	r19,4(r3)
  802358:	dc800e15 	stw	r18,56(sp)
  80235c:	dc400d15 	stw	r17,52(sp)
  802360:	a47ff60e 	bge	r20,r17,80233c <___vfprintf_internal_r+0x96c>
  802364:	d9014f17 	ldw	r4,1340(sp)
  802368:	b00b883a 	mov	r5,r22
  80236c:	d9800c04 	addi	r6,sp,48
  802370:	08019780 	call	801978 <__sprint_r>
  802374:	103f4e1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802378:	dc800e17 	ldw	r18,56(sp)
  80237c:	dc400d17 	ldw	r17,52(sp)
  802380:	d8c01904 	addi	r3,sp,100
  802384:	003fee06 	br	802340 <___vfprintf_internal_r+0x970>
  802388:	d8802c0b 	ldhu	r2,176(sp)
  80238c:	00ffffc4 	movi	r3,-1
  802390:	d8c14b15 	stw	r3,1324(sp)
  802394:	1080100c 	andi	r2,r2,64
  802398:	103dcc1e 	bne	r2,zero,801acc <___vfprintf_internal_r+0xfc>
  80239c:	003dce06 	br	801ad8 <___vfprintf_internal_r+0x108>
  8023a0:	d9014f17 	ldw	r4,1340(sp)
  8023a4:	b00b883a 	mov	r5,r22
  8023a8:	d9800c04 	addi	r6,sp,48
  8023ac:	08019780 	call	801978 <__sprint_r>
  8023b0:	103f3f1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8023b4:	dc800e17 	ldw	r18,56(sp)
  8023b8:	003f2e06 	br	802074 <___vfprintf_internal_r+0x6a4>
  8023bc:	d9414c17 	ldw	r5,1328(sp)
  8023c0:	29400414 	ori	r5,r5,16
  8023c4:	d9414c15 	stw	r5,1328(sp)
  8023c8:	d9814c17 	ldw	r6,1328(sp)
  8023cc:	3080080c 	andi	r2,r6,32
  8023d0:	10014f1e 	bne	r2,zero,802910 <___vfprintf_internal_r+0xf40>
  8023d4:	d8c14c17 	ldw	r3,1328(sp)
  8023d8:	1880040c 	andi	r2,r3,16
  8023dc:	1002f01e 	bne	r2,zero,802fa0 <___vfprintf_internal_r+0x15d0>
  8023e0:	d9014c17 	ldw	r4,1328(sp)
  8023e4:	2080100c 	andi	r2,r4,64
  8023e8:	1002ed26 	beq	r2,zero,802fa0 <___vfprintf_internal_r+0x15d0>
  8023ec:	3880000f 	ldh	r2,0(r7)
  8023f0:	39c00104 	addi	r7,r7,4
  8023f4:	d9c14015 	stw	r7,1280(sp)
  8023f8:	1023d7fa 	srai	r17,r2,31
  8023fc:	1021883a 	mov	r16,r2
  802400:	88037816 	blt	r17,zero,8031e4 <___vfprintf_internal_r+0x1814>
  802404:	01000044 	movi	r4,1
  802408:	98000416 	blt	r19,zero,80241c <___vfprintf_internal_r+0xa4c>
  80240c:	d8c14c17 	ldw	r3,1328(sp)
  802410:	00bfdfc4 	movi	r2,-129
  802414:	1886703a 	and	r3,r3,r2
  802418:	d8c14c15 	stw	r3,1328(sp)
  80241c:	8444b03a 	or	r2,r16,r17
  802420:	10022c1e 	bne	r2,zero,802cd4 <___vfprintf_internal_r+0x1304>
  802424:	98022b1e 	bne	r19,zero,802cd4 <___vfprintf_internal_r+0x1304>
  802428:	20803fcc 	andi	r2,r4,255
  80242c:	1002a126 	beq	r2,zero,802eb4 <___vfprintf_internal_r+0x14e4>
  802430:	d8c01904 	addi	r3,sp,100
  802434:	dd000f04 	addi	r20,sp,60
  802438:	d8c14115 	stw	r3,1284(sp)
  80243c:	d8c14117 	ldw	r3,1284(sp)
  802440:	dcc14515 	stw	r19,1300(sp)
  802444:	a0c5c83a 	sub	r2,r20,r3
  802448:	11c00a04 	addi	r7,r2,40
  80244c:	99c0010e 	bge	r19,r7,802454 <___vfprintf_internal_r+0xa84>
  802450:	d9c14515 	stw	r7,1300(sp)
  802454:	dcc14615 	stw	r19,1304(sp)
  802458:	d8800407 	ldb	r2,16(sp)
  80245c:	103e4c26 	beq	r2,zero,801d90 <___vfprintf_internal_r+0x3c0>
  802460:	d8814517 	ldw	r2,1300(sp)
  802464:	10800044 	addi	r2,r2,1
  802468:	d8814515 	stw	r2,1300(sp)
  80246c:	003e4806 	br	801d90 <___vfprintf_internal_r+0x3c0>
  802470:	d9814c17 	ldw	r6,1328(sp)
  802474:	31800414 	ori	r6,r6,16
  802478:	d9814c15 	stw	r6,1328(sp)
  80247c:	d8c14c17 	ldw	r3,1328(sp)
  802480:	1880080c 	andi	r2,r3,32
  802484:	1001271e 	bne	r2,zero,802924 <___vfprintf_internal_r+0xf54>
  802488:	d9414c17 	ldw	r5,1328(sp)
  80248c:	2880040c 	andi	r2,r5,16
  802490:	1002bc1e 	bne	r2,zero,802f84 <___vfprintf_internal_r+0x15b4>
  802494:	d9814c17 	ldw	r6,1328(sp)
  802498:	3080100c 	andi	r2,r6,64
  80249c:	1002b926 	beq	r2,zero,802f84 <___vfprintf_internal_r+0x15b4>
  8024a0:	3c00000b 	ldhu	r16,0(r7)
  8024a4:	0009883a 	mov	r4,zero
  8024a8:	39c00104 	addi	r7,r7,4
  8024ac:	0023883a 	mov	r17,zero
  8024b0:	d9c14015 	stw	r7,1280(sp)
  8024b4:	d8000405 	stb	zero,16(sp)
  8024b8:	003fd306 	br	802408 <___vfprintf_internal_r+0xa38>
  8024bc:	d9014c17 	ldw	r4,1328(sp)
  8024c0:	21000414 	ori	r4,r4,16
  8024c4:	d9014c15 	stw	r4,1328(sp)
  8024c8:	d9414c17 	ldw	r5,1328(sp)
  8024cc:	2880080c 	andi	r2,r5,32
  8024d0:	1001081e 	bne	r2,zero,8028f4 <___vfprintf_internal_r+0xf24>
  8024d4:	d8c14c17 	ldw	r3,1328(sp)
  8024d8:	1880040c 	andi	r2,r3,16
  8024dc:	1002b61e 	bne	r2,zero,802fb8 <___vfprintf_internal_r+0x15e8>
  8024e0:	d9014c17 	ldw	r4,1328(sp)
  8024e4:	2080100c 	andi	r2,r4,64
  8024e8:	1002b326 	beq	r2,zero,802fb8 <___vfprintf_internal_r+0x15e8>
  8024ec:	3c00000b 	ldhu	r16,0(r7)
  8024f0:	01000044 	movi	r4,1
  8024f4:	39c00104 	addi	r7,r7,4
  8024f8:	0023883a 	mov	r17,zero
  8024fc:	d9c14015 	stw	r7,1280(sp)
  802500:	d8000405 	stb	zero,16(sp)
  802504:	003fc006 	br	802408 <___vfprintf_internal_r+0xa38>
  802508:	d9014f17 	ldw	r4,1340(sp)
  80250c:	b00b883a 	mov	r5,r22
  802510:	d9800c04 	addi	r6,sp,48
  802514:	08019780 	call	801978 <__sprint_r>
  802518:	103ee51e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80251c:	dc800e17 	ldw	r18,56(sp)
  802520:	d8c01904 	addi	r3,sp,100
  802524:	d9814c17 	ldw	r6,1328(sp)
  802528:	3080004c 	andi	r2,r6,1
  80252c:	1005003a 	cmpeq	r2,r2,zero
  802530:	103ea51e 	bne	r2,zero,801fc8 <___vfprintf_internal_r+0x5f8>
  802534:	00800044 	movi	r2,1
  802538:	dc400d17 	ldw	r17,52(sp)
  80253c:	18800115 	stw	r2,4(r3)
  802540:	d8814917 	ldw	r2,1316(sp)
  802544:	94800044 	addi	r18,r18,1
  802548:	8c400044 	addi	r17,r17,1
  80254c:	18800015 	stw	r2,0(r3)
  802550:	008001c4 	movi	r2,7
  802554:	dc800e15 	stw	r18,56(sp)
  802558:	dc400d15 	stw	r17,52(sp)
  80255c:	1442240e 	bge	r2,r17,802df0 <___vfprintf_internal_r+0x1420>
  802560:	d9014f17 	ldw	r4,1340(sp)
  802564:	b00b883a 	mov	r5,r22
  802568:	d9800c04 	addi	r6,sp,48
  80256c:	08019780 	call	801978 <__sprint_r>
  802570:	103ecf1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802574:	dc800e17 	ldw	r18,56(sp)
  802578:	d8c01904 	addi	r3,sp,100
  80257c:	003e9206 	br	801fc8 <___vfprintf_internal_r+0x5f8>
  802580:	d9014f17 	ldw	r4,1340(sp)
  802584:	b00b883a 	mov	r5,r22
  802588:	d9800c04 	addi	r6,sp,48
  80258c:	08019780 	call	801978 <__sprint_r>
  802590:	103ec026 	beq	r2,zero,802094 <___vfprintf_internal_r+0x6c4>
  802594:	003ec606 	br	8020b0 <___vfprintf_internal_r+0x6e0>
  802598:	d9014f17 	ldw	r4,1340(sp)
  80259c:	b00b883a 	mov	r5,r22
  8025a0:	d9800c04 	addi	r6,sp,48
  8025a4:	d9c15115 	stw	r7,1348(sp)
  8025a8:	08019780 	call	801978 <__sprint_r>
  8025ac:	d9c15117 	ldw	r7,1348(sp)
  8025b0:	103ebf1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8025b4:	dc800e17 	ldw	r18,56(sp)
  8025b8:	dc400d17 	ldw	r17,52(sp)
  8025bc:	dd401904 	addi	r21,sp,100
  8025c0:	003e7406 	br	801f94 <___vfprintf_internal_r+0x5c4>
  8025c4:	d9014f17 	ldw	r4,1340(sp)
  8025c8:	b00b883a 	mov	r5,r22
  8025cc:	d9800c04 	addi	r6,sp,48
  8025d0:	d9c15115 	stw	r7,1348(sp)
  8025d4:	08019780 	call	801978 <__sprint_r>
  8025d8:	d9c15117 	ldw	r7,1348(sp)
  8025dc:	103eb41e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8025e0:	dd401904 	addi	r21,sp,100
  8025e4:	003d6d06 	br	801b9c <___vfprintf_internal_r+0x1cc>
  8025e8:	d9014f17 	ldw	r4,1340(sp)
  8025ec:	b00b883a 	mov	r5,r22
  8025f0:	d9800c04 	addi	r6,sp,48
  8025f4:	d9c15115 	stw	r7,1348(sp)
  8025f8:	08019780 	call	801978 <__sprint_r>
  8025fc:	d9c15117 	ldw	r7,1348(sp)
  802600:	103eab1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802604:	dc800e17 	ldw	r18,56(sp)
  802608:	dc400d17 	ldw	r17,52(sp)
  80260c:	dd401904 	addi	r21,sp,100
  802610:	003e3406 	br	801ee4 <___vfprintf_internal_r+0x514>
  802614:	d9014f17 	ldw	r4,1340(sp)
  802618:	b00b883a 	mov	r5,r22
  80261c:	d9800c04 	addi	r6,sp,48
  802620:	d9c15115 	stw	r7,1348(sp)
  802624:	08019780 	call	801978 <__sprint_r>
  802628:	d9c15117 	ldw	r7,1348(sp)
  80262c:	103ea01e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802630:	dc800e17 	ldw	r18,56(sp)
  802634:	dc400d17 	ldw	r17,52(sp)
  802638:	dd401904 	addi	r21,sp,100
  80263c:	003e1c06 	br	801eb0 <___vfprintf_internal_r+0x4e0>
  802640:	d9014f17 	ldw	r4,1340(sp)
  802644:	b00b883a 	mov	r5,r22
  802648:	d9800c04 	addi	r6,sp,48
  80264c:	d9c15115 	stw	r7,1348(sp)
  802650:	08019780 	call	801978 <__sprint_r>
  802654:	d9c15117 	ldw	r7,1348(sp)
  802658:	103e951e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80265c:	dc800e17 	ldw	r18,56(sp)
  802660:	dc400d17 	ldw	r17,52(sp)
  802664:	dd401904 	addi	r21,sp,100
  802668:	003e0406 	br	801e7c <___vfprintf_internal_r+0x4ac>
  80266c:	d9000517 	ldw	r4,20(sp)
  802670:	0102580e 	bge	zero,r4,802fd4 <___vfprintf_internal_r+0x1604>
  802674:	d9814717 	ldw	r6,1308(sp)
  802678:	21807a16 	blt	r4,r6,802864 <___vfprintf_internal_r+0xe94>
  80267c:	d8814117 	ldw	r2,1284(sp)
  802680:	91a5883a 	add	r18,r18,r6
  802684:	8c400044 	addi	r17,r17,1
  802688:	a8800015 	stw	r2,0(r21)
  80268c:	008001c4 	movi	r2,7
  802690:	a9800115 	stw	r6,4(r21)
  802694:	dc800e15 	stw	r18,56(sp)
  802698:	dc400d15 	stw	r17,52(sp)
  80269c:	1442fc16 	blt	r2,r17,803290 <___vfprintf_internal_r+0x18c0>
  8026a0:	a8c00204 	addi	r3,r21,8
  8026a4:	d9414717 	ldw	r5,1308(sp)
  8026a8:	2161c83a 	sub	r16,r4,r5
  8026ac:	043f9d0e 	bge	zero,r16,802524 <___vfprintf_internal_r+0xb54>
  8026b0:	00800404 	movi	r2,16
  8026b4:	1402190e 	bge	r2,r16,802f1c <___vfprintf_internal_r+0x154c>
  8026b8:	dc400d17 	ldw	r17,52(sp)
  8026bc:	1027883a 	mov	r19,r2
  8026c0:	070020b4 	movhi	fp,130
  8026c4:	e730e984 	addi	fp,fp,-15450
  8026c8:	050001c4 	movi	r20,7
  8026cc:	00000306 	br	8026dc <___vfprintf_internal_r+0xd0c>
  8026d0:	18c00204 	addi	r3,r3,8
  8026d4:	843ffc04 	addi	r16,r16,-16
  8026d8:	9c02130e 	bge	r19,r16,802f28 <___vfprintf_internal_r+0x1558>
  8026dc:	94800404 	addi	r18,r18,16
  8026e0:	8c400044 	addi	r17,r17,1
  8026e4:	1f000015 	stw	fp,0(r3)
  8026e8:	1cc00115 	stw	r19,4(r3)
  8026ec:	dc800e15 	stw	r18,56(sp)
  8026f0:	dc400d15 	stw	r17,52(sp)
  8026f4:	a47ff60e 	bge	r20,r17,8026d0 <___vfprintf_internal_r+0xd00>
  8026f8:	d9014f17 	ldw	r4,1340(sp)
  8026fc:	b00b883a 	mov	r5,r22
  802700:	d9800c04 	addi	r6,sp,48
  802704:	08019780 	call	801978 <__sprint_r>
  802708:	103e691e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80270c:	dc800e17 	ldw	r18,56(sp)
  802710:	dc400d17 	ldw	r17,52(sp)
  802714:	d8c01904 	addi	r3,sp,100
  802718:	003fee06 	br	8026d4 <___vfprintf_internal_r+0xd04>
  80271c:	d8814717 	ldw	r2,1308(sp)
  802720:	143fffc4 	addi	r16,r2,-1
  802724:	043e970e 	bge	zero,r16,802184 <___vfprintf_internal_r+0x7b4>
  802728:	00800404 	movi	r2,16
  80272c:	1400180e 	bge	r2,r16,802790 <___vfprintf_internal_r+0xdc0>
  802730:	1029883a 	mov	r20,r2
  802734:	070020b4 	movhi	fp,130
  802738:	e730e984 	addi	fp,fp,-15450
  80273c:	054001c4 	movi	r21,7
  802740:	00000306 	br	802750 <___vfprintf_internal_r+0xd80>
  802744:	9cc00204 	addi	r19,r19,8
  802748:	843ffc04 	addi	r16,r16,-16
  80274c:	a400120e 	bge	r20,r16,802798 <___vfprintf_internal_r+0xdc8>
  802750:	94800404 	addi	r18,r18,16
  802754:	8c400044 	addi	r17,r17,1
  802758:	9f000015 	stw	fp,0(r19)
  80275c:	9d000115 	stw	r20,4(r19)
  802760:	dc800e15 	stw	r18,56(sp)
  802764:	dc400d15 	stw	r17,52(sp)
  802768:	ac7ff60e 	bge	r21,r17,802744 <___vfprintf_internal_r+0xd74>
  80276c:	d9014f17 	ldw	r4,1340(sp)
  802770:	b00b883a 	mov	r5,r22
  802774:	d9800c04 	addi	r6,sp,48
  802778:	08019780 	call	801978 <__sprint_r>
  80277c:	103e4c1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802780:	dc800e17 	ldw	r18,56(sp)
  802784:	dc400d17 	ldw	r17,52(sp)
  802788:	dcc01904 	addi	r19,sp,100
  80278c:	003fee06 	br	802748 <___vfprintf_internal_r+0xd78>
  802790:	070020b4 	movhi	fp,130
  802794:	e730e984 	addi	fp,fp,-15450
  802798:	9425883a 	add	r18,r18,r16
  80279c:	8c400044 	addi	r17,r17,1
  8027a0:	008001c4 	movi	r2,7
  8027a4:	9f000015 	stw	fp,0(r19)
  8027a8:	9c000115 	stw	r16,4(r19)
  8027ac:	dc800e15 	stw	r18,56(sp)
  8027b0:	dc400d15 	stw	r17,52(sp)
  8027b4:	147e720e 	bge	r2,r17,802180 <___vfprintf_internal_r+0x7b0>
  8027b8:	d9014f17 	ldw	r4,1340(sp)
  8027bc:	b00b883a 	mov	r5,r22
  8027c0:	d9800c04 	addi	r6,sp,48
  8027c4:	08019780 	call	801978 <__sprint_r>
  8027c8:	103e391e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8027cc:	dc800e17 	ldw	r18,56(sp)
  8027d0:	dc400d17 	ldw	r17,52(sp)
  8027d4:	dcc01904 	addi	r19,sp,100
  8027d8:	003e6a06 	br	802184 <___vfprintf_internal_r+0x7b4>
  8027dc:	d9014f17 	ldw	r4,1340(sp)
  8027e0:	b00b883a 	mov	r5,r22
  8027e4:	d9800c04 	addi	r6,sp,48
  8027e8:	d9c15115 	stw	r7,1348(sp)
  8027ec:	08019780 	call	801978 <__sprint_r>
  8027f0:	d9c15117 	ldw	r7,1348(sp)
  8027f4:	103e2e1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8027f8:	dc800e17 	ldw	r18,56(sp)
  8027fc:	dc400d17 	ldw	r17,52(sp)
  802800:	dd401904 	addi	r21,sp,100
  802804:	003dba06 	br	801ef0 <___vfprintf_internal_r+0x520>
  802808:	d9014f17 	ldw	r4,1340(sp)
  80280c:	b00b883a 	mov	r5,r22
  802810:	d9800c04 	addi	r6,sp,48
  802814:	08019780 	call	801978 <__sprint_r>
  802818:	103e251e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80281c:	dc800e17 	ldw	r18,56(sp)
  802820:	dc400d17 	ldw	r17,52(sp)
  802824:	dcc01904 	addi	r19,sp,100
  802828:	003e4206 	br	802134 <___vfprintf_internal_r+0x764>
  80282c:	d9014f17 	ldw	r4,1340(sp)
  802830:	b00b883a 	mov	r5,r22
  802834:	d9800c04 	addi	r6,sp,48
  802838:	08019780 	call	801978 <__sprint_r>
  80283c:	103e1c1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802840:	dc800e17 	ldw	r18,56(sp)
  802844:	dc400d17 	ldw	r17,52(sp)
  802848:	d8c01904 	addi	r3,sp,100
  80284c:	003e2e06 	br	802108 <___vfprintf_internal_r+0x738>
  802850:	d9414c17 	ldw	r5,1328(sp)
  802854:	2880004c 	andi	r2,r5,1
  802858:	1005003a 	cmpeq	r2,r2,zero
  80285c:	103dda1e 	bne	r2,zero,801fc8 <___vfprintf_internal_r+0x5f8>
  802860:	003e9f06 	br	8022e0 <___vfprintf_internal_r+0x910>
  802864:	d8c14117 	ldw	r3,1284(sp)
  802868:	9125883a 	add	r18,r18,r4
  80286c:	8c400044 	addi	r17,r17,1
  802870:	008001c4 	movi	r2,7
  802874:	a8c00015 	stw	r3,0(r21)
  802878:	a9000115 	stw	r4,4(r21)
  80287c:	dc800e15 	stw	r18,56(sp)
  802880:	dc400d15 	stw	r17,52(sp)
  802884:	14426c16 	blt	r2,r17,803238 <___vfprintf_internal_r+0x1868>
  802888:	a8c00204 	addi	r3,r21,8
  80288c:	d9414917 	ldw	r5,1316(sp)
  802890:	00800044 	movi	r2,1
  802894:	94800044 	addi	r18,r18,1
  802898:	8c400044 	addi	r17,r17,1
  80289c:	18800115 	stw	r2,4(r3)
  8028a0:	008001c4 	movi	r2,7
  8028a4:	19400015 	stw	r5,0(r3)
  8028a8:	dc800e15 	stw	r18,56(sp)
  8028ac:	dc400d15 	stw	r17,52(sp)
  8028b0:	2021883a 	mov	r16,r4
  8028b4:	14425616 	blt	r2,r17,803210 <___vfprintf_internal_r+0x1840>
  8028b8:	19400204 	addi	r5,r3,8
  8028bc:	d9814717 	ldw	r6,1308(sp)
  8028c0:	8c400044 	addi	r17,r17,1
  8028c4:	dc400d15 	stw	r17,52(sp)
  8028c8:	3107c83a 	sub	r3,r6,r4
  8028cc:	d9014117 	ldw	r4,1284(sp)
  8028d0:	90e5883a 	add	r18,r18,r3
  8028d4:	28c00115 	stw	r3,4(r5)
  8028d8:	8105883a 	add	r2,r16,r4
  8028dc:	28800015 	stw	r2,0(r5)
  8028e0:	008001c4 	movi	r2,7
  8028e4:	dc800e15 	stw	r18,56(sp)
  8028e8:	147f1d16 	blt	r2,r17,802560 <___vfprintf_internal_r+0xb90>
  8028ec:	28c00204 	addi	r3,r5,8
  8028f0:	003db506 	br	801fc8 <___vfprintf_internal_r+0x5f8>
  8028f4:	3c000017 	ldw	r16,0(r7)
  8028f8:	3c400117 	ldw	r17,4(r7)
  8028fc:	39800204 	addi	r6,r7,8
  802900:	01000044 	movi	r4,1
  802904:	d9814015 	stw	r6,1280(sp)
  802908:	d8000405 	stb	zero,16(sp)
  80290c:	003ebe06 	br	802408 <___vfprintf_internal_r+0xa38>
  802910:	3c000017 	ldw	r16,0(r7)
  802914:	3c400117 	ldw	r17,4(r7)
  802918:	38800204 	addi	r2,r7,8
  80291c:	d8814015 	stw	r2,1280(sp)
  802920:	003eb706 	br	802400 <___vfprintf_internal_r+0xa30>
  802924:	3c000017 	ldw	r16,0(r7)
  802928:	3c400117 	ldw	r17,4(r7)
  80292c:	39000204 	addi	r4,r7,8
  802930:	d9014015 	stw	r4,1280(sp)
  802934:	0009883a 	mov	r4,zero
  802938:	d8000405 	stb	zero,16(sp)
  80293c:	003eb206 	br	802408 <___vfprintf_internal_r+0xa38>
  802940:	38c00017 	ldw	r3,0(r7)
  802944:	39c00104 	addi	r7,r7,4
  802948:	d8c14a15 	stw	r3,1320(sp)
  80294c:	1800d70e 	bge	r3,zero,802cac <___vfprintf_internal_r+0x12dc>
  802950:	00c7c83a 	sub	r3,zero,r3
  802954:	d8c14a15 	stw	r3,1320(sp)
  802958:	d9014c17 	ldw	r4,1328(sp)
  80295c:	b8c00007 	ldb	r3,0(r23)
  802960:	21000114 	ori	r4,r4,4
  802964:	d9014c15 	stw	r4,1328(sp)
  802968:	003c9806 	br	801bcc <___vfprintf_internal_r+0x1fc>
  80296c:	d9814c17 	ldw	r6,1328(sp)
  802970:	3080080c 	andi	r2,r6,32
  802974:	1001f626 	beq	r2,zero,803150 <___vfprintf_internal_r+0x1780>
  802978:	d9014b17 	ldw	r4,1324(sp)
  80297c:	38800017 	ldw	r2,0(r7)
  802980:	39c00104 	addi	r7,r7,4
  802984:	d9c14015 	stw	r7,1280(sp)
  802988:	2007d7fa 	srai	r3,r4,31
  80298c:	d9c14017 	ldw	r7,1280(sp)
  802990:	11000015 	stw	r4,0(r2)
  802994:	10c00115 	stw	r3,4(r2)
  802998:	003c6906 	br	801b40 <___vfprintf_internal_r+0x170>
  80299c:	b8c00007 	ldb	r3,0(r23)
  8029a0:	00801b04 	movi	r2,108
  8029a4:	18825526 	beq	r3,r2,8032fc <___vfprintf_internal_r+0x192c>
  8029a8:	d9414c17 	ldw	r5,1328(sp)
  8029ac:	29400414 	ori	r5,r5,16
  8029b0:	d9414c15 	stw	r5,1328(sp)
  8029b4:	003c8506 	br	801bcc <___vfprintf_internal_r+0x1fc>
  8029b8:	d9814c17 	ldw	r6,1328(sp)
  8029bc:	b8c00007 	ldb	r3,0(r23)
  8029c0:	31800814 	ori	r6,r6,32
  8029c4:	d9814c15 	stw	r6,1328(sp)
  8029c8:	003c8006 	br	801bcc <___vfprintf_internal_r+0x1fc>
  8029cc:	d8814c17 	ldw	r2,1328(sp)
  8029d0:	3c000017 	ldw	r16,0(r7)
  8029d4:	00c01e04 	movi	r3,120
  8029d8:	10800094 	ori	r2,r2,2
  8029dc:	d8814c15 	stw	r2,1328(sp)
  8029e0:	39c00104 	addi	r7,r7,4
  8029e4:	014020b4 	movhi	r5,130
  8029e8:	2970d204 	addi	r5,r5,-15544
  8029ec:	00800c04 	movi	r2,48
  8029f0:	0023883a 	mov	r17,zero
  8029f4:	01000084 	movi	r4,2
  8029f8:	d9c14015 	stw	r7,1280(sp)
  8029fc:	d8c14d15 	stw	r3,1332(sp)
  802a00:	d9414415 	stw	r5,1296(sp)
  802a04:	d8800445 	stb	r2,17(sp)
  802a08:	d8c00485 	stb	r3,18(sp)
  802a0c:	d8000405 	stb	zero,16(sp)
  802a10:	003e7d06 	br	802408 <___vfprintf_internal_r+0xa38>
  802a14:	d8814c17 	ldw	r2,1328(sp)
  802a18:	b8c00007 	ldb	r3,0(r23)
  802a1c:	10801014 	ori	r2,r2,64
  802a20:	d8814c15 	stw	r2,1328(sp)
  802a24:	003c6906 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802a28:	d9414c17 	ldw	r5,1328(sp)
  802a2c:	2880020c 	andi	r2,r5,8
  802a30:	1001e526 	beq	r2,zero,8031c8 <___vfprintf_internal_r+0x17f8>
  802a34:	39800017 	ldw	r6,0(r7)
  802a38:	38800204 	addi	r2,r7,8
  802a3c:	d8814015 	stw	r2,1280(sp)
  802a40:	d9814215 	stw	r6,1288(sp)
  802a44:	39c00117 	ldw	r7,4(r7)
  802a48:	d9c14315 	stw	r7,1292(sp)
  802a4c:	d9014217 	ldw	r4,1288(sp)
  802a50:	d9414317 	ldw	r5,1292(sp)
  802a54:	0809c0c0 	call	809c0c <__isinfd>
  802a58:	10021d26 	beq	r2,zero,8032d0 <___vfprintf_internal_r+0x1900>
  802a5c:	d9014217 	ldw	r4,1288(sp)
  802a60:	d9414317 	ldw	r5,1292(sp)
  802a64:	000d883a 	mov	r6,zero
  802a68:	000f883a 	mov	r7,zero
  802a6c:	080f3100 	call	80f310 <__ltdf2>
  802a70:	1002d016 	blt	r2,zero,8035b4 <___vfprintf_internal_r+0x1be4>
  802a74:	d9414d17 	ldw	r5,1332(sp)
  802a78:	008011c4 	movi	r2,71
  802a7c:	11421016 	blt	r2,r5,8032c0 <___vfprintf_internal_r+0x18f0>
  802a80:	018020b4 	movhi	r6,130
  802a84:	31b0d704 	addi	r6,r6,-15524
  802a88:	d9814115 	stw	r6,1284(sp)
  802a8c:	d9014c17 	ldw	r4,1328(sp)
  802a90:	00c000c4 	movi	r3,3
  802a94:	00bfdfc4 	movi	r2,-129
  802a98:	2088703a 	and	r4,r4,r2
  802a9c:	180f883a 	mov	r7,r3
  802aa0:	d8c14515 	stw	r3,1300(sp)
  802aa4:	d9014c15 	stw	r4,1328(sp)
  802aa8:	d8014615 	stw	zero,1304(sp)
  802aac:	003e6a06 	br	802458 <___vfprintf_internal_r+0xa88>
  802ab0:	38800017 	ldw	r2,0(r7)
  802ab4:	00c00044 	movi	r3,1
  802ab8:	39c00104 	addi	r7,r7,4
  802abc:	d9c14015 	stw	r7,1280(sp)
  802ac0:	d9000f04 	addi	r4,sp,60
  802ac4:	180f883a 	mov	r7,r3
  802ac8:	d8c14515 	stw	r3,1300(sp)
  802acc:	d9014115 	stw	r4,1284(sp)
  802ad0:	d8800f05 	stb	r2,60(sp)
  802ad4:	d8000405 	stb	zero,16(sp)
  802ad8:	003cac06 	br	801d8c <___vfprintf_internal_r+0x3bc>
  802adc:	014020b4 	movhi	r5,130
  802ae0:	2970dd04 	addi	r5,r5,-15500
  802ae4:	d9414415 	stw	r5,1296(sp)
  802ae8:	d9814c17 	ldw	r6,1328(sp)
  802aec:	3080080c 	andi	r2,r6,32
  802af0:	1000ff26 	beq	r2,zero,802ef0 <___vfprintf_internal_r+0x1520>
  802af4:	3c000017 	ldw	r16,0(r7)
  802af8:	3c400117 	ldw	r17,4(r7)
  802afc:	38800204 	addi	r2,r7,8
  802b00:	d8814015 	stw	r2,1280(sp)
  802b04:	d9414c17 	ldw	r5,1328(sp)
  802b08:	2880004c 	andi	r2,r5,1
  802b0c:	1005003a 	cmpeq	r2,r2,zero
  802b10:	1000b91e 	bne	r2,zero,802df8 <___vfprintf_internal_r+0x1428>
  802b14:	8444b03a 	or	r2,r16,r17
  802b18:	1000b726 	beq	r2,zero,802df8 <___vfprintf_internal_r+0x1428>
  802b1c:	d9814d17 	ldw	r6,1332(sp)
  802b20:	29400094 	ori	r5,r5,2
  802b24:	00800c04 	movi	r2,48
  802b28:	01000084 	movi	r4,2
  802b2c:	d9414c15 	stw	r5,1328(sp)
  802b30:	d8800445 	stb	r2,17(sp)
  802b34:	d9800485 	stb	r6,18(sp)
  802b38:	d8000405 	stb	zero,16(sp)
  802b3c:	003e3206 	br	802408 <___vfprintf_internal_r+0xa38>
  802b40:	018020b4 	movhi	r6,130
  802b44:	31b0d204 	addi	r6,r6,-15544
  802b48:	d9814415 	stw	r6,1296(sp)
  802b4c:	003fe606 	br	802ae8 <___vfprintf_internal_r+0x1118>
  802b50:	00800ac4 	movi	r2,43
  802b54:	d8800405 	stb	r2,16(sp)
  802b58:	b8c00007 	ldb	r3,0(r23)
  802b5c:	003c1b06 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802b60:	d8814c17 	ldw	r2,1328(sp)
  802b64:	b8c00007 	ldb	r3,0(r23)
  802b68:	10800054 	ori	r2,r2,1
  802b6c:	d8814c15 	stw	r2,1328(sp)
  802b70:	003c1606 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802b74:	d8800407 	ldb	r2,16(sp)
  802b78:	10004c1e 	bne	r2,zero,802cac <___vfprintf_internal_r+0x12dc>
  802b7c:	00800804 	movi	r2,32
  802b80:	d8800405 	stb	r2,16(sp)
  802b84:	b8c00007 	ldb	r3,0(r23)
  802b88:	003c1006 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802b8c:	d9814c17 	ldw	r6,1328(sp)
  802b90:	b8c00007 	ldb	r3,0(r23)
  802b94:	31800214 	ori	r6,r6,8
  802b98:	d9814c15 	stw	r6,1328(sp)
  802b9c:	003c0b06 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802ba0:	0009883a 	mov	r4,zero
  802ba4:	04000244 	movi	r16,9
  802ba8:	01400284 	movi	r5,10
  802bac:	d9c15115 	stw	r7,1348(sp)
  802bb0:	080f9440 	call	80f944 <__mulsi3>
  802bb4:	b9000007 	ldb	r4,0(r23)
  802bb8:	d8c14d17 	ldw	r3,1332(sp)
  802bbc:	bdc00044 	addi	r23,r23,1
  802bc0:	d9014d15 	stw	r4,1332(sp)
  802bc4:	d9414d17 	ldw	r5,1332(sp)
  802bc8:	1885883a 	add	r2,r3,r2
  802bcc:	113ff404 	addi	r4,r2,-48
  802bd0:	28bff404 	addi	r2,r5,-48
  802bd4:	d9c15117 	ldw	r7,1348(sp)
  802bd8:	80bff32e 	bgeu	r16,r2,802ba8 <___vfprintf_internal_r+0x11d8>
  802bdc:	d9014a15 	stw	r4,1320(sp)
  802be0:	003bfc06 	br	801bd4 <___vfprintf_internal_r+0x204>
  802be4:	d8814c17 	ldw	r2,1328(sp)
  802be8:	b8c00007 	ldb	r3,0(r23)
  802bec:	10802014 	ori	r2,r2,128
  802bf0:	d8814c15 	stw	r2,1328(sp)
  802bf4:	003bf506 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802bf8:	b8c00007 	ldb	r3,0(r23)
  802bfc:	00800a84 	movi	r2,42
  802c00:	bdc00044 	addi	r23,r23,1
  802c04:	18831826 	beq	r3,r2,803868 <___vfprintf_internal_r+0x1e98>
  802c08:	d8c14d15 	stw	r3,1332(sp)
  802c0c:	18bff404 	addi	r2,r3,-48
  802c10:	00c00244 	movi	r3,9
  802c14:	18827b36 	bltu	r3,r2,803604 <___vfprintf_internal_r+0x1c34>
  802c18:	1821883a 	mov	r16,r3
  802c1c:	0009883a 	mov	r4,zero
  802c20:	01400284 	movi	r5,10
  802c24:	d9c15115 	stw	r7,1348(sp)
  802c28:	080f9440 	call	80f944 <__mulsi3>
  802c2c:	d9414d17 	ldw	r5,1332(sp)
  802c30:	b9800007 	ldb	r6,0(r23)
  802c34:	d9c15117 	ldw	r7,1348(sp)
  802c38:	1145883a 	add	r2,r2,r5
  802c3c:	113ff404 	addi	r4,r2,-48
  802c40:	30bff404 	addi	r2,r6,-48
  802c44:	d9814d15 	stw	r6,1332(sp)
  802c48:	bdc00044 	addi	r23,r23,1
  802c4c:	80bff42e 	bgeu	r16,r2,802c20 <___vfprintf_internal_r+0x1250>
  802c50:	2027883a 	mov	r19,r4
  802c54:	203bdf0e 	bge	r4,zero,801bd4 <___vfprintf_internal_r+0x204>
  802c58:	04ffffc4 	movi	r19,-1
  802c5c:	003bdd06 	br	801bd4 <___vfprintf_internal_r+0x204>
  802c60:	d8000405 	stb	zero,16(sp)
  802c64:	39800017 	ldw	r6,0(r7)
  802c68:	39c00104 	addi	r7,r7,4
  802c6c:	d9c14015 	stw	r7,1280(sp)
  802c70:	d9814115 	stw	r6,1284(sp)
  802c74:	3001c926 	beq	r6,zero,80339c <___vfprintf_internal_r+0x19cc>
  802c78:	98000e16 	blt	r19,zero,802cb4 <___vfprintf_internal_r+0x12e4>
  802c7c:	d9014117 	ldw	r4,1284(sp)
  802c80:	000b883a 	mov	r5,zero
  802c84:	980d883a 	mov	r6,r19
  802c88:	0807ec40 	call	807ec4 <memchr>
  802c8c:	10025926 	beq	r2,zero,8035f4 <___vfprintf_internal_r+0x1c24>
  802c90:	d8c14117 	ldw	r3,1284(sp)
  802c94:	10cfc83a 	sub	r7,r2,r3
  802c98:	99c19e16 	blt	r19,r7,803314 <___vfprintf_internal_r+0x1944>
  802c9c:	d9c14515 	stw	r7,1300(sp)
  802ca0:	38000916 	blt	r7,zero,802cc8 <___vfprintf_internal_r+0x12f8>
  802ca4:	d8014615 	stw	zero,1304(sp)
  802ca8:	003deb06 	br	802458 <___vfprintf_internal_r+0xa88>
  802cac:	b8c00007 	ldb	r3,0(r23)
  802cb0:	003bc606 	br	801bcc <___vfprintf_internal_r+0x1fc>
  802cb4:	d9014117 	ldw	r4,1284(sp)
  802cb8:	08018140 	call	801814 <strlen>
  802cbc:	d8814515 	stw	r2,1300(sp)
  802cc0:	100f883a 	mov	r7,r2
  802cc4:	103ff70e 	bge	r2,zero,802ca4 <___vfprintf_internal_r+0x12d4>
  802cc8:	d8014515 	stw	zero,1300(sp)
  802ccc:	d8014615 	stw	zero,1304(sp)
  802cd0:	003de106 	br	802458 <___vfprintf_internal_r+0xa88>
  802cd4:	20c03fcc 	andi	r3,r4,255
  802cd8:	00800044 	movi	r2,1
  802cdc:	18802d26 	beq	r3,r2,802d94 <___vfprintf_internal_r+0x13c4>
  802ce0:	18800e36 	bltu	r3,r2,802d1c <___vfprintf_internal_r+0x134c>
  802ce4:	00800084 	movi	r2,2
  802ce8:	1880fa26 	beq	r3,r2,8030d4 <___vfprintf_internal_r+0x1704>
  802cec:	010020b4 	movhi	r4,130
  802cf0:	2130e204 	addi	r4,r4,-15480
  802cf4:	08018140 	call	801814 <strlen>
  802cf8:	100f883a 	mov	r7,r2
  802cfc:	dcc14515 	stw	r19,1300(sp)
  802d00:	9880010e 	bge	r19,r2,802d08 <___vfprintf_internal_r+0x1338>
  802d04:	d8814515 	stw	r2,1300(sp)
  802d08:	008020b4 	movhi	r2,130
  802d0c:	10b0e204 	addi	r2,r2,-15480
  802d10:	dcc14615 	stw	r19,1304(sp)
  802d14:	d8814115 	stw	r2,1284(sp)
  802d18:	003dcf06 	br	802458 <___vfprintf_internal_r+0xa88>
  802d1c:	d9401904 	addi	r5,sp,100
  802d20:	dd000f04 	addi	r20,sp,60
  802d24:	d9414115 	stw	r5,1284(sp)
  802d28:	880a977a 	slli	r5,r17,29
  802d2c:	d9814117 	ldw	r6,1284(sp)
  802d30:	8004d0fa 	srli	r2,r16,3
  802d34:	8806d0fa 	srli	r3,r17,3
  802d38:	810001cc 	andi	r4,r16,7
  802d3c:	2884b03a 	or	r2,r5,r2
  802d40:	31bfffc4 	addi	r6,r6,-1
  802d44:	21000c04 	addi	r4,r4,48
  802d48:	d9814115 	stw	r6,1284(sp)
  802d4c:	10cab03a 	or	r5,r2,r3
  802d50:	31000005 	stb	r4,0(r6)
  802d54:	1021883a 	mov	r16,r2
  802d58:	1823883a 	mov	r17,r3
  802d5c:	283ff21e 	bne	r5,zero,802d28 <___vfprintf_internal_r+0x1358>
  802d60:	d8c14c17 	ldw	r3,1328(sp)
  802d64:	1880004c 	andi	r2,r3,1
  802d68:	1005003a 	cmpeq	r2,r2,zero
  802d6c:	103db31e 	bne	r2,zero,80243c <___vfprintf_internal_r+0xa6c>
  802d70:	20803fcc 	andi	r2,r4,255
  802d74:	1080201c 	xori	r2,r2,128
  802d78:	10bfe004 	addi	r2,r2,-128
  802d7c:	00c00c04 	movi	r3,48
  802d80:	10fdae26 	beq	r2,r3,80243c <___vfprintf_internal_r+0xa6c>
  802d84:	31bfffc4 	addi	r6,r6,-1
  802d88:	d9814115 	stw	r6,1284(sp)
  802d8c:	30c00005 	stb	r3,0(r6)
  802d90:	003daa06 	br	80243c <___vfprintf_internal_r+0xa6c>
  802d94:	88800068 	cmpgeui	r2,r17,1
  802d98:	10002c1e 	bne	r2,zero,802e4c <___vfprintf_internal_r+0x147c>
  802d9c:	8800021e 	bne	r17,zero,802da8 <___vfprintf_internal_r+0x13d8>
  802da0:	00800244 	movi	r2,9
  802da4:	14002936 	bltu	r2,r16,802e4c <___vfprintf_internal_r+0x147c>
  802da8:	d90018c4 	addi	r4,sp,99
  802dac:	dd000f04 	addi	r20,sp,60
  802db0:	d9014115 	stw	r4,1284(sp)
  802db4:	d9014117 	ldw	r4,1284(sp)
  802db8:	80800c04 	addi	r2,r16,48
  802dbc:	20800005 	stb	r2,0(r4)
  802dc0:	003d9e06 	br	80243c <___vfprintf_internal_r+0xa6c>
  802dc4:	dc400d17 	ldw	r17,52(sp)
  802dc8:	070020b4 	movhi	fp,130
  802dcc:	e730e984 	addi	fp,fp,-15450
  802dd0:	9425883a 	add	r18,r18,r16
  802dd4:	8c400044 	addi	r17,r17,1
  802dd8:	008001c4 	movi	r2,7
  802ddc:	1f000015 	stw	fp,0(r3)
  802de0:	1c000115 	stw	r16,4(r3)
  802de4:	dc800e15 	stw	r18,56(sp)
  802de8:	dc400d15 	stw	r17,52(sp)
  802dec:	147ddc16 	blt	r2,r17,802560 <___vfprintf_internal_r+0xb90>
  802df0:	18c00204 	addi	r3,r3,8
  802df4:	003c7406 	br	801fc8 <___vfprintf_internal_r+0x5f8>
  802df8:	01000084 	movi	r4,2
  802dfc:	d8000405 	stb	zero,16(sp)
  802e00:	003d8106 	br	802408 <___vfprintf_internal_r+0xa38>
  802e04:	d9814c17 	ldw	r6,1328(sp)
  802e08:	30c4703a 	and	r2,r6,r3
  802e0c:	1005003a 	cmpeq	r2,r2,zero
  802e10:	103cb326 	beq	r2,zero,8020e0 <___vfprintf_internal_r+0x710>
  802e14:	d9014117 	ldw	r4,1284(sp)
  802e18:	94800044 	addi	r18,r18,1
  802e1c:	8c400044 	addi	r17,r17,1
  802e20:	008001c4 	movi	r2,7
  802e24:	a9000015 	stw	r4,0(r21)
  802e28:	a8c00115 	stw	r3,4(r21)
  802e2c:	dc800e15 	stw	r18,56(sp)
  802e30:	dc400d15 	stw	r17,52(sp)
  802e34:	147e6016 	blt	r2,r17,8027b8 <___vfprintf_internal_r+0xde8>
  802e38:	acc00204 	addi	r19,r21,8
  802e3c:	003cd106 	br	802184 <___vfprintf_internal_r+0x7b4>
  802e40:	070020b4 	movhi	fp,130
  802e44:	e730e984 	addi	fp,fp,-15450
  802e48:	003c4906 	br	801f70 <___vfprintf_internal_r+0x5a0>
  802e4c:	dd000f04 	addi	r20,sp,60
  802e50:	dc801904 	addi	r18,sp,100
  802e54:	8009883a 	mov	r4,r16
  802e58:	880b883a 	mov	r5,r17
  802e5c:	01800284 	movi	r6,10
  802e60:	000f883a 	mov	r7,zero
  802e64:	080de080 	call	80de08 <__umoddi3>
  802e68:	12000c04 	addi	r8,r2,48
  802e6c:	94bfffc4 	addi	r18,r18,-1
  802e70:	8009883a 	mov	r4,r16
  802e74:	880b883a 	mov	r5,r17
  802e78:	01800284 	movi	r6,10
  802e7c:	000f883a 	mov	r7,zero
  802e80:	92000005 	stb	r8,0(r18)
  802e84:	080d79c0 	call	80d79c <__udivdi3>
  802e88:	1009883a 	mov	r4,r2
  802e8c:	1021883a 	mov	r16,r2
  802e90:	18800068 	cmpgeui	r2,r3,1
  802e94:	1823883a 	mov	r17,r3
  802e98:	103fee1e 	bne	r2,zero,802e54 <___vfprintf_internal_r+0x1484>
  802e9c:	1800021e 	bne	r3,zero,802ea8 <___vfprintf_internal_r+0x14d8>
  802ea0:	00800244 	movi	r2,9
  802ea4:	113feb36 	bltu	r2,r4,802e54 <___vfprintf_internal_r+0x1484>
  802ea8:	94bfffc4 	addi	r18,r18,-1
  802eac:	dc814115 	stw	r18,1284(sp)
  802eb0:	003fc006 	br	802db4 <___vfprintf_internal_r+0x13e4>
  802eb4:	d9014c17 	ldw	r4,1328(sp)
  802eb8:	2080004c 	andi	r2,r4,1
  802ebc:	10009a1e 	bne	r2,zero,803128 <___vfprintf_internal_r+0x1758>
  802ec0:	d9401904 	addi	r5,sp,100
  802ec4:	dd000f04 	addi	r20,sp,60
  802ec8:	d9414115 	stw	r5,1284(sp)
  802ecc:	003d5b06 	br	80243c <___vfprintf_internal_r+0xa6c>
  802ed0:	d9014f17 	ldw	r4,1340(sp)
  802ed4:	b00b883a 	mov	r5,r22
  802ed8:	d9800c04 	addi	r6,sp,48
  802edc:	08019780 	call	801978 <__sprint_r>
  802ee0:	103c731e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802ee4:	dc800e17 	ldw	r18,56(sp)
  802ee8:	d8c01904 	addi	r3,sp,100
  802eec:	003cf906 	br	8022d4 <___vfprintf_internal_r+0x904>
  802ef0:	d8c14c17 	ldw	r3,1328(sp)
  802ef4:	1880040c 	andi	r2,r3,16
  802ef8:	1000711e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x16f0>
  802efc:	d9014c17 	ldw	r4,1328(sp)
  802f00:	2080100c 	andi	r2,r4,64
  802f04:	10006e26 	beq	r2,zero,8030c0 <___vfprintf_internal_r+0x16f0>
  802f08:	3c00000b 	ldhu	r16,0(r7)
  802f0c:	0023883a 	mov	r17,zero
  802f10:	39c00104 	addi	r7,r7,4
  802f14:	d9c14015 	stw	r7,1280(sp)
  802f18:	003efa06 	br	802b04 <___vfprintf_internal_r+0x1134>
  802f1c:	dc400d17 	ldw	r17,52(sp)
  802f20:	070020b4 	movhi	fp,130
  802f24:	e730e984 	addi	fp,fp,-15450
  802f28:	9425883a 	add	r18,r18,r16
  802f2c:	8c400044 	addi	r17,r17,1
  802f30:	008001c4 	movi	r2,7
  802f34:	1f000015 	stw	fp,0(r3)
  802f38:	1c000115 	stw	r16,4(r3)
  802f3c:	dc800e15 	stw	r18,56(sp)
  802f40:	dc400d15 	stw	r17,52(sp)
  802f44:	147d7016 	blt	r2,r17,802508 <___vfprintf_internal_r+0xb38>
  802f48:	18c00204 	addi	r3,r3,8
  802f4c:	003d7506 	br	802524 <___vfprintf_internal_r+0xb54>
  802f50:	dc800e17 	ldw	r18,56(sp)
  802f54:	dc400d17 	ldw	r17,52(sp)
  802f58:	070020b4 	movhi	fp,130
  802f5c:	e730ed84 	addi	fp,fp,-15434
  802f60:	003bba06 	br	801e4c <___vfprintf_internal_r+0x47c>
  802f64:	d9014f17 	ldw	r4,1340(sp)
  802f68:	b00b883a 	mov	r5,r22
  802f6c:	d9800c04 	addi	r6,sp,48
  802f70:	08019780 	call	801978 <__sprint_r>
  802f74:	103c4e1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  802f78:	dc800e17 	ldw	r18,56(sp)
  802f7c:	d8c01904 	addi	r3,sp,100
  802f80:	003ce306 	br	802310 <___vfprintf_internal_r+0x940>
  802f84:	3c000017 	ldw	r16,0(r7)
  802f88:	0009883a 	mov	r4,zero
  802f8c:	39c00104 	addi	r7,r7,4
  802f90:	0023883a 	mov	r17,zero
  802f94:	d9c14015 	stw	r7,1280(sp)
  802f98:	d8000405 	stb	zero,16(sp)
  802f9c:	003d1a06 	br	802408 <___vfprintf_internal_r+0xa38>
  802fa0:	38800017 	ldw	r2,0(r7)
  802fa4:	39c00104 	addi	r7,r7,4
  802fa8:	d9c14015 	stw	r7,1280(sp)
  802fac:	1023d7fa 	srai	r17,r2,31
  802fb0:	1021883a 	mov	r16,r2
  802fb4:	003d1206 	br	802400 <___vfprintf_internal_r+0xa30>
  802fb8:	3c000017 	ldw	r16,0(r7)
  802fbc:	01000044 	movi	r4,1
  802fc0:	39c00104 	addi	r7,r7,4
  802fc4:	0023883a 	mov	r17,zero
  802fc8:	d9c14015 	stw	r7,1280(sp)
  802fcc:	d8000405 	stb	zero,16(sp)
  802fd0:	003d0d06 	br	802408 <___vfprintf_internal_r+0xa38>
  802fd4:	008020b4 	movhi	r2,130
  802fd8:	10b0e904 	addi	r2,r2,-15452
  802fdc:	94800044 	addi	r18,r18,1
  802fe0:	8c400044 	addi	r17,r17,1
  802fe4:	a8800015 	stw	r2,0(r21)
  802fe8:	00c00044 	movi	r3,1
  802fec:	008001c4 	movi	r2,7
  802ff0:	a8c00115 	stw	r3,4(r21)
  802ff4:	dc800e15 	stw	r18,56(sp)
  802ff8:	dc400d15 	stw	r17,52(sp)
  802ffc:	1440ca16 	blt	r2,r17,803328 <___vfprintf_internal_r+0x1958>
  803000:	a8c00204 	addi	r3,r21,8
  803004:	2000061e 	bne	r4,zero,803020 <___vfprintf_internal_r+0x1650>
  803008:	d9414717 	ldw	r5,1308(sp)
  80300c:	2800041e 	bne	r5,zero,803020 <___vfprintf_internal_r+0x1650>
  803010:	d9814c17 	ldw	r6,1328(sp)
  803014:	3080004c 	andi	r2,r6,1
  803018:	1005003a 	cmpeq	r2,r2,zero
  80301c:	103bea1e 	bne	r2,zero,801fc8 <___vfprintf_internal_r+0x5f8>
  803020:	00800044 	movi	r2,1
  803024:	dc400d17 	ldw	r17,52(sp)
  803028:	18800115 	stw	r2,4(r3)
  80302c:	d8814917 	ldw	r2,1316(sp)
  803030:	94800044 	addi	r18,r18,1
  803034:	8c400044 	addi	r17,r17,1
  803038:	18800015 	stw	r2,0(r3)
  80303c:	008001c4 	movi	r2,7
  803040:	dc800e15 	stw	r18,56(sp)
  803044:	dc400d15 	stw	r17,52(sp)
  803048:	1440ca16 	blt	r2,r17,803374 <___vfprintf_internal_r+0x19a4>
  80304c:	18c00204 	addi	r3,r3,8
  803050:	0121c83a 	sub	r16,zero,r4
  803054:	0400500e 	bge	zero,r16,803198 <___vfprintf_internal_r+0x17c8>
  803058:	00800404 	movi	r2,16
  80305c:	1400800e 	bge	r2,r16,803260 <___vfprintf_internal_r+0x1890>
  803060:	1027883a 	mov	r19,r2
  803064:	070020b4 	movhi	fp,130
  803068:	e730e984 	addi	fp,fp,-15450
  80306c:	050001c4 	movi	r20,7
  803070:	00000306 	br	803080 <___vfprintf_internal_r+0x16b0>
  803074:	18c00204 	addi	r3,r3,8
  803078:	843ffc04 	addi	r16,r16,-16
  80307c:	9c007a0e 	bge	r19,r16,803268 <___vfprintf_internal_r+0x1898>
  803080:	94800404 	addi	r18,r18,16
  803084:	8c400044 	addi	r17,r17,1
  803088:	1f000015 	stw	fp,0(r3)
  80308c:	1cc00115 	stw	r19,4(r3)
  803090:	dc800e15 	stw	r18,56(sp)
  803094:	dc400d15 	stw	r17,52(sp)
  803098:	a47ff60e 	bge	r20,r17,803074 <___vfprintf_internal_r+0x16a4>
  80309c:	d9014f17 	ldw	r4,1340(sp)
  8030a0:	b00b883a 	mov	r5,r22
  8030a4:	d9800c04 	addi	r6,sp,48
  8030a8:	08019780 	call	801978 <__sprint_r>
  8030ac:	103c001e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8030b0:	dc800e17 	ldw	r18,56(sp)
  8030b4:	dc400d17 	ldw	r17,52(sp)
  8030b8:	d8c01904 	addi	r3,sp,100
  8030bc:	003fee06 	br	803078 <___vfprintf_internal_r+0x16a8>
  8030c0:	3c000017 	ldw	r16,0(r7)
  8030c4:	0023883a 	mov	r17,zero
  8030c8:	39c00104 	addi	r7,r7,4
  8030cc:	d9c14015 	stw	r7,1280(sp)
  8030d0:	003e8c06 	br	802b04 <___vfprintf_internal_r+0x1134>
  8030d4:	d9401904 	addi	r5,sp,100
  8030d8:	dd000f04 	addi	r20,sp,60
  8030dc:	d9414115 	stw	r5,1284(sp)
  8030e0:	d9814417 	ldw	r6,1296(sp)
  8030e4:	880a973a 	slli	r5,r17,28
  8030e8:	8004d13a 	srli	r2,r16,4
  8030ec:	810003cc 	andi	r4,r16,15
  8030f0:	3109883a 	add	r4,r6,r4
  8030f4:	2884b03a 	or	r2,r5,r2
  8030f8:	21400003 	ldbu	r5,0(r4)
  8030fc:	d9014117 	ldw	r4,1284(sp)
  803100:	8806d13a 	srli	r3,r17,4
  803104:	1021883a 	mov	r16,r2
  803108:	213fffc4 	addi	r4,r4,-1
  80310c:	d9014115 	stw	r4,1284(sp)
  803110:	d9814117 	ldw	r6,1284(sp)
  803114:	10c8b03a 	or	r4,r2,r3
  803118:	1823883a 	mov	r17,r3
  80311c:	31400005 	stb	r5,0(r6)
  803120:	203fef1e 	bne	r4,zero,8030e0 <___vfprintf_internal_r+0x1710>
  803124:	003cc506 	br	80243c <___vfprintf_internal_r+0xa6c>
  803128:	00800c04 	movi	r2,48
  80312c:	d98018c4 	addi	r6,sp,99
  803130:	dd000f04 	addi	r20,sp,60
  803134:	d88018c5 	stb	r2,99(sp)
  803138:	d9814115 	stw	r6,1284(sp)
  80313c:	003cbf06 	br	80243c <___vfprintf_internal_r+0xa6c>
  803140:	dc400d17 	ldw	r17,52(sp)
  803144:	070020b4 	movhi	fp,130
  803148:	e730ed84 	addi	fp,fp,-15434
  80314c:	003bc106 	br	802054 <___vfprintf_internal_r+0x684>
  803150:	d9414c17 	ldw	r5,1328(sp)
  803154:	2880040c 	andi	r2,r5,16
  803158:	10007c26 	beq	r2,zero,80334c <___vfprintf_internal_r+0x197c>
  80315c:	38800017 	ldw	r2,0(r7)
  803160:	39c00104 	addi	r7,r7,4
  803164:	d9c14015 	stw	r7,1280(sp)
  803168:	d9814b17 	ldw	r6,1324(sp)
  80316c:	d9c14017 	ldw	r7,1280(sp)
  803170:	11800015 	stw	r6,0(r2)
  803174:	003a7206 	br	801b40 <___vfprintf_internal_r+0x170>
  803178:	d9014f17 	ldw	r4,1340(sp)
  80317c:	b00b883a 	mov	r5,r22
  803180:	d9800c04 	addi	r6,sp,48
  803184:	08019780 	call	801978 <__sprint_r>
  803188:	103bc91e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80318c:	dc800e17 	ldw	r18,56(sp)
  803190:	dc400d17 	ldw	r17,52(sp)
  803194:	d8c01904 	addi	r3,sp,100
  803198:	d9014717 	ldw	r4,1308(sp)
  80319c:	d9414117 	ldw	r5,1284(sp)
  8031a0:	8c400044 	addi	r17,r17,1
  8031a4:	9125883a 	add	r18,r18,r4
  8031a8:	008001c4 	movi	r2,7
  8031ac:	19400015 	stw	r5,0(r3)
  8031b0:	19000115 	stw	r4,4(r3)
  8031b4:	dc800e15 	stw	r18,56(sp)
  8031b8:	dc400d15 	stw	r17,52(sp)
  8031bc:	147ce816 	blt	r2,r17,802560 <___vfprintf_internal_r+0xb90>
  8031c0:	18c00204 	addi	r3,r3,8
  8031c4:	003b8006 	br	801fc8 <___vfprintf_internal_r+0x5f8>
  8031c8:	38c00017 	ldw	r3,0(r7)
  8031cc:	39000204 	addi	r4,r7,8
  8031d0:	d9014015 	stw	r4,1280(sp)
  8031d4:	d8c14215 	stw	r3,1288(sp)
  8031d8:	39c00117 	ldw	r7,4(r7)
  8031dc:	d9c14315 	stw	r7,1292(sp)
  8031e0:	003e1a06 	br	802a4c <___vfprintf_internal_r+0x107c>
  8031e4:	0005883a 	mov	r2,zero
  8031e8:	1409c83a 	sub	r4,r2,r16
  8031ec:	1105803a 	cmpltu	r2,r2,r4
  8031f0:	044bc83a 	sub	r5,zero,r17
  8031f4:	2885c83a 	sub	r2,r5,r2
  8031f8:	2021883a 	mov	r16,r4
  8031fc:	1023883a 	mov	r17,r2
  803200:	01000044 	movi	r4,1
  803204:	00800b44 	movi	r2,45
  803208:	d8800405 	stb	r2,16(sp)
  80320c:	003c7e06 	br	802408 <___vfprintf_internal_r+0xa38>
  803210:	d9014f17 	ldw	r4,1340(sp)
  803214:	b00b883a 	mov	r5,r22
  803218:	d9800c04 	addi	r6,sp,48
  80321c:	08019780 	call	801978 <__sprint_r>
  803220:	103ba31e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  803224:	dc800e17 	ldw	r18,56(sp)
  803228:	dc400d17 	ldw	r17,52(sp)
  80322c:	d9000517 	ldw	r4,20(sp)
  803230:	d9401904 	addi	r5,sp,100
  803234:	003da106 	br	8028bc <___vfprintf_internal_r+0xeec>
  803238:	d9014f17 	ldw	r4,1340(sp)
  80323c:	b00b883a 	mov	r5,r22
  803240:	d9800c04 	addi	r6,sp,48
  803244:	08019780 	call	801978 <__sprint_r>
  803248:	103b991e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80324c:	dc800e17 	ldw	r18,56(sp)
  803250:	dc400d17 	ldw	r17,52(sp)
  803254:	d9000517 	ldw	r4,20(sp)
  803258:	d8c01904 	addi	r3,sp,100
  80325c:	003d8b06 	br	80288c <___vfprintf_internal_r+0xebc>
  803260:	070020b4 	movhi	fp,130
  803264:	e730e984 	addi	fp,fp,-15450
  803268:	9425883a 	add	r18,r18,r16
  80326c:	8c400044 	addi	r17,r17,1
  803270:	008001c4 	movi	r2,7
  803274:	1f000015 	stw	fp,0(r3)
  803278:	1c000115 	stw	r16,4(r3)
  80327c:	dc800e15 	stw	r18,56(sp)
  803280:	dc400d15 	stw	r17,52(sp)
  803284:	147fbc16 	blt	r2,r17,803178 <___vfprintf_internal_r+0x17a8>
  803288:	18c00204 	addi	r3,r3,8
  80328c:	003fc206 	br	803198 <___vfprintf_internal_r+0x17c8>
  803290:	d9014f17 	ldw	r4,1340(sp)
  803294:	b00b883a 	mov	r5,r22
  803298:	d9800c04 	addi	r6,sp,48
  80329c:	08019780 	call	801978 <__sprint_r>
  8032a0:	103b831e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8032a4:	dc800e17 	ldw	r18,56(sp)
  8032a8:	d9000517 	ldw	r4,20(sp)
  8032ac:	d8c01904 	addi	r3,sp,100
  8032b0:	003cfc06 	br	8026a4 <___vfprintf_internal_r+0xcd4>
  8032b4:	070020b4 	movhi	fp,130
  8032b8:	e730e984 	addi	fp,fp,-15450
  8032bc:	003bde06 	br	802238 <___vfprintf_internal_r+0x868>
  8032c0:	008020b4 	movhi	r2,130
  8032c4:	10b0d804 	addi	r2,r2,-15520
  8032c8:	d8814115 	stw	r2,1284(sp)
  8032cc:	003def06 	br	802a8c <___vfprintf_internal_r+0x10bc>
  8032d0:	d9014217 	ldw	r4,1288(sp)
  8032d4:	d9414317 	ldw	r5,1292(sp)
  8032d8:	0809c4c0 	call	809c4c <__isnand>
  8032dc:	10003926 	beq	r2,zero,8033c4 <___vfprintf_internal_r+0x19f4>
  8032e0:	d9414d17 	ldw	r5,1332(sp)
  8032e4:	008011c4 	movi	r2,71
  8032e8:	1140ce16 	blt	r2,r5,803624 <___vfprintf_internal_r+0x1c54>
  8032ec:	018020b4 	movhi	r6,130
  8032f0:	31b0d904 	addi	r6,r6,-15516
  8032f4:	d9814115 	stw	r6,1284(sp)
  8032f8:	003de406 	br	802a8c <___vfprintf_internal_r+0x10bc>
  8032fc:	d9014c17 	ldw	r4,1328(sp)
  803300:	bdc00044 	addi	r23,r23,1
  803304:	b8c00007 	ldb	r3,0(r23)
  803308:	21000814 	ori	r4,r4,32
  80330c:	d9014c15 	stw	r4,1328(sp)
  803310:	003a2e06 	br	801bcc <___vfprintf_internal_r+0x1fc>
  803314:	dcc14515 	stw	r19,1300(sp)
  803318:	98011016 	blt	r19,zero,80375c <___vfprintf_internal_r+0x1d8c>
  80331c:	980f883a 	mov	r7,r19
  803320:	d8014615 	stw	zero,1304(sp)
  803324:	003c4c06 	br	802458 <___vfprintf_internal_r+0xa88>
  803328:	d9014f17 	ldw	r4,1340(sp)
  80332c:	b00b883a 	mov	r5,r22
  803330:	d9800c04 	addi	r6,sp,48
  803334:	08019780 	call	801978 <__sprint_r>
  803338:	103b5d1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  80333c:	dc800e17 	ldw	r18,56(sp)
  803340:	d9000517 	ldw	r4,20(sp)
  803344:	d8c01904 	addi	r3,sp,100
  803348:	003f2e06 	br	803004 <___vfprintf_internal_r+0x1634>
  80334c:	d8c14c17 	ldw	r3,1328(sp)
  803350:	1880100c 	andi	r2,r3,64
  803354:	1000a026 	beq	r2,zero,8035d8 <___vfprintf_internal_r+0x1c08>
  803358:	38800017 	ldw	r2,0(r7)
  80335c:	39c00104 	addi	r7,r7,4
  803360:	d9c14015 	stw	r7,1280(sp)
  803364:	d9014b17 	ldw	r4,1324(sp)
  803368:	d9c14017 	ldw	r7,1280(sp)
  80336c:	1100000d 	sth	r4,0(r2)
  803370:	0039f306 	br	801b40 <___vfprintf_internal_r+0x170>
  803374:	d9014f17 	ldw	r4,1340(sp)
  803378:	b00b883a 	mov	r5,r22
  80337c:	d9800c04 	addi	r6,sp,48
  803380:	08019780 	call	801978 <__sprint_r>
  803384:	103b4a1e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  803388:	dc800e17 	ldw	r18,56(sp)
  80338c:	dc400d17 	ldw	r17,52(sp)
  803390:	d9000517 	ldw	r4,20(sp)
  803394:	d8c01904 	addi	r3,sp,100
  803398:	003f2d06 	br	803050 <___vfprintf_internal_r+0x1680>
  80339c:	00800184 	movi	r2,6
  8033a0:	14c09a36 	bltu	r2,r19,80360c <___vfprintf_internal_r+0x1c3c>
  8033a4:	dcc14515 	stw	r19,1300(sp)
  8033a8:	9800010e 	bge	r19,zero,8033b0 <___vfprintf_internal_r+0x19e0>
  8033ac:	d8014515 	stw	zero,1300(sp)
  8033b0:	008020b4 	movhi	r2,130
  8033b4:	10b0db04 	addi	r2,r2,-15508
  8033b8:	980f883a 	mov	r7,r19
  8033bc:	d8814115 	stw	r2,1284(sp)
  8033c0:	003a7206 	br	801d8c <___vfprintf_internal_r+0x3bc>
  8033c4:	00bfffc4 	movi	r2,-1
  8033c8:	9880e226 	beq	r19,r2,803754 <___vfprintf_internal_r+0x1d84>
  8033cc:	d9414d17 	ldw	r5,1332(sp)
  8033d0:	008019c4 	movi	r2,103
  8033d4:	2880dc26 	beq	r5,r2,803748 <___vfprintf_internal_r+0x1d78>
  8033d8:	008011c4 	movi	r2,71
  8033dc:	2880da26 	beq	r5,r2,803748 <___vfprintf_internal_r+0x1d78>
  8033e0:	d9414c17 	ldw	r5,1328(sp)
  8033e4:	d9014317 	ldw	r4,1292(sp)
  8033e8:	d9814217 	ldw	r6,1288(sp)
  8033ec:	29404014 	ori	r5,r5,256
  8033f0:	d9414c15 	stw	r5,1328(sp)
  8033f4:	2000cc16 	blt	r4,zero,803728 <___vfprintf_internal_r+0x1d58>
  8033f8:	3021883a 	mov	r16,r6
  8033fc:	2023883a 	mov	r17,r4
  803400:	0039883a 	mov	fp,zero
  803404:	d9414d17 	ldw	r5,1332(sp)
  803408:	00801984 	movi	r2,102
  80340c:	2880b726 	beq	r5,r2,8036ec <___vfprintf_internal_r+0x1d1c>
  803410:	00801184 	movi	r2,70
  803414:	2880b526 	beq	r5,r2,8036ec <___vfprintf_internal_r+0x1d1c>
  803418:	00801944 	movi	r2,101
  80341c:	2880c826 	beq	r5,r2,803740 <___vfprintf_internal_r+0x1d70>
  803420:	00801144 	movi	r2,69
  803424:	2880c626 	beq	r5,r2,803740 <___vfprintf_internal_r+0x1d70>
  803428:	9829883a 	mov	r20,r19
  80342c:	d9014f17 	ldw	r4,1340(sp)
  803430:	d8800504 	addi	r2,sp,20
  803434:	880d883a 	mov	r6,r17
  803438:	d8800115 	stw	r2,4(sp)
  80343c:	d8c00604 	addi	r3,sp,24
  803440:	d8800704 	addi	r2,sp,28
  803444:	800b883a 	mov	r5,r16
  803448:	01c00084 	movi	r7,2
  80344c:	d8c00215 	stw	r3,8(sp)
  803450:	d8800315 	stw	r2,12(sp)
  803454:	dd000015 	stw	r20,0(sp)
  803458:	08053c00 	call	8053c0 <_dtoa_r>
  80345c:	d9814d17 	ldw	r6,1332(sp)
  803460:	d8814115 	stw	r2,1284(sp)
  803464:	008019c4 	movi	r2,103
  803468:	30809526 	beq	r6,r2,8036c0 <___vfprintf_internal_r+0x1cf0>
  80346c:	d8c14d17 	ldw	r3,1332(sp)
  803470:	008011c4 	movi	r2,71
  803474:	18809226 	beq	r3,r2,8036c0 <___vfprintf_internal_r+0x1cf0>
  803478:	d9414117 	ldw	r5,1284(sp)
  80347c:	d9814d17 	ldw	r6,1332(sp)
  803480:	00801984 	movi	r2,102
  803484:	2d25883a 	add	r18,r5,r20
  803488:	30808626 	beq	r6,r2,8036a4 <___vfprintf_internal_r+0x1cd4>
  80348c:	00801184 	movi	r2,70
  803490:	30808426 	beq	r6,r2,8036a4 <___vfprintf_internal_r+0x1cd4>
  803494:	000d883a 	mov	r6,zero
  803498:	000f883a 	mov	r7,zero
  80349c:	880b883a 	mov	r5,r17
  8034a0:	8009883a 	mov	r4,r16
  8034a4:	080f0f00 	call	80f0f0 <__eqdf2>
  8034a8:	1000751e 	bne	r2,zero,803680 <___vfprintf_internal_r+0x1cb0>
  8034ac:	9005883a 	mov	r2,r18
  8034b0:	dc800715 	stw	r18,28(sp)
  8034b4:	d9014117 	ldw	r4,1284(sp)
  8034b8:	d9414d17 	ldw	r5,1332(sp)
  8034bc:	00c019c4 	movi	r3,103
  8034c0:	1125c83a 	sub	r18,r2,r4
  8034c4:	28c06826 	beq	r5,r3,803668 <___vfprintf_internal_r+0x1c98>
  8034c8:	008011c4 	movi	r2,71
  8034cc:	28806626 	beq	r5,r2,803668 <___vfprintf_internal_r+0x1c98>
  8034d0:	d9000517 	ldw	r4,20(sp)
  8034d4:	d8c14d17 	ldw	r3,1332(sp)
  8034d8:	00801944 	movi	r2,101
  8034dc:	10c05516 	blt	r2,r3,803634 <___vfprintf_internal_r+0x1c64>
  8034e0:	213fffc4 	addi	r4,r4,-1
  8034e4:	d9000515 	stw	r4,20(sp)
  8034e8:	d8c00805 	stb	r3,32(sp)
  8034ec:	2021883a 	mov	r16,r4
  8034f0:	2000c116 	blt	r4,zero,8037f8 <___vfprintf_internal_r+0x1e28>
  8034f4:	00800ac4 	movi	r2,43
  8034f8:	d8800845 	stb	r2,33(sp)
  8034fc:	00800244 	movi	r2,9
  803500:	1400af0e 	bge	r2,r16,8037c0 <___vfprintf_internal_r+0x1df0>
  803504:	1027883a 	mov	r19,r2
  803508:	dc400b84 	addi	r17,sp,46
  80350c:	8009883a 	mov	r4,r16
  803510:	01400284 	movi	r5,10
  803514:	080f8d40 	call	80f8d4 <__modsi3>
  803518:	10800c04 	addi	r2,r2,48
  80351c:	8c7fffc4 	addi	r17,r17,-1
  803520:	8009883a 	mov	r4,r16
  803524:	01400284 	movi	r5,10
  803528:	88800005 	stb	r2,0(r17)
  80352c:	080f8740 	call	80f874 <__divsi3>
  803530:	1021883a 	mov	r16,r2
  803534:	98bff516 	blt	r19,r2,80350c <___vfprintf_internal_r+0x1b3c>
  803538:	10c00c04 	addi	r3,r2,48
  80353c:	d88009c4 	addi	r2,sp,39
  803540:	108001c4 	addi	r2,r2,7
  803544:	897fffc4 	addi	r5,r17,-1
  803548:	88ffffc5 	stb	r3,-1(r17)
  80354c:	2880a72e 	bgeu	r5,r2,8037ec <___vfprintf_internal_r+0x1e1c>
  803550:	1009883a 	mov	r4,r2
  803554:	d9800804 	addi	r6,sp,32
  803558:	d8c00884 	addi	r3,sp,34
  80355c:	28800003 	ldbu	r2,0(r5)
  803560:	29400044 	addi	r5,r5,1
  803564:	18800005 	stb	r2,0(r3)
  803568:	18c00044 	addi	r3,r3,1
  80356c:	293ffb36 	bltu	r5,r4,80355c <___vfprintf_internal_r+0x1b8c>
  803570:	1987c83a 	sub	r3,r3,r6
  803574:	00800044 	movi	r2,1
  803578:	d8c14815 	stw	r3,1312(sp)
  80357c:	90cf883a 	add	r7,r18,r3
  803580:	1480960e 	bge	r2,r18,8037dc <___vfprintf_internal_r+0x1e0c>
  803584:	39c00044 	addi	r7,r7,1
  803588:	d9c14515 	stw	r7,1300(sp)
  80358c:	38003416 	blt	r7,zero,803660 <___vfprintf_internal_r+0x1c90>
  803590:	e0803fcc 	andi	r2,fp,255
  803594:	1080201c 	xori	r2,r2,128
  803598:	10bfe004 	addi	r2,r2,-128
  80359c:	10004e26 	beq	r2,zero,8036d8 <___vfprintf_internal_r+0x1d08>
  8035a0:	00800b44 	movi	r2,45
  8035a4:	dc814715 	stw	r18,1308(sp)
  8035a8:	d8014615 	stw	zero,1304(sp)
  8035ac:	d8800405 	stb	r2,16(sp)
  8035b0:	003bab06 	br	802460 <___vfprintf_internal_r+0xa90>
  8035b4:	00800b44 	movi	r2,45
  8035b8:	d8800405 	stb	r2,16(sp)
  8035bc:	003d2d06 	br	802a74 <___vfprintf_internal_r+0x10a4>
  8035c0:	d9014f17 	ldw	r4,1340(sp)
  8035c4:	b00b883a 	mov	r5,r22
  8035c8:	d9800c04 	addi	r6,sp,48
  8035cc:	08019780 	call	801978 <__sprint_r>
  8035d0:	103ab71e 	bne	r2,zero,8020b0 <___vfprintf_internal_r+0x6e0>
  8035d4:	003ab506 	br	8020ac <___vfprintf_internal_r+0x6dc>
  8035d8:	38800017 	ldw	r2,0(r7)
  8035dc:	39c00104 	addi	r7,r7,4
  8035e0:	d9c14015 	stw	r7,1280(sp)
  8035e4:	d9414b17 	ldw	r5,1324(sp)
  8035e8:	d9c14017 	ldw	r7,1280(sp)
  8035ec:	11400015 	stw	r5,0(r2)
  8035f0:	00395306 	br	801b40 <___vfprintf_internal_r+0x170>
  8035f4:	980f883a 	mov	r7,r19
  8035f8:	dcc14515 	stw	r19,1300(sp)
  8035fc:	d8014615 	stw	zero,1304(sp)
  803600:	003b9506 	br	802458 <___vfprintf_internal_r+0xa88>
  803604:	0027883a 	mov	r19,zero
  803608:	00397206 	br	801bd4 <___vfprintf_internal_r+0x204>
  80360c:	00c020b4 	movhi	r3,130
  803610:	18f0db04 	addi	r3,r3,-15508
  803614:	100f883a 	mov	r7,r2
  803618:	d8814515 	stw	r2,1300(sp)
  80361c:	d8c14115 	stw	r3,1284(sp)
  803620:	0039da06 	br	801d8c <___vfprintf_internal_r+0x3bc>
  803624:	008020b4 	movhi	r2,130
  803628:	10b0da04 	addi	r2,r2,-15512
  80362c:	d8814115 	stw	r2,1284(sp)
  803630:	003d1606 	br	802a8c <___vfprintf_internal_r+0x10bc>
  803634:	d9414d17 	ldw	r5,1332(sp)
  803638:	00801984 	movi	r2,102
  80363c:	28804926 	beq	r5,r2,803764 <___vfprintf_internal_r+0x1d94>
  803640:	200f883a 	mov	r7,r4
  803644:	24805716 	blt	r4,r18,8037a4 <___vfprintf_internal_r+0x1dd4>
  803648:	d9414c17 	ldw	r5,1328(sp)
  80364c:	2880004c 	andi	r2,r5,1
  803650:	10000126 	beq	r2,zero,803658 <___vfprintf_internal_r+0x1c88>
  803654:	21c00044 	addi	r7,r4,1
  803658:	d9c14515 	stw	r7,1300(sp)
  80365c:	383fcc0e 	bge	r7,zero,803590 <___vfprintf_internal_r+0x1bc0>
  803660:	d8014515 	stw	zero,1300(sp)
  803664:	003fca06 	br	803590 <___vfprintf_internal_r+0x1bc0>
  803668:	d9000517 	ldw	r4,20(sp)
  80366c:	00bfff04 	movi	r2,-4
  803670:	1100480e 	bge	r2,r4,803794 <___vfprintf_internal_r+0x1dc4>
  803674:	99004716 	blt	r19,r4,803794 <___vfprintf_internal_r+0x1dc4>
  803678:	d8c14d15 	stw	r3,1332(sp)
  80367c:	003ff006 	br	803640 <___vfprintf_internal_r+0x1c70>
  803680:	d8800717 	ldw	r2,28(sp)
  803684:	14bf8b2e 	bgeu	r2,r18,8034b4 <___vfprintf_internal_r+0x1ae4>
  803688:	9007883a 	mov	r3,r18
  80368c:	01000c04 	movi	r4,48
  803690:	11000005 	stb	r4,0(r2)
  803694:	10800044 	addi	r2,r2,1
  803698:	d8800715 	stw	r2,28(sp)
  80369c:	18bffc1e 	bne	r3,r2,803690 <___vfprintf_internal_r+0x1cc0>
  8036a0:	003f8406 	br	8034b4 <___vfprintf_internal_r+0x1ae4>
  8036a4:	d8814117 	ldw	r2,1284(sp)
  8036a8:	10c00007 	ldb	r3,0(r2)
  8036ac:	00800c04 	movi	r2,48
  8036b0:	18805b26 	beq	r3,r2,803820 <___vfprintf_internal_r+0x1e50>
  8036b4:	d9000517 	ldw	r4,20(sp)
  8036b8:	9125883a 	add	r18,r18,r4
  8036bc:	003f7506 	br	803494 <___vfprintf_internal_r+0x1ac4>
  8036c0:	d9014c17 	ldw	r4,1328(sp)
  8036c4:	2080004c 	andi	r2,r4,1
  8036c8:	1005003a 	cmpeq	r2,r2,zero
  8036cc:	103f6a26 	beq	r2,zero,803478 <___vfprintf_internal_r+0x1aa8>
  8036d0:	d8800717 	ldw	r2,28(sp)
  8036d4:	003f7706 	br	8034b4 <___vfprintf_internal_r+0x1ae4>
  8036d8:	d9c14515 	stw	r7,1300(sp)
  8036dc:	38004d16 	blt	r7,zero,803814 <___vfprintf_internal_r+0x1e44>
  8036e0:	dc814715 	stw	r18,1308(sp)
  8036e4:	d8014615 	stw	zero,1304(sp)
  8036e8:	003b5b06 	br	802458 <___vfprintf_internal_r+0xa88>
  8036ec:	d9014f17 	ldw	r4,1340(sp)
  8036f0:	d8800504 	addi	r2,sp,20
  8036f4:	d8800115 	stw	r2,4(sp)
  8036f8:	d8c00604 	addi	r3,sp,24
  8036fc:	d8800704 	addi	r2,sp,28
  803700:	800b883a 	mov	r5,r16
  803704:	880d883a 	mov	r6,r17
  803708:	01c000c4 	movi	r7,3
  80370c:	d8c00215 	stw	r3,8(sp)
  803710:	d8800315 	stw	r2,12(sp)
  803714:	dcc00015 	stw	r19,0(sp)
  803718:	9829883a 	mov	r20,r19
  80371c:	08053c00 	call	8053c0 <_dtoa_r>
  803720:	d8814115 	stw	r2,1284(sp)
  803724:	003f5106 	br	80346c <___vfprintf_internal_r+0x1a9c>
  803728:	d8c14217 	ldw	r3,1288(sp)
  80372c:	d9014317 	ldw	r4,1292(sp)
  803730:	07000b44 	movi	fp,45
  803734:	1821883a 	mov	r16,r3
  803738:	2460003c 	xorhi	r17,r4,32768
  80373c:	003f3106 	br	803404 <___vfprintf_internal_r+0x1a34>
  803740:	9d000044 	addi	r20,r19,1
  803744:	003f3906 	br	80342c <___vfprintf_internal_r+0x1a5c>
  803748:	983f251e 	bne	r19,zero,8033e0 <___vfprintf_internal_r+0x1a10>
  80374c:	04c00044 	movi	r19,1
  803750:	003f2306 	br	8033e0 <___vfprintf_internal_r+0x1a10>
  803754:	04c00184 	movi	r19,6
  803758:	003f2106 	br	8033e0 <___vfprintf_internal_r+0x1a10>
  80375c:	d8014515 	stw	zero,1300(sp)
  803760:	003eee06 	br	80331c <___vfprintf_internal_r+0x194c>
  803764:	200f883a 	mov	r7,r4
  803768:	0100370e 	bge	zero,r4,803848 <___vfprintf_internal_r+0x1e78>
  80376c:	9800031e 	bne	r19,zero,80377c <___vfprintf_internal_r+0x1dac>
  803770:	d9814c17 	ldw	r6,1328(sp)
  803774:	3080004c 	andi	r2,r6,1
  803778:	103fb726 	beq	r2,zero,803658 <___vfprintf_internal_r+0x1c88>
  80377c:	20800044 	addi	r2,r4,1
  803780:	98a7883a 	add	r19,r19,r2
  803784:	dcc14515 	stw	r19,1300(sp)
  803788:	980f883a 	mov	r7,r19
  80378c:	983f800e 	bge	r19,zero,803590 <___vfprintf_internal_r+0x1bc0>
  803790:	003fb306 	br	803660 <___vfprintf_internal_r+0x1c90>
  803794:	d9814d17 	ldw	r6,1332(sp)
  803798:	31bfff84 	addi	r6,r6,-2
  80379c:	d9814d15 	stw	r6,1332(sp)
  8037a0:	003f4c06 	br	8034d4 <___vfprintf_internal_r+0x1b04>
  8037a4:	0100180e 	bge	zero,r4,803808 <___vfprintf_internal_r+0x1e38>
  8037a8:	00800044 	movi	r2,1
  8037ac:	1485883a 	add	r2,r2,r18
  8037b0:	d8814515 	stw	r2,1300(sp)
  8037b4:	100f883a 	mov	r7,r2
  8037b8:	103f750e 	bge	r2,zero,803590 <___vfprintf_internal_r+0x1bc0>
  8037bc:	003fa806 	br	803660 <___vfprintf_internal_r+0x1c90>
  8037c0:	80c00c04 	addi	r3,r16,48
  8037c4:	00800c04 	movi	r2,48
  8037c8:	d8c008c5 	stb	r3,35(sp)
  8037cc:	d9800804 	addi	r6,sp,32
  8037d0:	d8c00904 	addi	r3,sp,36
  8037d4:	d8800885 	stb	r2,34(sp)
  8037d8:	003f6506 	br	803570 <___vfprintf_internal_r+0x1ba0>
  8037dc:	d9014c17 	ldw	r4,1328(sp)
  8037e0:	2084703a 	and	r2,r4,r2
  8037e4:	103f9c26 	beq	r2,zero,803658 <___vfprintf_internal_r+0x1c88>
  8037e8:	003f6606 	br	803584 <___vfprintf_internal_r+0x1bb4>
  8037ec:	d9800804 	addi	r6,sp,32
  8037f0:	d8c00884 	addi	r3,sp,34
  8037f4:	003f5e06 	br	803570 <___vfprintf_internal_r+0x1ba0>
  8037f8:	00800b44 	movi	r2,45
  8037fc:	0121c83a 	sub	r16,zero,r4
  803800:	d8800845 	stb	r2,33(sp)
  803804:	003f3d06 	br	8034fc <___vfprintf_internal_r+0x1b2c>
  803808:	00800084 	movi	r2,2
  80380c:	1105c83a 	sub	r2,r2,r4
  803810:	003fe606 	br	8037ac <___vfprintf_internal_r+0x1ddc>
  803814:	d8014515 	stw	zero,1300(sp)
  803818:	dc814715 	stw	r18,1308(sp)
  80381c:	003fb106 	br	8036e4 <___vfprintf_internal_r+0x1d14>
  803820:	000d883a 	mov	r6,zero
  803824:	000f883a 	mov	r7,zero
  803828:	8009883a 	mov	r4,r16
  80382c:	880b883a 	mov	r5,r17
  803830:	080f1780 	call	80f178 <__nedf2>
  803834:	103f9f26 	beq	r2,zero,8036b4 <___vfprintf_internal_r+0x1ce4>
  803838:	00800044 	movi	r2,1
  80383c:	1509c83a 	sub	r4,r2,r20
  803840:	d9000515 	stw	r4,20(sp)
  803844:	003f9b06 	br	8036b4 <___vfprintf_internal_r+0x1ce4>
  803848:	98000d1e 	bne	r19,zero,803880 <___vfprintf_internal_r+0x1eb0>
  80384c:	d8c14c17 	ldw	r3,1328(sp)
  803850:	1880004c 	andi	r2,r3,1
  803854:	10000a1e 	bne	r2,zero,803880 <___vfprintf_internal_r+0x1eb0>
  803858:	01000044 	movi	r4,1
  80385c:	200f883a 	mov	r7,r4
  803860:	d9014515 	stw	r4,1300(sp)
  803864:	003f4a06 	br	803590 <___vfprintf_internal_r+0x1bc0>
  803868:	3cc00017 	ldw	r19,0(r7)
  80386c:	39c00104 	addi	r7,r7,4
  803870:	983d0e0e 	bge	r19,zero,802cac <___vfprintf_internal_r+0x12dc>
  803874:	b8c00007 	ldb	r3,0(r23)
  803878:	04ffffc4 	movi	r19,-1
  80387c:	0038d306 	br	801bcc <___vfprintf_internal_r+0x1fc>
  803880:	9cc00084 	addi	r19,r19,2
  803884:	dcc14515 	stw	r19,1300(sp)
  803888:	980f883a 	mov	r7,r19
  80388c:	983f400e 	bge	r19,zero,803590 <___vfprintf_internal_r+0x1bc0>
  803890:	003f7306 	br	803660 <___vfprintf_internal_r+0x1c90>

00803894 <__vfprintf_internal>:
  803894:	008020b4 	movhi	r2,130
  803898:	10b96204 	addi	r2,r2,-6776
  80389c:	2013883a 	mov	r9,r4
  8038a0:	11000017 	ldw	r4,0(r2)
  8038a4:	2805883a 	mov	r2,r5
  8038a8:	300f883a 	mov	r7,r6
  8038ac:	480b883a 	mov	r5,r9
  8038b0:	100d883a 	mov	r6,r2
  8038b4:	08019d01 	jmpi	8019d0 <___vfprintf_internal_r>

008038b8 <__svfscanf_r>:
  8038b8:	deff4e04 	addi	sp,sp,-712
  8038bc:	dd80ae15 	stw	r22,696(sp)
  8038c0:	dd00ac15 	stw	r20,688(sp)
  8038c4:	dc40a915 	stw	r17,676(sp)
  8038c8:	dc00a815 	stw	r16,672(sp)
  8038cc:	dfc0b115 	stw	ra,708(sp)
  8038d0:	df00b015 	stw	fp,704(sp)
  8038d4:	ddc0af15 	stw	r23,700(sp)
  8038d8:	dd40ad15 	stw	r21,692(sp)
  8038dc:	dcc0ab15 	stw	r19,684(sp)
  8038e0:	dc80aa15 	stw	r18,680(sp)
  8038e4:	202d883a 	mov	r22,r4
  8038e8:	2821883a 	mov	r16,r5
  8038ec:	d9c0a415 	stw	r7,656(sp)
  8038f0:	3029883a 	mov	r20,r6
  8038f4:	d800a215 	stw	zero,648(sp)
  8038f8:	0023883a 	mov	r17,zero
  8038fc:	d800a115 	stw	zero,644(sp)
  803900:	d800a015 	stw	zero,640(sp)
  803904:	a1000007 	ldb	r4,0(r20)
  803908:	d9000115 	stw	r4,4(sp)
  80390c:	20001f26 	beq	r4,zero,80398c <__svfscanf_r+0xd4>
  803910:	04c020b4 	movhi	r19,130
  803914:	9cf96104 	addi	r19,r19,-6780
  803918:	9c800017 	ldw	r18,0(r19)
  80391c:	a5000044 	addi	r20,r20,1
  803920:	9107883a 	add	r3,r18,r4
  803924:	18800003 	ldbu	r2,0(r3)
  803928:	1080020c 	andi	r2,r2,8
  80392c:	10002426 	beq	r2,zero,8039c0 <__svfscanf_r+0x108>
  803930:	80c00117 	ldw	r3,4(r16)
  803934:	00c00e0e 	bge	zero,r3,803970 <__svfscanf_r+0xb8>
  803938:	81400017 	ldw	r5,0(r16)
  80393c:	98800017 	ldw	r2,0(r19)
  803940:	28c00003 	ldbu	r3,0(r5)
  803944:	1887883a 	add	r3,r3,r2
  803948:	19000003 	ldbu	r4,0(r3)
  80394c:	2100020c 	andi	r4,r4,8
  803950:	203fec26 	beq	r4,zero,803904 <__svfscanf_r+0x4c>
  803954:	80c00117 	ldw	r3,4(r16)
  803958:	29800044 	addi	r6,r5,1
  80395c:	8c400044 	addi	r17,r17,1
  803960:	18ffffc4 	addi	r3,r3,-1
  803964:	81800015 	stw	r6,0(r16)
  803968:	80c00115 	stw	r3,4(r16)
  80396c:	00fff216 	blt	zero,r3,803938 <__svfscanf_r+0x80>
  803970:	b009883a 	mov	r4,r22
  803974:	800b883a 	mov	r5,r16
  803978:	0809a2c0 	call	809a2c <__srefill_r>
  80397c:	103fee26 	beq	r2,zero,803938 <__svfscanf_r+0x80>
  803980:	a1000007 	ldb	r4,0(r20)
  803984:	d9000115 	stw	r4,4(sp)
  803988:	203fe11e 	bne	r4,zero,803910 <__svfscanf_r+0x58>
  80398c:	d880a217 	ldw	r2,648(sp)
  803990:	dfc0b117 	ldw	ra,708(sp)
  803994:	df00b017 	ldw	fp,704(sp)
  803998:	ddc0af17 	ldw	r23,700(sp)
  80399c:	dd80ae17 	ldw	r22,696(sp)
  8039a0:	dd40ad17 	ldw	r21,692(sp)
  8039a4:	dd00ac17 	ldw	r20,688(sp)
  8039a8:	dcc0ab17 	ldw	r19,684(sp)
  8039ac:	dc80aa17 	ldw	r18,680(sp)
  8039b0:	dc40a917 	ldw	r17,676(sp)
  8039b4:	dc00a817 	ldw	r16,672(sp)
  8039b8:	dec0b204 	addi	sp,sp,712
  8039bc:	f800283a 	ret
  8039c0:	00800944 	movi	r2,37
  8039c4:	20801626 	beq	r4,r2,803a20 <__svfscanf_r+0x168>
  8039c8:	80800117 	ldw	r2,4(r16)
  8039cc:	00800b0e 	bge	zero,r2,8039fc <__svfscanf_r+0x144>
  8039d0:	81000017 	ldw	r4,0(r16)
  8039d4:	a0ffffc7 	ldb	r3,-1(r20)
  8039d8:	20800003 	ldbu	r2,0(r4)
  8039dc:	10ffeb1e 	bne	r2,r3,80398c <__svfscanf_r+0xd4>
  8039e0:	80c00117 	ldw	r3,4(r16)
  8039e4:	21800044 	addi	r6,r4,1
  8039e8:	8c400044 	addi	r17,r17,1
  8039ec:	18ffffc4 	addi	r3,r3,-1
  8039f0:	80c00115 	stw	r3,4(r16)
  8039f4:	81800015 	stw	r6,0(r16)
  8039f8:	003fc206 	br	803904 <__svfscanf_r+0x4c>
  8039fc:	b009883a 	mov	r4,r22
  803a00:	800b883a 	mov	r5,r16
  803a04:	0809a2c0 	call	809a2c <__srefill_r>
  803a08:	103ff126 	beq	r2,zero,8039d0 <__svfscanf_r+0x118>
  803a0c:	d900a217 	ldw	r4,648(sp)
  803a10:	2004981e 	bne	r4,zero,804c74 <__svfscanf_r+0x13bc>
  803a14:	00bfffc4 	movi	r2,-1
  803a18:	d880a215 	stw	r2,648(sp)
  803a1c:	003fdb06 	br	80398c <__svfscanf_r+0xd4>
  803a20:	d800a315 	stw	zero,652(sp)
  803a24:	002b883a 	mov	r21,zero
  803a28:	a0c00003 	ldbu	r3,0(r20)
  803a2c:	00801e04 	movi	r2,120
  803a30:	a5000044 	addi	r20,r20,1
  803a34:	1dc03fcc 	andi	r23,r3,255
  803a38:	bdc0201c 	xori	r23,r23,128
  803a3c:	bdffe004 	addi	r23,r23,-128
  803a40:	10c08036 	bltu	r2,r3,803c44 <__svfscanf_r+0x38c>
  803a44:	18c5883a 	add	r2,r3,r3
  803a48:	1085883a 	add	r2,r2,r2
  803a4c:	00c02034 	movhi	r3,128
  803a50:	18ce9804 	addi	r3,r3,14944
  803a54:	10c5883a 	add	r2,r2,r3
  803a58:	11000017 	ldw	r4,0(r2)
  803a5c:	2000683a 	jmp	r4
  803a60:	00803a14 	movui	r2,232
  803a64:	00803c44 	movi	r2,241
  803a68:	00803c44 	movi	r2,241
  803a6c:	00803c44 	movi	r2,241
  803a70:	00803c44 	movi	r2,241
  803a74:	00803c44 	movi	r2,241
  803a78:	00803c44 	movi	r2,241
  803a7c:	00803c44 	movi	r2,241
  803a80:	00803c44 	movi	r2,241
  803a84:	00803c44 	movi	r2,241
  803a88:	00803c44 	movi	r2,241
  803a8c:	00803c44 	movi	r2,241
  803a90:	00803c44 	movi	r2,241
  803a94:	00803c44 	movi	r2,241
  803a98:	00803c44 	movi	r2,241
  803a9c:	00803c44 	movi	r2,241
  803aa0:	00803c44 	movi	r2,241
  803aa4:	00803c44 	movi	r2,241
  803aa8:	00803c44 	movi	r2,241
  803aac:	00803c44 	movi	r2,241
  803ab0:	00803c44 	movi	r2,241
  803ab4:	00803c44 	movi	r2,241
  803ab8:	00803c44 	movi	r2,241
  803abc:	00803c44 	movi	r2,241
  803ac0:	00803c44 	movi	r2,241
  803ac4:	00803c44 	movi	r2,241
  803ac8:	00803c44 	movi	r2,241
  803acc:	00803c44 	movi	r2,241
  803ad0:	00803c44 	movi	r2,241
  803ad4:	00803c44 	movi	r2,241
  803ad8:	00803c44 	movi	r2,241
  803adc:	00803c44 	movi	r2,241
  803ae0:	00803c44 	movi	r2,241
  803ae4:	00803c44 	movi	r2,241
  803ae8:	00803c44 	movi	r2,241
  803aec:	00803c44 	movi	r2,241
  803af0:	00803c44 	movi	r2,241
  803af4:	008039c8 	cmpgei	r2,zero,231
  803af8:	00803c44 	movi	r2,241
  803afc:	00803c44 	movi	r2,241
  803b00:	00803c44 	movi	r2,241
  803b04:	00803c44 	movi	r2,241
  803b08:	00804ae4 	muli	r2,zero,299
  803b0c:	00803c44 	movi	r2,241
  803b10:	00803c44 	movi	r2,241
  803b14:	00803c44 	movi	r2,241
  803b18:	00803c44 	movi	r2,241
  803b1c:	00803c44 	movi	r2,241
  803b20:	00804ac8 	cmpgei	r2,zero,299
  803b24:	00804ac8 	cmpgei	r2,zero,299
  803b28:	00804ac8 	cmpgei	r2,zero,299
  803b2c:	00804ac8 	cmpgei	r2,zero,299
  803b30:	00804ac8 	cmpgei	r2,zero,299
  803b34:	00804ac8 	cmpgei	r2,zero,299
  803b38:	00804ac8 	cmpgei	r2,zero,299
  803b3c:	00804ac8 	cmpgei	r2,zero,299
  803b40:	00804ac8 	cmpgei	r2,zero,299
  803b44:	00804ac8 	cmpgei	r2,zero,299
  803b48:	00803c44 	movi	r2,241
  803b4c:	00803c44 	movi	r2,241
  803b50:	00803c44 	movi	r2,241
  803b54:	00803c44 	movi	r2,241
  803b58:	00803c44 	movi	r2,241
  803b5c:	00803c44 	movi	r2,241
  803b60:	00803c44 	movi	r2,241
  803b64:	00803c44 	movi	r2,241
  803b68:	00803c44 	movi	r2,241
  803b6c:	00803c44 	movi	r2,241
  803b70:	00803c58 	cmpnei	r2,zero,241
  803b74:	00804bcc 	andi	r2,zero,303
  803b78:	00803c44 	movi	r2,241
  803b7c:	00804bcc 	andi	r2,zero,303
  803b80:	00803c44 	movi	r2,241
  803b84:	00803c44 	movi	r2,241
  803b88:	00803c44 	movi	r2,241
  803b8c:	00803c44 	movi	r2,241
  803b90:	00804ac0 	call	804ac <OSCtxSw_SWITCH_PC+0x8046c>
  803b94:	00803c44 	movi	r2,241
  803b98:	00803c44 	movi	r2,241
  803b9c:	00804aa0 	cmpeqi	r2,zero,298
  803ba0:	00803c44 	movi	r2,241
  803ba4:	00803c44 	movi	r2,241
  803ba8:	00803c44 	movi	r2,241
  803bac:	00803c44 	movi	r2,241
  803bb0:	00803c44 	movi	r2,241
  803bb4:	00803c44 	movi	r2,241
  803bb8:	00803c44 	movi	r2,241
  803bbc:	00803c44 	movi	r2,241
  803bc0:	00804aec 	andhi	r2,zero,299
  803bc4:	00803c44 	movi	r2,241
  803bc8:	00803c44 	movi	r2,241
  803bcc:	00804a84 	movi	r2,298
  803bd0:	00803c44 	movi	r2,241
  803bd4:	00803c44 	movi	r2,241
  803bd8:	00803c44 	movi	r2,241
  803bdc:	00803c44 	movi	r2,241
  803be0:	00803c44 	movi	r2,241
  803be4:	00803c44 	movi	r2,241
  803be8:	00803c44 	movi	r2,241
  803bec:	00804bd4 	movui	r2,303
  803bf0:	00803c5c 	xori	r2,zero,241
  803bf4:	00804bcc 	andi	r2,zero,303
  803bf8:	00804bcc 	andi	r2,zero,303
  803bfc:	00804bcc 	andi	r2,zero,303
  803c00:	00804be0 	cmpeqi	r2,zero,303
  803c04:	00804b28 	cmpgeui	r2,zero,300
  803c08:	00803c44 	movi	r2,241
  803c0c:	00803c44 	movi	r2,241
  803c10:	008041f0 	cmpltui	r2,zero,263
  803c14:	00803c44 	movi	r2,241
  803c18:	00804cdc 	xori	r2,zero,307
  803c1c:	00804c98 	cmpnei	r2,zero,306
  803c20:	00804cbc 	xorhi	r2,zero,306
  803c24:	00803c44 	movi	r2,241
  803c28:	00803c44 	movi	r2,241
  803c2c:	00804cb4 	movhi	r2,306
  803c30:	00803c44 	movi	r2,241
  803c34:	00804b0c 	andi	r2,zero,300
  803c38:	00803c44 	movi	r2,241
  803c3c:	00803c44 	movi	r2,241
  803c40:	00804aec 	andhi	r2,zero,299
  803c44:	bc87883a 	add	r3,r23,r18
  803c48:	18800003 	ldbu	r2,0(r3)
  803c4c:	1080004c 	andi	r2,r2,1
  803c50:	1005003a 	cmpeq	r2,r2,zero
  803c54:	1000011e 	bne	r2,zero,803c5c <__svfscanf_r+0x3a4>
  803c58:	ad400054 	ori	r21,r21,1
  803c5c:	01002074 	movhi	r4,129
  803c60:	212da804 	addi	r4,r4,-18784
  803c64:	00800284 	movi	r2,10
  803c68:	d900a015 	stw	r4,640(sp)
  803c6c:	048000c4 	movi	r18,3
  803c70:	d880a115 	stw	r2,644(sp)
  803c74:	80c00117 	ldw	r3,4(r16)
  803c78:	00c13f0e 	bge	zero,r3,804178 <__svfscanf_r+0x8c0>
  803c7c:	a880100c 	andi	r2,r21,64
  803c80:	10001326 	beq	r2,zero,803cd0 <__svfscanf_r+0x418>
  803c84:	00800104 	movi	r2,4
  803c88:	14bf1e36 	bltu	r2,r18,803904 <__svfscanf_r+0x4c>
  803c8c:	9485883a 	add	r2,r18,r18
  803c90:	1085883a 	add	r2,r2,r2
  803c94:	00c02034 	movhi	r3,128
  803c98:	18cf2a04 	addi	r3,r3,15528
  803c9c:	10c5883a 	add	r2,r2,r3
  803ca0:	11000017 	ldw	r4,0(r2)
  803ca4:	2000683a 	jmp	r4
  803ca8:	00803d0c 	andi	r2,zero,244
  803cac:	00803e0c 	andi	r2,zero,248
  803cb0:	0080401c 	xori	r2,zero,256
  803cb4:	00803e80 	call	803e8 <OSCtxSw_SWITCH_PC+0x803a8>
  803cb8:	00804154 	movui	r2,261
  803cbc:	b009883a 	mov	r4,r22
  803cc0:	800b883a 	mov	r5,r16
  803cc4:	0809a2c0 	call	809a2c <__srefill_r>
  803cc8:	103f501e 	bne	r2,zero,803a0c <__svfscanf_r+0x154>
  803ccc:	8c400044 	addi	r17,r17,1
  803cd0:	81400017 	ldw	r5,0(r16)
  803cd4:	98800017 	ldw	r2,0(r19)
  803cd8:	28c00003 	ldbu	r3,0(r5)
  803cdc:	1887883a 	add	r3,r3,r2
  803ce0:	19000003 	ldbu	r4,0(r3)
  803ce4:	2100020c 	andi	r4,r4,8
  803ce8:	203fe626 	beq	r4,zero,803c84 <__svfscanf_r+0x3cc>
  803cec:	80c00117 	ldw	r3,4(r16)
  803cf0:	18ffffc4 	addi	r3,r3,-1
  803cf4:	80c00115 	stw	r3,4(r16)
  803cf8:	00fff00e 	bge	zero,r3,803cbc <__svfscanf_r+0x404>
  803cfc:	29800044 	addi	r6,r5,1
  803d00:	8c400044 	addi	r17,r17,1
  803d04:	81800015 	stw	r6,0(r16)
  803d08:	003ff106 	br	803cd0 <__svfscanf_r+0x418>
  803d0c:	d8c0a317 	ldw	r3,652(sp)
  803d10:	1800021e 	bne	r3,zero,803d1c <__svfscanf_r+0x464>
  803d14:	01000044 	movi	r4,1
  803d18:	d900a315 	stw	r4,652(sp)
  803d1c:	a880004c 	andi	r2,r21,1
  803d20:	1005003a 	cmpeq	r2,r2,zero
  803d24:	1002811e 	bne	r2,zero,80472c <__svfscanf_r+0xe74>
  803d28:	ad40040c 	andi	r21,r21,16
  803d2c:	a805003a 	cmpeq	r2,r21,zero
  803d30:	d880a615 	stw	r2,664(sp)
  803d34:	1003d31e 	bne	r2,zero,804c84 <__svfscanf_r+0x13cc>
  803d38:	0027883a 	mov	r19,zero
  803d3c:	d900a317 	ldw	r4,652(sp)
  803d40:	2003c726 	beq	r4,zero,804c60 <__svfscanf_r+0x13a8>
  803d44:	070020b4 	movhi	fp,130
  803d48:	e7396404 	addi	fp,fp,-6768
  803d4c:	e0800017 	ldw	r2,0(fp)
  803d50:	103f2e26 	beq	r2,zero,803a0c <__svfscanf_r+0x154>
  803d54:	d8804404 	addi	r2,sp,272
  803d58:	0025883a 	mov	r18,zero
  803d5c:	d880a515 	stw	r2,660(sp)
  803d60:	05ffffc4 	movi	r23,-1
  803d64:	80800017 	ldw	r2,0(r16)
  803d68:	80c00117 	ldw	r3,4(r16)
  803d6c:	d900a517 	ldw	r4,660(sp)
  803d70:	12000003 	ldbu	r8,0(r2)
  803d74:	18ffffc4 	addi	r3,r3,-1
  803d78:	11800044 	addi	r6,r2,1
  803d7c:	248f883a 	add	r7,r4,r18
  803d80:	80c00115 	stw	r3,4(r16)
  803d84:	81800015 	stw	r6,0(r16)
  803d88:	3a000005 	stb	r8,0(r7)
  803d8c:	d9000204 	addi	r4,sp,8
  803d90:	000b883a 	mov	r5,zero
  803d94:	01800204 	movi	r6,8
  803d98:	08081280 	call	808128 <memset>
  803d9c:	d980a517 	ldw	r6,660(sp)
  803da0:	94800044 	addi	r18,r18,1
  803da4:	d8800204 	addi	r2,sp,8
  803da8:	b009883a 	mov	r4,r22
  803dac:	980b883a 	mov	r5,r19
  803db0:	900f883a 	mov	r7,r18
  803db4:	d8800015 	stw	r2,0(sp)
  803db8:	0807dc40 	call	807dc4 <_mbrtowc_r>
  803dbc:	1007883a 	mov	r3,r2
  803dc0:	15ff1226 	beq	r2,r23,803a0c <__svfscanf_r+0x154>
  803dc4:	10039e1e 	bne	r2,zero,804c40 <__svfscanf_r+0x1388>
  803dc8:	a800011e 	bne	r21,zero,803dd0 <__svfscanf_r+0x518>
  803dcc:	98000015 	stw	zero,0(r19)
  803dd0:	d8c0a317 	ldw	r3,652(sp)
  803dd4:	d900a617 	ldw	r4,664(sp)
  803dd8:	8ca3883a 	add	r17,r17,r18
  803ddc:	18ffffc4 	addi	r3,r3,-1
  803de0:	d8c0a315 	stw	r3,652(sp)
  803de4:	20000126 	beq	r4,zero,803dec <__svfscanf_r+0x534>
  803de8:	9cc00104 	addi	r19,r19,4
  803dec:	0025883a 	mov	r18,zero
  803df0:	80c00117 	ldw	r3,4(r16)
  803df4:	00c3950e 	bge	zero,r3,804c4c <__svfscanf_r+0x1394>
  803df8:	d880a317 	ldw	r2,652(sp)
  803dfc:	10039826 	beq	r2,zero,804c60 <__svfscanf_r+0x13a8>
  803e00:	e0800017 	ldw	r2,0(fp)
  803e04:	90bfd71e 	bne	r18,r2,803d64 <__svfscanf_r+0x4ac>
  803e08:	003f0006 	br	803a0c <__svfscanf_r+0x154>
  803e0c:	d880a317 	ldw	r2,652(sp)
  803e10:	1000021e 	bne	r2,zero,803e1c <__svfscanf_r+0x564>
  803e14:	00ffffc4 	movi	r3,-1
  803e18:	d8c0a315 	stw	r3,652(sp)
  803e1c:	a880040c 	andi	r2,r21,16
  803e20:	1003b826 	beq	r2,zero,804d04 <__svfscanf_r+0x144c>
  803e24:	0027883a 	mov	r19,zero
  803e28:	dd400404 	addi	r21,sp,16
  803e2c:	81000017 	ldw	r4,0(r16)
  803e30:	20800003 	ldbu	r2,0(r4)
  803e34:	a885883a 	add	r2,r21,r2
  803e38:	10c00007 	ldb	r3,0(r2)
  803e3c:	18037d26 	beq	r3,zero,804c34 <__svfscanf_r+0x137c>
  803e40:	80c00117 	ldw	r3,4(r16)
  803e44:	21800044 	addi	r6,r4,1
  803e48:	d900a317 	ldw	r4,652(sp)
  803e4c:	18ffffc4 	addi	r3,r3,-1
  803e50:	9cc00044 	addi	r19,r19,1
  803e54:	81800015 	stw	r6,0(r16)
  803e58:	80c00115 	stw	r3,4(r16)
  803e5c:	24c37526 	beq	r4,r19,804c34 <__svfscanf_r+0x137c>
  803e60:	00fff216 	blt	zero,r3,803e2c <__svfscanf_r+0x574>
  803e64:	b009883a 	mov	r4,r22
  803e68:	800b883a 	mov	r5,r16
  803e6c:	0809a2c0 	call	809a2c <__srefill_r>
  803e70:	103fee26 	beq	r2,zero,803e2c <__svfscanf_r+0x574>
  803e74:	983ee526 	beq	r19,zero,803a0c <__svfscanf_r+0x154>
  803e78:	8ce3883a 	add	r17,r17,r19
  803e7c:	003ea106 	br	803904 <__svfscanf_r+0x4c>
  803e80:	d900a317 	ldw	r4,652(sp)
  803e84:	00805704 	movi	r2,348
  803e88:	20ffffc4 	addi	r3,r4,-1
  803e8c:	10c0bf2e 	bgeu	r2,r3,80418c <__svfscanf_r+0x8d4>
  803e90:	00805744 	movi	r2,349
  803e94:	24ffa8c4 	addi	r19,r4,-349
  803e98:	ac836014 	ori	r18,r21,3456
  803e9c:	d880a315 	stw	r2,652(sp)
  803ea0:	d8c04404 	addi	r3,sp,272
  803ea4:	d8c0a515 	stw	r3,660(sp)
  803ea8:	002f883a 	mov	r23,zero
  803eac:	182b883a 	mov	r21,r3
  803eb0:	81800017 	ldw	r6,0(r16)
  803eb4:	00c01344 	movi	r3,77
  803eb8:	31400003 	ldbu	r5,0(r6)
  803ebc:	28bff544 	addi	r2,r5,-43
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1880b836 	bltu	r3,r2,8041a8 <__svfscanf_r+0x8f0>
  803ec8:	1085883a 	add	r2,r2,r2
  803ecc:	1085883a 	add	r2,r2,r2
  803ed0:	00c02034 	movhi	r3,128
  803ed4:	18cfb904 	addi	r3,r3,16100
  803ed8:	10c5883a 	add	r2,r2,r3
  803edc:	11000017 	ldw	r4,0(r2)
  803ee0:	2000683a 	jmp	r4
  803ee4:	008042f8 	rdprs	r2,zero,267
  803ee8:	008041a8 	cmpgeui	r2,zero,262
  803eec:	008042f8 	rdprs	r2,zero,267
  803ef0:	008041a8 	cmpgeui	r2,zero,262
  803ef4:	008041a8 	cmpgeui	r2,zero,262
  803ef8:	0080433c 	xorhi	r2,zero,268
  803efc:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f00:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f04:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f08:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f0c:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f10:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f14:	00804b40 	call	804b4 <OSCtxSw_SWITCH_PC+0x80474>
  803f18:	00804b68 	cmpgeui	r2,zero,301
  803f1c:	00804b68 	cmpgeui	r2,zero,301
  803f20:	008041a8 	cmpgeui	r2,zero,262
  803f24:	008041a8 	cmpgeui	r2,zero,262
  803f28:	008041a8 	cmpgeui	r2,zero,262
  803f2c:	008041a8 	cmpgeui	r2,zero,262
  803f30:	008041a8 	cmpgeui	r2,zero,262
  803f34:	008041a8 	cmpgeui	r2,zero,262
  803f38:	008041a8 	cmpgeui	r2,zero,262
  803f3c:	00804b98 	cmpnei	r2,zero,302
  803f40:	00804b98 	cmpnei	r2,zero,302
  803f44:	00804b98 	cmpnei	r2,zero,302
  803f48:	00804b98 	cmpnei	r2,zero,302
  803f4c:	00804b98 	cmpnei	r2,zero,302
  803f50:	00804b98 	cmpnei	r2,zero,302
  803f54:	008041a8 	cmpgeui	r2,zero,262
  803f58:	008041a8 	cmpgeui	r2,zero,262
  803f5c:	008041a8 	cmpgeui	r2,zero,262
  803f60:	008041a8 	cmpgeui	r2,zero,262
  803f64:	008041a8 	cmpgeui	r2,zero,262
  803f68:	008041a8 	cmpgeui	r2,zero,262
  803f6c:	008041a8 	cmpgeui	r2,zero,262
  803f70:	008041a8 	cmpgeui	r2,zero,262
  803f74:	008041a8 	cmpgeui	r2,zero,262
  803f78:	008041a8 	cmpgeui	r2,zero,262
  803f7c:	008041a8 	cmpgeui	r2,zero,262
  803f80:	008041a8 	cmpgeui	r2,zero,262
  803f84:	008041a8 	cmpgeui	r2,zero,262
  803f88:	008041a8 	cmpgeui	r2,zero,262
  803f8c:	008041a8 	cmpgeui	r2,zero,262
  803f90:	008041a8 	cmpgeui	r2,zero,262
  803f94:	008041a8 	cmpgeui	r2,zero,262
  803f98:	00804ba8 	cmpgeui	r2,zero,302
  803f9c:	008041a8 	cmpgeui	r2,zero,262
  803fa0:	008041a8 	cmpgeui	r2,zero,262
  803fa4:	008041a8 	cmpgeui	r2,zero,262
  803fa8:	008041a8 	cmpgeui	r2,zero,262
  803fac:	008041a8 	cmpgeui	r2,zero,262
  803fb0:	008041a8 	cmpgeui	r2,zero,262
  803fb4:	008041a8 	cmpgeui	r2,zero,262
  803fb8:	008041a8 	cmpgeui	r2,zero,262
  803fbc:	00804b98 	cmpnei	r2,zero,302
  803fc0:	00804b98 	cmpnei	r2,zero,302
  803fc4:	00804b98 	cmpnei	r2,zero,302
  803fc8:	00804b98 	cmpnei	r2,zero,302
  803fcc:	00804b98 	cmpnei	r2,zero,302
  803fd0:	00804b98 	cmpnei	r2,zero,302
  803fd4:	008041a8 	cmpgeui	r2,zero,262
  803fd8:	008041a8 	cmpgeui	r2,zero,262
  803fdc:	008041a8 	cmpgeui	r2,zero,262
  803fe0:	008041a8 	cmpgeui	r2,zero,262
  803fe4:	008041a8 	cmpgeui	r2,zero,262
  803fe8:	008041a8 	cmpgeui	r2,zero,262
  803fec:	008041a8 	cmpgeui	r2,zero,262
  803ff0:	008041a8 	cmpgeui	r2,zero,262
  803ff4:	008041a8 	cmpgeui	r2,zero,262
  803ff8:	008041a8 	cmpgeui	r2,zero,262
  803ffc:	008041a8 	cmpgeui	r2,zero,262
  804000:	008041a8 	cmpgeui	r2,zero,262
  804004:	008041a8 	cmpgeui	r2,zero,262
  804008:	008041a8 	cmpgeui	r2,zero,262
  80400c:	008041a8 	cmpgeui	r2,zero,262
  804010:	008041a8 	cmpgeui	r2,zero,262
  804014:	008041a8 	cmpgeui	r2,zero,262
  804018:	00804ba8 	cmpgeui	r2,zero,302
  80401c:	d900a317 	ldw	r4,652(sp)
  804020:	2000021e 	bne	r4,zero,80402c <__svfscanf_r+0x774>
  804024:	00bfffc4 	movi	r2,-1
  804028:	d880a315 	stw	r2,652(sp)
  80402c:	a880004c 	andi	r2,r21,1
  804030:	1005003a 	cmpeq	r2,r2,zero
  804034:	1003651e 	bne	r2,zero,804dcc <__svfscanf_r+0x1514>
  804038:	adc0040c 	andi	r23,r21,16
  80403c:	b807003a 	cmpeq	r3,r23,zero
  804040:	d8c0a715 	stw	r3,668(sp)
  804044:	1802f61e 	bne	r3,zero,804c20 <__svfscanf_r+0x1368>
  804048:	dd400104 	addi	r21,sp,4
  80404c:	0025883a 	mov	r18,zero
  804050:	073fffc4 	movi	fp,-1
  804054:	81400017 	ldw	r5,0(r16)
  804058:	98800017 	ldw	r2,0(r19)
  80405c:	29c00003 	ldbu	r7,0(r5)
  804060:	38c03fcc 	andi	r3,r7,255
  804064:	1887883a 	add	r3,r3,r2
  804068:	19000003 	ldbu	r4,0(r3)
  80406c:	2100020c 	andi	r4,r4,8
  804070:	2000321e 	bne	r4,zero,80413c <__svfscanf_r+0x884>
  804074:	d8c0a317 	ldw	r3,652(sp)
  804078:	18003026 	beq	r3,zero,80413c <__svfscanf_r+0x884>
  80407c:	008020b4 	movhi	r2,130
  804080:	10b96404 	addi	r2,r2,-6768
  804084:	10c00017 	ldw	r3,0(r2)
  804088:	90fe6026 	beq	r18,r3,803a0c <__svfscanf_r+0x154>
  80408c:	d8c04404 	addi	r3,sp,272
  804090:	80800117 	ldw	r2,4(r16)
  804094:	d8c0a515 	stw	r3,660(sp)
  804098:	d900a517 	ldw	r4,660(sp)
  80409c:	10ffffc4 	addi	r3,r2,-1
  8040a0:	29800044 	addi	r6,r5,1
  8040a4:	80c00115 	stw	r3,4(r16)
  8040a8:	2485883a 	add	r2,r4,r18
  8040ac:	81800015 	stw	r6,0(r16)
  8040b0:	d9000204 	addi	r4,sp,8
  8040b4:	000b883a 	mov	r5,zero
  8040b8:	01800204 	movi	r6,8
  8040bc:	11c00005 	stb	r7,0(r2)
  8040c0:	08081280 	call	808128 <memset>
  8040c4:	d980a517 	ldw	r6,660(sp)
  8040c8:	94800044 	addi	r18,r18,1
  8040cc:	d8800204 	addi	r2,sp,8
  8040d0:	b009883a 	mov	r4,r22
  8040d4:	a80b883a 	mov	r5,r21
  8040d8:	900f883a 	mov	r7,r18
  8040dc:	d8800015 	stw	r2,0(sp)
  8040e0:	0807dc40 	call	807dc4 <_mbrtowc_r>
  8040e4:	1007883a 	mov	r3,r2
  8040e8:	173e4826 	beq	r2,fp,803a0c <__svfscanf_r+0x154>
  8040ec:	1002c91e 	bne	r2,zero,804c14 <__svfscanf_r+0x135c>
  8040f0:	a8000015 	stw	zero,0(r21)
  8040f4:	a9000017 	ldw	r4,0(r21)
  8040f8:	0807b400 	call	807b40 <iswspace>
  8040fc:	1002bc1e 	bne	r2,zero,804bf0 <__svfscanf_r+0x1338>
  804100:	d900a317 	ldw	r4,652(sp)
  804104:	d880a717 	ldw	r2,668(sp)
  804108:	8ca3883a 	add	r17,r17,r18
  80410c:	213fffc4 	addi	r4,r4,-1
  804110:	d900a315 	stw	r4,652(sp)
  804114:	10000126 	beq	r2,zero,80411c <__svfscanf_r+0x864>
  804118:	ad400104 	addi	r21,r21,4
  80411c:	0025883a 	mov	r18,zero
  804120:	80c00117 	ldw	r3,4(r16)
  804124:	00ffcb16 	blt	zero,r3,804054 <__svfscanf_r+0x79c>
  804128:	b009883a 	mov	r4,r22
  80412c:	800b883a 	mov	r5,r16
  804130:	0809a2c0 	call	809a2c <__srefill_r>
  804134:	103fc726 	beq	r2,zero,804054 <__svfscanf_r+0x79c>
  804138:	903e341e 	bne	r18,zero,803a0c <__svfscanf_r+0x154>
  80413c:	b83df11e 	bne	r23,zero,803904 <__svfscanf_r+0x4c>
  804140:	d900a217 	ldw	r4,648(sp)
  804144:	a8000015 	stw	zero,0(r21)
  804148:	21000044 	addi	r4,r4,1
  80414c:	d900a215 	stw	r4,648(sp)
  804150:	003dec06 	br	803904 <__svfscanf_r+0x4c>
  804154:	d900a317 	ldw	r4,652(sp)
  804158:	00805704 	movi	r2,348
  80415c:	20ffffc4 	addi	r3,r4,-1
  804160:	10c0902e 	bgeu	r2,r3,8043a4 <__svfscanf_r+0xaec>
  804164:	00805744 	movi	r2,349
  804168:	24ffa8c4 	addi	r19,r4,-349
  80416c:	ad41e014 	ori	r21,r21,1920
  804170:	d880a315 	stw	r2,652(sp)
  804174:	00010806 	br	804598 <__svfscanf_r+0xce0>
  804178:	b009883a 	mov	r4,r22
  80417c:	800b883a 	mov	r5,r16
  804180:	0809a2c0 	call	809a2c <__srefill_r>
  804184:	103ebd26 	beq	r2,zero,803c7c <__svfscanf_r+0x3c4>
  804188:	003e2006 	br	803a0c <__svfscanf_r+0x154>
  80418c:	d900a317 	ldw	r4,652(sp)
  804190:	ac836014 	ori	r18,r21,3456
  804194:	2002941e 	bne	r4,zero,804be8 <__svfscanf_r+0x1330>
  804198:	d8804404 	addi	r2,sp,272
  80419c:	d880a515 	stw	r2,660(sp)
  8041a0:	002f883a 	mov	r23,zero
  8041a4:	102b883a 	mov	r21,r2
  8041a8:	9080400c 	andi	r2,r18,256
  8041ac:	10000926 	beq	r2,zero,8041d4 <__svfscanf_r+0x91c>
  8041b0:	d8c0a517 	ldw	r3,660(sp)
  8041b4:	1d40052e 	bgeu	r3,r21,8041cc <__svfscanf_r+0x914>
  8041b8:	ad7fffc4 	addi	r21,r21,-1
  8041bc:	a9400007 	ldb	r5,0(r21)
  8041c0:	b009883a 	mov	r4,r22
  8041c4:	800d883a 	mov	r6,r16
  8041c8:	080c25c0 	call	80c25c <_ungetc_r>
  8041cc:	d900a517 	ldw	r4,660(sp)
  8041d0:	257dee26 	beq	r4,r21,80398c <__svfscanf_r+0xd4>
  8041d4:	9080040c 	andi	r2,r18,16
  8041d8:	10000a26 	beq	r2,zero,804204 <__svfscanf_r+0x94c>
  8041dc:	d8c0a517 	ldw	r3,660(sp)
  8041e0:	a8c5c83a 	sub	r2,r21,r3
  8041e4:	b885883a 	add	r2,r23,r2
  8041e8:	88a3883a 	add	r17,r17,r2
  8041ec:	003dc506 	br	803904 <__svfscanf_r+0x4c>
  8041f0:	a0c00007 	ldb	r3,0(r20)
  8041f4:	00801b04 	movi	r2,108
  8041f8:	18801726 	beq	r3,r2,804258 <__svfscanf_r+0x9a0>
  8041fc:	ad400054 	ori	r21,r21,1
  804200:	003e0906 	br	803a28 <__svfscanf_r+0x170>
  804204:	a8000005 	stb	zero,0(r21)
  804208:	d8c0a017 	ldw	r3,640(sp)
  80420c:	d940a517 	ldw	r5,660(sp)
  804210:	d9c0a117 	ldw	r7,644(sp)
  804214:	b009883a 	mov	r4,r22
  804218:	000d883a 	mov	r6,zero
  80421c:	183ee83a 	callr	r3
  804220:	1007883a 	mov	r3,r2
  804224:	9080080c 	andi	r2,r18,32
  804228:	1000251e 	bne	r2,zero,8042c0 <__svfscanf_r+0xa08>
  80422c:	9080010c 	andi	r2,r18,4
  804230:	10000c26 	beq	r2,zero,804264 <__svfscanf_r+0x9ac>
  804234:	d900a417 	ldw	r4,656(sp)
  804238:	20800017 	ldw	r2,0(r4)
  80423c:	21000104 	addi	r4,r4,4
  804240:	d900a415 	stw	r4,656(sp)
  804244:	10c0000d 	sth	r3,0(r2)
  804248:	d880a217 	ldw	r2,648(sp)
  80424c:	10800044 	addi	r2,r2,1
  804250:	d880a215 	stw	r2,648(sp)
  804254:	003fe106 	br	8041dc <__svfscanf_r+0x924>
  804258:	a5000044 	addi	r20,r20,1
  80425c:	ad400094 	ori	r21,r21,2
  804260:	003df106 	br	803a28 <__svfscanf_r+0x170>
  804264:	9080004c 	andi	r2,r18,1
  804268:	1005003a 	cmpeq	r2,r2,zero
  80426c:	10001426 	beq	r2,zero,8042c0 <__svfscanf_r+0xa08>
  804270:	9080008c 	andi	r2,r18,2
  804274:	10001226 	beq	r2,zero,8042c0 <__svfscanf_r+0xa08>
  804278:	d8c0a017 	ldw	r3,640(sp)
  80427c:	00802074 	movhi	r2,129
  804280:	10af0b04 	addi	r2,r2,-17364
  804284:	18801426 	beq	r3,r2,8042d8 <__svfscanf_r+0xa20>
  804288:	d9c0a117 	ldw	r7,644(sp)
  80428c:	d940a517 	ldw	r5,660(sp)
  804290:	000d883a 	mov	r6,zero
  804294:	b009883a 	mov	r4,r22
  804298:	080b9140 	call	80b914 <_strtoll_r>
  80429c:	100d883a 	mov	r6,r2
  8042a0:	180f883a 	mov	r7,r3
  8042a4:	d900a417 	ldw	r4,656(sp)
  8042a8:	20800017 	ldw	r2,0(r4)
  8042ac:	21000104 	addi	r4,r4,4
  8042b0:	d900a415 	stw	r4,656(sp)
  8042b4:	11c00115 	stw	r7,4(r2)
  8042b8:	11800015 	stw	r6,0(r2)
  8042bc:	003fe206 	br	804248 <__svfscanf_r+0x990>
  8042c0:	d900a417 	ldw	r4,656(sp)
  8042c4:	20800017 	ldw	r2,0(r4)
  8042c8:	21000104 	addi	r4,r4,4
  8042cc:	d900a415 	stw	r4,656(sp)
  8042d0:	10c00015 	stw	r3,0(r2)
  8042d4:	003fdc06 	br	804248 <__svfscanf_r+0x990>
  8042d8:	d9c0a117 	ldw	r7,644(sp)
  8042dc:	d940a517 	ldw	r5,660(sp)
  8042e0:	000d883a 	mov	r6,zero
  8042e4:	b009883a 	mov	r4,r22
  8042e8:	080be900 	call	80be90 <_strtoull_r>
  8042ec:	100d883a 	mov	r6,r2
  8042f0:	180f883a 	mov	r7,r3
  8042f4:	003feb06 	br	8042a4 <__svfscanf_r+0x9ec>
  8042f8:	9080200c 	andi	r2,r18,128
  8042fc:	103faa26 	beq	r2,zero,8041a8 <__svfscanf_r+0x8f0>
  804300:	00bfdfc4 	movi	r2,-129
  804304:	90a4703a 	and	r18,r18,r2
  804308:	a9400005 	stb	r5,0(r21)
  80430c:	ad400044 	addi	r21,r21,1
  804310:	80c00117 	ldw	r3,4(r16)
  804314:	18ffffc4 	addi	r3,r3,-1
  804318:	80c00115 	stw	r3,4(r16)
  80431c:	00c0130e 	bge	zero,r3,80436c <__svfscanf_r+0xab4>
  804320:	31800044 	addi	r6,r6,1
  804324:	81800015 	stw	r6,0(r16)
  804328:	d880a317 	ldw	r2,652(sp)
  80432c:	10bfffc4 	addi	r2,r2,-1
  804330:	d880a315 	stw	r2,652(sp)
  804334:	103ede1e 	bne	r2,zero,803eb0 <__svfscanf_r+0x5f8>
  804338:	003f9b06 	br	8041a8 <__svfscanf_r+0x8f0>
  80433c:	9082000c 	andi	r2,r18,2048
  804340:	103ff126 	beq	r2,zero,804308 <__svfscanf_r+0xa50>
  804344:	d8c0a117 	ldw	r3,644(sp)
  804348:	1800031e 	bne	r3,zero,804358 <__svfscanf_r+0xaa0>
  80434c:	01000204 	movi	r4,8
  804350:	94808014 	ori	r18,r18,512
  804354:	d900a115 	stw	r4,644(sp)
  804358:	9081000c 	andi	r2,r18,1024
  80435c:	10000826 	beq	r2,zero,804380 <__svfscanf_r+0xac8>
  804360:	00be9fc4 	movi	r2,-1409
  804364:	90a4703a 	and	r18,r18,r2
  804368:	003fe706 	br	804308 <__svfscanf_r+0xa50>
  80436c:	b009883a 	mov	r4,r22
  804370:	800b883a 	mov	r5,r16
  804374:	0809a2c0 	call	809a2c <__srefill_r>
  804378:	103feb26 	beq	r2,zero,804328 <__svfscanf_r+0xa70>
  80437c:	003f8a06 	br	8041a8 <__svfscanf_r+0x8f0>
  804380:	98000426 	beq	r19,zero,804394 <__svfscanf_r+0xadc>
  804384:	d880a317 	ldw	r2,652(sp)
  804388:	9cffffc4 	addi	r19,r19,-1
  80438c:	10800044 	addi	r2,r2,1
  804390:	d880a315 	stw	r2,652(sp)
  804394:	00bf1fc4 	movi	r2,-897
  804398:	90a4703a 	and	r18,r18,r2
  80439c:	bdc00044 	addi	r23,r23,1
  8043a0:	003fdb06 	br	804310 <__svfscanf_r+0xa58>
  8043a4:	d900a317 	ldw	r4,652(sp)
  8043a8:	ad41e014 	ori	r21,r21,1920
  8043ac:	2000791e 	bne	r4,zero,804594 <__svfscanf_r+0xcdc>
  8043b0:	d8c04404 	addi	r3,sp,272
  8043b4:	d8c0a515 	stw	r3,660(sp)
  8043b8:	182f883a 	mov	r23,r3
  8043bc:	d8009c15 	stw	zero,624(sp)
  8043c0:	d8009d15 	stw	zero,628(sp)
  8043c4:	d8009f15 	stw	zero,636(sp)
  8043c8:	d8009e15 	stw	zero,632(sp)
  8043cc:	0039883a 	mov	fp,zero
  8043d0:	e1003fcc 	andi	r4,fp,255
  8043d4:	2100201c 	xori	r4,r4,128
  8043d8:	213fe004 	addi	r4,r4,-128
  8043dc:	20ffffc4 	addi	r3,r4,-1
  8043e0:	00800184 	movi	r2,6
  8043e4:	10c01736 	bltu	r2,r3,804444 <__svfscanf_r+0xb8c>
  8043e8:	00c00084 	movi	r3,2
  8043ec:	19026d0e 	bge	r3,r4,804da4 <__svfscanf_r+0x14ec>
  8043f0:	008000c4 	movi	r2,3
  8043f4:	1100130e 	bge	r2,r4,804444 <__svfscanf_r+0xb8c>
  8043f8:	e4ffffc4 	addi	r19,fp,-1
  8043fc:	b825883a 	mov	r18,r23
  804400:	94bfffc4 	addi	r18,r18,-1
  804404:	91400007 	ldb	r5,0(r18)
  804408:	b009883a 	mov	r4,r22
  80440c:	800d883a 	mov	r6,r16
  804410:	080c25c0 	call	80c25c <_ungetc_r>
  804414:	9cffffc4 	addi	r19,r19,-1
  804418:	98c03fcc 	andi	r3,r19,255
  80441c:	18c0201c 	xori	r3,r3,128
  804420:	18ffe004 	addi	r3,r3,-128
  804424:	00800084 	movi	r2,2
  804428:	18bff51e 	bne	r3,r2,804400 <__svfscanf_r+0xb48>
  80442c:	e0bfff04 	addi	r2,fp,-4
  804430:	10803fcc 	andi	r2,r2,255
  804434:	b887c83a 	sub	r3,r23,r2
  804438:	8885c83a 	sub	r2,r17,r2
  80443c:	147fffc4 	addi	r17,r2,-1
  804440:	1dffffc4 	addi	r23,r3,-1
  804444:	a880400c 	andi	r2,r21,256
  804448:	10001226 	beq	r2,zero,804494 <__svfscanf_r+0xbdc>
  80444c:	a881000c 	andi	r2,r21,1024
  804450:	10002b1e 	bne	r2,zero,804500 <__svfscanf_r+0xc48>
  804454:	bdffffc4 	addi	r23,r23,-1
  804458:	b9400007 	ldb	r5,0(r23)
  80445c:	00801944 	movi	r2,101
  804460:	8c7fffc4 	addi	r17,r17,-1
  804464:	28800826 	beq	r5,r2,804488 <__svfscanf_r+0xbd0>
  804468:	00801144 	movi	r2,69
  80446c:	28800626 	beq	r5,r2,804488 <__svfscanf_r+0xbd0>
  804470:	bdffffc4 	addi	r23,r23,-1
  804474:	b009883a 	mov	r4,r22
  804478:	800d883a 	mov	r6,r16
  80447c:	080c25c0 	call	80c25c <_ungetc_r>
  804480:	b9400007 	ldb	r5,0(r23)
  804484:	8c7fffc4 	addi	r17,r17,-1
  804488:	b009883a 	mov	r4,r22
  80448c:	800d883a 	mov	r6,r16
  804490:	080c25c0 	call	80c25c <_ungetc_r>
  804494:	a880040c 	andi	r2,r21,16
  804498:	103d1a1e 	bne	r2,zero,803904 <__svfscanf_r+0x4c>
  80449c:	a8c1800c 	andi	r3,r21,1536
  8044a0:	00810004 	movi	r2,1024
  8044a4:	b8000005 	stb	zero,0(r23)
  8044a8:	18813326 	beq	r3,r2,804978 <__svfscanf_r+0x10c0>
  8044ac:	d8809d17 	ldw	r2,628(sp)
  8044b0:	1000251e 	bne	r2,zero,804548 <__svfscanf_r+0xc90>
  8044b4:	d940a517 	ldw	r5,660(sp)
  8044b8:	b009883a 	mov	r4,r22
  8044bc:	000d883a 	mov	r6,zero
  8044c0:	0809f940 	call	809f94 <_strtod_r>
  8044c4:	a900004c 	andi	r4,r21,1
  8044c8:	2009003a 	cmpeq	r4,r4,zero
  8044cc:	1025883a 	mov	r18,r2
  8044d0:	1827883a 	mov	r19,r3
  8044d4:	2000141e 	bne	r4,zero,804528 <__svfscanf_r+0xc70>
  8044d8:	d8c0a417 	ldw	r3,656(sp)
  8044dc:	18800017 	ldw	r2,0(r3)
  8044e0:	1d400104 	addi	r21,r3,4
  8044e4:	14c00115 	stw	r19,4(r2)
  8044e8:	14800015 	stw	r18,0(r2)
  8044ec:	d8c0a217 	ldw	r3,648(sp)
  8044f0:	dd40a415 	stw	r21,656(sp)
  8044f4:	18c00044 	addi	r3,r3,1
  8044f8:	d8c0a215 	stw	r3,648(sp)
  8044fc:	003d0106 	br	803904 <__svfscanf_r+0x4c>
  804500:	d900a517 	ldw	r4,660(sp)
  804504:	25fd212e 	bgeu	r4,r23,80398c <__svfscanf_r+0xd4>
  804508:	bdffffc4 	addi	r23,r23,-1
  80450c:	b9400007 	ldb	r5,0(r23)
  804510:	b009883a 	mov	r4,r22
  804514:	800d883a 	mov	r6,r16
  804518:	080c25c0 	call	80c25c <_ungetc_r>
  80451c:	d880a517 	ldw	r2,660(sp)
  804520:	15fff936 	bltu	r2,r23,804508 <__svfscanf_r+0xc50>
  804524:	003d1906 	br	80398c <__svfscanf_r+0xd4>
  804528:	a880008c 	andi	r2,r21,2
  80452c:	10011926 	beq	r2,zero,804994 <__svfscanf_r+0x10dc>
  804530:	d900a417 	ldw	r4,656(sp)
  804534:	20800017 	ldw	r2,0(r4)
  804538:	25400104 	addi	r21,r4,4
  80453c:	10c00115 	stw	r3,4(r2)
  804540:	14800015 	stw	r18,0(r2)
  804544:	003fe906 	br	8044ec <__svfscanf_r+0xc34>
  804548:	d8c09c17 	ldw	r3,624(sp)
  80454c:	b009883a 	mov	r4,r22
  804550:	000d883a 	mov	r6,zero
  804554:	19400044 	addi	r5,r3,1
  804558:	01c00284 	movi	r7,10
  80455c:	080b6a00 	call	80b6a0 <_strtol_r>
  804560:	d9009d17 	ldw	r4,628(sp)
  804564:	110dc83a 	sub	r6,r2,r4
  804568:	d8c0a517 	ldw	r3,660(sp)
  80456c:	d9009c17 	ldw	r4,624(sp)
  804570:	188054c4 	addi	r2,r3,339
  804574:	20800236 	bltu	r4,r2,804580 <__svfscanf_r+0xcc8>
  804578:	18805484 	addi	r2,r3,338
  80457c:	d8809c15 	stw	r2,624(sp)
  804580:	d9009c17 	ldw	r4,624(sp)
  804584:	014020b4 	movhi	r5,130
  804588:	2970f204 	addi	r5,r5,-15416
  80458c:	080162c0 	call	80162c <sprintf>
  804590:	003fc806 	br	8044b4 <__svfscanf_r+0xbfc>
  804594:	0027883a 	mov	r19,zero
  804598:	d8c04404 	addi	r3,sp,272
  80459c:	d8c0a515 	stw	r3,660(sp)
  8045a0:	182f883a 	mov	r23,r3
  8045a4:	d8009f15 	stw	zero,636(sp)
  8045a8:	d8009e15 	stw	zero,632(sp)
  8045ac:	d8009d15 	stw	zero,628(sp)
  8045b0:	d8009c15 	stw	zero,624(sp)
  8045b4:	0039883a 	mov	fp,zero
  8045b8:	0025883a 	mov	r18,zero
  8045bc:	80800017 	ldw	r2,0(r16)
  8045c0:	11400003 	ldbu	r5,0(r2)
  8045c4:	00801384 	movi	r2,78
  8045c8:	28fff544 	addi	r3,r5,-43
  8045cc:	18c03fcc 	andi	r3,r3,255
  8045d0:	10c08336 	bltu	r2,r3,8047e0 <__svfscanf_r+0xf28>
  8045d4:	18c5883a 	add	r2,r3,r3
  8045d8:	1085883a 	add	r2,r2,r2
  8045dc:	00c02034 	movhi	r3,128
  8045e0:	18d17c04 	addi	r3,r3,17904
  8045e4:	10c5883a 	add	r2,r2,r3
  8045e8:	11000017 	ldw	r4,0(r2)
  8045ec:	2000683a 	jmp	r4
  8045f0:	00804798 	cmpnei	r2,zero,286
  8045f4:	008047e0 	cmpeqi	r2,zero,287
  8045f8:	00804798 	cmpnei	r2,zero,286
  8045fc:	00804824 	muli	r2,zero,288
  804600:	008047e0 	cmpeqi	r2,zero,287
  804604:	00804890 	cmplti	r2,zero,290
  804608:	008048c4 	movi	r2,291
  80460c:	008048c4 	movi	r2,291
  804610:	008048c4 	movi	r2,291
  804614:	008048c4 	movi	r2,291
  804618:	008048c4 	movi	r2,291
  80461c:	008048c4 	movi	r2,291
  804620:	008048c4 	movi	r2,291
  804624:	008048c4 	movi	r2,291
  804628:	008048c4 	movi	r2,291
  80462c:	008047e0 	cmpeqi	r2,zero,287
  804630:	008047e0 	cmpeqi	r2,zero,287
  804634:	008047e0 	cmpeqi	r2,zero,287
  804638:	008047e0 	cmpeqi	r2,zero,287
  80463c:	008047e0 	cmpeqi	r2,zero,287
  804640:	008047e0 	cmpeqi	r2,zero,287
  804644:	008047e0 	cmpeqi	r2,zero,287
  804648:	008048e4 	muli	r2,zero,291
  80464c:	008047e0 	cmpeqi	r2,zero,287
  804650:	008047e0 	cmpeqi	r2,zero,287
  804654:	008047e0 	cmpeqi	r2,zero,287
  804658:	008048f4 	movhi	r2,291
  80465c:	00804940 	call	80494 <OSCtxSw_SWITCH_PC+0x80454>
  804660:	008047e0 	cmpeqi	r2,zero,287
  804664:	008047e0 	cmpeqi	r2,zero,287
  804668:	00804a18 	cmpnei	r2,zero,296
  80466c:	008047e0 	cmpeqi	r2,zero,287
  804670:	008047e0 	cmpeqi	r2,zero,287
  804674:	008047e0 	cmpeqi	r2,zero,287
  804678:	008047e0 	cmpeqi	r2,zero,287
  80467c:	008049c4 	movi	r2,295
  804680:	008047e0 	cmpeqi	r2,zero,287
  804684:	008047e0 	cmpeqi	r2,zero,287
  804688:	008047e0 	cmpeqi	r2,zero,287
  80468c:	008047e0 	cmpeqi	r2,zero,287
  804690:	008047e0 	cmpeqi	r2,zero,287
  804694:	00804a58 	cmpnei	r2,zero,297
  804698:	008047e0 	cmpeqi	r2,zero,287
  80469c:	008047e0 	cmpeqi	r2,zero,287
  8046a0:	008047e0 	cmpeqi	r2,zero,287
  8046a4:	008047e0 	cmpeqi	r2,zero,287
  8046a8:	0080495c 	xori	r2,zero,293
  8046ac:	008047e0 	cmpeqi	r2,zero,287
  8046b0:	008047e0 	cmpeqi	r2,zero,287
  8046b4:	008047e0 	cmpeqi	r2,zero,287
  8046b8:	008047e0 	cmpeqi	r2,zero,287
  8046bc:	008047e0 	cmpeqi	r2,zero,287
  8046c0:	008047e0 	cmpeqi	r2,zero,287
  8046c4:	008047e0 	cmpeqi	r2,zero,287
  8046c8:	008048e4 	muli	r2,zero,291
  8046cc:	008047e0 	cmpeqi	r2,zero,287
  8046d0:	008047e0 	cmpeqi	r2,zero,287
  8046d4:	008047e0 	cmpeqi	r2,zero,287
  8046d8:	008048f4 	movhi	r2,291
  8046dc:	00804940 	call	80494 <OSCtxSw_SWITCH_PC+0x80454>
  8046e0:	008047e0 	cmpeqi	r2,zero,287
  8046e4:	008047e0 	cmpeqi	r2,zero,287
  8046e8:	00804a18 	cmpnei	r2,zero,296
  8046ec:	008047e0 	cmpeqi	r2,zero,287
  8046f0:	008047e0 	cmpeqi	r2,zero,287
  8046f4:	008047e0 	cmpeqi	r2,zero,287
  8046f8:	008047e0 	cmpeqi	r2,zero,287
  8046fc:	008049c4 	movi	r2,295
  804700:	008047e0 	cmpeqi	r2,zero,287
  804704:	008047e0 	cmpeqi	r2,zero,287
  804708:	008047e0 	cmpeqi	r2,zero,287
  80470c:	008047e0 	cmpeqi	r2,zero,287
  804710:	008047e0 	cmpeqi	r2,zero,287
  804714:	00804a58 	cmpnei	r2,zero,297
  804718:	008047e0 	cmpeqi	r2,zero,287
  80471c:	008047e0 	cmpeqi	r2,zero,287
  804720:	008047e0 	cmpeqi	r2,zero,287
  804724:	008047e0 	cmpeqi	r2,zero,287
  804728:	0080495c 	xori	r2,zero,293
  80472c:	a880040c 	andi	r2,r21,16
  804730:	10004826 	beq	r2,zero,804854 <__svfscanf_r+0xf9c>
  804734:	0027883a 	mov	r19,zero
  804738:	00000b06 	br	804768 <__svfscanf_r+0xeb0>
  80473c:	80800017 	ldw	r2,0(r16)
  804740:	b009883a 	mov	r4,r22
  804744:	800b883a 	mov	r5,r16
  804748:	148d883a 	add	r6,r2,r18
  80474c:	81800015 	stw	r6,0(r16)
  804750:	9ca7883a 	add	r19,r19,r18
  804754:	0809a2c0 	call	809a2c <__srefill_r>
  804758:	103dc61e 	bne	r2,zero,803e74 <__svfscanf_r+0x5bc>
  80475c:	d880a317 	ldw	r2,652(sp)
  804760:	1485c83a 	sub	r2,r2,r18
  804764:	d880a315 	stw	r2,652(sp)
  804768:	84800117 	ldw	r18,4(r16)
  80476c:	d900a317 	ldw	r4,652(sp)
  804770:	913ff216 	blt	r18,r4,80473c <__svfscanf_r+0xe84>
  804774:	d900a317 	ldw	r4,652(sp)
  804778:	80800017 	ldw	r2,0(r16)
  80477c:	9927883a 	add	r19,r19,r4
  804780:	9107c83a 	sub	r3,r18,r4
  804784:	110d883a 	add	r6,r2,r4
  804788:	8ce3883a 	add	r17,r17,r19
  80478c:	80c00115 	stw	r3,4(r16)
  804790:	81800015 	stw	r6,0(r16)
  804794:	003c5b06 	br	803904 <__svfscanf_r+0x4c>
  804798:	a880200c 	andi	r2,r21,128
  80479c:	10001026 	beq	r2,zero,8047e0 <__svfscanf_r+0xf28>
  8047a0:	00bfdfc4 	movi	r2,-129
  8047a4:	a8aa703a 	and	r21,r21,r2
  8047a8:	b9400005 	stb	r5,0(r23)
  8047ac:	bdc00044 	addi	r23,r23,1
  8047b0:	80c00117 	ldw	r3,4(r16)
  8047b4:	8c400044 	addi	r17,r17,1
  8047b8:	18bfffc4 	addi	r2,r3,-1
  8047bc:	80800115 	stw	r2,4(r16)
  8047c0:	00801f0e 	bge	zero,r2,804840 <__svfscanf_r+0xf88>
  8047c4:	80800017 	ldw	r2,0(r16)
  8047c8:	10800044 	addi	r2,r2,1
  8047cc:	80800015 	stw	r2,0(r16)
  8047d0:	d880a317 	ldw	r2,652(sp)
  8047d4:	10bfffc4 	addi	r2,r2,-1
  8047d8:	d880a315 	stw	r2,652(sp)
  8047dc:	103f771e 	bne	r2,zero,8045bc <__svfscanf_r+0xd04>
  8047e0:	d8c09e17 	ldw	r3,632(sp)
  8047e4:	18000226 	beq	r3,zero,8047f0 <__svfscanf_r+0xf38>
  8047e8:	00bfbfc4 	movi	r2,-257
  8047ec:	a8aa703a 	and	r21,r21,r2
  8047f0:	90ffffc4 	addi	r3,r18,-1
  8047f4:	00800044 	movi	r2,1
  8047f8:	10fef536 	bltu	r2,r3,8043d0 <__svfscanf_r+0xb18>
  8047fc:	d900a517 	ldw	r4,660(sp)
  804800:	25fc622e 	bgeu	r4,r23,80398c <__svfscanf_r+0xd4>
  804804:	bdffffc4 	addi	r23,r23,-1
  804808:	b9400007 	ldb	r5,0(r23)
  80480c:	b009883a 	mov	r4,r22
  804810:	800d883a 	mov	r6,r16
  804814:	080c25c0 	call	80c25c <_ungetc_r>
  804818:	d880a517 	ldw	r2,660(sp)
  80481c:	15fff936 	bltu	r2,r23,804804 <__svfscanf_r+0xf4c>
  804820:	003c5a06 	br	80398c <__svfscanf_r+0xd4>
  804824:	a880800c 	andi	r2,r21,512
  804828:	103fed26 	beq	r2,zero,8047e0 <__svfscanf_r+0xf28>
  80482c:	d9009e17 	ldw	r4,632(sp)
  804830:	00bf5fc4 	movi	r2,-641
  804834:	a8aa703a 	and	r21,r21,r2
  804838:	d9009f15 	stw	r4,636(sp)
  80483c:	003fda06 	br	8047a8 <__svfscanf_r+0xef0>
  804840:	b009883a 	mov	r4,r22
  804844:	800b883a 	mov	r5,r16
  804848:	0809a2c0 	call	809a2c <__srefill_r>
  80484c:	103fe026 	beq	r2,zero,8047d0 <__svfscanf_r+0xf18>
  804850:	003fe306 	br	8047e0 <__svfscanf_r+0xf28>
  804854:	d880a417 	ldw	r2,656(sp)
  804858:	d980a317 	ldw	r6,652(sp)
  80485c:	01400044 	movi	r5,1
  804860:	11000017 	ldw	r4,0(r2)
  804864:	800f883a 	mov	r7,r16
  804868:	08070a40 	call	8070a4 <fread>
  80486c:	103c6726 	beq	r2,zero,803a0c <__svfscanf_r+0x154>
  804870:	d8c0a417 	ldw	r3,656(sp)
  804874:	d900a217 	ldw	r4,648(sp)
  804878:	88a3883a 	add	r17,r17,r2
  80487c:	18c00104 	addi	r3,r3,4
  804880:	21000044 	addi	r4,r4,1
  804884:	d8c0a415 	stw	r3,656(sp)
  804888:	d900a215 	stw	r4,648(sp)
  80488c:	003c1d06 	br	803904 <__svfscanf_r+0x4c>
  804890:	a880400c 	andi	r2,r21,256
  804894:	10000b26 	beq	r2,zero,8048c4 <__svfscanf_r+0x100c>
  804898:	00bfdfc4 	movi	r2,-129
  80489c:	a8aa703a 	and	r21,r21,r2
  8048a0:	d8809e17 	ldw	r2,632(sp)
  8048a4:	10800044 	addi	r2,r2,1
  8048a8:	d8809e15 	stw	r2,632(sp)
  8048ac:	983fc026 	beq	r19,zero,8047b0 <__svfscanf_r+0xef8>
  8048b0:	d8c0a317 	ldw	r3,652(sp)
  8048b4:	9cffffc4 	addi	r19,r19,-1
  8048b8:	18c00044 	addi	r3,r3,1
  8048bc:	d8c0a315 	stw	r3,652(sp)
  8048c0:	003fbb06 	br	8047b0 <__svfscanf_r+0xef8>
  8048c4:	e0803fcc 	andi	r2,fp,255
  8048c8:	1080201c 	xori	r2,r2,128
  8048cc:	10bfe004 	addi	r2,r2,-128
  8048d0:	9085883a 	add	r2,r18,r2
  8048d4:	103fc21e 	bne	r2,zero,8047e0 <__svfscanf_r+0xf28>
  8048d8:	00bf9fc4 	movi	r2,-385
  8048dc:	a8aa703a 	and	r21,r21,r2
  8048e0:	003fb106 	br	8047a8 <__svfscanf_r+0xef0>
  8048e4:	00800044 	movi	r2,1
  8048e8:	90bfbd1e 	bne	r18,r2,8047e0 <__svfscanf_r+0xf28>
  8048ec:	04800084 	movi	r18,2
  8048f0:	003fad06 	br	8047a8 <__svfscanf_r+0xef0>
  8048f4:	a8c1400c 	andi	r3,r21,1280
  8048f8:	00810004 	movi	r2,1024
  8048fc:	18800426 	beq	r3,r2,804910 <__svfscanf_r+0x1058>
  804900:	a884703a 	and	r2,r21,r2
  804904:	103fb626 	beq	r2,zero,8047e0 <__svfscanf_r+0xf28>
  804908:	d8809e17 	ldw	r2,632(sp)
  80490c:	103fb826 	beq	r2,zero,8047f0 <__svfscanf_r+0xf38>
  804910:	a880800c 	andi	r2,r21,512
  804914:	1000051e 	bne	r2,zero,80492c <__svfscanf_r+0x1074>
  804918:	d8c09e17 	ldw	r3,632(sp)
  80491c:	d9009f17 	ldw	r4,636(sp)
  804920:	ddc09c15 	stw	r23,624(sp)
  804924:	1907c83a 	sub	r3,r3,r4
  804928:	d8c09d15 	stw	r3,628(sp)
  80492c:	00be7fc4 	movi	r2,-1537
  804930:	a884703a 	and	r2,r21,r2
  804934:	15406014 	ori	r21,r2,384
  804938:	d8009e15 	stw	zero,632(sp)
  80493c:	003f9a06 	br	8047a8 <__svfscanf_r+0xef0>
  804940:	e0c03fcc 	andi	r3,fp,255
  804944:	18c0201c 	xori	r3,r3,128
  804948:	18ffe004 	addi	r3,r3,-128
  80494c:	00800084 	movi	r2,2
  804950:	18bfa31e 	bne	r3,r2,8047e0 <__svfscanf_r+0xf28>
  804954:	070000c4 	movi	fp,3
  804958:	003f9306 	br	8047a8 <__svfscanf_r+0xef0>
  80495c:	e0c03fcc 	andi	r3,fp,255
  804960:	18c0201c 	xori	r3,r3,128
  804964:	18ffe004 	addi	r3,r3,-128
  804968:	008001c4 	movi	r2,7
  80496c:	18bf9c1e 	bne	r3,r2,8047e0 <__svfscanf_r+0xf28>
  804970:	07000204 	movi	fp,8
  804974:	003f8c06 	br	8047a8 <__svfscanf_r+0xef0>
  804978:	d8c09e17 	ldw	r3,632(sp)
  80497c:	d9009f17 	ldw	r4,636(sp)
  804980:	1905c83a 	sub	r2,r3,r4
  804984:	103ecb26 	beq	r2,zero,8044b4 <__svfscanf_r+0xbfc>
  804988:	008dc83a 	sub	r6,zero,r2
  80498c:	ddc09c15 	stw	r23,624(sp)
  804990:	003ef506 	br	804568 <__svfscanf_r+0xcb0>
  804994:	d880a417 	ldw	r2,656(sp)
  804998:	9009883a 	mov	r4,r18
  80499c:	180b883a 	mov	r5,r3
  8049a0:	15c00017 	ldw	r23,0(r2)
  8049a4:	15400104 	addi	r21,r2,4
  8049a8:	0809c4c0 	call	809c4c <__isnand>
  8049ac:	1000311e 	bne	r2,zero,804a74 <__svfscanf_r+0x11bc>
  8049b0:	980b883a 	mov	r5,r19
  8049b4:	9009883a 	mov	r4,r18
  8049b8:	080f5f00 	call	80f5f0 <__truncdfsf2>
  8049bc:	b8800015 	stw	r2,0(r23)
  8049c0:	003eca06 	br	8044ec <__svfscanf_r+0xc34>
  8049c4:	9000101e 	bne	r18,zero,804a08 <__svfscanf_r+0x1150>
  8049c8:	a8c1c00c 	andi	r3,r21,1792
  8049cc:	0081c004 	movi	r2,1792
  8049d0:	18800926 	beq	r3,r2,8049f8 <__svfscanf_r+0x1140>
  8049d4:	e0c03fcc 	andi	r3,fp,255
  8049d8:	18c0201c 	xori	r3,r3,128
  8049dc:	18ffe004 	addi	r3,r3,-128
  8049e0:	00800044 	movi	r2,1
  8049e4:	18800226 	beq	r3,r2,8049f0 <__svfscanf_r+0x1138>
  8049e8:	00800104 	movi	r2,4
  8049ec:	18bf7c1e 	bne	r3,r2,8047e0 <__svfscanf_r+0xf28>
  8049f0:	e7000044 	addi	fp,fp,1
  8049f4:	003f6c06 	br	8047a8 <__svfscanf_r+0xef0>
  8049f8:	00be1fc4 	movi	r2,-1921
  8049fc:	a8aa703a 	and	r21,r21,r2
  804a00:	04800044 	movi	r18,1
  804a04:	003f6806 	br	8047a8 <__svfscanf_r+0xef0>
  804a08:	00800084 	movi	r2,2
  804a0c:	90bff11e 	bne	r18,r2,8049d4 <__svfscanf_r+0x111c>
  804a10:	048000c4 	movi	r18,3
  804a14:	003f6406 	br	8047a8 <__svfscanf_r+0xef0>
  804a18:	e0c03fcc 	andi	r3,fp,255
  804a1c:	18c0201c 	xori	r3,r3,128
  804a20:	18ffe004 	addi	r3,r3,-128
  804a24:	1800071e 	bne	r3,zero,804a44 <__svfscanf_r+0x118c>
  804a28:	a8c1c00c 	andi	r3,r21,1792
  804a2c:	0081c004 	movi	r2,1792
  804a30:	18bf6b1e 	bne	r3,r2,8047e0 <__svfscanf_r+0xf28>
  804a34:	00be1fc4 	movi	r2,-1921
  804a38:	a8aa703a 	and	r21,r21,r2
  804a3c:	07000044 	movi	fp,1
  804a40:	003f5906 	br	8047a8 <__svfscanf_r+0xef0>
  804a44:	008000c4 	movi	r2,3
  804a48:	18bfe926 	beq	r3,r2,8049f0 <__svfscanf_r+0x1138>
  804a4c:	00800144 	movi	r2,5
  804a50:	18bfe726 	beq	r3,r2,8049f0 <__svfscanf_r+0x1138>
  804a54:	003f6206 	br	8047e0 <__svfscanf_r+0xf28>
  804a58:	e0c03fcc 	andi	r3,fp,255
  804a5c:	18c0201c 	xori	r3,r3,128
  804a60:	18ffe004 	addi	r3,r3,-128
  804a64:	00800184 	movi	r2,6
  804a68:	18bf5d1e 	bne	r3,r2,8047e0 <__svfscanf_r+0xf28>
  804a6c:	070001c4 	movi	fp,7
  804a70:	003f4d06 	br	8047a8 <__svfscanf_r+0xef0>
  804a74:	0009883a 	mov	r4,zero
  804a78:	0809d3c0 	call	809d3c <nanf>
  804a7c:	b8800015 	stw	r2,0(r23)
  804a80:	003e9a06 	br	8044ec <__svfscanf_r+0xc34>
  804a84:	a00b883a 	mov	r5,r20
  804a88:	d9000404 	addi	r4,sp,16
  804a8c:	0809c7c0 	call	809c7c <__sccl>
  804a90:	1029883a 	mov	r20,r2
  804a94:	ad401014 	ori	r21,r21,64
  804a98:	04800044 	movi	r18,1
  804a9c:	003c7506 	br	803c74 <__svfscanf_r+0x3bc>
  804aa0:	01000204 	movi	r4,8
  804aa4:	00802074 	movhi	r2,129
  804aa8:	10af0b04 	addi	r2,r2,-17364
  804aac:	ad400054 	ori	r21,r21,1
  804ab0:	048000c4 	movi	r18,3
  804ab4:	d900a115 	stw	r4,644(sp)
  804ab8:	d880a015 	stw	r2,640(sp)
  804abc:	003c6d06 	br	803c74 <__svfscanf_r+0x3bc>
  804ac0:	ad400094 	ori	r21,r21,2
  804ac4:	003bd806 	br	803a28 <__svfscanf_r+0x170>
  804ac8:	d900a317 	ldw	r4,652(sp)
  804acc:	01400284 	movi	r5,10
  804ad0:	080f9440 	call	80f944 <__mulsi3>
  804ad4:	15c5883a 	add	r2,r2,r23
  804ad8:	10bff404 	addi	r2,r2,-48
  804adc:	d880a315 	stw	r2,652(sp)
  804ae0:	003bd106 	br	803a28 <__svfscanf_r+0x170>
  804ae4:	ad400414 	ori	r21,r21,16
  804ae8:	003bcf06 	br	803a28 <__svfscanf_r+0x170>
  804aec:	00800404 	movi	r2,16
  804af0:	00c02074 	movhi	r3,129
  804af4:	18ef0b04 	addi	r3,r3,-17364
  804af8:	ad408014 	ori	r21,r21,512
  804afc:	048000c4 	movi	r18,3
  804b00:	d880a115 	stw	r2,644(sp)
  804b04:	d8c0a015 	stw	r3,640(sp)
  804b08:	003c5a06 	br	803c74 <__svfscanf_r+0x3bc>
  804b0c:	00c00284 	movi	r3,10
  804b10:	01002074 	movhi	r4,129
  804b14:	212f0b04 	addi	r4,r4,-17364
  804b18:	048000c4 	movi	r18,3
  804b1c:	d8c0a115 	stw	r3,644(sp)
  804b20:	d900a015 	stw	r4,640(sp)
  804b24:	003c5306 	br	803c74 <__svfscanf_r+0x3bc>
  804b28:	00c02074 	movhi	r3,129
  804b2c:	18eda804 	addi	r3,r3,-18784
  804b30:	048000c4 	movi	r18,3
  804b34:	d8c0a015 	stw	r3,640(sp)
  804b38:	d800a115 	stw	zero,644(sp)
  804b3c:	003c4d06 	br	803c74 <__svfscanf_r+0x3bc>
  804b40:	d8c0a117 	ldw	r3,644(sp)
  804b44:	18c5883a 	add	r2,r3,r3
  804b48:	00c020b4 	movhi	r3,130
  804b4c:	18f0f384 	addi	r3,r3,-15410
  804b50:	10c5883a 	add	r2,r2,r3
  804b54:	1080000f 	ldh	r2,0(r2)
  804b58:	00fd1fc4 	movi	r3,-2945
  804b5c:	90e4703a 	and	r18,r18,r3
  804b60:	d880a115 	stw	r2,644(sp)
  804b64:	003de806 	br	804308 <__svfscanf_r+0xa50>
  804b68:	d900a117 	ldw	r4,644(sp)
  804b6c:	00c020b4 	movhi	r3,130
  804b70:	18f0f384 	addi	r3,r3,-15410
  804b74:	2105883a 	add	r2,r4,r4
  804b78:	10c5883a 	add	r2,r2,r3
  804b7c:	1080000f 	ldh	r2,0(r2)
  804b80:	00c00204 	movi	r3,8
  804b84:	d880a115 	stw	r2,644(sp)
  804b88:	18bd870e 	bge	r3,r2,8041a8 <__svfscanf_r+0x8f0>
  804b8c:	00bd1fc4 	movi	r2,-2945
  804b90:	90a4703a 	and	r18,r18,r2
  804b94:	003ddc06 	br	804308 <__svfscanf_r+0xa50>
  804b98:	d8c0a117 	ldw	r3,644(sp)
  804b9c:	00800284 	movi	r2,10
  804ba0:	10fffa16 	blt	r2,r3,804b8c <__svfscanf_r+0x12d4>
  804ba4:	003d8006 	br	8041a8 <__svfscanf_r+0x8f0>
  804ba8:	90c1800c 	andi	r3,r18,1536
  804bac:	00808004 	movi	r2,512
  804bb0:	18bd7d1e 	bne	r3,r2,8041a8 <__svfscanf_r+0x8f0>
  804bb4:	00bf7fc4 	movi	r2,-513
  804bb8:	9084703a 	and	r2,r18,r2
  804bbc:	01000404 	movi	r4,16
  804bc0:	14814014 	ori	r18,r2,1280
  804bc4:	d900a115 	stw	r4,644(sp)
  804bc8:	003dcf06 	br	804308 <__svfscanf_r+0xa50>
  804bcc:	04800104 	movi	r18,4
  804bd0:	003c2806 	br	803c74 <__svfscanf_r+0x3bc>
  804bd4:	ad401014 	ori	r21,r21,64
  804bd8:	0025883a 	mov	r18,zero
  804bdc:	003c2506 	br	803c74 <__svfscanf_r+0x3bc>
  804be0:	ad400114 	ori	r21,r21,4
  804be4:	003b9006 	br	803a28 <__svfscanf_r+0x170>
  804be8:	0027883a 	mov	r19,zero
  804bec:	003cac06 	br	803ea0 <__svfscanf_r+0x5e8>
  804bf0:	903d5226 	beq	r18,zero,80413c <__svfscanf_r+0x884>
  804bf4:	94bfffc4 	addi	r18,r18,-1
  804bf8:	d8c04404 	addi	r3,sp,272
  804bfc:	1c85883a 	add	r2,r3,r18
  804c00:	11400003 	ldbu	r5,0(r2)
  804c04:	b009883a 	mov	r4,r22
  804c08:	800d883a 	mov	r6,r16
  804c0c:	080c25c0 	call	80c25c <_ungetc_r>
  804c10:	003ff706 	br	804bf0 <__svfscanf_r+0x1338>
  804c14:	00bfff84 	movi	r2,-2
  804c18:	18bd361e 	bne	r3,r2,8040f4 <__svfscanf_r+0x83c>
  804c1c:	003d4006 	br	804120 <__svfscanf_r+0x868>
  804c20:	d900a417 	ldw	r4,656(sp)
  804c24:	25400017 	ldw	r21,0(r4)
  804c28:	21000104 	addi	r4,r4,4
  804c2c:	d900a415 	stw	r4,656(sp)
  804c30:	003d0606 	br	80404c <__svfscanf_r+0x794>
  804c34:	983b5526 	beq	r19,zero,80398c <__svfscanf_r+0xd4>
  804c38:	8ce3883a 	add	r17,r17,r19
  804c3c:	003b3106 	br	803904 <__svfscanf_r+0x4c>
  804c40:	00bfff84 	movi	r2,-2
  804c44:	18bc621e 	bne	r3,r2,803dd0 <__svfscanf_r+0x518>
  804c48:	003c6906 	br	803df0 <__svfscanf_r+0x538>
  804c4c:	b009883a 	mov	r4,r22
  804c50:	800b883a 	mov	r5,r16
  804c54:	0809a2c0 	call	809a2c <__srefill_r>
  804c58:	103c6726 	beq	r2,zero,803df8 <__svfscanf_r+0x540>
  804c5c:	903b6b1e 	bne	r18,zero,803a0c <__svfscanf_r+0x154>
  804c60:	a83b281e 	bne	r21,zero,803904 <__svfscanf_r+0x4c>
  804c64:	d8c0a217 	ldw	r3,648(sp)
  804c68:	18c00044 	addi	r3,r3,1
  804c6c:	d8c0a215 	stw	r3,648(sp)
  804c70:	003b2406 	br	803904 <__svfscanf_r+0x4c>
  804c74:	8080030b 	ldhu	r2,12(r16)
  804c78:	1080100c 	andi	r2,r2,64
  804c7c:	103b4326 	beq	r2,zero,80398c <__svfscanf_r+0xd4>
  804c80:	003b6406 	br	803a14 <__svfscanf_r+0x15c>
  804c84:	d8c0a417 	ldw	r3,656(sp)
  804c88:	1cc00017 	ldw	r19,0(r3)
  804c8c:	18c00104 	addi	r3,r3,4
  804c90:	d8c0a415 	stw	r3,656(sp)
  804c94:	003c2906 	br	803d3c <__svfscanf_r+0x484>
  804c98:	00800204 	movi	r2,8
  804c9c:	00c02074 	movhi	r3,129
  804ca0:	18ef0b04 	addi	r3,r3,-17364
  804ca4:	048000c4 	movi	r18,3
  804ca8:	d880a115 	stw	r2,644(sp)
  804cac:	d8c0a015 	stw	r3,640(sp)
  804cb0:	003bf006 	br	803c74 <__svfscanf_r+0x3bc>
  804cb4:	04800084 	movi	r18,2
  804cb8:	003bee06 	br	803c74 <__svfscanf_r+0x3bc>
  804cbc:	01000404 	movi	r4,16
  804cc0:	00802074 	movhi	r2,129
  804cc4:	10af0b04 	addi	r2,r2,-17364
  804cc8:	ad408814 	ori	r21,r21,544
  804ccc:	048000c4 	movi	r18,3
  804cd0:	d900a115 	stw	r4,644(sp)
  804cd4:	d880a015 	stw	r2,640(sp)
  804cd8:	003be606 	br	803c74 <__svfscanf_r+0x3bc>
  804cdc:	a880040c 	andi	r2,r21,16
  804ce0:	103b081e 	bne	r2,zero,803904 <__svfscanf_r+0x4c>
  804ce4:	a880010c 	andi	r2,r21,4
  804ce8:	10004e26 	beq	r2,zero,804e24 <__svfscanf_r+0x156c>
  804cec:	d8c0a417 	ldw	r3,656(sp)
  804cf0:	18800017 	ldw	r2,0(r3)
  804cf4:	18c00104 	addi	r3,r3,4
  804cf8:	d8c0a415 	stw	r3,656(sp)
  804cfc:	1440000d 	sth	r17,0(r2)
  804d00:	003b0006 	br	803904 <__svfscanf_r+0x4c>
  804d04:	d880a417 	ldw	r2,656(sp)
  804d08:	dd400404 	addi	r21,sp,16
  804d0c:	14800017 	ldw	r18,0(r2)
  804d10:	9027883a 	mov	r19,r18
  804d14:	81000017 	ldw	r4,0(r16)
  804d18:	20800003 	ldbu	r2,0(r4)
  804d1c:	a885883a 	add	r2,r21,r2
  804d20:	10c00007 	ldb	r3,0(r2)
  804d24:	18001426 	beq	r3,zero,804d78 <__svfscanf_r+0x14c0>
  804d28:	d8c0a317 	ldw	r3,652(sp)
  804d2c:	80800117 	ldw	r2,4(r16)
  804d30:	21800044 	addi	r6,r4,1
  804d34:	18ffffc4 	addi	r3,r3,-1
  804d38:	d8c0a315 	stw	r3,652(sp)
  804d3c:	10ffffc4 	addi	r3,r2,-1
  804d40:	80c00115 	stw	r3,4(r16)
  804d44:	20800003 	ldbu	r2,0(r4)
  804d48:	90800005 	stb	r2,0(r18)
  804d4c:	d900a317 	ldw	r4,652(sp)
  804d50:	81800015 	stw	r6,0(r16)
  804d54:	94800044 	addi	r18,r18,1
  804d58:	20000726 	beq	r4,zero,804d78 <__svfscanf_r+0x14c0>
  804d5c:	80800117 	ldw	r2,4(r16)
  804d60:	00bfec16 	blt	zero,r2,804d14 <__svfscanf_r+0x145c>
  804d64:	b009883a 	mov	r4,r22
  804d68:	800b883a 	mov	r5,r16
  804d6c:	0809a2c0 	call	809a2c <__srefill_r>
  804d70:	103fe826 	beq	r2,zero,804d14 <__svfscanf_r+0x145c>
  804d74:	9cbb2526 	beq	r19,r18,803a0c <__svfscanf_r+0x154>
  804d78:	94e7c83a 	sub	r19,r18,r19
  804d7c:	983b0326 	beq	r19,zero,80398c <__svfscanf_r+0xd4>
  804d80:	90000005 	stb	zero,0(r18)
  804d84:	d880a417 	ldw	r2,656(sp)
  804d88:	d8c0a217 	ldw	r3,648(sp)
  804d8c:	8ce3883a 	add	r17,r17,r19
  804d90:	10800104 	addi	r2,r2,4
  804d94:	18c00044 	addi	r3,r3,1
  804d98:	d880a415 	stw	r2,656(sp)
  804d9c:	d8c0a215 	stw	r3,648(sp)
  804da0:	003ad806 	br	803904 <__svfscanf_r+0x4c>
  804da4:	d900a517 	ldw	r4,660(sp)
  804da8:	25faf82e 	bgeu	r4,r23,80398c <__svfscanf_r+0xd4>
  804dac:	bdffffc4 	addi	r23,r23,-1
  804db0:	b9400007 	ldb	r5,0(r23)
  804db4:	b009883a 	mov	r4,r22
  804db8:	800d883a 	mov	r6,r16
  804dbc:	080c25c0 	call	80c25c <_ungetc_r>
  804dc0:	d8c0a517 	ldw	r3,660(sp)
  804dc4:	1dfff936 	bltu	r3,r23,804dac <__svfscanf_r+0x14f4>
  804dc8:	003af006 	br	80398c <__svfscanf_r+0xd4>
  804dcc:	a880040c 	andi	r2,r21,16
  804dd0:	10002d26 	beq	r2,zero,804e88 <__svfscanf_r+0x15d0>
  804dd4:	0025883a 	mov	r18,zero
  804dd8:	00000906 	br	804e00 <__svfscanf_r+0x1548>
  804ddc:	80c00117 	ldw	r3,4(r16)
  804de0:	d880a317 	ldw	r2,652(sp)
  804de4:	29800044 	addi	r6,r5,1
  804de8:	18ffffc4 	addi	r3,r3,-1
  804dec:	94800044 	addi	r18,r18,1
  804df0:	81800015 	stw	r6,0(r16)
  804df4:	80c00115 	stw	r3,4(r16)
  804df8:	14800826 	beq	r2,r18,804e1c <__svfscanf_r+0x1564>
  804dfc:	00c0120e 	bge	zero,r3,804e48 <__svfscanf_r+0x1590>
  804e00:	81400017 	ldw	r5,0(r16)
  804e04:	98800017 	ldw	r2,0(r19)
  804e08:	28c00003 	ldbu	r3,0(r5)
  804e0c:	1887883a 	add	r3,r3,r2
  804e10:	19000003 	ldbu	r4,0(r3)
  804e14:	2100020c 	andi	r4,r4,8
  804e18:	203ff026 	beq	r4,zero,804ddc <__svfscanf_r+0x1524>
  804e1c:	8ca3883a 	add	r17,r17,r18
  804e20:	003ab806 	br	803904 <__svfscanf_r+0x4c>
  804e24:	a880004c 	andi	r2,r21,1
  804e28:	1005003a 	cmpeq	r2,r2,zero
  804e2c:	10000b1e 	bne	r2,zero,804e5c <__svfscanf_r+0x15a4>
  804e30:	d900a417 	ldw	r4,656(sp)
  804e34:	20800017 	ldw	r2,0(r4)
  804e38:	21000104 	addi	r4,r4,4
  804e3c:	d900a415 	stw	r4,656(sp)
  804e40:	14400015 	stw	r17,0(r2)
  804e44:	003aaf06 	br	803904 <__svfscanf_r+0x4c>
  804e48:	b009883a 	mov	r4,r22
  804e4c:	800b883a 	mov	r5,r16
  804e50:	0809a2c0 	call	809a2c <__srefill_r>
  804e54:	103fea26 	beq	r2,zero,804e00 <__svfscanf_r+0x1548>
  804e58:	003ff006 	br	804e1c <__svfscanf_r+0x1564>
  804e5c:	a880008c 	andi	r2,r21,2
  804e60:	10002c26 	beq	r2,zero,804f14 <__svfscanf_r+0x165c>
  804e64:	d8c0a417 	ldw	r3,656(sp)
  804e68:	d900a417 	ldw	r4,656(sp)
  804e6c:	18800017 	ldw	r2,0(r3)
  804e70:	8807d7fa 	srai	r3,r17,31
  804e74:	21000104 	addi	r4,r4,4
  804e78:	d900a415 	stw	r4,656(sp)
  804e7c:	14400015 	stw	r17,0(r2)
  804e80:	10c00115 	stw	r3,4(r2)
  804e84:	003a9f06 	br	803904 <__svfscanf_r+0x4c>
  804e88:	d8c0a417 	ldw	r3,656(sp)
  804e8c:	1d400017 	ldw	r21,0(r3)
  804e90:	a825883a 	mov	r18,r21
  804e94:	00000e06 	br	804ed0 <__svfscanf_r+0x1618>
  804e98:	80800117 	ldw	r2,4(r16)
  804e9c:	d900a317 	ldw	r4,652(sp)
  804ea0:	29800044 	addi	r6,r5,1
  804ea4:	10ffffc4 	addi	r3,r2,-1
  804ea8:	213fffc4 	addi	r4,r4,-1
  804eac:	d900a315 	stw	r4,652(sp)
  804eb0:	80c00115 	stw	r3,4(r16)
  804eb4:	28800003 	ldbu	r2,0(r5)
  804eb8:	90800005 	stb	r2,0(r18)
  804ebc:	81800015 	stw	r6,0(r16)
  804ec0:	94800044 	addi	r18,r18,1
  804ec4:	20000926 	beq	r4,zero,804eec <__svfscanf_r+0x1634>
  804ec8:	80800117 	ldw	r2,4(r16)
  804ecc:	0080170e 	bge	zero,r2,804f2c <__svfscanf_r+0x1674>
  804ed0:	81400017 	ldw	r5,0(r16)
  804ed4:	98800017 	ldw	r2,0(r19)
  804ed8:	28c00003 	ldbu	r3,0(r5)
  804edc:	1887883a 	add	r3,r3,r2
  804ee0:	19000003 	ldbu	r4,0(r3)
  804ee4:	2100020c 	andi	r4,r4,8
  804ee8:	203feb26 	beq	r4,zero,804e98 <__svfscanf_r+0x15e0>
  804eec:	9545c83a 	sub	r2,r18,r21
  804ef0:	d8c0a217 	ldw	r3,648(sp)
  804ef4:	88a3883a 	add	r17,r17,r2
  804ef8:	d880a417 	ldw	r2,656(sp)
  804efc:	18c00044 	addi	r3,r3,1
  804f00:	d8c0a215 	stw	r3,648(sp)
  804f04:	10800104 	addi	r2,r2,4
  804f08:	d880a415 	stw	r2,656(sp)
  804f0c:	90000005 	stb	zero,0(r18)
  804f10:	003a7c06 	br	803904 <__svfscanf_r+0x4c>
  804f14:	d8c0a417 	ldw	r3,656(sp)
  804f18:	18800017 	ldw	r2,0(r3)
  804f1c:	18c00104 	addi	r3,r3,4
  804f20:	d8c0a415 	stw	r3,656(sp)
  804f24:	14400015 	stw	r17,0(r2)
  804f28:	003a7606 	br	803904 <__svfscanf_r+0x4c>
  804f2c:	b009883a 	mov	r4,r22
  804f30:	800b883a 	mov	r5,r16
  804f34:	0809a2c0 	call	809a2c <__srefill_r>
  804f38:	103fe526 	beq	r2,zero,804ed0 <__svfscanf_r+0x1618>
  804f3c:	003feb06 	br	804eec <__svfscanf_r+0x1634>

00804f40 <__svfscanf>:
  804f40:	008020b4 	movhi	r2,130
  804f44:	10b96204 	addi	r2,r2,-6776
  804f48:	2013883a 	mov	r9,r4
  804f4c:	11000017 	ldw	r4,0(r2)
  804f50:	2805883a 	mov	r2,r5
  804f54:	300f883a 	mov	r7,r6
  804f58:	480b883a 	mov	r5,r9
  804f5c:	100d883a 	mov	r6,r2
  804f60:	08038b81 	jmpi	8038b8 <__svfscanf_r>

00804f64 <_vfscanf_r>:
  804f64:	defffb04 	addi	sp,sp,-20
  804f68:	dcc00315 	stw	r19,12(sp)
  804f6c:	dc800215 	stw	r18,8(sp)
  804f70:	dc400115 	stw	r17,4(sp)
  804f74:	dc000015 	stw	r16,0(sp)
  804f78:	dfc00415 	stw	ra,16(sp)
  804f7c:	2021883a 	mov	r16,r4
  804f80:	2823883a 	mov	r17,r5
  804f84:	3025883a 	mov	r18,r6
  804f88:	3827883a 	mov	r19,r7
  804f8c:	20000226 	beq	r4,zero,804f98 <_vfscanf_r+0x34>
  804f90:	20800e17 	ldw	r2,56(r4)
  804f94:	10000b26 	beq	r2,zero,804fc4 <_vfscanf_r+0x60>
  804f98:	8009883a 	mov	r4,r16
  804f9c:	880b883a 	mov	r5,r17
  804fa0:	900d883a 	mov	r6,r18
  804fa4:	980f883a 	mov	r7,r19
  804fa8:	dfc00417 	ldw	ra,16(sp)
  804fac:	dcc00317 	ldw	r19,12(sp)
  804fb0:	dc800217 	ldw	r18,8(sp)
  804fb4:	dc400117 	ldw	r17,4(sp)
  804fb8:	dc000017 	ldw	r16,0(sp)
  804fbc:	dec00504 	addi	sp,sp,20
  804fc0:	08038b81 	jmpi	8038b8 <__svfscanf_r>
  804fc4:	0806c0c0 	call	806c0c <__sinit>
  804fc8:	003ff306 	br	804f98 <_vfscanf_r+0x34>

00804fcc <vfscanf>:
  804fcc:	defffb04 	addi	sp,sp,-20
  804fd0:	dcc00315 	stw	r19,12(sp)
  804fd4:	04c020b4 	movhi	r19,130
  804fd8:	9cf96204 	addi	r19,r19,-6776
  804fdc:	98c00017 	ldw	r3,0(r19)
  804fe0:	dc800215 	stw	r18,8(sp)
  804fe4:	dc400115 	stw	r17,4(sp)
  804fe8:	dc000015 	stw	r16,0(sp)
  804fec:	dfc00415 	stw	ra,16(sp)
  804ff0:	2021883a 	mov	r16,r4
  804ff4:	2823883a 	mov	r17,r5
  804ff8:	3025883a 	mov	r18,r6
  804ffc:	18000326 	beq	r3,zero,80500c <vfscanf+0x40>
  805000:	18800e17 	ldw	r2,56(r3)
  805004:	1809883a 	mov	r4,r3
  805008:	10000b26 	beq	r2,zero,805038 <vfscanf+0x6c>
  80500c:	99000017 	ldw	r4,0(r19)
  805010:	800b883a 	mov	r5,r16
  805014:	880d883a 	mov	r6,r17
  805018:	900f883a 	mov	r7,r18
  80501c:	dfc00417 	ldw	ra,16(sp)
  805020:	dcc00317 	ldw	r19,12(sp)
  805024:	dc800217 	ldw	r18,8(sp)
  805028:	dc400117 	ldw	r17,4(sp)
  80502c:	dc000017 	ldw	r16,0(sp)
  805030:	dec00504 	addi	sp,sp,20
  805034:	08038b81 	jmpi	8038b8 <__svfscanf_r>
  805038:	0806c0c0 	call	806c0c <__sinit>
  80503c:	003ff306 	br	80500c <vfscanf+0x40>

00805040 <__swsetup_r>:
  805040:	008020b4 	movhi	r2,130
  805044:	10b96204 	addi	r2,r2,-6776
  805048:	10c00017 	ldw	r3,0(r2)
  80504c:	defffd04 	addi	sp,sp,-12
  805050:	dc400115 	stw	r17,4(sp)
  805054:	dc000015 	stw	r16,0(sp)
  805058:	dfc00215 	stw	ra,8(sp)
  80505c:	2023883a 	mov	r17,r4
  805060:	2821883a 	mov	r16,r5
  805064:	18000226 	beq	r3,zero,805070 <__swsetup_r+0x30>
  805068:	18800e17 	ldw	r2,56(r3)
  80506c:	10001f26 	beq	r2,zero,8050ec <__swsetup_r+0xac>
  805070:	8100030b 	ldhu	r4,12(r16)
  805074:	2080020c 	andi	r2,r4,8
  805078:	10002826 	beq	r2,zero,80511c <__swsetup_r+0xdc>
  80507c:	81400417 	ldw	r5,16(r16)
  805080:	28001d26 	beq	r5,zero,8050f8 <__swsetup_r+0xb8>
  805084:	2080004c 	andi	r2,r4,1
  805088:	1005003a 	cmpeq	r2,r2,zero
  80508c:	10000b26 	beq	r2,zero,8050bc <__swsetup_r+0x7c>
  805090:	2080008c 	andi	r2,r4,2
  805094:	10001226 	beq	r2,zero,8050e0 <__swsetup_r+0xa0>
  805098:	0005883a 	mov	r2,zero
  80509c:	80800215 	stw	r2,8(r16)
  8050a0:	28000b26 	beq	r5,zero,8050d0 <__swsetup_r+0x90>
  8050a4:	0005883a 	mov	r2,zero
  8050a8:	dfc00217 	ldw	ra,8(sp)
  8050ac:	dc400117 	ldw	r17,4(sp)
  8050b0:	dc000017 	ldw	r16,0(sp)
  8050b4:	dec00304 	addi	sp,sp,12
  8050b8:	f800283a 	ret
  8050bc:	80800517 	ldw	r2,20(r16)
  8050c0:	80000215 	stw	zero,8(r16)
  8050c4:	0085c83a 	sub	r2,zero,r2
  8050c8:	80800615 	stw	r2,24(r16)
  8050cc:	283ff51e 	bne	r5,zero,8050a4 <__swsetup_r+0x64>
  8050d0:	2080200c 	andi	r2,r4,128
  8050d4:	103ff326 	beq	r2,zero,8050a4 <__swsetup_r+0x64>
  8050d8:	00bfffc4 	movi	r2,-1
  8050dc:	003ff206 	br	8050a8 <__swsetup_r+0x68>
  8050e0:	80800517 	ldw	r2,20(r16)
  8050e4:	80800215 	stw	r2,8(r16)
  8050e8:	003fed06 	br	8050a0 <__swsetup_r+0x60>
  8050ec:	1809883a 	mov	r4,r3
  8050f0:	0806c0c0 	call	806c0c <__sinit>
  8050f4:	003fde06 	br	805070 <__swsetup_r+0x30>
  8050f8:	20c0a00c 	andi	r3,r4,640
  8050fc:	00808004 	movi	r2,512
  805100:	18bfe026 	beq	r3,r2,805084 <__swsetup_r+0x44>
  805104:	8809883a 	mov	r4,r17
  805108:	800b883a 	mov	r5,r16
  80510c:	0807c300 	call	807c30 <__smakebuf_r>
  805110:	8100030b 	ldhu	r4,12(r16)
  805114:	81400417 	ldw	r5,16(r16)
  805118:	003fda06 	br	805084 <__swsetup_r+0x44>
  80511c:	2080040c 	andi	r2,r4,16
  805120:	103fed26 	beq	r2,zero,8050d8 <__swsetup_r+0x98>
  805124:	2080010c 	andi	r2,r4,4
  805128:	10001226 	beq	r2,zero,805174 <__swsetup_r+0x134>
  80512c:	81400c17 	ldw	r5,48(r16)
  805130:	28000526 	beq	r5,zero,805148 <__swsetup_r+0x108>
  805134:	80801004 	addi	r2,r16,64
  805138:	28800226 	beq	r5,r2,805144 <__swsetup_r+0x104>
  80513c:	8809883a 	mov	r4,r17
  805140:	08072100 	call	807210 <_free_r>
  805144:	80000c15 	stw	zero,48(r16)
  805148:	8080030b 	ldhu	r2,12(r16)
  80514c:	81400417 	ldw	r5,16(r16)
  805150:	80000115 	stw	zero,4(r16)
  805154:	10bff6cc 	andi	r2,r2,65499
  805158:	8080030d 	sth	r2,12(r16)
  80515c:	81400015 	stw	r5,0(r16)
  805160:	8080030b 	ldhu	r2,12(r16)
  805164:	10800214 	ori	r2,r2,8
  805168:	113fffcc 	andi	r4,r2,65535
  80516c:	8080030d 	sth	r2,12(r16)
  805170:	003fc306 	br	805080 <__swsetup_r+0x40>
  805174:	81400417 	ldw	r5,16(r16)
  805178:	003ff906 	br	805160 <__swsetup_r+0x120>

0080517c <quorem>:
  80517c:	28c00417 	ldw	r3,16(r5)
  805180:	20800417 	ldw	r2,16(r4)
  805184:	defff104 	addi	sp,sp,-60
  805188:	dfc00e15 	stw	ra,56(sp)
  80518c:	df000d15 	stw	fp,52(sp)
  805190:	ddc00c15 	stw	r23,48(sp)
  805194:	dd800b15 	stw	r22,44(sp)
  805198:	dd400a15 	stw	r21,40(sp)
  80519c:	dd000915 	stw	r20,36(sp)
  8051a0:	dcc00815 	stw	r19,32(sp)
  8051a4:	dc800715 	stw	r18,28(sp)
  8051a8:	dc400615 	stw	r17,24(sp)
  8051ac:	dc000515 	stw	r16,20(sp)
  8051b0:	d9000315 	stw	r4,12(sp)
  8051b4:	d9400415 	stw	r5,16(sp)
  8051b8:	10c07f16 	blt	r2,r3,8053b8 <quorem+0x23c>
  8051bc:	1d3fffc4 	addi	r20,r3,-1
  8051c0:	d8c00417 	ldw	r3,16(sp)
  8051c4:	d9000317 	ldw	r4,12(sp)
  8051c8:	a505883a 	add	r2,r20,r20
  8051cc:	1085883a 	add	r2,r2,r2
  8051d0:	1cc00504 	addi	r19,r3,20
  8051d4:	25c00504 	addi	r23,r4,20
  8051d8:	98ad883a 	add	r22,r19,r2
  8051dc:	15c7883a 	add	r3,r2,r23
  8051e0:	b1400017 	ldw	r5,0(r22)
  8051e4:	19000017 	ldw	r4,0(r3)
  8051e8:	d8c00015 	stw	r3,0(sp)
  8051ec:	29400044 	addi	r5,r5,1
  8051f0:	d9000215 	stw	r4,8(sp)
  8051f4:	080f9340 	call	80f934 <__udivsi3>
  8051f8:	1039883a 	mov	fp,r2
  8051fc:	10003d1e 	bne	r2,zero,8052f4 <quorem+0x178>
  805200:	d9400417 	ldw	r5,16(sp)
  805204:	d9000317 	ldw	r4,12(sp)
  805208:	080831c0 	call	80831c <__mcmp>
  80520c:	10002c16 	blt	r2,zero,8052c0 <quorem+0x144>
  805210:	e7000044 	addi	fp,fp,1
  805214:	b80f883a 	mov	r7,r23
  805218:	0011883a 	mov	r8,zero
  80521c:	0009883a 	mov	r4,zero
  805220:	99400017 	ldw	r5,0(r19)
  805224:	38c00017 	ldw	r3,0(r7)
  805228:	9cc00104 	addi	r19,r19,4
  80522c:	28bfffcc 	andi	r2,r5,65535
  805230:	2085883a 	add	r2,r4,r2
  805234:	11bfffcc 	andi	r6,r2,65535
  805238:	193fffcc 	andi	r4,r3,65535
  80523c:	1004d43a 	srli	r2,r2,16
  805240:	280ad43a 	srli	r5,r5,16
  805244:	2189c83a 	sub	r4,r4,r6
  805248:	2209883a 	add	r4,r4,r8
  80524c:	1806d43a 	srli	r3,r3,16
  805250:	288b883a 	add	r5,r5,r2
  805254:	200dd43a 	srai	r6,r4,16
  805258:	28bfffcc 	andi	r2,r5,65535
  80525c:	1887c83a 	sub	r3,r3,r2
  805260:	1987883a 	add	r3,r3,r6
  805264:	3900000d 	sth	r4,0(r7)
  805268:	38c0008d 	sth	r3,2(r7)
  80526c:	2808d43a 	srli	r4,r5,16
  805270:	39c00104 	addi	r7,r7,4
  805274:	1811d43a 	srai	r8,r3,16
  805278:	b4ffe92e 	bgeu	r22,r19,805220 <quorem+0xa4>
  80527c:	a505883a 	add	r2,r20,r20
  805280:	1085883a 	add	r2,r2,r2
  805284:	b885883a 	add	r2,r23,r2
  805288:	10c00017 	ldw	r3,0(r2)
  80528c:	18000c1e 	bne	r3,zero,8052c0 <quorem+0x144>
  805290:	113fff04 	addi	r4,r2,-4
  805294:	b900082e 	bgeu	r23,r4,8052b8 <quorem+0x13c>
  805298:	10bfff17 	ldw	r2,-4(r2)
  80529c:	10000326 	beq	r2,zero,8052ac <quorem+0x130>
  8052a0:	00000506 	br	8052b8 <quorem+0x13c>
  8052a4:	20800017 	ldw	r2,0(r4)
  8052a8:	1000031e 	bne	r2,zero,8052b8 <quorem+0x13c>
  8052ac:	213fff04 	addi	r4,r4,-4
  8052b0:	a53fffc4 	addi	r20,r20,-1
  8052b4:	b93ffb36 	bltu	r23,r4,8052a4 <quorem+0x128>
  8052b8:	d9000317 	ldw	r4,12(sp)
  8052bc:	25000415 	stw	r20,16(r4)
  8052c0:	e005883a 	mov	r2,fp
  8052c4:	dfc00e17 	ldw	ra,56(sp)
  8052c8:	df000d17 	ldw	fp,52(sp)
  8052cc:	ddc00c17 	ldw	r23,48(sp)
  8052d0:	dd800b17 	ldw	r22,44(sp)
  8052d4:	dd400a17 	ldw	r21,40(sp)
  8052d8:	dd000917 	ldw	r20,36(sp)
  8052dc:	dcc00817 	ldw	r19,32(sp)
  8052e0:	dc800717 	ldw	r18,28(sp)
  8052e4:	dc400617 	ldw	r17,24(sp)
  8052e8:	dc000517 	ldw	r16,20(sp)
  8052ec:	dec00f04 	addi	sp,sp,60
  8052f0:	f800283a 	ret
  8052f4:	b823883a 	mov	r17,r23
  8052f8:	9825883a 	mov	r18,r19
  8052fc:	d8000115 	stw	zero,4(sp)
  805300:	002b883a 	mov	r21,zero
  805304:	94000017 	ldw	r16,0(r18)
  805308:	e009883a 	mov	r4,fp
  80530c:	94800104 	addi	r18,r18,4
  805310:	817fffcc 	andi	r5,r16,65535
  805314:	080f9440 	call	80f944 <__mulsi3>
  805318:	800ad43a 	srli	r5,r16,16
  80531c:	e009883a 	mov	r4,fp
  805320:	a8a1883a 	add	r16,r21,r2
  805324:	080f9440 	call	80f944 <__mulsi3>
  805328:	89000017 	ldw	r4,0(r17)
  80532c:	80ffffcc 	andi	r3,r16,65535
  805330:	8020d43a 	srli	r16,r16,16
  805334:	217fffcc 	andi	r5,r4,65535
  805338:	28cbc83a 	sub	r5,r5,r3
  80533c:	d8c00117 	ldw	r3,4(sp)
  805340:	2008d43a 	srli	r4,r4,16
  805344:	1405883a 	add	r2,r2,r16
  805348:	28cb883a 	add	r5,r5,r3
  80534c:	280dd43a 	srai	r6,r5,16
  805350:	10ffffcc 	andi	r3,r2,65535
  805354:	20c9c83a 	sub	r4,r4,r3
  805358:	2189883a 	add	r4,r4,r6
  80535c:	8900008d 	sth	r4,2(r17)
  805360:	2009d43a 	srai	r4,r4,16
  805364:	8940000d 	sth	r5,0(r17)
  805368:	102ad43a 	srli	r21,r2,16
  80536c:	8c400104 	addi	r17,r17,4
  805370:	d9000115 	stw	r4,4(sp)
  805374:	b4bfe32e 	bgeu	r22,r18,805304 <quorem+0x188>
  805378:	d9000217 	ldw	r4,8(sp)
  80537c:	203fa01e 	bne	r4,zero,805200 <quorem+0x84>
  805380:	d8800017 	ldw	r2,0(sp)
  805384:	10ffff04 	addi	r3,r2,-4
  805388:	b8c0082e 	bgeu	r23,r3,8053ac <quorem+0x230>
  80538c:	10bfff17 	ldw	r2,-4(r2)
  805390:	10000326 	beq	r2,zero,8053a0 <quorem+0x224>
  805394:	00000506 	br	8053ac <quorem+0x230>
  805398:	18800017 	ldw	r2,0(r3)
  80539c:	1000031e 	bne	r2,zero,8053ac <quorem+0x230>
  8053a0:	18ffff04 	addi	r3,r3,-4
  8053a4:	a53fffc4 	addi	r20,r20,-1
  8053a8:	b8fffb36 	bltu	r23,r3,805398 <quorem+0x21c>
  8053ac:	d8c00317 	ldw	r3,12(sp)
  8053b0:	1d000415 	stw	r20,16(r3)
  8053b4:	003f9206 	br	805200 <quorem+0x84>
  8053b8:	0005883a 	mov	r2,zero
  8053bc:	003fc106 	br	8052c4 <quorem+0x148>

008053c0 <_dtoa_r>:
  8053c0:	22001017 	ldw	r8,64(r4)
  8053c4:	deffda04 	addi	sp,sp,-152
  8053c8:	dd402115 	stw	r21,132(sp)
  8053cc:	dd002015 	stw	r20,128(sp)
  8053d0:	dc801e15 	stw	r18,120(sp)
  8053d4:	dc401d15 	stw	r17,116(sp)
  8053d8:	dfc02515 	stw	ra,148(sp)
  8053dc:	df002415 	stw	fp,144(sp)
  8053e0:	ddc02315 	stw	r23,140(sp)
  8053e4:	dd802215 	stw	r22,136(sp)
  8053e8:	dcc01f15 	stw	r19,124(sp)
  8053ec:	dc001c15 	stw	r16,112(sp)
  8053f0:	d9001615 	stw	r4,88(sp)
  8053f4:	3023883a 	mov	r17,r6
  8053f8:	2829883a 	mov	r20,r5
  8053fc:	d9c01715 	stw	r7,92(sp)
  805400:	dc802817 	ldw	r18,160(sp)
  805404:	302b883a 	mov	r21,r6
  805408:	40000a26 	beq	r8,zero,805434 <_dtoa_r+0x74>
  80540c:	20801117 	ldw	r2,68(r4)
  805410:	400b883a 	mov	r5,r8
  805414:	40800115 	stw	r2,4(r8)
  805418:	20c01117 	ldw	r3,68(r4)
  80541c:	00800044 	movi	r2,1
  805420:	10c4983a 	sll	r2,r2,r3
  805424:	40800215 	stw	r2,8(r8)
  805428:	08081c00 	call	8081c0 <_Bfree>
  80542c:	d8c01617 	ldw	r3,88(sp)
  805430:	18001015 	stw	zero,64(r3)
  805434:	8800a316 	blt	r17,zero,8056c4 <_dtoa_r+0x304>
  805438:	90000015 	stw	zero,0(r18)
  80543c:	a8dffc2c 	andhi	r3,r21,32752
  805440:	009ffc34 	movhi	r2,32752
  805444:	18809126 	beq	r3,r2,80568c <_dtoa_r+0x2cc>
  805448:	000d883a 	mov	r6,zero
  80544c:	000f883a 	mov	r7,zero
  805450:	a009883a 	mov	r4,r20
  805454:	a80b883a 	mov	r5,r21
  805458:	dd001215 	stw	r20,72(sp)
  80545c:	dd401315 	stw	r21,76(sp)
  805460:	080f1780 	call	80f178 <__nedf2>
  805464:	1000171e 	bne	r2,zero,8054c4 <_dtoa_r+0x104>
  805468:	d9802717 	ldw	r6,156(sp)
  80546c:	00800044 	movi	r2,1
  805470:	30800015 	stw	r2,0(r6)
  805474:	d8802917 	ldw	r2,164(sp)
  805478:	10029b26 	beq	r2,zero,805ee8 <_dtoa_r+0xb28>
  80547c:	d9002917 	ldw	r4,164(sp)
  805480:	008020b4 	movhi	r2,130
  805484:	10b0e944 	addi	r2,r2,-15451
  805488:	10ffffc4 	addi	r3,r2,-1
  80548c:	20800015 	stw	r2,0(r4)
  805490:	1805883a 	mov	r2,r3
  805494:	dfc02517 	ldw	ra,148(sp)
  805498:	df002417 	ldw	fp,144(sp)
  80549c:	ddc02317 	ldw	r23,140(sp)
  8054a0:	dd802217 	ldw	r22,136(sp)
  8054a4:	dd402117 	ldw	r21,132(sp)
  8054a8:	dd002017 	ldw	r20,128(sp)
  8054ac:	dcc01f17 	ldw	r19,124(sp)
  8054b0:	dc801e17 	ldw	r18,120(sp)
  8054b4:	dc401d17 	ldw	r17,116(sp)
  8054b8:	dc001c17 	ldw	r16,112(sp)
  8054bc:	dec02604 	addi	sp,sp,152
  8054c0:	f800283a 	ret
  8054c4:	d9001617 	ldw	r4,88(sp)
  8054c8:	d9401217 	ldw	r5,72(sp)
  8054cc:	d8800104 	addi	r2,sp,4
  8054d0:	a80d883a 	mov	r6,r21
  8054d4:	d9c00204 	addi	r7,sp,8
  8054d8:	d8800015 	stw	r2,0(sp)
  8054dc:	08087fc0 	call	8087fc <__d2b>
  8054e0:	d8800715 	stw	r2,28(sp)
  8054e4:	a804d53a 	srli	r2,r21,20
  8054e8:	1101ffcc 	andi	r4,r2,2047
  8054ec:	20008626 	beq	r4,zero,805708 <_dtoa_r+0x348>
  8054f0:	d8c01217 	ldw	r3,72(sp)
  8054f4:	00800434 	movhi	r2,16
  8054f8:	10bfffc4 	addi	r2,r2,-1
  8054fc:	ddc00117 	ldw	r23,4(sp)
  805500:	a884703a 	and	r2,r21,r2
  805504:	1811883a 	mov	r8,r3
  805508:	124ffc34 	orhi	r9,r2,16368
  80550c:	25bf0044 	addi	r22,r4,-1023
  805510:	d8000815 	stw	zero,32(sp)
  805514:	0005883a 	mov	r2,zero
  805518:	00cffe34 	movhi	r3,16376
  80551c:	480b883a 	mov	r5,r9
  805520:	4009883a 	mov	r4,r8
  805524:	180f883a 	mov	r7,r3
  805528:	100d883a 	mov	r6,r2
  80552c:	080e9e00 	call	80e9e0 <__subdf3>
  805530:	0218dbf4 	movhi	r8,25455
  805534:	4210d844 	addi	r8,r8,17249
  805538:	024ff4f4 	movhi	r9,16339
  80553c:	4a61e9c4 	addi	r9,r9,-30809
  805540:	480f883a 	mov	r7,r9
  805544:	400d883a 	mov	r6,r8
  805548:	180b883a 	mov	r5,r3
  80554c:	1009883a 	mov	r4,r2
  805550:	080ead40 	call	80ead4 <__muldf3>
  805554:	0222d874 	movhi	r8,35681
  805558:	42322cc4 	addi	r8,r8,-14157
  80555c:	024ff1f4 	movhi	r9,16327
  805560:	4a628a04 	addi	r9,r9,-30168
  805564:	480f883a 	mov	r7,r9
  805568:	400d883a 	mov	r6,r8
  80556c:	180b883a 	mov	r5,r3
  805570:	1009883a 	mov	r4,r2
  805574:	080ea600 	call	80ea60 <__adddf3>
  805578:	b009883a 	mov	r4,r22
  80557c:	1021883a 	mov	r16,r2
  805580:	1823883a 	mov	r17,r3
  805584:	080f4200 	call	80f420 <__floatsidf>
  805588:	021427f4 	movhi	r8,20639
  80558c:	421e7ec4 	addi	r8,r8,31227
  805590:	024ff4f4 	movhi	r9,16339
  805594:	4a5104c4 	addi	r9,r9,17427
  805598:	480f883a 	mov	r7,r9
  80559c:	400d883a 	mov	r6,r8
  8055a0:	180b883a 	mov	r5,r3
  8055a4:	1009883a 	mov	r4,r2
  8055a8:	080ead40 	call	80ead4 <__muldf3>
  8055ac:	180f883a 	mov	r7,r3
  8055b0:	880b883a 	mov	r5,r17
  8055b4:	100d883a 	mov	r6,r2
  8055b8:	8009883a 	mov	r4,r16
  8055bc:	080ea600 	call	80ea60 <__adddf3>
  8055c0:	1009883a 	mov	r4,r2
  8055c4:	180b883a 	mov	r5,r3
  8055c8:	1021883a 	mov	r16,r2
  8055cc:	1823883a 	mov	r17,r3
  8055d0:	080f5180 	call	80f518 <__fixdfsi>
  8055d4:	000d883a 	mov	r6,zero
  8055d8:	000f883a 	mov	r7,zero
  8055dc:	8009883a 	mov	r4,r16
  8055e0:	880b883a 	mov	r5,r17
  8055e4:	d8800d15 	stw	r2,52(sp)
  8055e8:	080f3100 	call	80f310 <__ltdf2>
  8055ec:	10031716 	blt	r2,zero,80624c <_dtoa_r+0xe8c>
  8055f0:	d8c00d17 	ldw	r3,52(sp)
  8055f4:	00800584 	movi	r2,22
  8055f8:	10c1482e 	bgeu	r2,r3,805b1c <_dtoa_r+0x75c>
  8055fc:	01000044 	movi	r4,1
  805600:	d9000c15 	stw	r4,48(sp)
  805604:	bd85c83a 	sub	r2,r23,r22
  805608:	11bfffc4 	addi	r6,r2,-1
  80560c:	30030b16 	blt	r6,zero,80623c <_dtoa_r+0xe7c>
  805610:	d9800a15 	stw	r6,40(sp)
  805614:	d8001115 	stw	zero,68(sp)
  805618:	d8c00d17 	ldw	r3,52(sp)
  80561c:	1802ff16 	blt	r3,zero,80621c <_dtoa_r+0xe5c>
  805620:	d9000a17 	ldw	r4,40(sp)
  805624:	d8c00915 	stw	r3,36(sp)
  805628:	d8001015 	stw	zero,64(sp)
  80562c:	20c9883a 	add	r4,r4,r3
  805630:	d9000a15 	stw	r4,40(sp)
  805634:	d9001717 	ldw	r4,92(sp)
  805638:	00800244 	movi	r2,9
  80563c:	11004636 	bltu	r2,r4,805758 <_dtoa_r+0x398>
  805640:	00800144 	movi	r2,5
  805644:	11020416 	blt	r2,r4,805e58 <_dtoa_r+0xa98>
  805648:	04400044 	movi	r17,1
  80564c:	d8c01717 	ldw	r3,92(sp)
  805650:	00800144 	movi	r2,5
  805654:	10c1ed36 	bltu	r2,r3,805e0c <_dtoa_r+0xa4c>
  805658:	18c5883a 	add	r2,r3,r3
  80565c:	1085883a 	add	r2,r2,r2
  805660:	00c02034 	movhi	r3,128
  805664:	18d59d04 	addi	r3,r3,22132
  805668:	10c5883a 	add	r2,r2,r3
  80566c:	11000017 	ldw	r4,0(r2)
  805670:	2000683a 	jmp	r4
  805674:	00805760 	cmpeqi	r2,zero,349
  805678:	00805760 	cmpeqi	r2,zero,349
  80567c:	00806160 	cmpeqi	r2,zero,389
  805680:	00806138 	rdprs	r2,zero,388
  805684:	0080617c 	xorhi	r2,zero,389
  805688:	00806188 	cmpgei	r2,zero,390
  80568c:	d9002717 	ldw	r4,156(sp)
  805690:	0089c3c4 	movi	r2,9999
  805694:	20800015 	stw	r2,0(r4)
  805698:	a0001026 	beq	r20,zero,8056dc <_dtoa_r+0x31c>
  80569c:	00c020b4 	movhi	r3,130
  8056a0:	18f1a004 	addi	r3,r3,-14720
  8056a4:	d9802917 	ldw	r6,164(sp)
  8056a8:	303f7926 	beq	r6,zero,805490 <_dtoa_r+0xd0>
  8056ac:	188000c7 	ldb	r2,3(r3)
  8056b0:	190000c4 	addi	r4,r3,3
  8056b4:	1000101e 	bne	r2,zero,8056f8 <_dtoa_r+0x338>
  8056b8:	d8802917 	ldw	r2,164(sp)
  8056bc:	11000015 	stw	r4,0(r2)
  8056c0:	003f7306 	br	805490 <_dtoa_r+0xd0>
  8056c4:	00a00034 	movhi	r2,32768
  8056c8:	10bfffc4 	addi	r2,r2,-1
  8056cc:	00c00044 	movi	r3,1
  8056d0:	88aa703a 	and	r21,r17,r2
  8056d4:	90c00015 	stw	r3,0(r18)
  8056d8:	003f5806 	br	80543c <_dtoa_r+0x7c>
  8056dc:	00800434 	movhi	r2,16
  8056e0:	10bfffc4 	addi	r2,r2,-1
  8056e4:	a884703a 	and	r2,r21,r2
  8056e8:	103fec1e 	bne	r2,zero,80569c <_dtoa_r+0x2dc>
  8056ec:	00c020b4 	movhi	r3,130
  8056f0:	18f19d04 	addi	r3,r3,-14732
  8056f4:	003feb06 	br	8056a4 <_dtoa_r+0x2e4>
  8056f8:	d8802917 	ldw	r2,164(sp)
  8056fc:	19000204 	addi	r4,r3,8
  805700:	11000015 	stw	r4,0(r2)
  805704:	003f6206 	br	805490 <_dtoa_r+0xd0>
  805708:	ddc00117 	ldw	r23,4(sp)
  80570c:	d8800217 	ldw	r2,8(sp)
  805710:	01000804 	movi	r4,32
  805714:	b8c10c84 	addi	r3,r23,1074
  805718:	18a3883a 	add	r17,r3,r2
  80571c:	2441b80e 	bge	r4,r17,805e00 <_dtoa_r+0xa40>
  805720:	00c01004 	movi	r3,64
  805724:	1c47c83a 	sub	r3,r3,r17
  805728:	88bff804 	addi	r2,r17,-32
  80572c:	a8c6983a 	sll	r3,r21,r3
  805730:	a084d83a 	srl	r2,r20,r2
  805734:	1888b03a 	or	r4,r3,r2
  805738:	080f6640 	call	80f664 <__floatunsidf>
  80573c:	1011883a 	mov	r8,r2
  805740:	00bf8434 	movhi	r2,65040
  805744:	01000044 	movi	r4,1
  805748:	10d3883a 	add	r9,r2,r3
  80574c:	8dbef344 	addi	r22,r17,-1075
  805750:	d9000815 	stw	r4,32(sp)
  805754:	003f6f06 	br	805514 <_dtoa_r+0x154>
  805758:	d8001715 	stw	zero,92(sp)
  80575c:	04400044 	movi	r17,1
  805760:	00bfffc4 	movi	r2,-1
  805764:	00c00044 	movi	r3,1
  805768:	d8800e15 	stw	r2,56(sp)
  80576c:	d8002615 	stw	zero,152(sp)
  805770:	d8800f15 	stw	r2,60(sp)
  805774:	d8c00b15 	stw	r3,44(sp)
  805778:	1021883a 	mov	r16,r2
  80577c:	d8801617 	ldw	r2,88(sp)
  805780:	10001115 	stw	zero,68(r2)
  805784:	d8801617 	ldw	r2,88(sp)
  805788:	11401117 	ldw	r5,68(r2)
  80578c:	1009883a 	mov	r4,r2
  805790:	08087400 	call	808740 <_Balloc>
  805794:	d8c01617 	ldw	r3,88(sp)
  805798:	d8800515 	stw	r2,20(sp)
  80579c:	18801015 	stw	r2,64(r3)
  8057a0:	00800384 	movi	r2,14
  8057a4:	14006836 	bltu	r2,r16,805948 <_dtoa_r+0x588>
  8057a8:	8805003a 	cmpeq	r2,r17,zero
  8057ac:	1000661e 	bne	r2,zero,805948 <_dtoa_r+0x588>
  8057b0:	d9000d17 	ldw	r4,52(sp)
  8057b4:	0102300e 	bge	zero,r4,806078 <_dtoa_r+0xcb8>
  8057b8:	208003cc 	andi	r2,r4,15
  8057bc:	100490fa 	slli	r2,r2,3
  8057c0:	2025d13a 	srai	r18,r4,4
  8057c4:	00c020b4 	movhi	r3,130
  8057c8:	18f1b204 	addi	r3,r3,-14648
  8057cc:	10c5883a 	add	r2,r2,r3
  8057d0:	90c0040c 	andi	r3,r18,16
  8057d4:	14000017 	ldw	r16,0(r2)
  8057d8:	14400117 	ldw	r17,4(r2)
  8057dc:	18036a1e 	bne	r3,zero,806588 <_dtoa_r+0x11c8>
  8057e0:	05800084 	movi	r22,2
  8057e4:	90001026 	beq	r18,zero,805828 <_dtoa_r+0x468>
  8057e8:	04c020b4 	movhi	r19,130
  8057ec:	9cf1e404 	addi	r19,r19,-14448
  8057f0:	9080004c 	andi	r2,r18,1
  8057f4:	1005003a 	cmpeq	r2,r2,zero
  8057f8:	1000081e 	bne	r2,zero,80581c <_dtoa_r+0x45c>
  8057fc:	99800017 	ldw	r6,0(r19)
  805800:	99c00117 	ldw	r7,4(r19)
  805804:	880b883a 	mov	r5,r17
  805808:	8009883a 	mov	r4,r16
  80580c:	080ead40 	call	80ead4 <__muldf3>
  805810:	1021883a 	mov	r16,r2
  805814:	b5800044 	addi	r22,r22,1
  805818:	1823883a 	mov	r17,r3
  80581c:	9025d07a 	srai	r18,r18,1
  805820:	9cc00204 	addi	r19,r19,8
  805824:	903ff21e 	bne	r18,zero,8057f0 <_dtoa_r+0x430>
  805828:	a80b883a 	mov	r5,r21
  80582c:	a009883a 	mov	r4,r20
  805830:	880f883a 	mov	r7,r17
  805834:	800d883a 	mov	r6,r16
  805838:	080ee980 	call	80ee98 <__divdf3>
  80583c:	1029883a 	mov	r20,r2
  805840:	182b883a 	mov	r21,r3
  805844:	d8c00c17 	ldw	r3,48(sp)
  805848:	1805003a 	cmpeq	r2,r3,zero
  80584c:	1000081e 	bne	r2,zero,805870 <_dtoa_r+0x4b0>
  805850:	0005883a 	mov	r2,zero
  805854:	00cffc34 	movhi	r3,16368
  805858:	180f883a 	mov	r7,r3
  80585c:	a009883a 	mov	r4,r20
  805860:	a80b883a 	mov	r5,r21
  805864:	100d883a 	mov	r6,r2
  805868:	080f3100 	call	80f310 <__ltdf2>
  80586c:	1003fe16 	blt	r2,zero,806868 <_dtoa_r+0x14a8>
  805870:	b009883a 	mov	r4,r22
  805874:	080f4200 	call	80f420 <__floatsidf>
  805878:	180b883a 	mov	r5,r3
  80587c:	1009883a 	mov	r4,r2
  805880:	a00d883a 	mov	r6,r20
  805884:	a80f883a 	mov	r7,r21
  805888:	080ead40 	call	80ead4 <__muldf3>
  80588c:	0011883a 	mov	r8,zero
  805890:	02500734 	movhi	r9,16412
  805894:	1009883a 	mov	r4,r2
  805898:	180b883a 	mov	r5,r3
  80589c:	480f883a 	mov	r7,r9
  8058a0:	400d883a 	mov	r6,r8
  8058a4:	080ea600 	call	80ea60 <__adddf3>
  8058a8:	d9000f17 	ldw	r4,60(sp)
  8058ac:	102d883a 	mov	r22,r2
  8058b0:	00bf3034 	movhi	r2,64704
  8058b4:	18b9883a 	add	fp,r3,r2
  8058b8:	e02f883a 	mov	r23,fp
  8058bc:	20028f1e 	bne	r4,zero,8062fc <_dtoa_r+0xf3c>
  8058c0:	0005883a 	mov	r2,zero
  8058c4:	00d00534 	movhi	r3,16404
  8058c8:	a009883a 	mov	r4,r20
  8058cc:	a80b883a 	mov	r5,r21
  8058d0:	180f883a 	mov	r7,r3
  8058d4:	100d883a 	mov	r6,r2
  8058d8:	080e9e00 	call	80e9e0 <__subdf3>
  8058dc:	1009883a 	mov	r4,r2
  8058e0:	e00f883a 	mov	r7,fp
  8058e4:	180b883a 	mov	r5,r3
  8058e8:	b00d883a 	mov	r6,r22
  8058ec:	1025883a 	mov	r18,r2
  8058f0:	1827883a 	mov	r19,r3
  8058f4:	080f2000 	call	80f200 <__gtdf2>
  8058f8:	00834f16 	blt	zero,r2,806638 <_dtoa_r+0x1278>
  8058fc:	e0e0003c 	xorhi	r3,fp,32768
  805900:	9009883a 	mov	r4,r18
  805904:	980b883a 	mov	r5,r19
  805908:	180f883a 	mov	r7,r3
  80590c:	b00d883a 	mov	r6,r22
  805910:	080f3100 	call	80f310 <__ltdf2>
  805914:	1000080e 	bge	r2,zero,805938 <_dtoa_r+0x578>
  805918:	0027883a 	mov	r19,zero
  80591c:	0025883a 	mov	r18,zero
  805920:	d8802617 	ldw	r2,152(sp)
  805924:	df000517 	ldw	fp,20(sp)
  805928:	d8000615 	stw	zero,24(sp)
  80592c:	0084303a 	nor	r2,zero,r2
  805930:	d8800d15 	stw	r2,52(sp)
  805934:	00019b06 	br	805fa4 <_dtoa_r+0xbe4>
  805938:	d9801217 	ldw	r6,72(sp)
  80593c:	d8801317 	ldw	r2,76(sp)
  805940:	3029883a 	mov	r20,r6
  805944:	102b883a 	mov	r21,r2
  805948:	d8c00217 	ldw	r3,8(sp)
  80594c:	18008516 	blt	r3,zero,805b64 <_dtoa_r+0x7a4>
  805950:	d9000d17 	ldw	r4,52(sp)
  805954:	00800384 	movi	r2,14
  805958:	11008216 	blt	r2,r4,805b64 <_dtoa_r+0x7a4>
  80595c:	200490fa 	slli	r2,r4,3
  805960:	d9802617 	ldw	r6,152(sp)
  805964:	00c020b4 	movhi	r3,130
  805968:	18f1b204 	addi	r3,r3,-14648
  80596c:	10c5883a 	add	r2,r2,r3
  805970:	14800017 	ldw	r18,0(r2)
  805974:	14c00117 	ldw	r19,4(r2)
  805978:	30031e16 	blt	r6,zero,8065f4 <_dtoa_r+0x1234>
  80597c:	d9000517 	ldw	r4,20(sp)
  805980:	d8c00f17 	ldw	r3,60(sp)
  805984:	a823883a 	mov	r17,r21
  805988:	a021883a 	mov	r16,r20
  80598c:	192b883a 	add	r21,r3,r4
  805990:	2039883a 	mov	fp,r4
  805994:	00000f06 	br	8059d4 <_dtoa_r+0x614>
  805998:	0005883a 	mov	r2,zero
  80599c:	00d00934 	movhi	r3,16420
  8059a0:	5009883a 	mov	r4,r10
  8059a4:	580b883a 	mov	r5,r11
  8059a8:	180f883a 	mov	r7,r3
  8059ac:	100d883a 	mov	r6,r2
  8059b0:	080ead40 	call	80ead4 <__muldf3>
  8059b4:	180b883a 	mov	r5,r3
  8059b8:	000d883a 	mov	r6,zero
  8059bc:	000f883a 	mov	r7,zero
  8059c0:	1009883a 	mov	r4,r2
  8059c4:	1021883a 	mov	r16,r2
  8059c8:	1823883a 	mov	r17,r3
  8059cc:	080f1780 	call	80f178 <__nedf2>
  8059d0:	10004526 	beq	r2,zero,805ae8 <_dtoa_r+0x728>
  8059d4:	900d883a 	mov	r6,r18
  8059d8:	980f883a 	mov	r7,r19
  8059dc:	8009883a 	mov	r4,r16
  8059e0:	880b883a 	mov	r5,r17
  8059e4:	080ee980 	call	80ee98 <__divdf3>
  8059e8:	180b883a 	mov	r5,r3
  8059ec:	1009883a 	mov	r4,r2
  8059f0:	080f5180 	call	80f518 <__fixdfsi>
  8059f4:	1009883a 	mov	r4,r2
  8059f8:	1029883a 	mov	r20,r2
  8059fc:	080f4200 	call	80f420 <__floatsidf>
  805a00:	180f883a 	mov	r7,r3
  805a04:	9009883a 	mov	r4,r18
  805a08:	980b883a 	mov	r5,r19
  805a0c:	100d883a 	mov	r6,r2
  805a10:	080ead40 	call	80ead4 <__muldf3>
  805a14:	180f883a 	mov	r7,r3
  805a18:	880b883a 	mov	r5,r17
  805a1c:	8009883a 	mov	r4,r16
  805a20:	100d883a 	mov	r6,r2
  805a24:	080e9e00 	call	80e9e0 <__subdf3>
  805a28:	1015883a 	mov	r10,r2
  805a2c:	a0800c04 	addi	r2,r20,48
  805a30:	e0800005 	stb	r2,0(fp)
  805a34:	e7000044 	addi	fp,fp,1
  805a38:	1817883a 	mov	r11,r3
  805a3c:	e57fd61e 	bne	fp,r21,805998 <_dtoa_r+0x5d8>
  805a40:	500d883a 	mov	r6,r10
  805a44:	180f883a 	mov	r7,r3
  805a48:	5009883a 	mov	r4,r10
  805a4c:	180b883a 	mov	r5,r3
  805a50:	080ea600 	call	80ea60 <__adddf3>
  805a54:	100d883a 	mov	r6,r2
  805a58:	9009883a 	mov	r4,r18
  805a5c:	980b883a 	mov	r5,r19
  805a60:	180f883a 	mov	r7,r3
  805a64:	1021883a 	mov	r16,r2
  805a68:	1823883a 	mov	r17,r3
  805a6c:	080f3100 	call	80f310 <__ltdf2>
  805a70:	10000816 	blt	r2,zero,805a94 <_dtoa_r+0x6d4>
  805a74:	980b883a 	mov	r5,r19
  805a78:	800d883a 	mov	r6,r16
  805a7c:	880f883a 	mov	r7,r17
  805a80:	9009883a 	mov	r4,r18
  805a84:	080f0f00 	call	80f0f0 <__eqdf2>
  805a88:	1000171e 	bne	r2,zero,805ae8 <_dtoa_r+0x728>
  805a8c:	a080004c 	andi	r2,r20,1
  805a90:	10001526 	beq	r2,zero,805ae8 <_dtoa_r+0x728>
  805a94:	d8800d17 	ldw	r2,52(sp)
  805a98:	d8800415 	stw	r2,16(sp)
  805a9c:	e009883a 	mov	r4,fp
  805aa0:	213fffc4 	addi	r4,r4,-1
  805aa4:	20c00007 	ldb	r3,0(r4)
  805aa8:	00800e44 	movi	r2,57
  805aac:	1880081e 	bne	r3,r2,805ad0 <_dtoa_r+0x710>
  805ab0:	d8800517 	ldw	r2,20(sp)
  805ab4:	113ffa1e 	bne	r2,r4,805aa0 <_dtoa_r+0x6e0>
  805ab8:	d8c00417 	ldw	r3,16(sp)
  805abc:	d9800517 	ldw	r6,20(sp)
  805ac0:	00800c04 	movi	r2,48
  805ac4:	18c00044 	addi	r3,r3,1
  805ac8:	d8c00415 	stw	r3,16(sp)
  805acc:	30800005 	stb	r2,0(r6)
  805ad0:	20800003 	ldbu	r2,0(r4)
  805ad4:	d8c00417 	ldw	r3,16(sp)
  805ad8:	27000044 	addi	fp,r4,1
  805adc:	10800044 	addi	r2,r2,1
  805ae0:	d8c00d15 	stw	r3,52(sp)
  805ae4:	20800005 	stb	r2,0(r4)
  805ae8:	d9001617 	ldw	r4,88(sp)
  805aec:	d9400717 	ldw	r5,28(sp)
  805af0:	08081c00 	call	8081c0 <_Bfree>
  805af4:	e0000005 	stb	zero,0(fp)
  805af8:	d9800d17 	ldw	r6,52(sp)
  805afc:	d8c02717 	ldw	r3,156(sp)
  805b00:	d9002917 	ldw	r4,164(sp)
  805b04:	30800044 	addi	r2,r6,1
  805b08:	18800015 	stw	r2,0(r3)
  805b0c:	20029c26 	beq	r4,zero,806580 <_dtoa_r+0x11c0>
  805b10:	d8c00517 	ldw	r3,20(sp)
  805b14:	27000015 	stw	fp,0(r4)
  805b18:	003e5d06 	br	805490 <_dtoa_r+0xd0>
  805b1c:	d9800d17 	ldw	r6,52(sp)
  805b20:	00c020b4 	movhi	r3,130
  805b24:	18f1b204 	addi	r3,r3,-14648
  805b28:	d9001217 	ldw	r4,72(sp)
  805b2c:	300490fa 	slli	r2,r6,3
  805b30:	d9401317 	ldw	r5,76(sp)
  805b34:	10c5883a 	add	r2,r2,r3
  805b38:	12000017 	ldw	r8,0(r2)
  805b3c:	12400117 	ldw	r9,4(r2)
  805b40:	400d883a 	mov	r6,r8
  805b44:	480f883a 	mov	r7,r9
  805b48:	080f3100 	call	80f310 <__ltdf2>
  805b4c:	1000030e 	bge	r2,zero,805b5c <_dtoa_r+0x79c>
  805b50:	d8800d17 	ldw	r2,52(sp)
  805b54:	10bfffc4 	addi	r2,r2,-1
  805b58:	d8800d15 	stw	r2,52(sp)
  805b5c:	d8000c15 	stw	zero,48(sp)
  805b60:	003ea806 	br	805604 <_dtoa_r+0x244>
  805b64:	d9000b17 	ldw	r4,44(sp)
  805b68:	202cc03a 	cmpne	r22,r4,zero
  805b6c:	b000c71e 	bne	r22,zero,805e8c <_dtoa_r+0xacc>
  805b70:	dc001117 	ldw	r16,68(sp)
  805b74:	dc801017 	ldw	r18,64(sp)
  805b78:	0027883a 	mov	r19,zero
  805b7c:	04000b0e 	bge	zero,r16,805bac <_dtoa_r+0x7ec>
  805b80:	d8c00a17 	ldw	r3,40(sp)
  805b84:	00c0090e 	bge	zero,r3,805bac <_dtoa_r+0x7ec>
  805b88:	8005883a 	mov	r2,r16
  805b8c:	1c011316 	blt	r3,r16,805fdc <_dtoa_r+0xc1c>
  805b90:	d9000a17 	ldw	r4,40(sp)
  805b94:	d9801117 	ldw	r6,68(sp)
  805b98:	80a1c83a 	sub	r16,r16,r2
  805b9c:	2089c83a 	sub	r4,r4,r2
  805ba0:	308dc83a 	sub	r6,r6,r2
  805ba4:	d9000a15 	stw	r4,40(sp)
  805ba8:	d9801115 	stw	r6,68(sp)
  805bac:	d8801017 	ldw	r2,64(sp)
  805bb0:	0080150e 	bge	zero,r2,805c08 <_dtoa_r+0x848>
  805bb4:	d8c00b17 	ldw	r3,44(sp)
  805bb8:	1805003a 	cmpeq	r2,r3,zero
  805bbc:	1001c91e 	bne	r2,zero,8062e4 <_dtoa_r+0xf24>
  805bc0:	04800e0e 	bge	zero,r18,805bfc <_dtoa_r+0x83c>
  805bc4:	d9001617 	ldw	r4,88(sp)
  805bc8:	980b883a 	mov	r5,r19
  805bcc:	900d883a 	mov	r6,r18
  805bd0:	080900c0 	call	80900c <__pow5mult>
  805bd4:	d9001617 	ldw	r4,88(sp)
  805bd8:	d9800717 	ldw	r6,28(sp)
  805bdc:	100b883a 	mov	r5,r2
  805be0:	1027883a 	mov	r19,r2
  805be4:	0808c500 	call	808c50 <__multiply>
  805be8:	d9001617 	ldw	r4,88(sp)
  805bec:	d9400717 	ldw	r5,28(sp)
  805bf0:	1023883a 	mov	r17,r2
  805bf4:	08081c00 	call	8081c0 <_Bfree>
  805bf8:	dc400715 	stw	r17,28(sp)
  805bfc:	d9001017 	ldw	r4,64(sp)
  805c00:	248dc83a 	sub	r6,r4,r18
  805c04:	30010e1e 	bne	r6,zero,806040 <_dtoa_r+0xc80>
  805c08:	d9001617 	ldw	r4,88(sp)
  805c0c:	04400044 	movi	r17,1
  805c10:	880b883a 	mov	r5,r17
  805c14:	0808ea40 	call	808ea4 <__i2b>
  805c18:	d9800917 	ldw	r6,36(sp)
  805c1c:	1025883a 	mov	r18,r2
  805c20:	0180040e 	bge	zero,r6,805c34 <_dtoa_r+0x874>
  805c24:	d9001617 	ldw	r4,88(sp)
  805c28:	100b883a 	mov	r5,r2
  805c2c:	080900c0 	call	80900c <__pow5mult>
  805c30:	1025883a 	mov	r18,r2
  805c34:	d8801717 	ldw	r2,92(sp)
  805c38:	8880f30e 	bge	r17,r2,806008 <_dtoa_r+0xc48>
  805c3c:	0023883a 	mov	r17,zero
  805c40:	d9800917 	ldw	r6,36(sp)
  805c44:	30019e1e 	bne	r6,zero,8062c0 <_dtoa_r+0xf00>
  805c48:	00c00044 	movi	r3,1
  805c4c:	d9000a17 	ldw	r4,40(sp)
  805c50:	20c5883a 	add	r2,r4,r3
  805c54:	10c007cc 	andi	r3,r2,31
  805c58:	1800841e 	bne	r3,zero,805e6c <_dtoa_r+0xaac>
  805c5c:	00800704 	movi	r2,28
  805c60:	d9000a17 	ldw	r4,40(sp)
  805c64:	d9801117 	ldw	r6,68(sp)
  805c68:	80a1883a 	add	r16,r16,r2
  805c6c:	2089883a 	add	r4,r4,r2
  805c70:	308d883a 	add	r6,r6,r2
  805c74:	d9000a15 	stw	r4,40(sp)
  805c78:	d9801115 	stw	r6,68(sp)
  805c7c:	d8801117 	ldw	r2,68(sp)
  805c80:	0080050e 	bge	zero,r2,805c98 <_dtoa_r+0x8d8>
  805c84:	d9400717 	ldw	r5,28(sp)
  805c88:	d9001617 	ldw	r4,88(sp)
  805c8c:	100d883a 	mov	r6,r2
  805c90:	0808b040 	call	808b04 <__lshift>
  805c94:	d8800715 	stw	r2,28(sp)
  805c98:	d8c00a17 	ldw	r3,40(sp)
  805c9c:	00c0050e 	bge	zero,r3,805cb4 <_dtoa_r+0x8f4>
  805ca0:	d9001617 	ldw	r4,88(sp)
  805ca4:	900b883a 	mov	r5,r18
  805ca8:	180d883a 	mov	r6,r3
  805cac:	0808b040 	call	808b04 <__lshift>
  805cb0:	1025883a 	mov	r18,r2
  805cb4:	d9000c17 	ldw	r4,48(sp)
  805cb8:	2005003a 	cmpeq	r2,r4,zero
  805cbc:	10016f26 	beq	r2,zero,80627c <_dtoa_r+0xebc>
  805cc0:	d9000f17 	ldw	r4,60(sp)
  805cc4:	0102170e 	bge	zero,r4,806524 <_dtoa_r+0x1164>
  805cc8:	d9800b17 	ldw	r6,44(sp)
  805ccc:	3005003a 	cmpeq	r2,r6,zero
  805cd0:	1000881e 	bne	r2,zero,805ef4 <_dtoa_r+0xb34>
  805cd4:	0400050e 	bge	zero,r16,805cec <_dtoa_r+0x92c>
  805cd8:	d9001617 	ldw	r4,88(sp)
  805cdc:	980b883a 	mov	r5,r19
  805ce0:	800d883a 	mov	r6,r16
  805ce4:	0808b040 	call	808b04 <__lshift>
  805ce8:	1027883a 	mov	r19,r2
  805cec:	8804c03a 	cmpne	r2,r17,zero
  805cf0:	1002541e 	bne	r2,zero,806644 <_dtoa_r+0x1284>
  805cf4:	980b883a 	mov	r5,r19
  805cf8:	dd800517 	ldw	r22,20(sp)
  805cfc:	dcc00615 	stw	r19,24(sp)
  805d00:	a700004c 	andi	fp,r20,1
  805d04:	2827883a 	mov	r19,r5
  805d08:	d9000717 	ldw	r4,28(sp)
  805d0c:	900b883a 	mov	r5,r18
  805d10:	080517c0 	call	80517c <quorem>
  805d14:	d9000717 	ldw	r4,28(sp)
  805d18:	d9400617 	ldw	r5,24(sp)
  805d1c:	1023883a 	mov	r17,r2
  805d20:	8dc00c04 	addi	r23,r17,48
  805d24:	080831c0 	call	80831c <__mcmp>
  805d28:	d9001617 	ldw	r4,88(sp)
  805d2c:	900b883a 	mov	r5,r18
  805d30:	980d883a 	mov	r6,r19
  805d34:	1029883a 	mov	r20,r2
  805d38:	08089780 	call	808978 <__mdiff>
  805d3c:	102b883a 	mov	r21,r2
  805d40:	10800317 	ldw	r2,12(r2)
  805d44:	1001281e 	bne	r2,zero,8061e8 <_dtoa_r+0xe28>
  805d48:	d9000717 	ldw	r4,28(sp)
  805d4c:	a80b883a 	mov	r5,r21
  805d50:	080831c0 	call	80831c <__mcmp>
  805d54:	d9001617 	ldw	r4,88(sp)
  805d58:	1021883a 	mov	r16,r2
  805d5c:	a80b883a 	mov	r5,r21
  805d60:	08081c00 	call	8081c0 <_Bfree>
  805d64:	8000041e 	bne	r16,zero,805d78 <_dtoa_r+0x9b8>
  805d68:	d8801717 	ldw	r2,92(sp)
  805d6c:	1000021e 	bne	r2,zero,805d78 <_dtoa_r+0x9b8>
  805d70:	e004c03a 	cmpne	r2,fp,zero
  805d74:	10011726 	beq	r2,zero,8061d4 <_dtoa_r+0xe14>
  805d78:	a0010616 	blt	r20,zero,806194 <_dtoa_r+0xdd4>
  805d7c:	a000041e 	bne	r20,zero,805d90 <_dtoa_r+0x9d0>
  805d80:	d8c01717 	ldw	r3,92(sp)
  805d84:	1800021e 	bne	r3,zero,805d90 <_dtoa_r+0x9d0>
  805d88:	e004c03a 	cmpne	r2,fp,zero
  805d8c:	10010126 	beq	r2,zero,806194 <_dtoa_r+0xdd4>
  805d90:	04023d16 	blt	zero,r16,806688 <_dtoa_r+0x12c8>
  805d94:	b5c00005 	stb	r23,0(r22)
  805d98:	d9800517 	ldw	r6,20(sp)
  805d9c:	d9000f17 	ldw	r4,60(sp)
  805da0:	b5800044 	addi	r22,r22,1
  805da4:	3105883a 	add	r2,r6,r4
  805da8:	b0806526 	beq	r22,r2,805f40 <_dtoa_r+0xb80>
  805dac:	d9400717 	ldw	r5,28(sp)
  805db0:	d9001617 	ldw	r4,88(sp)
  805db4:	01800284 	movi	r6,10
  805db8:	000f883a 	mov	r7,zero
  805dbc:	0808ee00 	call	808ee0 <__multadd>
  805dc0:	d8800715 	stw	r2,28(sp)
  805dc4:	d8800617 	ldw	r2,24(sp)
  805dc8:	14c10c26 	beq	r2,r19,8061fc <_dtoa_r+0xe3c>
  805dcc:	d9400617 	ldw	r5,24(sp)
  805dd0:	d9001617 	ldw	r4,88(sp)
  805dd4:	01800284 	movi	r6,10
  805dd8:	000f883a 	mov	r7,zero
  805ddc:	0808ee00 	call	808ee0 <__multadd>
  805de0:	d9001617 	ldw	r4,88(sp)
  805de4:	980b883a 	mov	r5,r19
  805de8:	01800284 	movi	r6,10
  805dec:	000f883a 	mov	r7,zero
  805df0:	d8800615 	stw	r2,24(sp)
  805df4:	0808ee00 	call	808ee0 <__multadd>
  805df8:	1027883a 	mov	r19,r2
  805dfc:	003fc206 	br	805d08 <_dtoa_r+0x948>
  805e00:	2445c83a 	sub	r2,r4,r17
  805e04:	a088983a 	sll	r4,r20,r2
  805e08:	003e4b06 	br	805738 <_dtoa_r+0x378>
  805e0c:	01bfffc4 	movi	r6,-1
  805e10:	00800044 	movi	r2,1
  805e14:	d9800e15 	stw	r6,56(sp)
  805e18:	d9800f15 	stw	r6,60(sp)
  805e1c:	d8800b15 	stw	r2,44(sp)
  805e20:	d8c01617 	ldw	r3,88(sp)
  805e24:	008005c4 	movi	r2,23
  805e28:	18001115 	stw	zero,68(r3)
  805e2c:	1580082e 	bgeu	r2,r22,805e50 <_dtoa_r+0xa90>
  805e30:	00c00104 	movi	r3,4
  805e34:	0009883a 	mov	r4,zero
  805e38:	18c7883a 	add	r3,r3,r3
  805e3c:	18800504 	addi	r2,r3,20
  805e40:	21000044 	addi	r4,r4,1
  805e44:	b0bffc2e 	bgeu	r22,r2,805e38 <_dtoa_r+0xa78>
  805e48:	d9801617 	ldw	r6,88(sp)
  805e4c:	31001115 	stw	r4,68(r6)
  805e50:	dc000f17 	ldw	r16,60(sp)
  805e54:	003e4b06 	br	805784 <_dtoa_r+0x3c4>
  805e58:	d9801717 	ldw	r6,92(sp)
  805e5c:	0023883a 	mov	r17,zero
  805e60:	31bfff04 	addi	r6,r6,-4
  805e64:	d9801715 	stw	r6,92(sp)
  805e68:	003df806 	br	80564c <_dtoa_r+0x28c>
  805e6c:	00800804 	movi	r2,32
  805e70:	10c9c83a 	sub	r4,r2,r3
  805e74:	00c00104 	movi	r3,4
  805e78:	19005a16 	blt	r3,r4,805fe4 <_dtoa_r+0xc24>
  805e7c:	008000c4 	movi	r2,3
  805e80:	113f7e16 	blt	r2,r4,805c7c <_dtoa_r+0x8bc>
  805e84:	20800704 	addi	r2,r4,28
  805e88:	003f7506 	br	805c60 <_dtoa_r+0x8a0>
  805e8c:	d9801717 	ldw	r6,92(sp)
  805e90:	00800044 	movi	r2,1
  805e94:	1180a10e 	bge	r2,r6,80611c <_dtoa_r+0xd5c>
  805e98:	d9800f17 	ldw	r6,60(sp)
  805e9c:	d8c01017 	ldw	r3,64(sp)
  805ea0:	30bfffc4 	addi	r2,r6,-1
  805ea4:	1881c616 	blt	r3,r2,8065c0 <_dtoa_r+0x1200>
  805ea8:	18a5c83a 	sub	r18,r3,r2
  805eac:	d8800f17 	ldw	r2,60(sp)
  805eb0:	10026216 	blt	r2,zero,80683c <_dtoa_r+0x147c>
  805eb4:	dc001117 	ldw	r16,68(sp)
  805eb8:	1007883a 	mov	r3,r2
  805ebc:	d9800a17 	ldw	r6,40(sp)
  805ec0:	d8801117 	ldw	r2,68(sp)
  805ec4:	d9001617 	ldw	r4,88(sp)
  805ec8:	30cd883a 	add	r6,r6,r3
  805ecc:	10c5883a 	add	r2,r2,r3
  805ed0:	01400044 	movi	r5,1
  805ed4:	d9800a15 	stw	r6,40(sp)
  805ed8:	d8801115 	stw	r2,68(sp)
  805edc:	0808ea40 	call	808ea4 <__i2b>
  805ee0:	1027883a 	mov	r19,r2
  805ee4:	003f2506 	br	805b7c <_dtoa_r+0x7bc>
  805ee8:	00c020b4 	movhi	r3,130
  805eec:	18f0e904 	addi	r3,r3,-15452
  805ef0:	003d6706 	br	805490 <_dtoa_r+0xd0>
  805ef4:	dd800517 	ldw	r22,20(sp)
  805ef8:	04000044 	movi	r16,1
  805efc:	00000706 	br	805f1c <_dtoa_r+0xb5c>
  805f00:	d9400717 	ldw	r5,28(sp)
  805f04:	d9001617 	ldw	r4,88(sp)
  805f08:	01800284 	movi	r6,10
  805f0c:	000f883a 	mov	r7,zero
  805f10:	0808ee00 	call	808ee0 <__multadd>
  805f14:	d8800715 	stw	r2,28(sp)
  805f18:	84000044 	addi	r16,r16,1
  805f1c:	d9000717 	ldw	r4,28(sp)
  805f20:	900b883a 	mov	r5,r18
  805f24:	080517c0 	call	80517c <quorem>
  805f28:	15c00c04 	addi	r23,r2,48
  805f2c:	b5c00005 	stb	r23,0(r22)
  805f30:	d8c00f17 	ldw	r3,60(sp)
  805f34:	b5800044 	addi	r22,r22,1
  805f38:	80fff116 	blt	r16,r3,805f00 <_dtoa_r+0xb40>
  805f3c:	d8000615 	stw	zero,24(sp)
  805f40:	d9400717 	ldw	r5,28(sp)
  805f44:	d9001617 	ldw	r4,88(sp)
  805f48:	01800044 	movi	r6,1
  805f4c:	0808b040 	call	808b04 <__lshift>
  805f50:	1009883a 	mov	r4,r2
  805f54:	900b883a 	mov	r5,r18
  805f58:	d8800715 	stw	r2,28(sp)
  805f5c:	080831c0 	call	80831c <__mcmp>
  805f60:	00803c0e 	bge	zero,r2,806054 <_dtoa_r+0xc94>
  805f64:	b009883a 	mov	r4,r22
  805f68:	213fffc4 	addi	r4,r4,-1
  805f6c:	21400003 	ldbu	r5,0(r4)
  805f70:	00800e44 	movi	r2,57
  805f74:	28c03fcc 	andi	r3,r5,255
  805f78:	18c0201c 	xori	r3,r3,128
  805f7c:	18ffe004 	addi	r3,r3,-128
  805f80:	1881981e 	bne	r3,r2,8065e4 <_dtoa_r+0x1224>
  805f84:	d9800517 	ldw	r6,20(sp)
  805f88:	21bff71e 	bne	r4,r6,805f68 <_dtoa_r+0xba8>
  805f8c:	d8800d17 	ldw	r2,52(sp)
  805f90:	37000044 	addi	fp,r6,1
  805f94:	10800044 	addi	r2,r2,1
  805f98:	d8800d15 	stw	r2,52(sp)
  805f9c:	00800c44 	movi	r2,49
  805fa0:	30800005 	stb	r2,0(r6)
  805fa4:	d9001617 	ldw	r4,88(sp)
  805fa8:	900b883a 	mov	r5,r18
  805fac:	08081c00 	call	8081c0 <_Bfree>
  805fb0:	983ecd26 	beq	r19,zero,805ae8 <_dtoa_r+0x728>
  805fb4:	d8c00617 	ldw	r3,24(sp)
  805fb8:	18000426 	beq	r3,zero,805fcc <_dtoa_r+0xc0c>
  805fbc:	1cc00326 	beq	r3,r19,805fcc <_dtoa_r+0xc0c>
  805fc0:	d9001617 	ldw	r4,88(sp)
  805fc4:	180b883a 	mov	r5,r3
  805fc8:	08081c00 	call	8081c0 <_Bfree>
  805fcc:	d9001617 	ldw	r4,88(sp)
  805fd0:	980b883a 	mov	r5,r19
  805fd4:	08081c00 	call	8081c0 <_Bfree>
  805fd8:	003ec306 	br	805ae8 <_dtoa_r+0x728>
  805fdc:	1805883a 	mov	r2,r3
  805fe0:	003eeb06 	br	805b90 <_dtoa_r+0x7d0>
  805fe4:	d9800a17 	ldw	r6,40(sp)
  805fe8:	d8c01117 	ldw	r3,68(sp)
  805fec:	20bfff04 	addi	r2,r4,-4
  805ff0:	308d883a 	add	r6,r6,r2
  805ff4:	1887883a 	add	r3,r3,r2
  805ff8:	80a1883a 	add	r16,r16,r2
  805ffc:	d9800a15 	stw	r6,40(sp)
  806000:	d8c01115 	stw	r3,68(sp)
  806004:	003f1d06 	br	805c7c <_dtoa_r+0x8bc>
  806008:	a03f0c1e 	bne	r20,zero,805c3c <_dtoa_r+0x87c>
  80600c:	00800434 	movhi	r2,16
  806010:	10bfffc4 	addi	r2,r2,-1
  806014:	a884703a 	and	r2,r21,r2
  806018:	103f081e 	bne	r2,zero,805c3c <_dtoa_r+0x87c>
  80601c:	a89ffc2c 	andhi	r2,r21,32752
  806020:	103f0626 	beq	r2,zero,805c3c <_dtoa_r+0x87c>
  806024:	d8c01117 	ldw	r3,68(sp)
  806028:	d9000a17 	ldw	r4,40(sp)
  80602c:	18c00044 	addi	r3,r3,1
  806030:	21000044 	addi	r4,r4,1
  806034:	d8c01115 	stw	r3,68(sp)
  806038:	d9000a15 	stw	r4,40(sp)
  80603c:	003f0006 	br	805c40 <_dtoa_r+0x880>
  806040:	d9400717 	ldw	r5,28(sp)
  806044:	d9001617 	ldw	r4,88(sp)
  806048:	080900c0 	call	80900c <__pow5mult>
  80604c:	d8800715 	stw	r2,28(sp)
  806050:	003eed06 	br	805c08 <_dtoa_r+0x848>
  806054:	1000021e 	bne	r2,zero,806060 <_dtoa_r+0xca0>
  806058:	b880004c 	andi	r2,r23,1
  80605c:	103fc11e 	bne	r2,zero,805f64 <_dtoa_r+0xba4>
  806060:	b5bfffc4 	addi	r22,r22,-1
  806064:	b0c00007 	ldb	r3,0(r22)
  806068:	00800c04 	movi	r2,48
  80606c:	18bffc26 	beq	r3,r2,806060 <_dtoa_r+0xca0>
  806070:	b7000044 	addi	fp,r22,1
  806074:	003fcb06 	br	805fa4 <_dtoa_r+0xbe4>
  806078:	d9800d17 	ldw	r6,52(sp)
  80607c:	018fc83a 	sub	r7,zero,r6
  806080:	3801f726 	beq	r7,zero,806860 <_dtoa_r+0x14a0>
  806084:	398003cc 	andi	r6,r7,15
  806088:	300c90fa 	slli	r6,r6,3
  80608c:	014020b4 	movhi	r5,130
  806090:	2971b204 	addi	r5,r5,-14648
  806094:	d9001217 	ldw	r4,72(sp)
  806098:	314d883a 	add	r6,r6,r5
  80609c:	30c00117 	ldw	r3,4(r6)
  8060a0:	30800017 	ldw	r2,0(r6)
  8060a4:	d9401317 	ldw	r5,76(sp)
  8060a8:	3821d13a 	srai	r16,r7,4
  8060ac:	100d883a 	mov	r6,r2
  8060b0:	180f883a 	mov	r7,r3
  8060b4:	080ead40 	call	80ead4 <__muldf3>
  8060b8:	1011883a 	mov	r8,r2
  8060bc:	1813883a 	mov	r9,r3
  8060c0:	1029883a 	mov	r20,r2
  8060c4:	182b883a 	mov	r21,r3
  8060c8:	8001e526 	beq	r16,zero,806860 <_dtoa_r+0x14a0>
  8060cc:	05800084 	movi	r22,2
  8060d0:	044020b4 	movhi	r17,130
  8060d4:	8c71e404 	addi	r17,r17,-14448
  8060d8:	8080004c 	andi	r2,r16,1
  8060dc:	1005003a 	cmpeq	r2,r2,zero
  8060e0:	1000081e 	bne	r2,zero,806104 <_dtoa_r+0xd44>
  8060e4:	89800017 	ldw	r6,0(r17)
  8060e8:	89c00117 	ldw	r7,4(r17)
  8060ec:	480b883a 	mov	r5,r9
  8060f0:	4009883a 	mov	r4,r8
  8060f4:	080ead40 	call	80ead4 <__muldf3>
  8060f8:	1011883a 	mov	r8,r2
  8060fc:	b5800044 	addi	r22,r22,1
  806100:	1813883a 	mov	r9,r3
  806104:	8021d07a 	srai	r16,r16,1
  806108:	8c400204 	addi	r17,r17,8
  80610c:	803ff21e 	bne	r16,zero,8060d8 <_dtoa_r+0xd18>
  806110:	4029883a 	mov	r20,r8
  806114:	482b883a 	mov	r21,r9
  806118:	003dca06 	br	805844 <_dtoa_r+0x484>
  80611c:	d9000817 	ldw	r4,32(sp)
  806120:	2005003a 	cmpeq	r2,r4,zero
  806124:	1001f61e 	bne	r2,zero,806900 <_dtoa_r+0x1540>
  806128:	dc001117 	ldw	r16,68(sp)
  80612c:	dc801017 	ldw	r18,64(sp)
  806130:	18c10cc4 	addi	r3,r3,1075
  806134:	003f6106 	br	805ebc <_dtoa_r+0xafc>
  806138:	d8000b15 	stw	zero,44(sp)
  80613c:	d9802617 	ldw	r6,152(sp)
  806140:	d8c00d17 	ldw	r3,52(sp)
  806144:	30800044 	addi	r2,r6,1
  806148:	18ad883a 	add	r22,r3,r2
  80614c:	b13fffc4 	addi	r4,r22,-1
  806150:	d9000e15 	stw	r4,56(sp)
  806154:	0581f60e 	bge	zero,r22,806930 <_dtoa_r+0x1570>
  806158:	dd800f15 	stw	r22,60(sp)
  80615c:	003f3006 	br	805e20 <_dtoa_r+0xa60>
  806160:	d8000b15 	stw	zero,44(sp)
  806164:	d9002617 	ldw	r4,152(sp)
  806168:	0101eb0e 	bge	zero,r4,806918 <_dtoa_r+0x1558>
  80616c:	202d883a 	mov	r22,r4
  806170:	d9000e15 	stw	r4,56(sp)
  806174:	d9000f15 	stw	r4,60(sp)
  806178:	003f2906 	br	805e20 <_dtoa_r+0xa60>
  80617c:	01800044 	movi	r6,1
  806180:	d9800b15 	stw	r6,44(sp)
  806184:	003ff706 	br	806164 <_dtoa_r+0xda4>
  806188:	01000044 	movi	r4,1
  80618c:	d9000b15 	stw	r4,44(sp)
  806190:	003fea06 	br	80613c <_dtoa_r+0xd7c>
  806194:	04000c0e 	bge	zero,r16,8061c8 <_dtoa_r+0xe08>
  806198:	d9400717 	ldw	r5,28(sp)
  80619c:	d9001617 	ldw	r4,88(sp)
  8061a0:	01800044 	movi	r6,1
  8061a4:	0808b040 	call	808b04 <__lshift>
  8061a8:	1009883a 	mov	r4,r2
  8061ac:	900b883a 	mov	r5,r18
  8061b0:	d8800715 	stw	r2,28(sp)
  8061b4:	080831c0 	call	80831c <__mcmp>
  8061b8:	0081e00e 	bge	zero,r2,80693c <_dtoa_r+0x157c>
  8061bc:	bdc00044 	addi	r23,r23,1
  8061c0:	00800e84 	movi	r2,58
  8061c4:	b881a226 	beq	r23,r2,806850 <_dtoa_r+0x1490>
  8061c8:	b7000044 	addi	fp,r22,1
  8061cc:	b5c00005 	stb	r23,0(r22)
  8061d0:	003f7406 	br	805fa4 <_dtoa_r+0xbe4>
  8061d4:	00800e44 	movi	r2,57
  8061d8:	b8819d26 	beq	r23,r2,806850 <_dtoa_r+0x1490>
  8061dc:	053ffa0e 	bge	zero,r20,8061c8 <_dtoa_r+0xe08>
  8061e0:	8dc00c44 	addi	r23,r17,49
  8061e4:	003ff806 	br	8061c8 <_dtoa_r+0xe08>
  8061e8:	d9001617 	ldw	r4,88(sp)
  8061ec:	a80b883a 	mov	r5,r21
  8061f0:	04000044 	movi	r16,1
  8061f4:	08081c00 	call	8081c0 <_Bfree>
  8061f8:	003edf06 	br	805d78 <_dtoa_r+0x9b8>
  8061fc:	d9001617 	ldw	r4,88(sp)
  806200:	980b883a 	mov	r5,r19
  806204:	01800284 	movi	r6,10
  806208:	000f883a 	mov	r7,zero
  80620c:	0808ee00 	call	808ee0 <__multadd>
  806210:	1027883a 	mov	r19,r2
  806214:	d8800615 	stw	r2,24(sp)
  806218:	003ebb06 	br	805d08 <_dtoa_r+0x948>
  80621c:	d9801117 	ldw	r6,68(sp)
  806220:	d8800d17 	ldw	r2,52(sp)
  806224:	d8000915 	stw	zero,36(sp)
  806228:	308dc83a 	sub	r6,r6,r2
  80622c:	0087c83a 	sub	r3,zero,r2
  806230:	d9801115 	stw	r6,68(sp)
  806234:	d8c01015 	stw	r3,64(sp)
  806238:	003cfe06 	br	805634 <_dtoa_r+0x274>
  80623c:	018dc83a 	sub	r6,zero,r6
  806240:	d9801115 	stw	r6,68(sp)
  806244:	d8000a15 	stw	zero,40(sp)
  806248:	003cf306 	br	805618 <_dtoa_r+0x258>
  80624c:	d9000d17 	ldw	r4,52(sp)
  806250:	080f4200 	call	80f420 <__floatsidf>
  806254:	880b883a 	mov	r5,r17
  806258:	8009883a 	mov	r4,r16
  80625c:	180f883a 	mov	r7,r3
  806260:	100d883a 	mov	r6,r2
  806264:	080f1780 	call	80f178 <__nedf2>
  806268:	103ce126 	beq	r2,zero,8055f0 <_dtoa_r+0x230>
  80626c:	d9800d17 	ldw	r6,52(sp)
  806270:	31bfffc4 	addi	r6,r6,-1
  806274:	d9800d15 	stw	r6,52(sp)
  806278:	003cdd06 	br	8055f0 <_dtoa_r+0x230>
  80627c:	d9000717 	ldw	r4,28(sp)
  806280:	900b883a 	mov	r5,r18
  806284:	080831c0 	call	80831c <__mcmp>
  806288:	103e8d0e 	bge	r2,zero,805cc0 <_dtoa_r+0x900>
  80628c:	d9400717 	ldw	r5,28(sp)
  806290:	d9001617 	ldw	r4,88(sp)
  806294:	01800284 	movi	r6,10
  806298:	000f883a 	mov	r7,zero
  80629c:	0808ee00 	call	808ee0 <__multadd>
  8062a0:	d9800d17 	ldw	r6,52(sp)
  8062a4:	d8800715 	stw	r2,28(sp)
  8062a8:	31bfffc4 	addi	r6,r6,-1
  8062ac:	d9800d15 	stw	r6,52(sp)
  8062b0:	b001a71e 	bne	r22,zero,806950 <_dtoa_r+0x1590>
  8062b4:	d8800e17 	ldw	r2,56(sp)
  8062b8:	d8800f15 	stw	r2,60(sp)
  8062bc:	003e8006 	br	805cc0 <_dtoa_r+0x900>
  8062c0:	90800417 	ldw	r2,16(r18)
  8062c4:	1085883a 	add	r2,r2,r2
  8062c8:	1085883a 	add	r2,r2,r2
  8062cc:	1485883a 	add	r2,r2,r18
  8062d0:	11000417 	ldw	r4,16(r2)
  8062d4:	08081e80 	call	8081e8 <__hi0bits>
  8062d8:	00c00804 	movi	r3,32
  8062dc:	1887c83a 	sub	r3,r3,r2
  8062e0:	003e5a06 	br	805c4c <_dtoa_r+0x88c>
  8062e4:	d9400717 	ldw	r5,28(sp)
  8062e8:	d9801017 	ldw	r6,64(sp)
  8062ec:	d9001617 	ldw	r4,88(sp)
  8062f0:	080900c0 	call	80900c <__pow5mult>
  8062f4:	d8800715 	stw	r2,28(sp)
  8062f8:	003e4306 	br	805c08 <_dtoa_r+0x848>
  8062fc:	d9800f17 	ldw	r6,60(sp)
  806300:	d8800d17 	ldw	r2,52(sp)
  806304:	d9800315 	stw	r6,12(sp)
  806308:	d8800415 	stw	r2,16(sp)
  80630c:	d8c00b17 	ldw	r3,44(sp)
  806310:	1805003a 	cmpeq	r2,r3,zero
  806314:	1000e21e 	bne	r2,zero,8066a0 <_dtoa_r+0x12e0>
  806318:	d9000317 	ldw	r4,12(sp)
  80631c:	0005883a 	mov	r2,zero
  806320:	00cff834 	movhi	r3,16352
  806324:	200c90fa 	slli	r6,r4,3
  806328:	010020b4 	movhi	r4,130
  80632c:	2131b204 	addi	r4,r4,-14648
  806330:	180b883a 	mov	r5,r3
  806334:	310d883a 	add	r6,r6,r4
  806338:	327fff17 	ldw	r9,-4(r6)
  80633c:	323ffe17 	ldw	r8,-8(r6)
  806340:	1009883a 	mov	r4,r2
  806344:	480f883a 	mov	r7,r9
  806348:	400d883a 	mov	r6,r8
  80634c:	080ee980 	call	80ee98 <__divdf3>
  806350:	180b883a 	mov	r5,r3
  806354:	b00d883a 	mov	r6,r22
  806358:	b80f883a 	mov	r7,r23
  80635c:	1009883a 	mov	r4,r2
  806360:	080e9e00 	call	80e9e0 <__subdf3>
  806364:	a80b883a 	mov	r5,r21
  806368:	a009883a 	mov	r4,r20
  80636c:	d8c01915 	stw	r3,100(sp)
  806370:	d8801815 	stw	r2,96(sp)
  806374:	080f5180 	call	80f518 <__fixdfsi>
  806378:	1009883a 	mov	r4,r2
  80637c:	1027883a 	mov	r19,r2
  806380:	080f4200 	call	80f420 <__floatsidf>
  806384:	a80b883a 	mov	r5,r21
  806388:	a009883a 	mov	r4,r20
  80638c:	180f883a 	mov	r7,r3
  806390:	100d883a 	mov	r6,r2
  806394:	080e9e00 	call	80e9e0 <__subdf3>
  806398:	d9801817 	ldw	r6,96(sp)
  80639c:	1823883a 	mov	r17,r3
  8063a0:	d8801415 	stw	r2,80(sp)
  8063a4:	302d883a 	mov	r22,r6
  8063a8:	d9800517 	ldw	r6,20(sp)
  8063ac:	9cc00c04 	addi	r19,r19,48
  8063b0:	dc401515 	stw	r17,84(sp)
  8063b4:	d8c01917 	ldw	r3,100(sp)
  8063b8:	34c00005 	stb	r19,0(r6)
  8063bc:	d8800517 	ldw	r2,20(sp)
  8063c0:	d9401917 	ldw	r5,100(sp)
  8063c4:	d9801417 	ldw	r6,80(sp)
  8063c8:	b009883a 	mov	r4,r22
  8063cc:	880f883a 	mov	r7,r17
  8063d0:	182f883a 	mov	r23,r3
  8063d4:	17000044 	addi	fp,r2,1
  8063d8:	080f2000 	call	80f200 <__gtdf2>
  8063dc:	00804e16 	blt	zero,r2,806518 <_dtoa_r+0x1158>
  8063e0:	d9801417 	ldw	r6,80(sp)
  8063e4:	0005883a 	mov	r2,zero
  8063e8:	00cffc34 	movhi	r3,16368
  8063ec:	180b883a 	mov	r5,r3
  8063f0:	880f883a 	mov	r7,r17
  8063f4:	1009883a 	mov	r4,r2
  8063f8:	080e9e00 	call	80e9e0 <__subdf3>
  8063fc:	d9401917 	ldw	r5,100(sp)
  806400:	180f883a 	mov	r7,r3
  806404:	b009883a 	mov	r4,r22
  806408:	100d883a 	mov	r6,r2
  80640c:	080f2000 	call	80f200 <__gtdf2>
  806410:	00bda216 	blt	zero,r2,805a9c <_dtoa_r+0x6dc>
  806414:	d8c00317 	ldw	r3,12(sp)
  806418:	00800044 	movi	r2,1
  80641c:	10c01216 	blt	r2,r3,806468 <_dtoa_r+0x10a8>
  806420:	003d4506 	br	805938 <_dtoa_r+0x578>
  806424:	d9801417 	ldw	r6,80(sp)
  806428:	0005883a 	mov	r2,zero
  80642c:	00cffc34 	movhi	r3,16368
  806430:	180b883a 	mov	r5,r3
  806434:	880f883a 	mov	r7,r17
  806438:	1009883a 	mov	r4,r2
  80643c:	080e9e00 	call	80e9e0 <__subdf3>
  806440:	d9c01b17 	ldw	r7,108(sp)
  806444:	180b883a 	mov	r5,r3
  806448:	1009883a 	mov	r4,r2
  80644c:	b00d883a 	mov	r6,r22
  806450:	080f3100 	call	80f310 <__ltdf2>
  806454:	103d9116 	blt	r2,zero,805a9c <_dtoa_r+0x6dc>
  806458:	d9800517 	ldw	r6,20(sp)
  80645c:	d9000317 	ldw	r4,12(sp)
  806460:	3105883a 	add	r2,r6,r4
  806464:	e0bd3426 	beq	fp,r2,805938 <_dtoa_r+0x578>
  806468:	04500934 	movhi	r17,16420
  80646c:	0021883a 	mov	r16,zero
  806470:	b80b883a 	mov	r5,r23
  806474:	b009883a 	mov	r4,r22
  806478:	800d883a 	mov	r6,r16
  80647c:	880f883a 	mov	r7,r17
  806480:	080ead40 	call	80ead4 <__muldf3>
  806484:	d9401517 	ldw	r5,84(sp)
  806488:	d9001417 	ldw	r4,80(sp)
  80648c:	880f883a 	mov	r7,r17
  806490:	000d883a 	mov	r6,zero
  806494:	d8801a15 	stw	r2,104(sp)
  806498:	d8c01b15 	stw	r3,108(sp)
  80649c:	080ead40 	call	80ead4 <__muldf3>
  8064a0:	180b883a 	mov	r5,r3
  8064a4:	1009883a 	mov	r4,r2
  8064a8:	1823883a 	mov	r17,r3
  8064ac:	1021883a 	mov	r16,r2
  8064b0:	080f5180 	call	80f518 <__fixdfsi>
  8064b4:	1009883a 	mov	r4,r2
  8064b8:	102b883a 	mov	r21,r2
  8064bc:	080f4200 	call	80f420 <__floatsidf>
  8064c0:	880b883a 	mov	r5,r17
  8064c4:	8009883a 	mov	r4,r16
  8064c8:	180f883a 	mov	r7,r3
  8064cc:	100d883a 	mov	r6,r2
  8064d0:	080e9e00 	call	80e9e0 <__subdf3>
  8064d4:	1021883a 	mov	r16,r2
  8064d8:	d9001b17 	ldw	r4,108(sp)
  8064dc:	1823883a 	mov	r17,r3
  8064e0:	dc001415 	stw	r16,80(sp)
  8064e4:	ad400c04 	addi	r21,r21,48
  8064e8:	dc401515 	stw	r17,84(sp)
  8064ec:	d8801a17 	ldw	r2,104(sp)
  8064f0:	e5400005 	stb	r21,0(fp)
  8064f4:	202f883a 	mov	r23,r4
  8064f8:	d9c01b17 	ldw	r7,108(sp)
  8064fc:	d9001417 	ldw	r4,80(sp)
  806500:	880b883a 	mov	r5,r17
  806504:	100d883a 	mov	r6,r2
  806508:	102d883a 	mov	r22,r2
  80650c:	e7000044 	addi	fp,fp,1
  806510:	080f3100 	call	80f310 <__ltdf2>
  806514:	103fc30e 	bge	r2,zero,806424 <_dtoa_r+0x1064>
  806518:	d9000417 	ldw	r4,16(sp)
  80651c:	d9000d15 	stw	r4,52(sp)
  806520:	003d7106 	br	805ae8 <_dtoa_r+0x728>
  806524:	d9801717 	ldw	r6,92(sp)
  806528:	00800084 	movi	r2,2
  80652c:	11bde60e 	bge	r2,r6,805cc8 <_dtoa_r+0x908>
  806530:	203cfb1e 	bne	r4,zero,805920 <_dtoa_r+0x560>
  806534:	d9001617 	ldw	r4,88(sp)
  806538:	900b883a 	mov	r5,r18
  80653c:	01800144 	movi	r6,5
  806540:	000f883a 	mov	r7,zero
  806544:	0808ee00 	call	808ee0 <__multadd>
  806548:	d9000717 	ldw	r4,28(sp)
  80654c:	100b883a 	mov	r5,r2
  806550:	1025883a 	mov	r18,r2
  806554:	080831c0 	call	80831c <__mcmp>
  806558:	00bcf10e 	bge	zero,r2,805920 <_dtoa_r+0x560>
  80655c:	d8c00d17 	ldw	r3,52(sp)
  806560:	d9000517 	ldw	r4,20(sp)
  806564:	d8000615 	stw	zero,24(sp)
  806568:	18c00044 	addi	r3,r3,1
  80656c:	d8c00d15 	stw	r3,52(sp)
  806570:	00800c44 	movi	r2,49
  806574:	27000044 	addi	fp,r4,1
  806578:	20800005 	stb	r2,0(r4)
  80657c:	003e8906 	br	805fa4 <_dtoa_r+0xbe4>
  806580:	d8c00517 	ldw	r3,20(sp)
  806584:	003bc206 	br	805490 <_dtoa_r+0xd0>
  806588:	018020b4 	movhi	r6,130
  80658c:	31b1e404 	addi	r6,r6,-14448
  806590:	30c00917 	ldw	r3,36(r6)
  806594:	30800817 	ldw	r2,32(r6)
  806598:	d9001217 	ldw	r4,72(sp)
  80659c:	d9401317 	ldw	r5,76(sp)
  8065a0:	180f883a 	mov	r7,r3
  8065a4:	100d883a 	mov	r6,r2
  8065a8:	080ee980 	call	80ee98 <__divdf3>
  8065ac:	948003cc 	andi	r18,r18,15
  8065b0:	058000c4 	movi	r22,3
  8065b4:	1029883a 	mov	r20,r2
  8065b8:	182b883a 	mov	r21,r3
  8065bc:	003c8906 	br	8057e4 <_dtoa_r+0x424>
  8065c0:	d9001017 	ldw	r4,64(sp)
  8065c4:	d9800917 	ldw	r6,36(sp)
  8065c8:	0025883a 	mov	r18,zero
  8065cc:	1105c83a 	sub	r2,r2,r4
  8065d0:	2089883a 	add	r4,r4,r2
  8065d4:	308d883a 	add	r6,r6,r2
  8065d8:	d9001015 	stw	r4,64(sp)
  8065dc:	d9800915 	stw	r6,36(sp)
  8065e0:	003e3206 	br	805eac <_dtoa_r+0xaec>
  8065e4:	28800044 	addi	r2,r5,1
  8065e8:	27000044 	addi	fp,r4,1
  8065ec:	20800005 	stb	r2,0(r4)
  8065f0:	003e6c06 	br	805fa4 <_dtoa_r+0xbe4>
  8065f4:	d8800f17 	ldw	r2,60(sp)
  8065f8:	00bce016 	blt	zero,r2,80597c <_dtoa_r+0x5bc>
  8065fc:	d9800f17 	ldw	r6,60(sp)
  806600:	303cc51e 	bne	r6,zero,805918 <_dtoa_r+0x558>
  806604:	0005883a 	mov	r2,zero
  806608:	00d00534 	movhi	r3,16404
  80660c:	980b883a 	mov	r5,r19
  806610:	180f883a 	mov	r7,r3
  806614:	9009883a 	mov	r4,r18
  806618:	100d883a 	mov	r6,r2
  80661c:	080ead40 	call	80ead4 <__muldf3>
  806620:	180b883a 	mov	r5,r3
  806624:	a80f883a 	mov	r7,r21
  806628:	1009883a 	mov	r4,r2
  80662c:	a00d883a 	mov	r6,r20
  806630:	080f2880 	call	80f288 <__gedf2>
  806634:	103cb80e 	bge	r2,zero,805918 <_dtoa_r+0x558>
  806638:	0027883a 	mov	r19,zero
  80663c:	0025883a 	mov	r18,zero
  806640:	003fc606 	br	80655c <_dtoa_r+0x119c>
  806644:	99400117 	ldw	r5,4(r19)
  806648:	d9001617 	ldw	r4,88(sp)
  80664c:	08087400 	call	808740 <_Balloc>
  806650:	99800417 	ldw	r6,16(r19)
  806654:	11000304 	addi	r4,r2,12
  806658:	99400304 	addi	r5,r19,12
  80665c:	318d883a 	add	r6,r6,r6
  806660:	318d883a 	add	r6,r6,r6
  806664:	31800204 	addi	r6,r6,8
  806668:	1023883a 	mov	r17,r2
  80666c:	0807fa80 	call	807fa8 <memcpy>
  806670:	d9001617 	ldw	r4,88(sp)
  806674:	880b883a 	mov	r5,r17
  806678:	01800044 	movi	r6,1
  80667c:	0808b040 	call	808b04 <__lshift>
  806680:	100b883a 	mov	r5,r2
  806684:	003d9c06 	br	805cf8 <_dtoa_r+0x938>
  806688:	00800e44 	movi	r2,57
  80668c:	b8807026 	beq	r23,r2,806850 <_dtoa_r+0x1490>
  806690:	b8800044 	addi	r2,r23,1
  806694:	b7000044 	addi	fp,r22,1
  806698:	b0800005 	stb	r2,0(r22)
  80669c:	003e4106 	br	805fa4 <_dtoa_r+0xbe4>
  8066a0:	d8800317 	ldw	r2,12(sp)
  8066a4:	018020b4 	movhi	r6,130
  8066a8:	31b1b204 	addi	r6,r6,-14648
  8066ac:	b009883a 	mov	r4,r22
  8066b0:	100e90fa 	slli	r7,r2,3
  8066b4:	b80b883a 	mov	r5,r23
  8066b8:	398f883a 	add	r7,r7,r6
  8066bc:	38bffe17 	ldw	r2,-8(r7)
  8066c0:	d9800517 	ldw	r6,20(sp)
  8066c4:	38ffff17 	ldw	r3,-4(r7)
  8066c8:	37000044 	addi	fp,r6,1
  8066cc:	180f883a 	mov	r7,r3
  8066d0:	100d883a 	mov	r6,r2
  8066d4:	080ead40 	call	80ead4 <__muldf3>
  8066d8:	a80b883a 	mov	r5,r21
  8066dc:	a009883a 	mov	r4,r20
  8066e0:	182f883a 	mov	r23,r3
  8066e4:	102d883a 	mov	r22,r2
  8066e8:	080f5180 	call	80f518 <__fixdfsi>
  8066ec:	1009883a 	mov	r4,r2
  8066f0:	1027883a 	mov	r19,r2
  8066f4:	080f4200 	call	80f420 <__floatsidf>
  8066f8:	a80b883a 	mov	r5,r21
  8066fc:	a009883a 	mov	r4,r20
  806700:	180f883a 	mov	r7,r3
  806704:	100d883a 	mov	r6,r2
  806708:	080e9e00 	call	80e9e0 <__subdf3>
  80670c:	180b883a 	mov	r5,r3
  806710:	d8c00517 	ldw	r3,20(sp)
  806714:	9cc00c04 	addi	r19,r19,48
  806718:	1009883a 	mov	r4,r2
  80671c:	1cc00005 	stb	r19,0(r3)
  806720:	2021883a 	mov	r16,r4
  806724:	d9000317 	ldw	r4,12(sp)
  806728:	00800044 	movi	r2,1
  80672c:	2823883a 	mov	r17,r5
  806730:	20802226 	beq	r4,r2,8067bc <_dtoa_r+0x13fc>
  806734:	1029883a 	mov	r20,r2
  806738:	0005883a 	mov	r2,zero
  80673c:	00d00934 	movhi	r3,16420
  806740:	180f883a 	mov	r7,r3
  806744:	100d883a 	mov	r6,r2
  806748:	880b883a 	mov	r5,r17
  80674c:	8009883a 	mov	r4,r16
  806750:	080ead40 	call	80ead4 <__muldf3>
  806754:	180b883a 	mov	r5,r3
  806758:	1009883a 	mov	r4,r2
  80675c:	1823883a 	mov	r17,r3
  806760:	1021883a 	mov	r16,r2
  806764:	080f5180 	call	80f518 <__fixdfsi>
  806768:	1009883a 	mov	r4,r2
  80676c:	102b883a 	mov	r21,r2
  806770:	080f4200 	call	80f420 <__floatsidf>
  806774:	880b883a 	mov	r5,r17
  806778:	8009883a 	mov	r4,r16
  80677c:	180f883a 	mov	r7,r3
  806780:	100d883a 	mov	r6,r2
  806784:	080e9e00 	call	80e9e0 <__subdf3>
  806788:	180b883a 	mov	r5,r3
  80678c:	d8c00517 	ldw	r3,20(sp)
  806790:	1009883a 	mov	r4,r2
  806794:	ad400c04 	addi	r21,r21,48
  806798:	1d05883a 	add	r2,r3,r20
  80679c:	15400005 	stb	r21,0(r2)
  8067a0:	2021883a 	mov	r16,r4
  8067a4:	d9000317 	ldw	r4,12(sp)
  8067a8:	a5000044 	addi	r20,r20,1
  8067ac:	2823883a 	mov	r17,r5
  8067b0:	a13fe11e 	bne	r20,r4,806738 <_dtoa_r+0x1378>
  8067b4:	e505883a 	add	r2,fp,r20
  8067b8:	173fffc4 	addi	fp,r2,-1
  8067bc:	0025883a 	mov	r18,zero
  8067c0:	04cff834 	movhi	r19,16352
  8067c4:	b009883a 	mov	r4,r22
  8067c8:	b80b883a 	mov	r5,r23
  8067cc:	900d883a 	mov	r6,r18
  8067d0:	980f883a 	mov	r7,r19
  8067d4:	080ea600 	call	80ea60 <__adddf3>
  8067d8:	180b883a 	mov	r5,r3
  8067dc:	1009883a 	mov	r4,r2
  8067e0:	800d883a 	mov	r6,r16
  8067e4:	880f883a 	mov	r7,r17
  8067e8:	080f3100 	call	80f310 <__ltdf2>
  8067ec:	103cab16 	blt	r2,zero,805a9c <_dtoa_r+0x6dc>
  8067f0:	0009883a 	mov	r4,zero
  8067f4:	980b883a 	mov	r5,r19
  8067f8:	b80f883a 	mov	r7,r23
  8067fc:	b00d883a 	mov	r6,r22
  806800:	080e9e00 	call	80e9e0 <__subdf3>
  806804:	180b883a 	mov	r5,r3
  806808:	880f883a 	mov	r7,r17
  80680c:	1009883a 	mov	r4,r2
  806810:	800d883a 	mov	r6,r16
  806814:	080f2000 	call	80f200 <__gtdf2>
  806818:	00bc470e 	bge	zero,r2,805938 <_dtoa_r+0x578>
  80681c:	00c00c04 	movi	r3,48
  806820:	e73fffc4 	addi	fp,fp,-1
  806824:	e0800007 	ldb	r2,0(fp)
  806828:	10fffd26 	beq	r2,r3,806820 <_dtoa_r+0x1460>
  80682c:	d9800417 	ldw	r6,16(sp)
  806830:	e7000044 	addi	fp,fp,1
  806834:	d9800d15 	stw	r6,52(sp)
  806838:	003cab06 	br	805ae8 <_dtoa_r+0x728>
  80683c:	d8c00f17 	ldw	r3,60(sp)
  806840:	d9001117 	ldw	r4,68(sp)
  806844:	20e1c83a 	sub	r16,r4,r3
  806848:	0007883a 	mov	r3,zero
  80684c:	003d9b06 	br	805ebc <_dtoa_r+0xafc>
  806850:	00800e44 	movi	r2,57
  806854:	b0800005 	stb	r2,0(r22)
  806858:	b5800044 	addi	r22,r22,1
  80685c:	003dc106 	br	805f64 <_dtoa_r+0xba4>
  806860:	05800084 	movi	r22,2
  806864:	003bf706 	br	805844 <_dtoa_r+0x484>
  806868:	d9000f17 	ldw	r4,60(sp)
  80686c:	013c000e 	bge	zero,r4,805870 <_dtoa_r+0x4b0>
  806870:	d9800e17 	ldw	r6,56(sp)
  806874:	01bc300e 	bge	zero,r6,805938 <_dtoa_r+0x578>
  806878:	0005883a 	mov	r2,zero
  80687c:	00d00934 	movhi	r3,16420
  806880:	a80b883a 	mov	r5,r21
  806884:	180f883a 	mov	r7,r3
  806888:	a009883a 	mov	r4,r20
  80688c:	100d883a 	mov	r6,r2
  806890:	080ead40 	call	80ead4 <__muldf3>
  806894:	b1000044 	addi	r4,r22,1
  806898:	1021883a 	mov	r16,r2
  80689c:	1823883a 	mov	r17,r3
  8068a0:	080f4200 	call	80f420 <__floatsidf>
  8068a4:	880b883a 	mov	r5,r17
  8068a8:	8009883a 	mov	r4,r16
  8068ac:	180f883a 	mov	r7,r3
  8068b0:	100d883a 	mov	r6,r2
  8068b4:	080ead40 	call	80ead4 <__muldf3>
  8068b8:	0011883a 	mov	r8,zero
  8068bc:	02500734 	movhi	r9,16412
  8068c0:	180b883a 	mov	r5,r3
  8068c4:	480f883a 	mov	r7,r9
  8068c8:	1009883a 	mov	r4,r2
  8068cc:	400d883a 	mov	r6,r8
  8068d0:	080ea600 	call	80ea60 <__adddf3>
  8068d4:	102d883a 	mov	r22,r2
  8068d8:	00bf3034 	movhi	r2,64704
  8068dc:	10ef883a 	add	r23,r2,r3
  8068e0:	d8800d17 	ldw	r2,52(sp)
  8068e4:	d8c00e17 	ldw	r3,56(sp)
  8068e8:	8029883a 	mov	r20,r16
  8068ec:	10bfffc4 	addi	r2,r2,-1
  8068f0:	882b883a 	mov	r21,r17
  8068f4:	d8800415 	stw	r2,16(sp)
  8068f8:	d8c00315 	stw	r3,12(sp)
  8068fc:	003e8306 	br	80630c <_dtoa_r+0xf4c>
  806900:	d8800117 	ldw	r2,4(sp)
  806904:	dc001117 	ldw	r16,68(sp)
  806908:	dc801017 	ldw	r18,64(sp)
  80690c:	00c00d84 	movi	r3,54
  806910:	1887c83a 	sub	r3,r3,r2
  806914:	003d6906 	br	805ebc <_dtoa_r+0xafc>
  806918:	01800044 	movi	r6,1
  80691c:	3021883a 	mov	r16,r6
  806920:	d9800f15 	stw	r6,60(sp)
  806924:	d9802615 	stw	r6,152(sp)
  806928:	d9800e15 	stw	r6,56(sp)
  80692c:	003b9306 	br	80577c <_dtoa_r+0x3bc>
  806930:	b021883a 	mov	r16,r22
  806934:	dd800f15 	stw	r22,60(sp)
  806938:	003b9006 	br	80577c <_dtoa_r+0x3bc>
  80693c:	103e221e 	bne	r2,zero,8061c8 <_dtoa_r+0xe08>
  806940:	b880004c 	andi	r2,r23,1
  806944:	1005003a 	cmpeq	r2,r2,zero
  806948:	103e1f1e 	bne	r2,zero,8061c8 <_dtoa_r+0xe08>
  80694c:	003e1b06 	br	8061bc <_dtoa_r+0xdfc>
  806950:	d9001617 	ldw	r4,88(sp)
  806954:	980b883a 	mov	r5,r19
  806958:	01800284 	movi	r6,10
  80695c:	000f883a 	mov	r7,zero
  806960:	0808ee00 	call	808ee0 <__multadd>
  806964:	d8c00e17 	ldw	r3,56(sp)
  806968:	1027883a 	mov	r19,r2
  80696c:	d8c00f15 	stw	r3,60(sp)
  806970:	003cd306 	br	805cc0 <_dtoa_r+0x900>

00806974 <_fflush_r>:
  806974:	defffb04 	addi	sp,sp,-20
  806978:	dcc00315 	stw	r19,12(sp)
  80697c:	dc800215 	stw	r18,8(sp)
  806980:	dfc00415 	stw	ra,16(sp)
  806984:	dc400115 	stw	r17,4(sp)
  806988:	dc000015 	stw	r16,0(sp)
  80698c:	2027883a 	mov	r19,r4
  806990:	2825883a 	mov	r18,r5
  806994:	20000226 	beq	r4,zero,8069a0 <_fflush_r+0x2c>
  806998:	20800e17 	ldw	r2,56(r4)
  80699c:	10005626 	beq	r2,zero,806af8 <_fflush_r+0x184>
  8069a0:	9100030b 	ldhu	r4,12(r18)
  8069a4:	20ffffcc 	andi	r3,r4,65535
  8069a8:	18e0001c 	xori	r3,r3,32768
  8069ac:	18e00004 	addi	r3,r3,-32768
  8069b0:	1880020c 	andi	r2,r3,8
  8069b4:	1000261e 	bne	r2,zero,806a50 <_fflush_r+0xdc>
  8069b8:	90c00117 	ldw	r3,4(r18)
  8069bc:	20820014 	ori	r2,r4,2048
  8069c0:	9080030d 	sth	r2,12(r18)
  8069c4:	1009883a 	mov	r4,r2
  8069c8:	00c0400e 	bge	zero,r3,806acc <_fflush_r+0x158>
  8069cc:	92000a17 	ldw	r8,40(r18)
  8069d0:	40004026 	beq	r8,zero,806ad4 <_fflush_r+0x160>
  8069d4:	2084000c 	andi	r2,r4,4096
  8069d8:	10005326 	beq	r2,zero,806b28 <_fflush_r+0x1b4>
  8069dc:	94001417 	ldw	r16,80(r18)
  8069e0:	9080030b 	ldhu	r2,12(r18)
  8069e4:	1080010c 	andi	r2,r2,4
  8069e8:	1000481e 	bne	r2,zero,806b0c <_fflush_r+0x198>
  8069ec:	91400717 	ldw	r5,28(r18)
  8069f0:	9809883a 	mov	r4,r19
  8069f4:	800d883a 	mov	r6,r16
  8069f8:	000f883a 	mov	r7,zero
  8069fc:	403ee83a 	callr	r8
  806a00:	8080261e 	bne	r16,r2,806a9c <_fflush_r+0x128>
  806a04:	9080030b 	ldhu	r2,12(r18)
  806a08:	91000417 	ldw	r4,16(r18)
  806a0c:	90000115 	stw	zero,4(r18)
  806a10:	10bdffcc 	andi	r2,r2,63487
  806a14:	10ffffcc 	andi	r3,r2,65535
  806a18:	18c4000c 	andi	r3,r3,4096
  806a1c:	9080030d 	sth	r2,12(r18)
  806a20:	91000015 	stw	r4,0(r18)
  806a24:	18002b26 	beq	r3,zero,806ad4 <_fflush_r+0x160>
  806a28:	0007883a 	mov	r3,zero
  806a2c:	1805883a 	mov	r2,r3
  806a30:	94001415 	stw	r16,80(r18)
  806a34:	dfc00417 	ldw	ra,16(sp)
  806a38:	dcc00317 	ldw	r19,12(sp)
  806a3c:	dc800217 	ldw	r18,8(sp)
  806a40:	dc400117 	ldw	r17,4(sp)
  806a44:	dc000017 	ldw	r16,0(sp)
  806a48:	dec00504 	addi	sp,sp,20
  806a4c:	f800283a 	ret
  806a50:	94400417 	ldw	r17,16(r18)
  806a54:	88001f26 	beq	r17,zero,806ad4 <_fflush_r+0x160>
  806a58:	90800017 	ldw	r2,0(r18)
  806a5c:	18c000cc 	andi	r3,r3,3
  806a60:	94400015 	stw	r17,0(r18)
  806a64:	1461c83a 	sub	r16,r2,r17
  806a68:	18002526 	beq	r3,zero,806b00 <_fflush_r+0x18c>
  806a6c:	0005883a 	mov	r2,zero
  806a70:	90800215 	stw	r2,8(r18)
  806a74:	0400170e 	bge	zero,r16,806ad4 <_fflush_r+0x160>
  806a78:	90c00917 	ldw	r3,36(r18)
  806a7c:	91400717 	ldw	r5,28(r18)
  806a80:	880d883a 	mov	r6,r17
  806a84:	800f883a 	mov	r7,r16
  806a88:	9809883a 	mov	r4,r19
  806a8c:	183ee83a 	callr	r3
  806a90:	88a3883a 	add	r17,r17,r2
  806a94:	80a1c83a 	sub	r16,r16,r2
  806a98:	00bff616 	blt	zero,r2,806a74 <_fflush_r+0x100>
  806a9c:	9080030b 	ldhu	r2,12(r18)
  806aa0:	00ffffc4 	movi	r3,-1
  806aa4:	10801014 	ori	r2,r2,64
  806aa8:	9080030d 	sth	r2,12(r18)
  806aac:	1805883a 	mov	r2,r3
  806ab0:	dfc00417 	ldw	ra,16(sp)
  806ab4:	dcc00317 	ldw	r19,12(sp)
  806ab8:	dc800217 	ldw	r18,8(sp)
  806abc:	dc400117 	ldw	r17,4(sp)
  806ac0:	dc000017 	ldw	r16,0(sp)
  806ac4:	dec00504 	addi	sp,sp,20
  806ac8:	f800283a 	ret
  806acc:	90800f17 	ldw	r2,60(r18)
  806ad0:	00bfbe16 	blt	zero,r2,8069cc <_fflush_r+0x58>
  806ad4:	0007883a 	mov	r3,zero
  806ad8:	1805883a 	mov	r2,r3
  806adc:	dfc00417 	ldw	ra,16(sp)
  806ae0:	dcc00317 	ldw	r19,12(sp)
  806ae4:	dc800217 	ldw	r18,8(sp)
  806ae8:	dc400117 	ldw	r17,4(sp)
  806aec:	dc000017 	ldw	r16,0(sp)
  806af0:	dec00504 	addi	sp,sp,20
  806af4:	f800283a 	ret
  806af8:	0806c0c0 	call	806c0c <__sinit>
  806afc:	003fa806 	br	8069a0 <_fflush_r+0x2c>
  806b00:	90800517 	ldw	r2,20(r18)
  806b04:	90800215 	stw	r2,8(r18)
  806b08:	003fda06 	br	806a74 <_fflush_r+0x100>
  806b0c:	90800117 	ldw	r2,4(r18)
  806b10:	90c00c17 	ldw	r3,48(r18)
  806b14:	80a1c83a 	sub	r16,r16,r2
  806b18:	183fb426 	beq	r3,zero,8069ec <_fflush_r+0x78>
  806b1c:	90800f17 	ldw	r2,60(r18)
  806b20:	80a1c83a 	sub	r16,r16,r2
  806b24:	003fb106 	br	8069ec <_fflush_r+0x78>
  806b28:	91400717 	ldw	r5,28(r18)
  806b2c:	9809883a 	mov	r4,r19
  806b30:	000d883a 	mov	r6,zero
  806b34:	01c00044 	movi	r7,1
  806b38:	403ee83a 	callr	r8
  806b3c:	1021883a 	mov	r16,r2
  806b40:	00bfffc4 	movi	r2,-1
  806b44:	80800226 	beq	r16,r2,806b50 <_fflush_r+0x1dc>
  806b48:	92000a17 	ldw	r8,40(r18)
  806b4c:	003fa406 	br	8069e0 <_fflush_r+0x6c>
  806b50:	98c00017 	ldw	r3,0(r19)
  806b54:	00800744 	movi	r2,29
  806b58:	18bfde26 	beq	r3,r2,806ad4 <_fflush_r+0x160>
  806b5c:	9080030b 	ldhu	r2,12(r18)
  806b60:	8007883a 	mov	r3,r16
  806b64:	10801014 	ori	r2,r2,64
  806b68:	9080030d 	sth	r2,12(r18)
  806b6c:	003fcf06 	br	806aac <_fflush_r+0x138>

00806b70 <fflush>:
  806b70:	01402034 	movhi	r5,128
  806b74:	295a5d04 	addi	r5,r5,26996
  806b78:	2007883a 	mov	r3,r4
  806b7c:	20000526 	beq	r4,zero,806b94 <fflush+0x24>
  806b80:	008020b4 	movhi	r2,130
  806b84:	10b96204 	addi	r2,r2,-6776
  806b88:	11000017 	ldw	r4,0(r2)
  806b8c:	180b883a 	mov	r5,r3
  806b90:	08069741 	jmpi	806974 <_fflush_r>
  806b94:	008020b4 	movhi	r2,130
  806b98:	10b96304 	addi	r2,r2,-6772
  806b9c:	11000017 	ldw	r4,0(r2)
  806ba0:	08079c01 	jmpi	8079c0 <_fwalk_reent>

00806ba4 <std>:
  806ba4:	00802074 	movhi	r2,129
  806ba8:	10a75104 	addi	r2,r2,-25276
  806bac:	20800b15 	stw	r2,44(r4)
  806bb0:	00802074 	movhi	r2,129
  806bb4:	10a78c04 	addi	r2,r2,-25040
  806bb8:	20800815 	stw	r2,32(r4)
  806bbc:	00c02074 	movhi	r3,129
  806bc0:	18e76d04 	addi	r3,r3,-25164
  806bc4:	00802074 	movhi	r2,129
  806bc8:	10a75304 	addi	r2,r2,-25268
  806bcc:	2140030d 	sth	r5,12(r4)
  806bd0:	2180038d 	sth	r6,14(r4)
  806bd4:	20c00915 	stw	r3,36(r4)
  806bd8:	20800a15 	stw	r2,40(r4)
  806bdc:	20000015 	stw	zero,0(r4)
  806be0:	20000115 	stw	zero,4(r4)
  806be4:	20000215 	stw	zero,8(r4)
  806be8:	20000415 	stw	zero,16(r4)
  806bec:	20000515 	stw	zero,20(r4)
  806bf0:	20000615 	stw	zero,24(r4)
  806bf4:	21000715 	stw	r4,28(r4)
  806bf8:	f800283a 	ret

00806bfc <__sfp_lock_acquire>:
  806bfc:	f800283a 	ret

00806c00 <__sfp_lock_release>:
  806c00:	f800283a 	ret

00806c04 <__sinit_lock_acquire>:
  806c04:	f800283a 	ret

00806c08 <__sinit_lock_release>:
  806c08:	f800283a 	ret

00806c0c <__sinit>:
  806c0c:	20800e17 	ldw	r2,56(r4)
  806c10:	defffd04 	addi	sp,sp,-12
  806c14:	dc400115 	stw	r17,4(sp)
  806c18:	dc000015 	stw	r16,0(sp)
  806c1c:	dfc00215 	stw	ra,8(sp)
  806c20:	04400044 	movi	r17,1
  806c24:	01400104 	movi	r5,4
  806c28:	000d883a 	mov	r6,zero
  806c2c:	2021883a 	mov	r16,r4
  806c30:	2200bb04 	addi	r8,r4,748
  806c34:	200f883a 	mov	r7,r4
  806c38:	10000526 	beq	r2,zero,806c50 <__sinit+0x44>
  806c3c:	dfc00217 	ldw	ra,8(sp)
  806c40:	dc400117 	ldw	r17,4(sp)
  806c44:	dc000017 	ldw	r16,0(sp)
  806c48:	dec00304 	addi	sp,sp,12
  806c4c:	f800283a 	ret
  806c50:	21000117 	ldw	r4,4(r4)
  806c54:	00802034 	movhi	r2,128
  806c58:	109b3c04 	addi	r2,r2,27888
  806c5c:	00c000c4 	movi	r3,3
  806c60:	80800f15 	stw	r2,60(r16)
  806c64:	80c0b915 	stw	r3,740(r16)
  806c68:	8200ba15 	stw	r8,744(r16)
  806c6c:	84400e15 	stw	r17,56(r16)
  806c70:	8000b815 	stw	zero,736(r16)
  806c74:	0806ba40 	call	806ba4 <std>
  806c78:	81000217 	ldw	r4,8(r16)
  806c7c:	880d883a 	mov	r6,r17
  806c80:	800f883a 	mov	r7,r16
  806c84:	01400284 	movi	r5,10
  806c88:	0806ba40 	call	806ba4 <std>
  806c8c:	81000317 	ldw	r4,12(r16)
  806c90:	800f883a 	mov	r7,r16
  806c94:	01400484 	movi	r5,18
  806c98:	01800084 	movi	r6,2
  806c9c:	dfc00217 	ldw	ra,8(sp)
  806ca0:	dc400117 	ldw	r17,4(sp)
  806ca4:	dc000017 	ldw	r16,0(sp)
  806ca8:	dec00304 	addi	sp,sp,12
  806cac:	0806ba41 	jmpi	806ba4 <std>

00806cb0 <__fp_lock>:
  806cb0:	0005883a 	mov	r2,zero
  806cb4:	f800283a 	ret

00806cb8 <__fp_unlock>:
  806cb8:	0005883a 	mov	r2,zero
  806cbc:	f800283a 	ret

00806cc0 <__fp_unlock_all>:
  806cc0:	008020b4 	movhi	r2,130
  806cc4:	10b96204 	addi	r2,r2,-6776
  806cc8:	11000017 	ldw	r4,0(r2)
  806ccc:	01402034 	movhi	r5,128
  806cd0:	295b2e04 	addi	r5,r5,27832
  806cd4:	0807a881 	jmpi	807a88 <_fwalk>

00806cd8 <__fp_lock_all>:
  806cd8:	008020b4 	movhi	r2,130
  806cdc:	10b96204 	addi	r2,r2,-6776
  806ce0:	11000017 	ldw	r4,0(r2)
  806ce4:	01402034 	movhi	r5,128
  806ce8:	295b2c04 	addi	r5,r5,27824
  806cec:	0807a881 	jmpi	807a88 <_fwalk>

00806cf0 <_cleanup_r>:
  806cf0:	01402074 	movhi	r5,129
  806cf4:	29720804 	addi	r5,r5,-14304
  806cf8:	0807a881 	jmpi	807a88 <_fwalk>

00806cfc <_cleanup>:
  806cfc:	008020b4 	movhi	r2,130
  806d00:	10b96304 	addi	r2,r2,-6772
  806d04:	11000017 	ldw	r4,0(r2)
  806d08:	0806cf01 	jmpi	806cf0 <_cleanup_r>

00806d0c <__sfmoreglue>:
  806d0c:	defffc04 	addi	sp,sp,-16
  806d10:	dc000015 	stw	r16,0(sp)
  806d14:	2821883a 	mov	r16,r5
  806d18:	dc400115 	stw	r17,4(sp)
  806d1c:	01401704 	movi	r5,92
  806d20:	2023883a 	mov	r17,r4
  806d24:	8009883a 	mov	r4,r16
  806d28:	dfc00315 	stw	ra,12(sp)
  806d2c:	dcc00215 	stw	r19,8(sp)
  806d30:	080f9440 	call	80f944 <__mulsi3>
  806d34:	11400304 	addi	r5,r2,12
  806d38:	8809883a 	mov	r4,r17
  806d3c:	1027883a 	mov	r19,r2
  806d40:	0800d2c0 	call	800d2c <_malloc_r>
  806d44:	10c00304 	addi	r3,r2,12
  806d48:	1023883a 	mov	r17,r2
  806d4c:	1809883a 	mov	r4,r3
  806d50:	980d883a 	mov	r6,r19
  806d54:	000b883a 	mov	r5,zero
  806d58:	10000b26 	beq	r2,zero,806d88 <__sfmoreglue+0x7c>
  806d5c:	14000115 	stw	r16,4(r2)
  806d60:	10c00215 	stw	r3,8(r2)
  806d64:	10000015 	stw	zero,0(r2)
  806d68:	08081280 	call	808128 <memset>
  806d6c:	8805883a 	mov	r2,r17
  806d70:	dfc00317 	ldw	ra,12(sp)
  806d74:	dcc00217 	ldw	r19,8(sp)
  806d78:	dc400117 	ldw	r17,4(sp)
  806d7c:	dc000017 	ldw	r16,0(sp)
  806d80:	dec00404 	addi	sp,sp,16
  806d84:	f800283a 	ret
  806d88:	0023883a 	mov	r17,zero
  806d8c:	8805883a 	mov	r2,r17
  806d90:	dfc00317 	ldw	ra,12(sp)
  806d94:	dcc00217 	ldw	r19,8(sp)
  806d98:	dc400117 	ldw	r17,4(sp)
  806d9c:	dc000017 	ldw	r16,0(sp)
  806da0:	dec00404 	addi	sp,sp,16
  806da4:	f800283a 	ret

00806da8 <__sfp>:
  806da8:	defffd04 	addi	sp,sp,-12
  806dac:	008020b4 	movhi	r2,130
  806db0:	10b96304 	addi	r2,r2,-6772
  806db4:	dc000015 	stw	r16,0(sp)
  806db8:	14000017 	ldw	r16,0(r2)
  806dbc:	dc400115 	stw	r17,4(sp)
  806dc0:	dfc00215 	stw	ra,8(sp)
  806dc4:	80800e17 	ldw	r2,56(r16)
  806dc8:	2023883a 	mov	r17,r4
  806dcc:	10002626 	beq	r2,zero,806e68 <__sfp+0xc0>
  806dd0:	8400b804 	addi	r16,r16,736
  806dd4:	80800117 	ldw	r2,4(r16)
  806dd8:	81000217 	ldw	r4,8(r16)
  806ddc:	10ffffc4 	addi	r3,r2,-1
  806de0:	18000916 	blt	r3,zero,806e08 <__sfp+0x60>
  806de4:	2080030f 	ldh	r2,12(r4)
  806de8:	10000b26 	beq	r2,zero,806e18 <__sfp+0x70>
  806dec:	017fffc4 	movi	r5,-1
  806df0:	00000206 	br	806dfc <__sfp+0x54>
  806df4:	2080030f 	ldh	r2,12(r4)
  806df8:	10000726 	beq	r2,zero,806e18 <__sfp+0x70>
  806dfc:	18ffffc4 	addi	r3,r3,-1
  806e00:	21001704 	addi	r4,r4,92
  806e04:	197ffb1e 	bne	r3,r5,806df4 <__sfp+0x4c>
  806e08:	80800017 	ldw	r2,0(r16)
  806e0c:	10001926 	beq	r2,zero,806e74 <__sfp+0xcc>
  806e10:	1021883a 	mov	r16,r2
  806e14:	003fef06 	br	806dd4 <__sfp+0x2c>
  806e18:	00bfffc4 	movi	r2,-1
  806e1c:	00c00044 	movi	r3,1
  806e20:	2080038d 	sth	r2,14(r4)
  806e24:	20c0030d 	sth	r3,12(r4)
  806e28:	20000015 	stw	zero,0(r4)
  806e2c:	20000215 	stw	zero,8(r4)
  806e30:	20000115 	stw	zero,4(r4)
  806e34:	20000415 	stw	zero,16(r4)
  806e38:	20000515 	stw	zero,20(r4)
  806e3c:	20000615 	stw	zero,24(r4)
  806e40:	20000c15 	stw	zero,48(r4)
  806e44:	20000d15 	stw	zero,52(r4)
  806e48:	20001115 	stw	zero,68(r4)
  806e4c:	20001215 	stw	zero,72(r4)
  806e50:	2005883a 	mov	r2,r4
  806e54:	dfc00217 	ldw	ra,8(sp)
  806e58:	dc400117 	ldw	r17,4(sp)
  806e5c:	dc000017 	ldw	r16,0(sp)
  806e60:	dec00304 	addi	sp,sp,12
  806e64:	f800283a 	ret
  806e68:	8009883a 	mov	r4,r16
  806e6c:	0806c0c0 	call	806c0c <__sinit>
  806e70:	003fd706 	br	806dd0 <__sfp+0x28>
  806e74:	8809883a 	mov	r4,r17
  806e78:	01400104 	movi	r5,4
  806e7c:	0806d0c0 	call	806d0c <__sfmoreglue>
  806e80:	80800015 	stw	r2,0(r16)
  806e84:	103fe21e 	bne	r2,zero,806e10 <__sfp+0x68>
  806e88:	00800304 	movi	r2,12
  806e8c:	0009883a 	mov	r4,zero
  806e90:	88800015 	stw	r2,0(r17)
  806e94:	003fee06 	br	806e50 <__sfp+0xa8>

00806e98 <_fread_r>:
  806e98:	defff504 	addi	sp,sp,-44
  806e9c:	dd800715 	stw	r22,28(sp)
  806ea0:	dc000115 	stw	r16,4(sp)
  806ea4:	202d883a 	mov	r22,r4
  806ea8:	2821883a 	mov	r16,r5
  806eac:	3809883a 	mov	r4,r7
  806eb0:	300b883a 	mov	r5,r6
  806eb4:	df000915 	stw	fp,36(sp)
  806eb8:	ddc00815 	stw	r23,32(sp)
  806ebc:	dcc00415 	stw	r19,16(sp)
  806ec0:	dfc00a15 	stw	ra,40(sp)
  806ec4:	dd400615 	stw	r21,24(sp)
  806ec8:	dd000515 	stw	r20,20(sp)
  806ecc:	dc800315 	stw	r18,12(sp)
  806ed0:	dc400215 	stw	r17,8(sp)
  806ed4:	d9800015 	stw	r6,0(sp)
  806ed8:	3839883a 	mov	fp,r7
  806edc:	080f9440 	call	80f944 <__mulsi3>
  806ee0:	102f883a 	mov	r23,r2
  806ee4:	dcc00b17 	ldw	r19,44(sp)
  806ee8:	10005926 	beq	r2,zero,807050 <_fread_r+0x1b8>
  806eec:	b0000226 	beq	r22,zero,806ef8 <_fread_r+0x60>
  806ef0:	b0800e17 	ldw	r2,56(r22)
  806ef4:	10005826 	beq	r2,zero,807058 <_fread_r+0x1c0>
  806ef8:	9c400117 	ldw	r17,4(r19)
  806efc:	88005a16 	blt	r17,zero,807068 <_fread_r+0x1d0>
  806f00:	9880030b 	ldhu	r2,12(r19)
  806f04:	8029883a 	mov	r20,r16
  806f08:	1080008c 	andi	r2,r2,2
  806f0c:	1000221e 	bne	r2,zero,806f98 <_fread_r+0x100>
  806f10:	b825883a 	mov	r18,r23
  806f14:	00000106 	br	806f1c <_fread_r+0x84>
  806f18:	9c400117 	ldw	r17,4(r19)
  806f1c:	a009883a 	mov	r4,r20
  806f20:	880d883a 	mov	r6,r17
  806f24:	8c80552e 	bgeu	r17,r18,80707c <_fread_r+0x1e4>
  806f28:	99400017 	ldw	r5,0(r19)
  806f2c:	a469883a 	add	r20,r20,r17
  806f30:	9465c83a 	sub	r18,r18,r17
  806f34:	0807fa80 	call	807fa8 <memcpy>
  806f38:	98800017 	ldw	r2,0(r19)
  806f3c:	b009883a 	mov	r4,r22
  806f40:	980b883a 	mov	r5,r19
  806f44:	1461883a 	add	r16,r2,r17
  806f48:	9c000015 	stw	r16,0(r19)
  806f4c:	0809a2c0 	call	809a2c <__srefill_r>
  806f50:	103ff126 	beq	r2,zero,806f18 <_fread_r+0x80>
  806f54:	d9400017 	ldw	r5,0(sp)
  806f58:	bc89c83a 	sub	r4,r23,r18
  806f5c:	080f9340 	call	80f934 <__udivsi3>
  806f60:	1039883a 	mov	fp,r2
  806f64:	e005883a 	mov	r2,fp
  806f68:	dfc00a17 	ldw	ra,40(sp)
  806f6c:	df000917 	ldw	fp,36(sp)
  806f70:	ddc00817 	ldw	r23,32(sp)
  806f74:	dd800717 	ldw	r22,28(sp)
  806f78:	dd400617 	ldw	r21,24(sp)
  806f7c:	dd000517 	ldw	r20,20(sp)
  806f80:	dcc00417 	ldw	r19,16(sp)
  806f84:	dc800317 	ldw	r18,12(sp)
  806f88:	dc400217 	ldw	r17,8(sp)
  806f8c:	dc000117 	ldw	r16,4(sp)
  806f90:	dec00b04 	addi	sp,sp,44
  806f94:	f800283a 	ret
  806f98:	b825883a 	mov	r18,r23
  806f9c:	8dc03536 	bltu	r17,r23,807074 <_fread_r+0x1dc>
  806fa0:	99400017 	ldw	r5,0(r19)
  806fa4:	a009883a 	mov	r4,r20
  806fa8:	900d883a 	mov	r6,r18
  806fac:	0807fa80 	call	807fa8 <memcpy>
  806fb0:	9c000017 	ldw	r16,0(r19)
  806fb4:	98800117 	ldw	r2,4(r19)
  806fb8:	99400c17 	ldw	r5,48(r19)
  806fbc:	84a1883a 	add	r16,r16,r18
  806fc0:	14a3c83a 	sub	r17,r2,r18
  806fc4:	a4ab883a 	add	r21,r20,r18
  806fc8:	9c400115 	stw	r17,4(r19)
  806fcc:	9c000015 	stw	r16,0(r19)
  806fd0:	bca9c83a 	sub	r20,r23,r18
  806fd4:	28000826 	beq	r5,zero,806ff8 <_fread_r+0x160>
  806fd8:	a03fe226 	beq	r20,zero,806f64 <_fread_r+0xcc>
  806fdc:	98801004 	addi	r2,r19,64
  806fe0:	28800326 	beq	r5,r2,806ff0 <_fread_r+0x158>
  806fe4:	b009883a 	mov	r4,r22
  806fe8:	08072100 	call	807210 <_free_r>
  806fec:	9c000017 	ldw	r16,0(r19)
  806ff0:	98000c15 	stw	zero,48(r19)
  806ff4:	00000106 	br	806ffc <_fread_r+0x164>
  806ff8:	a03fda26 	beq	r20,zero,806f64 <_fread_r+0xcc>
  806ffc:	9c800417 	ldw	r18,16(r19)
  807000:	9c400517 	ldw	r17,20(r19)
  807004:	9d400015 	stw	r21,0(r19)
  807008:	9d400415 	stw	r21,16(r19)
  80700c:	9d000515 	stw	r20,20(r19)
  807010:	b009883a 	mov	r4,r22
  807014:	980b883a 	mov	r5,r19
  807018:	0809a2c0 	call	809a2c <__srefill_r>
  80701c:	98c00117 	ldw	r3,4(r19)
  807020:	9c800415 	stw	r18,16(r19)
  807024:	9c400515 	stw	r17,20(r19)
  807028:	a8eb883a 	add	r21,r21,r3
  80702c:	9c000015 	stw	r16,0(r19)
  807030:	a0e9c83a 	sub	r20,r20,r3
  807034:	98000115 	stw	zero,4(r19)
  807038:	103fef26 	beq	r2,zero,806ff8 <_fread_r+0x160>
  80703c:	d9400017 	ldw	r5,0(sp)
  807040:	bd09c83a 	sub	r4,r23,r20
  807044:	080f9340 	call	80f934 <__udivsi3>
  807048:	1039883a 	mov	fp,r2
  80704c:	003fc506 	br	806f64 <_fread_r+0xcc>
  807050:	0039883a 	mov	fp,zero
  807054:	003fc306 	br	806f64 <_fread_r+0xcc>
  807058:	b009883a 	mov	r4,r22
  80705c:	0806c0c0 	call	806c0c <__sinit>
  807060:	9c400117 	ldw	r17,4(r19)
  807064:	883fa60e 	bge	r17,zero,806f00 <_fread_r+0x68>
  807068:	0023883a 	mov	r17,zero
  80706c:	98000115 	stw	zero,4(r19)
  807070:	003fa306 	br	806f00 <_fread_r+0x68>
  807074:	8825883a 	mov	r18,r17
  807078:	003fc906 	br	806fa0 <_fread_r+0x108>
  80707c:	99400017 	ldw	r5,0(r19)
  807080:	900d883a 	mov	r6,r18
  807084:	0807fa80 	call	807fa8 <memcpy>
  807088:	98c00117 	ldw	r3,4(r19)
  80708c:	98800017 	ldw	r2,0(r19)
  807090:	1c87c83a 	sub	r3,r3,r18
  807094:	1485883a 	add	r2,r2,r18
  807098:	98800015 	stw	r2,0(r19)
  80709c:	98c00115 	stw	r3,4(r19)
  8070a0:	003fb006 	br	806f64 <_fread_r+0xcc>

008070a4 <fread>:
  8070a4:	008020b4 	movhi	r2,130
  8070a8:	10b96204 	addi	r2,r2,-6776
  8070ac:	2017883a 	mov	r11,r4
  8070b0:	11000017 	ldw	r4,0(r2)
  8070b4:	defffe04 	addi	sp,sp,-8
  8070b8:	3013883a 	mov	r9,r6
  8070bc:	2805883a 	mov	r2,r5
  8070c0:	d9c00015 	stw	r7,0(sp)
  8070c4:	580b883a 	mov	r5,r11
  8070c8:	100d883a 	mov	r6,r2
  8070cc:	480f883a 	mov	r7,r9
  8070d0:	dfc00115 	stw	ra,4(sp)
  8070d4:	0806e980 	call	806e98 <_fread_r>
  8070d8:	dfc00117 	ldw	ra,4(sp)
  8070dc:	dec00204 	addi	sp,sp,8
  8070e0:	f800283a 	ret

008070e4 <_malloc_trim_r>:
  8070e4:	defffb04 	addi	sp,sp,-20
  8070e8:	dcc00315 	stw	r19,12(sp)
  8070ec:	04c020b4 	movhi	r19,130
  8070f0:	9cf2b504 	addi	r19,r19,-13612
  8070f4:	dc800215 	stw	r18,8(sp)
  8070f8:	dc400115 	stw	r17,4(sp)
  8070fc:	dc000015 	stw	r16,0(sp)
  807100:	2823883a 	mov	r17,r5
  807104:	2025883a 	mov	r18,r4
  807108:	dfc00415 	stw	ra,16(sp)
  80710c:	0810e400 	call	810e40 <__malloc_lock>
  807110:	98800217 	ldw	r2,8(r19)
  807114:	9009883a 	mov	r4,r18
  807118:	000b883a 	mov	r5,zero
  80711c:	10c00117 	ldw	r3,4(r2)
  807120:	00bfff04 	movi	r2,-4
  807124:	18a0703a 	and	r16,r3,r2
  807128:	8463c83a 	sub	r17,r16,r17
  80712c:	8c43fbc4 	addi	r17,r17,4079
  807130:	8822d33a 	srli	r17,r17,12
  807134:	0083ffc4 	movi	r2,4095
  807138:	8c7fffc4 	addi	r17,r17,-1
  80713c:	8822933a 	slli	r17,r17,12
  807140:	1440060e 	bge	r2,r17,80715c <_malloc_trim_r+0x78>
  807144:	08015bc0 	call	8015bc <_sbrk_r>
  807148:	98c00217 	ldw	r3,8(r19)
  80714c:	9009883a 	mov	r4,r18
  807150:	044bc83a 	sub	r5,zero,r17
  807154:	80c7883a 	add	r3,r16,r3
  807158:	10c00926 	beq	r2,r3,807180 <_malloc_trim_r+0x9c>
  80715c:	0810f480 	call	810f48 <__malloc_unlock>
  807160:	0005883a 	mov	r2,zero
  807164:	dfc00417 	ldw	ra,16(sp)
  807168:	dcc00317 	ldw	r19,12(sp)
  80716c:	dc800217 	ldw	r18,8(sp)
  807170:	dc400117 	ldw	r17,4(sp)
  807174:	dc000017 	ldw	r16,0(sp)
  807178:	dec00504 	addi	sp,sp,20
  80717c:	f800283a 	ret
  807180:	9009883a 	mov	r4,r18
  807184:	08015bc0 	call	8015bc <_sbrk_r>
  807188:	844dc83a 	sub	r6,r16,r17
  80718c:	00ffffc4 	movi	r3,-1
  807190:	9009883a 	mov	r4,r18
  807194:	000b883a 	mov	r5,zero
  807198:	01c020b4 	movhi	r7,130
  80719c:	39c09504 	addi	r7,r7,596
  8071a0:	31800054 	ori	r6,r6,1
  8071a4:	10c00926 	beq	r2,r3,8071cc <_malloc_trim_r+0xe8>
  8071a8:	38800017 	ldw	r2,0(r7)
  8071ac:	98c00217 	ldw	r3,8(r19)
  8071b0:	9009883a 	mov	r4,r18
  8071b4:	1445c83a 	sub	r2,r2,r17
  8071b8:	38800015 	stw	r2,0(r7)
  8071bc:	19800115 	stw	r6,4(r3)
  8071c0:	0810f480 	call	810f48 <__malloc_unlock>
  8071c4:	00800044 	movi	r2,1
  8071c8:	003fe606 	br	807164 <_malloc_trim_r+0x80>
  8071cc:	08015bc0 	call	8015bc <_sbrk_r>
  8071d0:	99800217 	ldw	r6,8(r19)
  8071d4:	100f883a 	mov	r7,r2
  8071d8:	9009883a 	mov	r4,r18
  8071dc:	1187c83a 	sub	r3,r2,r6
  8071e0:	008003c4 	movi	r2,15
  8071e4:	19400054 	ori	r5,r3,1
  8071e8:	10ffdc0e 	bge	r2,r3,80715c <_malloc_trim_r+0x78>
  8071ec:	008020b4 	movhi	r2,130
  8071f0:	10b96004 	addi	r2,r2,-6784
  8071f4:	10c00017 	ldw	r3,0(r2)
  8071f8:	008020b4 	movhi	r2,130
  8071fc:	10809504 	addi	r2,r2,596
  807200:	31400115 	stw	r5,4(r6)
  807204:	38c7c83a 	sub	r3,r7,r3
  807208:	10c00015 	stw	r3,0(r2)
  80720c:	003fd306 	br	80715c <_malloc_trim_r+0x78>

00807210 <_free_r>:
  807210:	defffd04 	addi	sp,sp,-12
  807214:	dc400115 	stw	r17,4(sp)
  807218:	dc000015 	stw	r16,0(sp)
  80721c:	dfc00215 	stw	ra,8(sp)
  807220:	2821883a 	mov	r16,r5
  807224:	2023883a 	mov	r17,r4
  807228:	28005a26 	beq	r5,zero,807394 <_free_r+0x184>
  80722c:	0810e400 	call	810e40 <__malloc_lock>
  807230:	823ffe04 	addi	r8,r16,-8
  807234:	41400117 	ldw	r5,4(r8)
  807238:	00bfff84 	movi	r2,-2
  80723c:	028020b4 	movhi	r10,130
  807240:	52b2b504 	addi	r10,r10,-13612
  807244:	288e703a 	and	r7,r5,r2
  807248:	41cd883a 	add	r6,r8,r7
  80724c:	30c00117 	ldw	r3,4(r6)
  807250:	51000217 	ldw	r4,8(r10)
  807254:	00bfff04 	movi	r2,-4
  807258:	1892703a 	and	r9,r3,r2
  80725c:	5017883a 	mov	r11,r10
  807260:	31006726 	beq	r6,r4,807400 <_free_r+0x1f0>
  807264:	2880004c 	andi	r2,r5,1
  807268:	1005003a 	cmpeq	r2,r2,zero
  80726c:	32400115 	stw	r9,4(r6)
  807270:	10001a1e 	bne	r2,zero,8072dc <_free_r+0xcc>
  807274:	000b883a 	mov	r5,zero
  807278:	3247883a 	add	r3,r6,r9
  80727c:	18800117 	ldw	r2,4(r3)
  807280:	1080004c 	andi	r2,r2,1
  807284:	1000231e 	bne	r2,zero,807314 <_free_r+0x104>
  807288:	280ac03a 	cmpne	r5,r5,zero
  80728c:	3a4f883a 	add	r7,r7,r9
  807290:	2800451e 	bne	r5,zero,8073a8 <_free_r+0x198>
  807294:	31000217 	ldw	r4,8(r6)
  807298:	008020b4 	movhi	r2,130
  80729c:	10b2b704 	addi	r2,r2,-13604
  8072a0:	20807b26 	beq	r4,r2,807490 <_free_r+0x280>
  8072a4:	30800317 	ldw	r2,12(r6)
  8072a8:	3a07883a 	add	r3,r7,r8
  8072ac:	19c00015 	stw	r7,0(r3)
  8072b0:	11000215 	stw	r4,8(r2)
  8072b4:	20800315 	stw	r2,12(r4)
  8072b8:	38800054 	ori	r2,r7,1
  8072bc:	40800115 	stw	r2,4(r8)
  8072c0:	28001a26 	beq	r5,zero,80732c <_free_r+0x11c>
  8072c4:	8809883a 	mov	r4,r17
  8072c8:	dfc00217 	ldw	ra,8(sp)
  8072cc:	dc400117 	ldw	r17,4(sp)
  8072d0:	dc000017 	ldw	r16,0(sp)
  8072d4:	dec00304 	addi	sp,sp,12
  8072d8:	0810f481 	jmpi	810f48 <__malloc_unlock>
  8072dc:	80bffe17 	ldw	r2,-8(r16)
  8072e0:	50c00204 	addi	r3,r10,8
  8072e4:	4091c83a 	sub	r8,r8,r2
  8072e8:	41000217 	ldw	r4,8(r8)
  8072ec:	388f883a 	add	r7,r7,r2
  8072f0:	20c06126 	beq	r4,r3,807478 <_free_r+0x268>
  8072f4:	40800317 	ldw	r2,12(r8)
  8072f8:	3247883a 	add	r3,r6,r9
  8072fc:	000b883a 	mov	r5,zero
  807300:	11000215 	stw	r4,8(r2)
  807304:	20800315 	stw	r2,12(r4)
  807308:	18800117 	ldw	r2,4(r3)
  80730c:	1080004c 	andi	r2,r2,1
  807310:	103fdd26 	beq	r2,zero,807288 <_free_r+0x78>
  807314:	38800054 	ori	r2,r7,1
  807318:	3a07883a 	add	r3,r7,r8
  80731c:	280ac03a 	cmpne	r5,r5,zero
  807320:	40800115 	stw	r2,4(r8)
  807324:	19c00015 	stw	r7,0(r3)
  807328:	283fe61e 	bne	r5,zero,8072c4 <_free_r+0xb4>
  80732c:	00807fc4 	movi	r2,511
  807330:	11c01f2e 	bgeu	r2,r7,8073b0 <_free_r+0x1a0>
  807334:	3806d27a 	srli	r3,r7,9
  807338:	1800481e 	bne	r3,zero,80745c <_free_r+0x24c>
  80733c:	3804d0fa 	srli	r2,r7,3
  807340:	100690fa 	slli	r3,r2,3
  807344:	1acd883a 	add	r6,r3,r11
  807348:	31400217 	ldw	r5,8(r6)
  80734c:	31405926 	beq	r6,r5,8074b4 <_free_r+0x2a4>
  807350:	28800117 	ldw	r2,4(r5)
  807354:	00ffff04 	movi	r3,-4
  807358:	10c4703a 	and	r2,r2,r3
  80735c:	3880022e 	bgeu	r7,r2,807368 <_free_r+0x158>
  807360:	29400217 	ldw	r5,8(r5)
  807364:	317ffa1e 	bne	r6,r5,807350 <_free_r+0x140>
  807368:	29800317 	ldw	r6,12(r5)
  80736c:	41800315 	stw	r6,12(r8)
  807370:	41400215 	stw	r5,8(r8)
  807374:	8809883a 	mov	r4,r17
  807378:	2a000315 	stw	r8,12(r5)
  80737c:	32000215 	stw	r8,8(r6)
  807380:	dfc00217 	ldw	ra,8(sp)
  807384:	dc400117 	ldw	r17,4(sp)
  807388:	dc000017 	ldw	r16,0(sp)
  80738c:	dec00304 	addi	sp,sp,12
  807390:	0810f481 	jmpi	810f48 <__malloc_unlock>
  807394:	dfc00217 	ldw	ra,8(sp)
  807398:	dc400117 	ldw	r17,4(sp)
  80739c:	dc000017 	ldw	r16,0(sp)
  8073a0:	dec00304 	addi	sp,sp,12
  8073a4:	f800283a 	ret
  8073a8:	31000217 	ldw	r4,8(r6)
  8073ac:	003fbd06 	br	8072a4 <_free_r+0x94>
  8073b0:	3806d0fa 	srli	r3,r7,3
  8073b4:	00800044 	movi	r2,1
  8073b8:	51400117 	ldw	r5,4(r10)
  8073bc:	180890fa 	slli	r4,r3,3
  8073c0:	1807d0ba 	srai	r3,r3,2
  8073c4:	22c9883a 	add	r4,r4,r11
  8073c8:	21800217 	ldw	r6,8(r4)
  8073cc:	10c4983a 	sll	r2,r2,r3
  8073d0:	41000315 	stw	r4,12(r8)
  8073d4:	41800215 	stw	r6,8(r8)
  8073d8:	288ab03a 	or	r5,r5,r2
  8073dc:	22000215 	stw	r8,8(r4)
  8073e0:	8809883a 	mov	r4,r17
  8073e4:	51400115 	stw	r5,4(r10)
  8073e8:	32000315 	stw	r8,12(r6)
  8073ec:	dfc00217 	ldw	ra,8(sp)
  8073f0:	dc400117 	ldw	r17,4(sp)
  8073f4:	dc000017 	ldw	r16,0(sp)
  8073f8:	dec00304 	addi	sp,sp,12
  8073fc:	0810f481 	jmpi	810f48 <__malloc_unlock>
  807400:	2880004c 	andi	r2,r5,1
  807404:	3a4d883a 	add	r6,r7,r9
  807408:	1000071e 	bne	r2,zero,807428 <_free_r+0x218>
  80740c:	80bffe17 	ldw	r2,-8(r16)
  807410:	4091c83a 	sub	r8,r8,r2
  807414:	41000317 	ldw	r4,12(r8)
  807418:	40c00217 	ldw	r3,8(r8)
  80741c:	308d883a 	add	r6,r6,r2
  807420:	20c00215 	stw	r3,8(r4)
  807424:	19000315 	stw	r4,12(r3)
  807428:	008020b4 	movhi	r2,130
  80742c:	10b95f04 	addi	r2,r2,-6788
  807430:	11000017 	ldw	r4,0(r2)
  807434:	30c00054 	ori	r3,r6,1
  807438:	52000215 	stw	r8,8(r10)
  80743c:	40c00115 	stw	r3,4(r8)
  807440:	313fa036 	bltu	r6,r4,8072c4 <_free_r+0xb4>
  807444:	008020b4 	movhi	r2,130
  807448:	10806f04 	addi	r2,r2,444
  80744c:	11400017 	ldw	r5,0(r2)
  807450:	8809883a 	mov	r4,r17
  807454:	08070e40 	call	8070e4 <_malloc_trim_r>
  807458:	003f9a06 	br	8072c4 <_free_r+0xb4>
  80745c:	00800104 	movi	r2,4
  807460:	10c0072e 	bgeu	r2,r3,807480 <_free_r+0x270>
  807464:	00800504 	movi	r2,20
  807468:	10c01936 	bltu	r2,r3,8074d0 <_free_r+0x2c0>
  80746c:	188016c4 	addi	r2,r3,91
  807470:	100690fa 	slli	r3,r2,3
  807474:	003fb306 	br	807344 <_free_r+0x134>
  807478:	01400044 	movi	r5,1
  80747c:	003f7e06 	br	807278 <_free_r+0x68>
  807480:	3804d1ba 	srli	r2,r7,6
  807484:	10800e04 	addi	r2,r2,56
  807488:	100690fa 	slli	r3,r2,3
  80748c:	003fad06 	br	807344 <_free_r+0x134>
  807490:	22000315 	stw	r8,12(r4)
  807494:	22000215 	stw	r8,8(r4)
  807498:	3a05883a 	add	r2,r7,r8
  80749c:	38c00054 	ori	r3,r7,1
  8074a0:	11c00015 	stw	r7,0(r2)
  8074a4:	41000215 	stw	r4,8(r8)
  8074a8:	40c00115 	stw	r3,4(r8)
  8074ac:	41000315 	stw	r4,12(r8)
  8074b0:	003f8406 	br	8072c4 <_free_r+0xb4>
  8074b4:	1005d0ba 	srai	r2,r2,2
  8074b8:	00c00044 	movi	r3,1
  8074bc:	51000117 	ldw	r4,4(r10)
  8074c0:	1886983a 	sll	r3,r3,r2
  8074c4:	20c8b03a 	or	r4,r4,r3
  8074c8:	51000115 	stw	r4,4(r10)
  8074cc:	003fa706 	br	80736c <_free_r+0x15c>
  8074d0:	00801504 	movi	r2,84
  8074d4:	10c00436 	bltu	r2,r3,8074e8 <_free_r+0x2d8>
  8074d8:	3804d33a 	srli	r2,r7,12
  8074dc:	10801b84 	addi	r2,r2,110
  8074e0:	100690fa 	slli	r3,r2,3
  8074e4:	003f9706 	br	807344 <_free_r+0x134>
  8074e8:	00805504 	movi	r2,340
  8074ec:	10c00436 	bltu	r2,r3,807500 <_free_r+0x2f0>
  8074f0:	3804d3fa 	srli	r2,r7,15
  8074f4:	10801dc4 	addi	r2,r2,119
  8074f8:	100690fa 	slli	r3,r2,3
  8074fc:	003f9106 	br	807344 <_free_r+0x134>
  807500:	00815504 	movi	r2,1364
  807504:	10c0032e 	bgeu	r2,r3,807514 <_free_r+0x304>
  807508:	00801f84 	movi	r2,126
  80750c:	00c0fc04 	movi	r3,1008
  807510:	003f8c06 	br	807344 <_free_r+0x134>
  807514:	3804d4ba 	srli	r2,r7,18
  807518:	10801f04 	addi	r2,r2,124
  80751c:	100690fa 	slli	r3,r2,3
  807520:	003f8806 	br	807344 <_free_r+0x134>

00807524 <__sfvwrite_r>:
  807524:	30800217 	ldw	r2,8(r6)
  807528:	defff504 	addi	sp,sp,-44
  80752c:	df000915 	stw	fp,36(sp)
  807530:	dd800715 	stw	r22,28(sp)
  807534:	dc800315 	stw	r18,12(sp)
  807538:	dfc00a15 	stw	ra,40(sp)
  80753c:	ddc00815 	stw	r23,32(sp)
  807540:	dd400615 	stw	r21,24(sp)
  807544:	dd000515 	stw	r20,20(sp)
  807548:	dcc00415 	stw	r19,16(sp)
  80754c:	dc400215 	stw	r17,8(sp)
  807550:	dc000115 	stw	r16,4(sp)
  807554:	302d883a 	mov	r22,r6
  807558:	2039883a 	mov	fp,r4
  80755c:	2825883a 	mov	r18,r5
  807560:	10001c26 	beq	r2,zero,8075d4 <__sfvwrite_r+0xb0>
  807564:	29c0030b 	ldhu	r7,12(r5)
  807568:	3880020c 	andi	r2,r7,8
  80756c:	10002726 	beq	r2,zero,80760c <__sfvwrite_r+0xe8>
  807570:	28800417 	ldw	r2,16(r5)
  807574:	10002526 	beq	r2,zero,80760c <__sfvwrite_r+0xe8>
  807578:	3880008c 	andi	r2,r7,2
  80757c:	b5400017 	ldw	r21,0(r22)
  807580:	10002826 	beq	r2,zero,807624 <__sfvwrite_r+0x100>
  807584:	0021883a 	mov	r16,zero
  807588:	0023883a 	mov	r17,zero
  80758c:	880d883a 	mov	r6,r17
  807590:	e009883a 	mov	r4,fp
  807594:	00810004 	movi	r2,1024
  807598:	80006e26 	beq	r16,zero,807754 <__sfvwrite_r+0x230>
  80759c:	800f883a 	mov	r7,r16
  8075a0:	91400717 	ldw	r5,28(r18)
  8075a4:	1400012e 	bgeu	r2,r16,8075ac <__sfvwrite_r+0x88>
  8075a8:	100f883a 	mov	r7,r2
  8075ac:	90c00917 	ldw	r3,36(r18)
  8075b0:	183ee83a 	callr	r3
  8075b4:	1007883a 	mov	r3,r2
  8075b8:	80a1c83a 	sub	r16,r16,r2
  8075bc:	88a3883a 	add	r17,r17,r2
  8075c0:	00806d0e 	bge	zero,r2,807778 <__sfvwrite_r+0x254>
  8075c4:	b0800217 	ldw	r2,8(r22)
  8075c8:	10c5c83a 	sub	r2,r2,r3
  8075cc:	b0800215 	stw	r2,8(r22)
  8075d0:	103fee1e 	bne	r2,zero,80758c <__sfvwrite_r+0x68>
  8075d4:	0009883a 	mov	r4,zero
  8075d8:	2005883a 	mov	r2,r4
  8075dc:	dfc00a17 	ldw	ra,40(sp)
  8075e0:	df000917 	ldw	fp,36(sp)
  8075e4:	ddc00817 	ldw	r23,32(sp)
  8075e8:	dd800717 	ldw	r22,28(sp)
  8075ec:	dd400617 	ldw	r21,24(sp)
  8075f0:	dd000517 	ldw	r20,20(sp)
  8075f4:	dcc00417 	ldw	r19,16(sp)
  8075f8:	dc800317 	ldw	r18,12(sp)
  8075fc:	dc400217 	ldw	r17,8(sp)
  807600:	dc000117 	ldw	r16,4(sp)
  807604:	dec00b04 	addi	sp,sp,44
  807608:	f800283a 	ret
  80760c:	08050400 	call	805040 <__swsetup_r>
  807610:	1000e41e 	bne	r2,zero,8079a4 <__sfvwrite_r+0x480>
  807614:	91c0030b 	ldhu	r7,12(r18)
  807618:	b5400017 	ldw	r21,0(r22)
  80761c:	3880008c 	andi	r2,r7,2
  807620:	103fd81e 	bne	r2,zero,807584 <__sfvwrite_r+0x60>
  807624:	3880004c 	andi	r2,r7,1
  807628:	1005003a 	cmpeq	r2,r2,zero
  80762c:	10005726 	beq	r2,zero,80778c <__sfvwrite_r+0x268>
  807630:	0029883a 	mov	r20,zero
  807634:	002f883a 	mov	r23,zero
  807638:	a0004226 	beq	r20,zero,807744 <__sfvwrite_r+0x220>
  80763c:	3880800c 	andi	r2,r7,512
  807640:	94000217 	ldw	r16,8(r18)
  807644:	10008b26 	beq	r2,zero,807874 <__sfvwrite_r+0x350>
  807648:	800d883a 	mov	r6,r16
  80764c:	a400a536 	bltu	r20,r16,8078e4 <__sfvwrite_r+0x3c0>
  807650:	3881200c 	andi	r2,r7,1152
  807654:	10002726 	beq	r2,zero,8076f4 <__sfvwrite_r+0x1d0>
  807658:	90800517 	ldw	r2,20(r18)
  80765c:	92000417 	ldw	r8,16(r18)
  807660:	91400017 	ldw	r5,0(r18)
  807664:	1087883a 	add	r3,r2,r2
  807668:	1887883a 	add	r3,r3,r2
  80766c:	1808d7fa 	srli	r4,r3,31
  807670:	2a21c83a 	sub	r16,r5,r8
  807674:	80800044 	addi	r2,r16,1
  807678:	20c9883a 	add	r4,r4,r3
  80767c:	2027d07a 	srai	r19,r4,1
  807680:	a085883a 	add	r2,r20,r2
  807684:	980d883a 	mov	r6,r19
  807688:	9880022e 	bgeu	r19,r2,807694 <__sfvwrite_r+0x170>
  80768c:	1027883a 	mov	r19,r2
  807690:	100d883a 	mov	r6,r2
  807694:	3881000c 	andi	r2,r7,1024
  807698:	1000b826 	beq	r2,zero,80797c <__sfvwrite_r+0x458>
  80769c:	300b883a 	mov	r5,r6
  8076a0:	e009883a 	mov	r4,fp
  8076a4:	0800d2c0 	call	800d2c <_malloc_r>
  8076a8:	10003126 	beq	r2,zero,807770 <__sfvwrite_r+0x24c>
  8076ac:	91400417 	ldw	r5,16(r18)
  8076b0:	1009883a 	mov	r4,r2
  8076b4:	800d883a 	mov	r6,r16
  8076b8:	1023883a 	mov	r17,r2
  8076bc:	0807fa80 	call	807fa8 <memcpy>
  8076c0:	90c0030b 	ldhu	r3,12(r18)
  8076c4:	00beffc4 	movi	r2,-1025
  8076c8:	1886703a 	and	r3,r3,r2
  8076cc:	18c02014 	ori	r3,r3,128
  8076d0:	90c0030d 	sth	r3,12(r18)
  8076d4:	9c07c83a 	sub	r3,r19,r16
  8076d8:	8c05883a 	add	r2,r17,r16
  8076dc:	a00d883a 	mov	r6,r20
  8076e0:	a021883a 	mov	r16,r20
  8076e4:	90800015 	stw	r2,0(r18)
  8076e8:	90c00215 	stw	r3,8(r18)
  8076ec:	94400415 	stw	r17,16(r18)
  8076f0:	94c00515 	stw	r19,20(r18)
  8076f4:	91000017 	ldw	r4,0(r18)
  8076f8:	b80b883a 	mov	r5,r23
  8076fc:	a023883a 	mov	r17,r20
  807700:	08080480 	call	808048 <memmove>
  807704:	90c00217 	ldw	r3,8(r18)
  807708:	90800017 	ldw	r2,0(r18)
  80770c:	a027883a 	mov	r19,r20
  807710:	1c07c83a 	sub	r3,r3,r16
  807714:	1405883a 	add	r2,r2,r16
  807718:	90c00215 	stw	r3,8(r18)
  80771c:	a021883a 	mov	r16,r20
  807720:	90800015 	stw	r2,0(r18)
  807724:	b0800217 	ldw	r2,8(r22)
  807728:	1405c83a 	sub	r2,r2,r16
  80772c:	b0800215 	stw	r2,8(r22)
  807730:	103fa826 	beq	r2,zero,8075d4 <__sfvwrite_r+0xb0>
  807734:	a469c83a 	sub	r20,r20,r17
  807738:	91c0030b 	ldhu	r7,12(r18)
  80773c:	bcef883a 	add	r23,r23,r19
  807740:	a03fbe1e 	bne	r20,zero,80763c <__sfvwrite_r+0x118>
  807744:	adc00017 	ldw	r23,0(r21)
  807748:	ad000117 	ldw	r20,4(r21)
  80774c:	ad400204 	addi	r21,r21,8
  807750:	003fb906 	br	807638 <__sfvwrite_r+0x114>
  807754:	ac400017 	ldw	r17,0(r21)
  807758:	ac000117 	ldw	r16,4(r21)
  80775c:	ad400204 	addi	r21,r21,8
  807760:	003f8a06 	br	80758c <__sfvwrite_r+0x68>
  807764:	91400417 	ldw	r5,16(r18)
  807768:	e009883a 	mov	r4,fp
  80776c:	08072100 	call	807210 <_free_r>
  807770:	00800304 	movi	r2,12
  807774:	e0800015 	stw	r2,0(fp)
  807778:	9080030b 	ldhu	r2,12(r18)
  80777c:	013fffc4 	movi	r4,-1
  807780:	10801014 	ori	r2,r2,64
  807784:	9080030d 	sth	r2,12(r18)
  807788:	003f9306 	br	8075d8 <__sfvwrite_r+0xb4>
  80778c:	0027883a 	mov	r19,zero
  807790:	002f883a 	mov	r23,zero
  807794:	d8000015 	stw	zero,0(sp)
  807798:	0029883a 	mov	r20,zero
  80779c:	98001e26 	beq	r19,zero,807818 <__sfvwrite_r+0x2f4>
  8077a0:	d8c00017 	ldw	r3,0(sp)
  8077a4:	1804c03a 	cmpne	r2,r3,zero
  8077a8:	10005e26 	beq	r2,zero,807924 <__sfvwrite_r+0x400>
  8077ac:	9821883a 	mov	r16,r19
  8077b0:	a4c0012e 	bgeu	r20,r19,8077b8 <__sfvwrite_r+0x294>
  8077b4:	a021883a 	mov	r16,r20
  8077b8:	91000017 	ldw	r4,0(r18)
  8077bc:	90800417 	ldw	r2,16(r18)
  8077c0:	91800217 	ldw	r6,8(r18)
  8077c4:	91c00517 	ldw	r7,20(r18)
  8077c8:	1100022e 	bgeu	r2,r4,8077d4 <__sfvwrite_r+0x2b0>
  8077cc:	31e3883a 	add	r17,r6,r7
  8077d0:	8c001616 	blt	r17,r16,80782c <__sfvwrite_r+0x308>
  8077d4:	81c03816 	blt	r16,r7,8078b8 <__sfvwrite_r+0x394>
  8077d8:	90c00917 	ldw	r3,36(r18)
  8077dc:	91400717 	ldw	r5,28(r18)
  8077e0:	e009883a 	mov	r4,fp
  8077e4:	b80d883a 	mov	r6,r23
  8077e8:	183ee83a 	callr	r3
  8077ec:	1023883a 	mov	r17,r2
  8077f0:	00bfe10e 	bge	zero,r2,807778 <__sfvwrite_r+0x254>
  8077f4:	a469c83a 	sub	r20,r20,r17
  8077f8:	a0001826 	beq	r20,zero,80785c <__sfvwrite_r+0x338>
  8077fc:	b0800217 	ldw	r2,8(r22)
  807800:	1445c83a 	sub	r2,r2,r17
  807804:	b0800215 	stw	r2,8(r22)
  807808:	103f7226 	beq	r2,zero,8075d4 <__sfvwrite_r+0xb0>
  80780c:	9c67c83a 	sub	r19,r19,r17
  807810:	bc6f883a 	add	r23,r23,r17
  807814:	983fe21e 	bne	r19,zero,8077a0 <__sfvwrite_r+0x27c>
  807818:	adc00017 	ldw	r23,0(r21)
  80781c:	acc00117 	ldw	r19,4(r21)
  807820:	ad400204 	addi	r21,r21,8
  807824:	d8000015 	stw	zero,0(sp)
  807828:	003fdc06 	br	80779c <__sfvwrite_r+0x278>
  80782c:	b80b883a 	mov	r5,r23
  807830:	880d883a 	mov	r6,r17
  807834:	08080480 	call	808048 <memmove>
  807838:	90c00017 	ldw	r3,0(r18)
  80783c:	e009883a 	mov	r4,fp
  807840:	900b883a 	mov	r5,r18
  807844:	1c47883a 	add	r3,r3,r17
  807848:	90c00015 	stw	r3,0(r18)
  80784c:	08069740 	call	806974 <_fflush_r>
  807850:	103fc91e 	bne	r2,zero,807778 <__sfvwrite_r+0x254>
  807854:	a469c83a 	sub	r20,r20,r17
  807858:	a03fe81e 	bne	r20,zero,8077fc <__sfvwrite_r+0x2d8>
  80785c:	e009883a 	mov	r4,fp
  807860:	900b883a 	mov	r5,r18
  807864:	08069740 	call	806974 <_fflush_r>
  807868:	103fc31e 	bne	r2,zero,807778 <__sfvwrite_r+0x254>
  80786c:	d8000015 	stw	zero,0(sp)
  807870:	003fe206 	br	8077fc <__sfvwrite_r+0x2d8>
  807874:	91000017 	ldw	r4,0(r18)
  807878:	90800417 	ldw	r2,16(r18)
  80787c:	1100022e 	bgeu	r2,r4,807888 <__sfvwrite_r+0x364>
  807880:	8023883a 	mov	r17,r16
  807884:	85003136 	bltu	r16,r20,80794c <__sfvwrite_r+0x428>
  807888:	91c00517 	ldw	r7,20(r18)
  80788c:	a1c01836 	bltu	r20,r7,8078f0 <__sfvwrite_r+0x3cc>
  807890:	90c00917 	ldw	r3,36(r18)
  807894:	91400717 	ldw	r5,28(r18)
  807898:	e009883a 	mov	r4,fp
  80789c:	b80d883a 	mov	r6,r23
  8078a0:	183ee83a 	callr	r3
  8078a4:	1021883a 	mov	r16,r2
  8078a8:	00bfb30e 	bge	zero,r2,807778 <__sfvwrite_r+0x254>
  8078ac:	1023883a 	mov	r17,r2
  8078b0:	1027883a 	mov	r19,r2
  8078b4:	003f9b06 	br	807724 <__sfvwrite_r+0x200>
  8078b8:	b80b883a 	mov	r5,r23
  8078bc:	800d883a 	mov	r6,r16
  8078c0:	08080480 	call	808048 <memmove>
  8078c4:	90c00217 	ldw	r3,8(r18)
  8078c8:	90800017 	ldw	r2,0(r18)
  8078cc:	8023883a 	mov	r17,r16
  8078d0:	1c07c83a 	sub	r3,r3,r16
  8078d4:	1405883a 	add	r2,r2,r16
  8078d8:	90c00215 	stw	r3,8(r18)
  8078dc:	90800015 	stw	r2,0(r18)
  8078e0:	003fc406 	br	8077f4 <__sfvwrite_r+0x2d0>
  8078e4:	a00d883a 	mov	r6,r20
  8078e8:	a021883a 	mov	r16,r20
  8078ec:	003f8106 	br	8076f4 <__sfvwrite_r+0x1d0>
  8078f0:	b80b883a 	mov	r5,r23
  8078f4:	a00d883a 	mov	r6,r20
  8078f8:	08080480 	call	808048 <memmove>
  8078fc:	90c00217 	ldw	r3,8(r18)
  807900:	90800017 	ldw	r2,0(r18)
  807904:	a021883a 	mov	r16,r20
  807908:	1d07c83a 	sub	r3,r3,r20
  80790c:	1505883a 	add	r2,r2,r20
  807910:	a023883a 	mov	r17,r20
  807914:	a027883a 	mov	r19,r20
  807918:	90c00215 	stw	r3,8(r18)
  80791c:	90800015 	stw	r2,0(r18)
  807920:	003f8006 	br	807724 <__sfvwrite_r+0x200>
  807924:	b809883a 	mov	r4,r23
  807928:	01400284 	movi	r5,10
  80792c:	980d883a 	mov	r6,r19
  807930:	0807ec40 	call	807ec4 <memchr>
  807934:	10001726 	beq	r2,zero,807994 <__sfvwrite_r+0x470>
  807938:	15c5c83a 	sub	r2,r2,r23
  80793c:	15000044 	addi	r20,r2,1
  807940:	00800044 	movi	r2,1
  807944:	d8800015 	stw	r2,0(sp)
  807948:	003f9806 	br	8077ac <__sfvwrite_r+0x288>
  80794c:	b80b883a 	mov	r5,r23
  807950:	800d883a 	mov	r6,r16
  807954:	08080480 	call	808048 <memmove>
  807958:	90c00017 	ldw	r3,0(r18)
  80795c:	e009883a 	mov	r4,fp
  807960:	900b883a 	mov	r5,r18
  807964:	1c07883a 	add	r3,r3,r16
  807968:	90c00015 	stw	r3,0(r18)
  80796c:	8027883a 	mov	r19,r16
  807970:	08069740 	call	806974 <_fflush_r>
  807974:	103f6b26 	beq	r2,zero,807724 <__sfvwrite_r+0x200>
  807978:	003f7f06 	br	807778 <__sfvwrite_r+0x254>
  80797c:	400b883a 	mov	r5,r8
  807980:	e009883a 	mov	r4,fp
  807984:	08094380 	call	809438 <_realloc_r>
  807988:	103f7626 	beq	r2,zero,807764 <__sfvwrite_r+0x240>
  80798c:	1023883a 	mov	r17,r2
  807990:	003f5006 	br	8076d4 <__sfvwrite_r+0x1b0>
  807994:	00c00044 	movi	r3,1
  807998:	9d000044 	addi	r20,r19,1
  80799c:	d8c00015 	stw	r3,0(sp)
  8079a0:	003f8206 	br	8077ac <__sfvwrite_r+0x288>
  8079a4:	9080030b 	ldhu	r2,12(r18)
  8079a8:	00c00244 	movi	r3,9
  8079ac:	013fffc4 	movi	r4,-1
  8079b0:	10801014 	ori	r2,r2,64
  8079b4:	9080030d 	sth	r2,12(r18)
  8079b8:	e0c00015 	stw	r3,0(fp)
  8079bc:	003f0606 	br	8075d8 <__sfvwrite_r+0xb4>

008079c0 <_fwalk_reent>:
  8079c0:	defff704 	addi	sp,sp,-36
  8079c4:	dcc00315 	stw	r19,12(sp)
  8079c8:	24c0b804 	addi	r19,r4,736
  8079cc:	dd800615 	stw	r22,24(sp)
  8079d0:	dd400515 	stw	r21,20(sp)
  8079d4:	dfc00815 	stw	ra,32(sp)
  8079d8:	ddc00715 	stw	r23,28(sp)
  8079dc:	dd000415 	stw	r20,16(sp)
  8079e0:	dc800215 	stw	r18,8(sp)
  8079e4:	dc400115 	stw	r17,4(sp)
  8079e8:	dc000015 	stw	r16,0(sp)
  8079ec:	202b883a 	mov	r21,r4
  8079f0:	282d883a 	mov	r22,r5
  8079f4:	0806bfc0 	call	806bfc <__sfp_lock_acquire>
  8079f8:	98002126 	beq	r19,zero,807a80 <_fwalk_reent+0xc0>
  8079fc:	002f883a 	mov	r23,zero
  807a00:	9c800117 	ldw	r18,4(r19)
  807a04:	9c000217 	ldw	r16,8(r19)
  807a08:	90bfffc4 	addi	r2,r18,-1
  807a0c:	10000d16 	blt	r2,zero,807a44 <_fwalk_reent+0x84>
  807a10:	0023883a 	mov	r17,zero
  807a14:	053fffc4 	movi	r20,-1
  807a18:	8080030f 	ldh	r2,12(r16)
  807a1c:	8c400044 	addi	r17,r17,1
  807a20:	10000626 	beq	r2,zero,807a3c <_fwalk_reent+0x7c>
  807a24:	8080038f 	ldh	r2,14(r16)
  807a28:	800b883a 	mov	r5,r16
  807a2c:	a809883a 	mov	r4,r21
  807a30:	15000226 	beq	r2,r20,807a3c <_fwalk_reent+0x7c>
  807a34:	b03ee83a 	callr	r22
  807a38:	b8aeb03a 	or	r23,r23,r2
  807a3c:	84001704 	addi	r16,r16,92
  807a40:	947ff51e 	bne	r18,r17,807a18 <_fwalk_reent+0x58>
  807a44:	9cc00017 	ldw	r19,0(r19)
  807a48:	983fed1e 	bne	r19,zero,807a00 <_fwalk_reent+0x40>
  807a4c:	0806c000 	call	806c00 <__sfp_lock_release>
  807a50:	b805883a 	mov	r2,r23
  807a54:	dfc00817 	ldw	ra,32(sp)
  807a58:	ddc00717 	ldw	r23,28(sp)
  807a5c:	dd800617 	ldw	r22,24(sp)
  807a60:	dd400517 	ldw	r21,20(sp)
  807a64:	dd000417 	ldw	r20,16(sp)
  807a68:	dcc00317 	ldw	r19,12(sp)
  807a6c:	dc800217 	ldw	r18,8(sp)
  807a70:	dc400117 	ldw	r17,4(sp)
  807a74:	dc000017 	ldw	r16,0(sp)
  807a78:	dec00904 	addi	sp,sp,36
  807a7c:	f800283a 	ret
  807a80:	002f883a 	mov	r23,zero
  807a84:	003ff106 	br	807a4c <_fwalk_reent+0x8c>

00807a88 <_fwalk>:
  807a88:	defff804 	addi	sp,sp,-32
  807a8c:	dcc00315 	stw	r19,12(sp)
  807a90:	24c0b804 	addi	r19,r4,736
  807a94:	dd400515 	stw	r21,20(sp)
  807a98:	dfc00715 	stw	ra,28(sp)
  807a9c:	dd800615 	stw	r22,24(sp)
  807aa0:	dd000415 	stw	r20,16(sp)
  807aa4:	dc800215 	stw	r18,8(sp)
  807aa8:	dc400115 	stw	r17,4(sp)
  807aac:	dc000015 	stw	r16,0(sp)
  807ab0:	282b883a 	mov	r21,r5
  807ab4:	0806bfc0 	call	806bfc <__sfp_lock_acquire>
  807ab8:	98001f26 	beq	r19,zero,807b38 <_fwalk+0xb0>
  807abc:	002d883a 	mov	r22,zero
  807ac0:	9c800117 	ldw	r18,4(r19)
  807ac4:	9c000217 	ldw	r16,8(r19)
  807ac8:	90bfffc4 	addi	r2,r18,-1
  807acc:	10000c16 	blt	r2,zero,807b00 <_fwalk+0x78>
  807ad0:	0023883a 	mov	r17,zero
  807ad4:	053fffc4 	movi	r20,-1
  807ad8:	8080030f 	ldh	r2,12(r16)
  807adc:	8c400044 	addi	r17,r17,1
  807ae0:	10000526 	beq	r2,zero,807af8 <_fwalk+0x70>
  807ae4:	8080038f 	ldh	r2,14(r16)
  807ae8:	8009883a 	mov	r4,r16
  807aec:	15000226 	beq	r2,r20,807af8 <_fwalk+0x70>
  807af0:	a83ee83a 	callr	r21
  807af4:	b0acb03a 	or	r22,r22,r2
  807af8:	84001704 	addi	r16,r16,92
  807afc:	947ff61e 	bne	r18,r17,807ad8 <_fwalk+0x50>
  807b00:	9cc00017 	ldw	r19,0(r19)
  807b04:	983fee1e 	bne	r19,zero,807ac0 <_fwalk+0x38>
  807b08:	0806c000 	call	806c00 <__sfp_lock_release>
  807b0c:	b005883a 	mov	r2,r22
  807b10:	dfc00717 	ldw	ra,28(sp)
  807b14:	dd800617 	ldw	r22,24(sp)
  807b18:	dd400517 	ldw	r21,20(sp)
  807b1c:	dd000417 	ldw	r20,16(sp)
  807b20:	dcc00317 	ldw	r19,12(sp)
  807b24:	dc800217 	ldw	r18,8(sp)
  807b28:	dc400117 	ldw	r17,4(sp)
  807b2c:	dc000017 	ldw	r16,0(sp)
  807b30:	dec00804 	addi	sp,sp,32
  807b34:	f800283a 	ret
  807b38:	002d883a 	mov	r22,zero
  807b3c:	003ff206 	br	807b08 <_fwalk+0x80>

00807b40 <iswspace>:
  807b40:	00803fc4 	movi	r2,255
  807b44:	0007883a 	mov	r3,zero
  807b48:	11000636 	bltu	r2,r4,807b64 <iswspace+0x24>
  807b4c:	008020b4 	movhi	r2,130
  807b50:	10b96104 	addi	r2,r2,-6780
  807b54:	10c00017 	ldw	r3,0(r2)
  807b58:	1907883a 	add	r3,r3,r4
  807b5c:	18800003 	ldbu	r2,0(r3)
  807b60:	10c0020c 	andi	r3,r2,8
  807b64:	1805883a 	mov	r2,r3
  807b68:	f800283a 	ret

00807b6c <__locale_charset>:
  807b6c:	d0a00617 	ldw	r2,-32744(gp)
  807b70:	f800283a 	ret

00807b74 <_localeconv_r>:
  807b74:	008020b4 	movhi	r2,130
  807b78:	10b1a604 	addi	r2,r2,-14696
  807b7c:	f800283a 	ret

00807b80 <localeconv>:
  807b80:	008020b4 	movhi	r2,130
  807b84:	10b96204 	addi	r2,r2,-6776
  807b88:	11000017 	ldw	r4,0(r2)
  807b8c:	0807b741 	jmpi	807b74 <_localeconv_r>

00807b90 <_setlocale_r>:
  807b90:	defffc04 	addi	sp,sp,-16
  807b94:	00c020b4 	movhi	r3,130
  807b98:	18f1a104 	addi	r3,r3,-14716
  807b9c:	dc800215 	stw	r18,8(sp)
  807ba0:	dc400115 	stw	r17,4(sp)
  807ba4:	dc000015 	stw	r16,0(sp)
  807ba8:	2023883a 	mov	r17,r4
  807bac:	2825883a 	mov	r18,r5
  807bb0:	dfc00315 	stw	ra,12(sp)
  807bb4:	3021883a 	mov	r16,r6
  807bb8:	3009883a 	mov	r4,r6
  807bbc:	180b883a 	mov	r5,r3
  807bc0:	30000926 	beq	r6,zero,807be8 <_setlocale_r+0x58>
  807bc4:	0809e900 	call	809e90 <strcmp>
  807bc8:	8009883a 	mov	r4,r16
  807bcc:	014020b4 	movhi	r5,130
  807bd0:	2970e104 	addi	r5,r5,-15484
  807bd4:	10000b1e 	bne	r2,zero,807c04 <_setlocale_r+0x74>
  807bd8:	8c000d15 	stw	r16,52(r17)
  807bdc:	8c800c15 	stw	r18,48(r17)
  807be0:	00c020b4 	movhi	r3,130
  807be4:	18f1a104 	addi	r3,r3,-14716
  807be8:	1805883a 	mov	r2,r3
  807bec:	dfc00317 	ldw	ra,12(sp)
  807bf0:	dc800217 	ldw	r18,8(sp)
  807bf4:	dc400117 	ldw	r17,4(sp)
  807bf8:	dc000017 	ldw	r16,0(sp)
  807bfc:	dec00404 	addi	sp,sp,16
  807c00:	f800283a 	ret
  807c04:	0809e900 	call	809e90 <strcmp>
  807c08:	0007883a 	mov	r3,zero
  807c0c:	103ff226 	beq	r2,zero,807bd8 <_setlocale_r+0x48>
  807c10:	003ff506 	br	807be8 <_setlocale_r+0x58>

00807c14 <setlocale>:
  807c14:	018020b4 	movhi	r6,130
  807c18:	31b96204 	addi	r6,r6,-6776
  807c1c:	2007883a 	mov	r3,r4
  807c20:	31000017 	ldw	r4,0(r6)
  807c24:	280d883a 	mov	r6,r5
  807c28:	180b883a 	mov	r5,r3
  807c2c:	0807b901 	jmpi	807b90 <_setlocale_r>

00807c30 <__smakebuf_r>:
  807c30:	2880030b 	ldhu	r2,12(r5)
  807c34:	deffed04 	addi	sp,sp,-76
  807c38:	dc401015 	stw	r17,64(sp)
  807c3c:	1080008c 	andi	r2,r2,2
  807c40:	dc000f15 	stw	r16,60(sp)
  807c44:	dfc01215 	stw	ra,72(sp)
  807c48:	dc801115 	stw	r18,68(sp)
  807c4c:	2821883a 	mov	r16,r5
  807c50:	2023883a 	mov	r17,r4
  807c54:	10000b26 	beq	r2,zero,807c84 <__smakebuf_r+0x54>
  807c58:	28c010c4 	addi	r3,r5,67
  807c5c:	00800044 	movi	r2,1
  807c60:	28800515 	stw	r2,20(r5)
  807c64:	28c00415 	stw	r3,16(r5)
  807c68:	28c00015 	stw	r3,0(r5)
  807c6c:	dfc01217 	ldw	ra,72(sp)
  807c70:	dc801117 	ldw	r18,68(sp)
  807c74:	dc401017 	ldw	r17,64(sp)
  807c78:	dc000f17 	ldw	r16,60(sp)
  807c7c:	dec01304 	addi	sp,sp,76
  807c80:	f800283a 	ret
  807c84:	2940038f 	ldh	r5,14(r5)
  807c88:	28002116 	blt	r5,zero,807d10 <__smakebuf_r+0xe0>
  807c8c:	d80d883a 	mov	r6,sp
  807c90:	080c8340 	call	80c834 <_fstat_r>
  807c94:	10001e16 	blt	r2,zero,807d10 <__smakebuf_r+0xe0>
  807c98:	d8800117 	ldw	r2,4(sp)
  807c9c:	00e00014 	movui	r3,32768
  807ca0:	113c000c 	andi	r4,r2,61440
  807ca4:	20c03126 	beq	r4,r3,807d6c <__smakebuf_r+0x13c>
  807ca8:	8080030b 	ldhu	r2,12(r16)
  807cac:	00c80004 	movi	r3,8192
  807cb0:	10820014 	ori	r2,r2,2048
  807cb4:	8080030d 	sth	r2,12(r16)
  807cb8:	20c01e26 	beq	r4,r3,807d34 <__smakebuf_r+0x104>
  807cbc:	04810004 	movi	r18,1024
  807cc0:	8809883a 	mov	r4,r17
  807cc4:	900b883a 	mov	r5,r18
  807cc8:	0800d2c0 	call	800d2c <_malloc_r>
  807ccc:	1009883a 	mov	r4,r2
  807cd0:	10003126 	beq	r2,zero,807d98 <__smakebuf_r+0x168>
  807cd4:	80c0030b 	ldhu	r3,12(r16)
  807cd8:	00802034 	movhi	r2,128
  807cdc:	109b3c04 	addi	r2,r2,27888
  807ce0:	88800f15 	stw	r2,60(r17)
  807ce4:	18c02014 	ori	r3,r3,128
  807ce8:	84800515 	stw	r18,20(r16)
  807cec:	80c0030d 	sth	r3,12(r16)
  807cf0:	81000415 	stw	r4,16(r16)
  807cf4:	81000015 	stw	r4,0(r16)
  807cf8:	dfc01217 	ldw	ra,72(sp)
  807cfc:	dc801117 	ldw	r18,68(sp)
  807d00:	dc401017 	ldw	r17,64(sp)
  807d04:	dc000f17 	ldw	r16,60(sp)
  807d08:	dec01304 	addi	sp,sp,76
  807d0c:	f800283a 	ret
  807d10:	80c0030b 	ldhu	r3,12(r16)
  807d14:	1880200c 	andi	r2,r3,128
  807d18:	10000426 	beq	r2,zero,807d2c <__smakebuf_r+0xfc>
  807d1c:	04801004 	movi	r18,64
  807d20:	18820014 	ori	r2,r3,2048
  807d24:	8080030d 	sth	r2,12(r16)
  807d28:	003fe506 	br	807cc0 <__smakebuf_r+0x90>
  807d2c:	04810004 	movi	r18,1024
  807d30:	003ffb06 	br	807d20 <__smakebuf_r+0xf0>
  807d34:	8140038f 	ldh	r5,14(r16)
  807d38:	8809883a 	mov	r4,r17
  807d3c:	080d4740 	call	80d474 <_isatty_r>
  807d40:	103fde26 	beq	r2,zero,807cbc <__smakebuf_r+0x8c>
  807d44:	8080030b 	ldhu	r2,12(r16)
  807d48:	80c010c4 	addi	r3,r16,67
  807d4c:	04810004 	movi	r18,1024
  807d50:	10800054 	ori	r2,r2,1
  807d54:	8080030d 	sth	r2,12(r16)
  807d58:	00800044 	movi	r2,1
  807d5c:	80c00415 	stw	r3,16(r16)
  807d60:	80800515 	stw	r2,20(r16)
  807d64:	80c00015 	stw	r3,0(r16)
  807d68:	003fd506 	br	807cc0 <__smakebuf_r+0x90>
  807d6c:	80c00a17 	ldw	r3,40(r16)
  807d70:	00802074 	movhi	r2,129
  807d74:	10a75304 	addi	r2,r2,-25268
  807d78:	18bfcb1e 	bne	r3,r2,807ca8 <__smakebuf_r+0x78>
  807d7c:	8080030b 	ldhu	r2,12(r16)
  807d80:	00c10004 	movi	r3,1024
  807d84:	1825883a 	mov	r18,r3
  807d88:	10c4b03a 	or	r2,r2,r3
  807d8c:	8080030d 	sth	r2,12(r16)
  807d90:	80c01315 	stw	r3,76(r16)
  807d94:	003fca06 	br	807cc0 <__smakebuf_r+0x90>
  807d98:	8100030b 	ldhu	r4,12(r16)
  807d9c:	2080800c 	andi	r2,r4,512
  807da0:	103fb21e 	bne	r2,zero,807c6c <__smakebuf_r+0x3c>
  807da4:	80c010c4 	addi	r3,r16,67
  807da8:	21000094 	ori	r4,r4,2
  807dac:	00800044 	movi	r2,1
  807db0:	80800515 	stw	r2,20(r16)
  807db4:	8100030d 	sth	r4,12(r16)
  807db8:	80c00415 	stw	r3,16(r16)
  807dbc:	80c00015 	stw	r3,0(r16)
  807dc0:	003faa06 	br	807c6c <__smakebuf_r+0x3c>

00807dc4 <_mbrtowc_r>:
  807dc4:	defffc04 	addi	sp,sp,-16
  807dc8:	dc400215 	stw	r17,8(sp)
  807dcc:	dc000115 	stw	r16,4(sp)
  807dd0:	dfc00315 	stw	ra,12(sp)
  807dd4:	dc000417 	ldw	r16,16(sp)
  807dd8:	2023883a 	mov	r17,r4
  807ddc:	30000f26 	beq	r6,zero,807e1c <_mbrtowc_r+0x58>
  807de0:	dc000015 	stw	r16,0(sp)
  807de4:	0807e840 	call	807e84 <_mbtowc_r>
  807de8:	1007883a 	mov	r3,r2
  807dec:	00bfffc4 	movi	r2,-1
  807df0:	1809883a 	mov	r4,r3
  807df4:	1880111e 	bne	r3,r2,807e3c <_mbrtowc_r+0x78>
  807df8:	80000015 	stw	zero,0(r16)
  807dfc:	00802284 	movi	r2,138
  807e00:	88800015 	stw	r2,0(r17)
  807e04:	2005883a 	mov	r2,r4
  807e08:	dfc00317 	ldw	ra,12(sp)
  807e0c:	dc400217 	ldw	r17,8(sp)
  807e10:	dc000117 	ldw	r16,4(sp)
  807e14:	dec00404 	addi	sp,sp,16
  807e18:	f800283a 	ret
  807e1c:	000b883a 	mov	r5,zero
  807e20:	018020b4 	movhi	r6,130
  807e24:	31b0e104 	addi	r6,r6,-15484
  807e28:	01c00044 	movi	r7,1
  807e2c:	dc000015 	stw	r16,0(sp)
  807e30:	0807e840 	call	807e84 <_mbtowc_r>
  807e34:	1007883a 	mov	r3,r2
  807e38:	003fec06 	br	807dec <_mbrtowc_r+0x28>
  807e3c:	1809883a 	mov	r4,r3
  807e40:	003ff006 	br	807e04 <_mbrtowc_r+0x40>

00807e44 <mbrtowc>:
  807e44:	008020b4 	movhi	r2,130
  807e48:	10b96204 	addi	r2,r2,-6776
  807e4c:	2017883a 	mov	r11,r4
  807e50:	11000017 	ldw	r4,0(r2)
  807e54:	defffe04 	addi	sp,sp,-8
  807e58:	3013883a 	mov	r9,r6
  807e5c:	2805883a 	mov	r2,r5
  807e60:	d9c00015 	stw	r7,0(sp)
  807e64:	580b883a 	mov	r5,r11
  807e68:	100d883a 	mov	r6,r2
  807e6c:	480f883a 	mov	r7,r9
  807e70:	dfc00115 	stw	ra,4(sp)
  807e74:	0807dc40 	call	807dc4 <_mbrtowc_r>
  807e78:	dfc00117 	ldw	ra,4(sp)
  807e7c:	dec00204 	addi	sp,sp,8
  807e80:	f800283a 	ret

00807e84 <_mbtowc_r>:
  807e84:	deffff04 	addi	sp,sp,-4
  807e88:	0005883a 	mov	r2,zero
  807e8c:	28000326 	beq	r5,zero,807e9c <_mbtowc_r+0x18>
  807e90:	3000041e 	bne	r6,zero,807ea4 <_mbtowc_r+0x20>
  807e94:	dec00104 	addi	sp,sp,4
  807e98:	f800283a 	ret
  807e9c:	d80b883a 	mov	r5,sp
  807ea0:	303ffc26 	beq	r6,zero,807e94 <_mbtowc_r+0x10>
  807ea4:	00bfff84 	movi	r2,-2
  807ea8:	383ffa26 	beq	r7,zero,807e94 <_mbtowc_r+0x10>
  807eac:	30800003 	ldbu	r2,0(r6)
  807eb0:	28800015 	stw	r2,0(r5)
  807eb4:	30c00003 	ldbu	r3,0(r6)
  807eb8:	1804c03a 	cmpne	r2,r3,zero
  807ebc:	dec00104 	addi	sp,sp,4
  807ec0:	f800283a 	ret

00807ec4 <memchr>:
  807ec4:	008000c4 	movi	r2,3
  807ec8:	29403fcc 	andi	r5,r5,255
  807ecc:	2007883a 	mov	r3,r4
  807ed0:	1180022e 	bgeu	r2,r6,807edc <memchr+0x18>
  807ed4:	2084703a 	and	r2,r4,r2
  807ed8:	10000b26 	beq	r2,zero,807f08 <memchr+0x44>
  807edc:	313fffc4 	addi	r4,r6,-1
  807ee0:	3000051e 	bne	r6,zero,807ef8 <memchr+0x34>
  807ee4:	00002c06 	br	807f98 <memchr+0xd4>
  807ee8:	213fffc4 	addi	r4,r4,-1
  807eec:	00bfffc4 	movi	r2,-1
  807ef0:	18c00044 	addi	r3,r3,1
  807ef4:	20802826 	beq	r4,r2,807f98 <memchr+0xd4>
  807ef8:	18800003 	ldbu	r2,0(r3)
  807efc:	28bffa1e 	bne	r5,r2,807ee8 <memchr+0x24>
  807f00:	1805883a 	mov	r2,r3
  807f04:	f800283a 	ret
  807f08:	0011883a 	mov	r8,zero
  807f0c:	0007883a 	mov	r3,zero
  807f10:	01c00104 	movi	r7,4
  807f14:	4004923a 	slli	r2,r8,8
  807f18:	18c00044 	addi	r3,r3,1
  807f1c:	1151883a 	add	r8,r2,r5
  807f20:	19fffc1e 	bne	r3,r7,807f14 <memchr+0x50>
  807f24:	02bfbff4 	movhi	r10,65279
  807f28:	52bfbfc4 	addi	r10,r10,-257
  807f2c:	02602074 	movhi	r9,32897
  807f30:	4a602004 	addi	r9,r9,-32640
  807f34:	02c000c4 	movi	r11,3
  807f38:	20800017 	ldw	r2,0(r4)
  807f3c:	31bfff04 	addi	r6,r6,-4
  807f40:	200f883a 	mov	r7,r4
  807f44:	1204f03a 	xor	r2,r2,r8
  807f48:	1287883a 	add	r3,r2,r10
  807f4c:	1a46703a 	and	r3,r3,r9
  807f50:	0084303a 	nor	r2,zero,r2
  807f54:	10c4703a 	and	r2,r2,r3
  807f58:	10000b26 	beq	r2,zero,807f88 <memchr+0xc4>
  807f5c:	20800003 	ldbu	r2,0(r4)
  807f60:	28800f26 	beq	r5,r2,807fa0 <memchr+0xdc>
  807f64:	20800043 	ldbu	r2,1(r4)
  807f68:	21c00044 	addi	r7,r4,1
  807f6c:	28800c26 	beq	r5,r2,807fa0 <memchr+0xdc>
  807f70:	20800083 	ldbu	r2,2(r4)
  807f74:	21c00084 	addi	r7,r4,2
  807f78:	28800926 	beq	r5,r2,807fa0 <memchr+0xdc>
  807f7c:	208000c3 	ldbu	r2,3(r4)
  807f80:	21c000c4 	addi	r7,r4,3
  807f84:	28800626 	beq	r5,r2,807fa0 <memchr+0xdc>
  807f88:	21000104 	addi	r4,r4,4
  807f8c:	59bfea36 	bltu	r11,r6,807f38 <memchr+0x74>
  807f90:	2007883a 	mov	r3,r4
  807f94:	003fd106 	br	807edc <memchr+0x18>
  807f98:	0005883a 	mov	r2,zero
  807f9c:	f800283a 	ret
  807fa0:	3805883a 	mov	r2,r7
  807fa4:	f800283a 	ret

00807fa8 <memcpy>:
  807fa8:	01c003c4 	movi	r7,15
  807fac:	2007883a 	mov	r3,r4
  807fb0:	3980032e 	bgeu	r7,r6,807fc0 <memcpy+0x18>
  807fb4:	2904b03a 	or	r2,r5,r4
  807fb8:	108000cc 	andi	r2,r2,3
  807fbc:	10000926 	beq	r2,zero,807fe4 <memcpy+0x3c>
  807fc0:	30000626 	beq	r6,zero,807fdc <memcpy+0x34>
  807fc4:	30cd883a 	add	r6,r6,r3
  807fc8:	28800003 	ldbu	r2,0(r5)
  807fcc:	29400044 	addi	r5,r5,1
  807fd0:	18800005 	stb	r2,0(r3)
  807fd4:	18c00044 	addi	r3,r3,1
  807fd8:	30fffb1e 	bne	r6,r3,807fc8 <memcpy+0x20>
  807fdc:	2005883a 	mov	r2,r4
  807fe0:	f800283a 	ret
  807fe4:	3811883a 	mov	r8,r7
  807fe8:	200f883a 	mov	r7,r4
  807fec:	28c00017 	ldw	r3,0(r5)
  807ff0:	31bffc04 	addi	r6,r6,-16
  807ff4:	38c00015 	stw	r3,0(r7)
  807ff8:	28800117 	ldw	r2,4(r5)
  807ffc:	38800115 	stw	r2,4(r7)
  808000:	28c00217 	ldw	r3,8(r5)
  808004:	38c00215 	stw	r3,8(r7)
  808008:	28800317 	ldw	r2,12(r5)
  80800c:	29400404 	addi	r5,r5,16
  808010:	38800315 	stw	r2,12(r7)
  808014:	39c00404 	addi	r7,r7,16
  808018:	41bff436 	bltu	r8,r6,807fec <memcpy+0x44>
  80801c:	008000c4 	movi	r2,3
  808020:	1180072e 	bgeu	r2,r6,808040 <memcpy+0x98>
  808024:	1007883a 	mov	r3,r2
  808028:	28800017 	ldw	r2,0(r5)
  80802c:	31bfff04 	addi	r6,r6,-4
  808030:	29400104 	addi	r5,r5,4
  808034:	38800015 	stw	r2,0(r7)
  808038:	39c00104 	addi	r7,r7,4
  80803c:	19bffa36 	bltu	r3,r6,808028 <memcpy+0x80>
  808040:	3807883a 	mov	r3,r7
  808044:	003fde06 	br	807fc0 <memcpy+0x18>

00808048 <memmove>:
  808048:	2807883a 	mov	r3,r5
  80804c:	2011883a 	mov	r8,r4
  808050:	29000c2e 	bgeu	r5,r4,808084 <memmove+0x3c>
  808054:	298f883a 	add	r7,r5,r6
  808058:	21c00a2e 	bgeu	r4,r7,808084 <memmove+0x3c>
  80805c:	30000726 	beq	r6,zero,80807c <memmove+0x34>
  808060:	2187883a 	add	r3,r4,r6
  808064:	198dc83a 	sub	r6,r3,r6
  808068:	39ffffc4 	addi	r7,r7,-1
  80806c:	38800003 	ldbu	r2,0(r7)
  808070:	18ffffc4 	addi	r3,r3,-1
  808074:	18800005 	stb	r2,0(r3)
  808078:	19bffb1e 	bne	r3,r6,808068 <memmove+0x20>
  80807c:	2005883a 	mov	r2,r4
  808080:	f800283a 	ret
  808084:	01c003c4 	movi	r7,15
  808088:	39800a36 	bltu	r7,r6,8080b4 <memmove+0x6c>
  80808c:	303ffb26 	beq	r6,zero,80807c <memmove+0x34>
  808090:	400f883a 	mov	r7,r8
  808094:	320d883a 	add	r6,r6,r8
  808098:	28800003 	ldbu	r2,0(r5)
  80809c:	29400044 	addi	r5,r5,1
  8080a0:	38800005 	stb	r2,0(r7)
  8080a4:	39c00044 	addi	r7,r7,1
  8080a8:	39bffb1e 	bne	r7,r6,808098 <memmove+0x50>
  8080ac:	2005883a 	mov	r2,r4
  8080b0:	f800283a 	ret
  8080b4:	1904b03a 	or	r2,r3,r4
  8080b8:	108000cc 	andi	r2,r2,3
  8080bc:	103ff31e 	bne	r2,zero,80808c <memmove+0x44>
  8080c0:	3811883a 	mov	r8,r7
  8080c4:	180b883a 	mov	r5,r3
  8080c8:	200f883a 	mov	r7,r4
  8080cc:	28c00017 	ldw	r3,0(r5)
  8080d0:	31bffc04 	addi	r6,r6,-16
  8080d4:	38c00015 	stw	r3,0(r7)
  8080d8:	28800117 	ldw	r2,4(r5)
  8080dc:	38800115 	stw	r2,4(r7)
  8080e0:	28c00217 	ldw	r3,8(r5)
  8080e4:	38c00215 	stw	r3,8(r7)
  8080e8:	28800317 	ldw	r2,12(r5)
  8080ec:	29400404 	addi	r5,r5,16
  8080f0:	38800315 	stw	r2,12(r7)
  8080f4:	39c00404 	addi	r7,r7,16
  8080f8:	41bff436 	bltu	r8,r6,8080cc <memmove+0x84>
  8080fc:	008000c4 	movi	r2,3
  808100:	1180072e 	bgeu	r2,r6,808120 <memmove+0xd8>
  808104:	1007883a 	mov	r3,r2
  808108:	28800017 	ldw	r2,0(r5)
  80810c:	31bfff04 	addi	r6,r6,-4
  808110:	29400104 	addi	r5,r5,4
  808114:	38800015 	stw	r2,0(r7)
  808118:	39c00104 	addi	r7,r7,4
  80811c:	19bffa36 	bltu	r3,r6,808108 <memmove+0xc0>
  808120:	3811883a 	mov	r8,r7
  808124:	003fd906 	br	80808c <memmove+0x44>

00808128 <memset>:
  808128:	008000c4 	movi	r2,3
  80812c:	29403fcc 	andi	r5,r5,255
  808130:	2007883a 	mov	r3,r4
  808134:	1180022e 	bgeu	r2,r6,808140 <memset+0x18>
  808138:	2084703a 	and	r2,r4,r2
  80813c:	10000826 	beq	r2,zero,808160 <memset+0x38>
  808140:	30000526 	beq	r6,zero,808158 <memset+0x30>
  808144:	2805883a 	mov	r2,r5
  808148:	30cd883a 	add	r6,r6,r3
  80814c:	18800005 	stb	r2,0(r3)
  808150:	18c00044 	addi	r3,r3,1
  808154:	19bffd1e 	bne	r3,r6,80814c <memset+0x24>
  808158:	2005883a 	mov	r2,r4
  80815c:	f800283a 	ret
  808160:	2804923a 	slli	r2,r5,8
  808164:	020003c4 	movi	r8,15
  808168:	200f883a 	mov	r7,r4
  80816c:	2884b03a 	or	r2,r5,r2
  808170:	1006943a 	slli	r3,r2,16
  808174:	10c6b03a 	or	r3,r2,r3
  808178:	41800a2e 	bgeu	r8,r6,8081a4 <memset+0x7c>
  80817c:	4005883a 	mov	r2,r8
  808180:	31bffc04 	addi	r6,r6,-16
  808184:	38c00015 	stw	r3,0(r7)
  808188:	38c00115 	stw	r3,4(r7)
  80818c:	38c00215 	stw	r3,8(r7)
  808190:	38c00315 	stw	r3,12(r7)
  808194:	39c00404 	addi	r7,r7,16
  808198:	11bff936 	bltu	r2,r6,808180 <memset+0x58>
  80819c:	008000c4 	movi	r2,3
  8081a0:	1180052e 	bgeu	r2,r6,8081b8 <memset+0x90>
  8081a4:	31bfff04 	addi	r6,r6,-4
  8081a8:	008000c4 	movi	r2,3
  8081ac:	38c00015 	stw	r3,0(r7)
  8081b0:	39c00104 	addi	r7,r7,4
  8081b4:	11bffb36 	bltu	r2,r6,8081a4 <memset+0x7c>
  8081b8:	3807883a 	mov	r3,r7
  8081bc:	003fe006 	br	808140 <memset+0x18>

008081c0 <_Bfree>:
  8081c0:	28000826 	beq	r5,zero,8081e4 <_Bfree+0x24>
  8081c4:	28800117 	ldw	r2,4(r5)
  8081c8:	21001317 	ldw	r4,76(r4)
  8081cc:	1085883a 	add	r2,r2,r2
  8081d0:	1085883a 	add	r2,r2,r2
  8081d4:	1105883a 	add	r2,r2,r4
  8081d8:	10c00017 	ldw	r3,0(r2)
  8081dc:	28c00015 	stw	r3,0(r5)
  8081e0:	11400015 	stw	r5,0(r2)
  8081e4:	f800283a 	ret

008081e8 <__hi0bits>:
  8081e8:	20bfffec 	andhi	r2,r4,65535
  8081ec:	10001426 	beq	r2,zero,808240 <__hi0bits+0x58>
  8081f0:	0007883a 	mov	r3,zero
  8081f4:	20bfc02c 	andhi	r2,r4,65280
  8081f8:	1000021e 	bne	r2,zero,808204 <__hi0bits+0x1c>
  8081fc:	2008923a 	slli	r4,r4,8
  808200:	18c00204 	addi	r3,r3,8
  808204:	20bc002c 	andhi	r2,r4,61440
  808208:	1000021e 	bne	r2,zero,808214 <__hi0bits+0x2c>
  80820c:	2008913a 	slli	r4,r4,4
  808210:	18c00104 	addi	r3,r3,4
  808214:	20b0002c 	andhi	r2,r4,49152
  808218:	1000031e 	bne	r2,zero,808228 <__hi0bits+0x40>
  80821c:	2105883a 	add	r2,r4,r4
  808220:	18c00084 	addi	r3,r3,2
  808224:	1089883a 	add	r4,r2,r2
  808228:	20000316 	blt	r4,zero,808238 <__hi0bits+0x50>
  80822c:	2090002c 	andhi	r2,r4,16384
  808230:	10000626 	beq	r2,zero,80824c <__hi0bits+0x64>
  808234:	18c00044 	addi	r3,r3,1
  808238:	1805883a 	mov	r2,r3
  80823c:	f800283a 	ret
  808240:	2008943a 	slli	r4,r4,16
  808244:	00c00404 	movi	r3,16
  808248:	003fea06 	br	8081f4 <__hi0bits+0xc>
  80824c:	00c00804 	movi	r3,32
  808250:	1805883a 	mov	r2,r3
  808254:	f800283a 	ret

00808258 <__lo0bits>:
  808258:	20c00017 	ldw	r3,0(r4)
  80825c:	188001cc 	andi	r2,r3,7
  808260:	10000a26 	beq	r2,zero,80828c <__lo0bits+0x34>
  808264:	1880004c 	andi	r2,r3,1
  808268:	1005003a 	cmpeq	r2,r2,zero
  80826c:	10002126 	beq	r2,zero,8082f4 <__lo0bits+0x9c>
  808270:	1880008c 	andi	r2,r3,2
  808274:	1000251e 	bne	r2,zero,80830c <__lo0bits+0xb4>
  808278:	1804d0ba 	srli	r2,r3,2
  80827c:	01400084 	movi	r5,2
  808280:	20800015 	stw	r2,0(r4)
  808284:	2805883a 	mov	r2,r5
  808288:	f800283a 	ret
  80828c:	18bfffcc 	andi	r2,r3,65535
  808290:	10001526 	beq	r2,zero,8082e8 <__lo0bits+0x90>
  808294:	000b883a 	mov	r5,zero
  808298:	18803fcc 	andi	r2,r3,255
  80829c:	1000021e 	bne	r2,zero,8082a8 <__lo0bits+0x50>
  8082a0:	1806d23a 	srli	r3,r3,8
  8082a4:	29400204 	addi	r5,r5,8
  8082a8:	188003cc 	andi	r2,r3,15
  8082ac:	1000021e 	bne	r2,zero,8082b8 <__lo0bits+0x60>
  8082b0:	1806d13a 	srli	r3,r3,4
  8082b4:	29400104 	addi	r5,r5,4
  8082b8:	188000cc 	andi	r2,r3,3
  8082bc:	1000021e 	bne	r2,zero,8082c8 <__lo0bits+0x70>
  8082c0:	1806d0ba 	srli	r3,r3,2
  8082c4:	29400084 	addi	r5,r5,2
  8082c8:	1880004c 	andi	r2,r3,1
  8082cc:	1000031e 	bne	r2,zero,8082dc <__lo0bits+0x84>
  8082d0:	1806d07a 	srli	r3,r3,1
  8082d4:	18000a26 	beq	r3,zero,808300 <__lo0bits+0xa8>
  8082d8:	29400044 	addi	r5,r5,1
  8082dc:	2805883a 	mov	r2,r5
  8082e0:	20c00015 	stw	r3,0(r4)
  8082e4:	f800283a 	ret
  8082e8:	1806d43a 	srli	r3,r3,16
  8082ec:	01400404 	movi	r5,16
  8082f0:	003fe906 	br	808298 <__lo0bits+0x40>
  8082f4:	000b883a 	mov	r5,zero
  8082f8:	2805883a 	mov	r2,r5
  8082fc:	f800283a 	ret
  808300:	01400804 	movi	r5,32
  808304:	2805883a 	mov	r2,r5
  808308:	f800283a 	ret
  80830c:	1804d07a 	srli	r2,r3,1
  808310:	01400044 	movi	r5,1
  808314:	20800015 	stw	r2,0(r4)
  808318:	003fda06 	br	808284 <__lo0bits+0x2c>

0080831c <__mcmp>:
  80831c:	20800417 	ldw	r2,16(r4)
  808320:	28c00417 	ldw	r3,16(r5)
  808324:	10cfc83a 	sub	r7,r2,r3
  808328:	38000c1e 	bne	r7,zero,80835c <__mcmp+0x40>
  80832c:	18c5883a 	add	r2,r3,r3
  808330:	1085883a 	add	r2,r2,r2
  808334:	10c00504 	addi	r3,r2,20
  808338:	21000504 	addi	r4,r4,20
  80833c:	28cb883a 	add	r5,r5,r3
  808340:	2085883a 	add	r2,r4,r2
  808344:	10bfff04 	addi	r2,r2,-4
  808348:	297fff04 	addi	r5,r5,-4
  80834c:	11800017 	ldw	r6,0(r2)
  808350:	28c00017 	ldw	r3,0(r5)
  808354:	30c0031e 	bne	r6,r3,808364 <__mcmp+0x48>
  808358:	20bffa36 	bltu	r4,r2,808344 <__mcmp+0x28>
  80835c:	3805883a 	mov	r2,r7
  808360:	f800283a 	ret
  808364:	30c00336 	bltu	r6,r3,808374 <__mcmp+0x58>
  808368:	01c00044 	movi	r7,1
  80836c:	3805883a 	mov	r2,r7
  808370:	f800283a 	ret
  808374:	01ffffc4 	movi	r7,-1
  808378:	003ff806 	br	80835c <__mcmp+0x40>

0080837c <__ulp>:
  80837c:	295ffc2c 	andhi	r5,r5,32752
  808380:	013f3034 	movhi	r4,64704
  808384:	290b883a 	add	r5,r5,r4
  808388:	0145c83a 	sub	r2,zero,r5
  80838c:	1007d53a 	srai	r3,r2,20
  808390:	000d883a 	mov	r6,zero
  808394:	0140040e 	bge	zero,r5,8083a8 <__ulp+0x2c>
  808398:	280f883a 	mov	r7,r5
  80839c:	3807883a 	mov	r3,r7
  8083a0:	3005883a 	mov	r2,r6
  8083a4:	f800283a 	ret
  8083a8:	008004c4 	movi	r2,19
  8083ac:	193ffb04 	addi	r4,r3,-20
  8083b0:	10c00c0e 	bge	r2,r3,8083e4 <__ulp+0x68>
  8083b4:	008007c4 	movi	r2,31
  8083b8:	1107c83a 	sub	r3,r2,r4
  8083bc:	00800784 	movi	r2,30
  8083c0:	01400044 	movi	r5,1
  8083c4:	11000216 	blt	r2,r4,8083d0 <__ulp+0x54>
  8083c8:	00800044 	movi	r2,1
  8083cc:	10ca983a 	sll	r5,r2,r3
  8083d0:	000f883a 	mov	r7,zero
  8083d4:	280d883a 	mov	r6,r5
  8083d8:	3807883a 	mov	r3,r7
  8083dc:	3005883a 	mov	r2,r6
  8083e0:	f800283a 	ret
  8083e4:	00800234 	movhi	r2,8
  8083e8:	10cfd83a 	sra	r7,r2,r3
  8083ec:	000d883a 	mov	r6,zero
  8083f0:	3005883a 	mov	r2,r6
  8083f4:	3807883a 	mov	r3,r7
  8083f8:	f800283a 	ret

008083fc <__b2d>:
  8083fc:	20800417 	ldw	r2,16(r4)
  808400:	defff904 	addi	sp,sp,-28
  808404:	dd000415 	stw	r20,16(sp)
  808408:	1085883a 	add	r2,r2,r2
  80840c:	25000504 	addi	r20,r4,20
  808410:	1085883a 	add	r2,r2,r2
  808414:	dc000015 	stw	r16,0(sp)
  808418:	a0a1883a 	add	r16,r20,r2
  80841c:	dd400515 	stw	r21,20(sp)
  808420:	857fff17 	ldw	r21,-4(r16)
  808424:	dc400115 	stw	r17,4(sp)
  808428:	dfc00615 	stw	ra,24(sp)
  80842c:	a809883a 	mov	r4,r21
  808430:	2823883a 	mov	r17,r5
  808434:	dcc00315 	stw	r19,12(sp)
  808438:	dc800215 	stw	r18,8(sp)
  80843c:	08081e80 	call	8081e8 <__hi0bits>
  808440:	100b883a 	mov	r5,r2
  808444:	00800804 	movi	r2,32
  808448:	1145c83a 	sub	r2,r2,r5
  80844c:	88800015 	stw	r2,0(r17)
  808450:	00800284 	movi	r2,10
  808454:	80ffff04 	addi	r3,r16,-4
  808458:	11401416 	blt	r2,r5,8084ac <__b2d+0xb0>
  80845c:	008002c4 	movi	r2,11
  808460:	1149c83a 	sub	r4,r2,r5
  808464:	a0c02736 	bltu	r20,r3,808504 <__b2d+0x108>
  808468:	000d883a 	mov	r6,zero
  80846c:	28800544 	addi	r2,r5,21
  808470:	a906d83a 	srl	r3,r21,r4
  808474:	a884983a 	sll	r2,r21,r2
  808478:	1ccffc34 	orhi	r19,r3,16368
  80847c:	11a4b03a 	or	r18,r2,r6
  808480:	9005883a 	mov	r2,r18
  808484:	9807883a 	mov	r3,r19
  808488:	dfc00617 	ldw	ra,24(sp)
  80848c:	dd400517 	ldw	r21,20(sp)
  808490:	dd000417 	ldw	r20,16(sp)
  808494:	dcc00317 	ldw	r19,12(sp)
  808498:	dc800217 	ldw	r18,8(sp)
  80849c:	dc400117 	ldw	r17,4(sp)
  8084a0:	dc000017 	ldw	r16,0(sp)
  8084a4:	dec00704 	addi	sp,sp,28
  8084a8:	f800283a 	ret
  8084ac:	a0c00e36 	bltu	r20,r3,8084e8 <__b2d+0xec>
  8084b0:	293ffd44 	addi	r4,r5,-11
  8084b4:	000d883a 	mov	r6,zero
  8084b8:	20000f26 	beq	r4,zero,8084f8 <__b2d+0xfc>
  8084bc:	00800804 	movi	r2,32
  8084c0:	110bc83a 	sub	r5,r2,r4
  8084c4:	a0c01236 	bltu	r20,r3,808510 <__b2d+0x114>
  8084c8:	000f883a 	mov	r7,zero
  8084cc:	a904983a 	sll	r2,r21,r4
  8084d0:	3146d83a 	srl	r3,r6,r5
  8084d4:	3108983a 	sll	r4,r6,r4
  8084d8:	108ffc34 	orhi	r2,r2,16368
  8084dc:	18a6b03a 	or	r19,r3,r2
  8084e0:	3924b03a 	or	r18,r7,r4
  8084e4:	003fe606 	br	808480 <__b2d+0x84>
  8084e8:	293ffd44 	addi	r4,r5,-11
  8084ec:	81bffe17 	ldw	r6,-8(r16)
  8084f0:	80fffe04 	addi	r3,r16,-8
  8084f4:	203ff11e 	bne	r4,zero,8084bc <__b2d+0xc0>
  8084f8:	accffc34 	orhi	r19,r21,16368
  8084fc:	3025883a 	mov	r18,r6
  808500:	003fdf06 	br	808480 <__b2d+0x84>
  808504:	18bfff17 	ldw	r2,-4(r3)
  808508:	110cd83a 	srl	r6,r2,r4
  80850c:	003fd706 	br	80846c <__b2d+0x70>
  808510:	18bfff17 	ldw	r2,-4(r3)
  808514:	114ed83a 	srl	r7,r2,r5
  808518:	003fec06 	br	8084cc <__b2d+0xd0>

0080851c <__ratio>:
  80851c:	defff904 	addi	sp,sp,-28
  808520:	dc400215 	stw	r17,8(sp)
  808524:	2823883a 	mov	r17,r5
  808528:	d80b883a 	mov	r5,sp
  80852c:	dfc00615 	stw	ra,24(sp)
  808530:	dd000515 	stw	r20,20(sp)
  808534:	dcc00415 	stw	r19,16(sp)
  808538:	dc800315 	stw	r18,12(sp)
  80853c:	2025883a 	mov	r18,r4
  808540:	08083fc0 	call	8083fc <__b2d>
  808544:	8809883a 	mov	r4,r17
  808548:	d9400104 	addi	r5,sp,4
  80854c:	1027883a 	mov	r19,r2
  808550:	1829883a 	mov	r20,r3
  808554:	08083fc0 	call	8083fc <__b2d>
  808558:	89000417 	ldw	r4,16(r17)
  80855c:	91c00417 	ldw	r7,16(r18)
  808560:	d9800117 	ldw	r6,4(sp)
  808564:	180b883a 	mov	r5,r3
  808568:	390fc83a 	sub	r7,r7,r4
  80856c:	1009883a 	mov	r4,r2
  808570:	d8800017 	ldw	r2,0(sp)
  808574:	380e917a 	slli	r7,r7,5
  808578:	2011883a 	mov	r8,r4
  80857c:	1185c83a 	sub	r2,r2,r6
  808580:	11c5883a 	add	r2,r2,r7
  808584:	1006953a 	slli	r3,r2,20
  808588:	2813883a 	mov	r9,r5
  80858c:	00800d0e 	bge	zero,r2,8085c4 <__ratio+0xa8>
  808590:	1d29883a 	add	r20,r3,r20
  808594:	a00b883a 	mov	r5,r20
  808598:	480f883a 	mov	r7,r9
  80859c:	9809883a 	mov	r4,r19
  8085a0:	400d883a 	mov	r6,r8
  8085a4:	080ee980 	call	80ee98 <__divdf3>
  8085a8:	dfc00617 	ldw	ra,24(sp)
  8085ac:	dd000517 	ldw	r20,20(sp)
  8085b0:	dcc00417 	ldw	r19,16(sp)
  8085b4:	dc800317 	ldw	r18,12(sp)
  8085b8:	dc400217 	ldw	r17,8(sp)
  8085bc:	dec00704 	addi	sp,sp,28
  8085c0:	f800283a 	ret
  8085c4:	28d3c83a 	sub	r9,r5,r3
  8085c8:	003ff206 	br	808594 <__ratio+0x78>

008085cc <_mprec_log10>:
  8085cc:	defffe04 	addi	sp,sp,-8
  8085d0:	008005c4 	movi	r2,23
  8085d4:	dc000015 	stw	r16,0(sp)
  8085d8:	dfc00115 	stw	ra,4(sp)
  8085dc:	2021883a 	mov	r16,r4
  8085e0:	11000c16 	blt	r2,r4,808614 <_mprec_log10+0x48>
  8085e4:	200490fa 	slli	r2,r4,3
  8085e8:	00c020b4 	movhi	r3,130
  8085ec:	18f1b204 	addi	r3,r3,-14648
  8085f0:	10c5883a 	add	r2,r2,r3
  8085f4:	12400117 	ldw	r9,4(r2)
  8085f8:	12000017 	ldw	r8,0(r2)
  8085fc:	4807883a 	mov	r3,r9
  808600:	4005883a 	mov	r2,r8
  808604:	dfc00117 	ldw	ra,4(sp)
  808608:	dc000017 	ldw	r16,0(sp)
  80860c:	dec00204 	addi	sp,sp,8
  808610:	f800283a 	ret
  808614:	0011883a 	mov	r8,zero
  808618:	024ffc34 	movhi	r9,16368
  80861c:	0005883a 	mov	r2,zero
  808620:	00d00934 	movhi	r3,16420
  808624:	480b883a 	mov	r5,r9
  808628:	4009883a 	mov	r4,r8
  80862c:	180f883a 	mov	r7,r3
  808630:	100d883a 	mov	r6,r2
  808634:	080ead40 	call	80ead4 <__muldf3>
  808638:	843fffc4 	addi	r16,r16,-1
  80863c:	1011883a 	mov	r8,r2
  808640:	1813883a 	mov	r9,r3
  808644:	803ff51e 	bne	r16,zero,80861c <_mprec_log10+0x50>
  808648:	4005883a 	mov	r2,r8
  80864c:	4807883a 	mov	r3,r9
  808650:	dfc00117 	ldw	ra,4(sp)
  808654:	dc000017 	ldw	r16,0(sp)
  808658:	dec00204 	addi	sp,sp,8
  80865c:	f800283a 	ret

00808660 <__copybits>:
  808660:	297fffc4 	addi	r5,r5,-1
  808664:	30800417 	ldw	r2,16(r6)
  808668:	280bd17a 	srai	r5,r5,5
  80866c:	31800504 	addi	r6,r6,20
  808670:	1085883a 	add	r2,r2,r2
  808674:	294b883a 	add	r5,r5,r5
  808678:	294b883a 	add	r5,r5,r5
  80867c:	1085883a 	add	r2,r2,r2
  808680:	290b883a 	add	r5,r5,r4
  808684:	3087883a 	add	r3,r6,r2
  808688:	29400104 	addi	r5,r5,4
  80868c:	30c0052e 	bgeu	r6,r3,8086a4 <__copybits+0x44>
  808690:	30800017 	ldw	r2,0(r6)
  808694:	31800104 	addi	r6,r6,4
  808698:	20800015 	stw	r2,0(r4)
  80869c:	21000104 	addi	r4,r4,4
  8086a0:	30fffb36 	bltu	r6,r3,808690 <__copybits+0x30>
  8086a4:	2140032e 	bgeu	r4,r5,8086b4 <__copybits+0x54>
  8086a8:	20000015 	stw	zero,0(r4)
  8086ac:	21000104 	addi	r4,r4,4
  8086b0:	217ffd36 	bltu	r4,r5,8086a8 <__copybits+0x48>
  8086b4:	f800283a 	ret

008086b8 <__any_on>:
  8086b8:	20800417 	ldw	r2,16(r4)
  8086bc:	2807d17a 	srai	r3,r5,5
  8086c0:	21000504 	addi	r4,r4,20
  8086c4:	10c00d0e 	bge	r2,r3,8086fc <__any_on+0x44>
  8086c8:	1085883a 	add	r2,r2,r2
  8086cc:	1085883a 	add	r2,r2,r2
  8086d0:	208d883a 	add	r6,r4,r2
  8086d4:	2180182e 	bgeu	r4,r6,808738 <__any_on+0x80>
  8086d8:	30bfff17 	ldw	r2,-4(r6)
  8086dc:	30ffff04 	addi	r3,r6,-4
  8086e0:	1000041e 	bne	r2,zero,8086f4 <__any_on+0x3c>
  8086e4:	20c0142e 	bgeu	r4,r3,808738 <__any_on+0x80>
  8086e8:	18ffff04 	addi	r3,r3,-4
  8086ec:	18800017 	ldw	r2,0(r3)
  8086f0:	103ffc26 	beq	r2,zero,8086e4 <__any_on+0x2c>
  8086f4:	00800044 	movi	r2,1
  8086f8:	f800283a 	ret
  8086fc:	18800a0e 	bge	r3,r2,808728 <__any_on+0x70>
  808700:	294007cc 	andi	r5,r5,31
  808704:	28000826 	beq	r5,zero,808728 <__any_on+0x70>
  808708:	18c5883a 	add	r2,r3,r3
  80870c:	1085883a 	add	r2,r2,r2
  808710:	208d883a 	add	r6,r4,r2
  808714:	30c00017 	ldw	r3,0(r6)
  808718:	1944d83a 	srl	r2,r3,r5
  80871c:	1144983a 	sll	r2,r2,r5
  808720:	18bff41e 	bne	r3,r2,8086f4 <__any_on+0x3c>
  808724:	003feb06 	br	8086d4 <__any_on+0x1c>
  808728:	18c5883a 	add	r2,r3,r3
  80872c:	1085883a 	add	r2,r2,r2
  808730:	208d883a 	add	r6,r4,r2
  808734:	003fe706 	br	8086d4 <__any_on+0x1c>
  808738:	0005883a 	mov	r2,zero
  80873c:	f800283a 	ret

00808740 <_Balloc>:
  808740:	20c01317 	ldw	r3,76(r4)
  808744:	defffb04 	addi	sp,sp,-20
  808748:	dcc00315 	stw	r19,12(sp)
  80874c:	dc800215 	stw	r18,8(sp)
  808750:	dfc00415 	stw	ra,16(sp)
  808754:	2825883a 	mov	r18,r5
  808758:	dc400115 	stw	r17,4(sp)
  80875c:	dc000015 	stw	r16,0(sp)
  808760:	2027883a 	mov	r19,r4
  808764:	01800404 	movi	r6,16
  808768:	01400104 	movi	r5,4
  80876c:	18001726 	beq	r3,zero,8087cc <_Balloc+0x8c>
  808770:	01400044 	movi	r5,1
  808774:	9485883a 	add	r2,r18,r18
  808778:	2ca2983a 	sll	r17,r5,r18
  80877c:	1085883a 	add	r2,r2,r2
  808780:	10c7883a 	add	r3,r2,r3
  808784:	1c000017 	ldw	r16,0(r3)
  808788:	8c4d883a 	add	r6,r17,r17
  80878c:	318d883a 	add	r6,r6,r6
  808790:	9809883a 	mov	r4,r19
  808794:	31800504 	addi	r6,r6,20
  808798:	80001226 	beq	r16,zero,8087e4 <_Balloc+0xa4>
  80879c:	80800017 	ldw	r2,0(r16)
  8087a0:	18800015 	stw	r2,0(r3)
  8087a4:	80000415 	stw	zero,16(r16)
  8087a8:	80000315 	stw	zero,12(r16)
  8087ac:	8005883a 	mov	r2,r16
  8087b0:	dfc00417 	ldw	ra,16(sp)
  8087b4:	dcc00317 	ldw	r19,12(sp)
  8087b8:	dc800217 	ldw	r18,8(sp)
  8087bc:	dc400117 	ldw	r17,4(sp)
  8087c0:	dc000017 	ldw	r16,0(sp)
  8087c4:	dec00504 	addi	sp,sp,20
  8087c8:	f800283a 	ret
  8087cc:	080c5d80 	call	80c5d8 <_calloc_r>
  8087d0:	1007883a 	mov	r3,r2
  8087d4:	0021883a 	mov	r16,zero
  8087d8:	98801315 	stw	r2,76(r19)
  8087dc:	103fe41e 	bne	r2,zero,808770 <_Balloc+0x30>
  8087e0:	003ff206 	br	8087ac <_Balloc+0x6c>
  8087e4:	080c5d80 	call	80c5d8 <_calloc_r>
  8087e8:	103ff026 	beq	r2,zero,8087ac <_Balloc+0x6c>
  8087ec:	1021883a 	mov	r16,r2
  8087f0:	14800115 	stw	r18,4(r2)
  8087f4:	14400215 	stw	r17,8(r2)
  8087f8:	003fea06 	br	8087a4 <_Balloc+0x64>

008087fc <__d2b>:
  8087fc:	defff504 	addi	sp,sp,-44
  808800:	dcc00515 	stw	r19,20(sp)
  808804:	04c00044 	movi	r19,1
  808808:	dc000215 	stw	r16,8(sp)
  80880c:	2821883a 	mov	r16,r5
  808810:	980b883a 	mov	r5,r19
  808814:	ddc00915 	stw	r23,36(sp)
  808818:	dd800815 	stw	r22,32(sp)
  80881c:	dd400715 	stw	r21,28(sp)
  808820:	dd000615 	stw	r20,24(sp)
  808824:	dc800415 	stw	r18,16(sp)
  808828:	dc400315 	stw	r17,12(sp)
  80882c:	dfc00a15 	stw	ra,40(sp)
  808830:	3023883a 	mov	r17,r6
  808834:	382d883a 	mov	r22,r7
  808838:	ddc00b17 	ldw	r23,44(sp)
  80883c:	08087400 	call	808740 <_Balloc>
  808840:	1025883a 	mov	r18,r2
  808844:	00a00034 	movhi	r2,32768
  808848:	10bfffc4 	addi	r2,r2,-1
  80884c:	8888703a 	and	r4,r17,r2
  808850:	202ad53a 	srli	r21,r4,20
  808854:	00800434 	movhi	r2,16
  808858:	10bfffc4 	addi	r2,r2,-1
  80885c:	8886703a 	and	r3,r17,r2
  808860:	a829003a 	cmpeq	r20,r21,zero
  808864:	800b883a 	mov	r5,r16
  808868:	d8c00115 	stw	r3,4(sp)
  80886c:	94000504 	addi	r16,r18,20
  808870:	a000021e 	bne	r20,zero,80887c <__d2b+0x80>
  808874:	18c00434 	orhi	r3,r3,16
  808878:	d8c00115 	stw	r3,4(sp)
  80887c:	28002726 	beq	r5,zero,80891c <__d2b+0x120>
  808880:	d809883a 	mov	r4,sp
  808884:	d9400015 	stw	r5,0(sp)
  808888:	08082580 	call	808258 <__lo0bits>
  80888c:	100d883a 	mov	r6,r2
  808890:	10003526 	beq	r2,zero,808968 <__d2b+0x16c>
  808894:	d8c00117 	ldw	r3,4(sp)
  808898:	00800804 	movi	r2,32
  80889c:	1185c83a 	sub	r2,r2,r6
  8088a0:	d9000017 	ldw	r4,0(sp)
  8088a4:	1886983a 	sll	r3,r3,r2
  8088a8:	1906b03a 	or	r3,r3,r4
  8088ac:	90c00515 	stw	r3,20(r18)
  8088b0:	d8c00117 	ldw	r3,4(sp)
  8088b4:	1986d83a 	srl	r3,r3,r6
  8088b8:	d8c00115 	stw	r3,4(sp)
  8088bc:	180b003a 	cmpeq	r5,r3,zero
  8088c0:	00800084 	movi	r2,2
  8088c4:	114bc83a 	sub	r5,r2,r5
  8088c8:	80c00115 	stw	r3,4(r16)
  8088cc:	91400415 	stw	r5,16(r18)
  8088d0:	a0001a1e 	bne	r20,zero,80893c <__d2b+0x140>
  8088d4:	3545883a 	add	r2,r6,r21
  8088d8:	10bef344 	addi	r2,r2,-1075
  8088dc:	00c00d44 	movi	r3,53
  8088e0:	b0800015 	stw	r2,0(r22)
  8088e4:	1987c83a 	sub	r3,r3,r6
  8088e8:	b8c00015 	stw	r3,0(r23)
  8088ec:	9005883a 	mov	r2,r18
  8088f0:	dfc00a17 	ldw	ra,40(sp)
  8088f4:	ddc00917 	ldw	r23,36(sp)
  8088f8:	dd800817 	ldw	r22,32(sp)
  8088fc:	dd400717 	ldw	r21,28(sp)
  808900:	dd000617 	ldw	r20,24(sp)
  808904:	dcc00517 	ldw	r19,20(sp)
  808908:	dc800417 	ldw	r18,16(sp)
  80890c:	dc400317 	ldw	r17,12(sp)
  808910:	dc000217 	ldw	r16,8(sp)
  808914:	dec00b04 	addi	sp,sp,44
  808918:	f800283a 	ret
  80891c:	d9000104 	addi	r4,sp,4
  808920:	08082580 	call	808258 <__lo0bits>
  808924:	11800804 	addi	r6,r2,32
  808928:	d8800117 	ldw	r2,4(sp)
  80892c:	94c00415 	stw	r19,16(r18)
  808930:	980b883a 	mov	r5,r19
  808934:	90800515 	stw	r2,20(r18)
  808938:	a03fe626 	beq	r20,zero,8088d4 <__d2b+0xd8>
  80893c:	2945883a 	add	r2,r5,r5
  808940:	1085883a 	add	r2,r2,r2
  808944:	1405883a 	add	r2,r2,r16
  808948:	113fff17 	ldw	r4,-4(r2)
  80894c:	30fef384 	addi	r3,r6,-1074
  808950:	2820917a 	slli	r16,r5,5
  808954:	b0c00015 	stw	r3,0(r22)
  808958:	08081e80 	call	8081e8 <__hi0bits>
  80895c:	80a1c83a 	sub	r16,r16,r2
  808960:	bc000015 	stw	r16,0(r23)
  808964:	003fe106 	br	8088ec <__d2b+0xf0>
  808968:	d8800017 	ldw	r2,0(sp)
  80896c:	90800515 	stw	r2,20(r18)
  808970:	d8c00117 	ldw	r3,4(sp)
  808974:	003fd106 	br	8088bc <__d2b+0xc0>

00808978 <__mdiff>:
  808978:	defffb04 	addi	sp,sp,-20
  80897c:	dc000015 	stw	r16,0(sp)
  808980:	2821883a 	mov	r16,r5
  808984:	dc800215 	stw	r18,8(sp)
  808988:	300b883a 	mov	r5,r6
  80898c:	2025883a 	mov	r18,r4
  808990:	8009883a 	mov	r4,r16
  808994:	dc400115 	stw	r17,4(sp)
  808998:	dfc00415 	stw	ra,16(sp)
  80899c:	dcc00315 	stw	r19,12(sp)
  8089a0:	3023883a 	mov	r17,r6
  8089a4:	080831c0 	call	80831c <__mcmp>
  8089a8:	10004226 	beq	r2,zero,808ab4 <__mdiff+0x13c>
  8089ac:	10005016 	blt	r2,zero,808af0 <__mdiff+0x178>
  8089b0:	0027883a 	mov	r19,zero
  8089b4:	81400117 	ldw	r5,4(r16)
  8089b8:	9009883a 	mov	r4,r18
  8089bc:	08087400 	call	808740 <_Balloc>
  8089c0:	1019883a 	mov	r12,r2
  8089c4:	82800417 	ldw	r10,16(r16)
  8089c8:	88800417 	ldw	r2,16(r17)
  8089cc:	81800504 	addi	r6,r16,20
  8089d0:	5287883a 	add	r3,r10,r10
  8089d4:	1085883a 	add	r2,r2,r2
  8089d8:	18c7883a 	add	r3,r3,r3
  8089dc:	1085883a 	add	r2,r2,r2
  8089e0:	8a000504 	addi	r8,r17,20
  8089e4:	64c00315 	stw	r19,12(r12)
  8089e8:	30db883a 	add	r13,r6,r3
  8089ec:	4097883a 	add	r11,r8,r2
  8089f0:	61c00504 	addi	r7,r12,20
  8089f4:	0013883a 	mov	r9,zero
  8089f8:	31000017 	ldw	r4,0(r6)
  8089fc:	41400017 	ldw	r5,0(r8)
  808a00:	42000104 	addi	r8,r8,4
  808a04:	20bfffcc 	andi	r2,r4,65535
  808a08:	28ffffcc 	andi	r3,r5,65535
  808a0c:	10c5c83a 	sub	r2,r2,r3
  808a10:	1245883a 	add	r2,r2,r9
  808a14:	2008d43a 	srli	r4,r4,16
  808a18:	280ad43a 	srli	r5,r5,16
  808a1c:	1007d43a 	srai	r3,r2,16
  808a20:	3880000d 	sth	r2,0(r7)
  808a24:	2149c83a 	sub	r4,r4,r5
  808a28:	20c9883a 	add	r4,r4,r3
  808a2c:	3900008d 	sth	r4,2(r7)
  808a30:	31800104 	addi	r6,r6,4
  808a34:	39c00104 	addi	r7,r7,4
  808a38:	2013d43a 	srai	r9,r4,16
  808a3c:	42ffee36 	bltu	r8,r11,8089f8 <__mdiff+0x80>
  808a40:	33400c2e 	bgeu	r6,r13,808a74 <__mdiff+0xfc>
  808a44:	30800017 	ldw	r2,0(r6)
  808a48:	31800104 	addi	r6,r6,4
  808a4c:	10ffffcc 	andi	r3,r2,65535
  808a50:	1a47883a 	add	r3,r3,r9
  808a54:	1004d43a 	srli	r2,r2,16
  808a58:	1809d43a 	srai	r4,r3,16
  808a5c:	38c0000d 	sth	r3,0(r7)
  808a60:	1105883a 	add	r2,r2,r4
  808a64:	3880008d 	sth	r2,2(r7)
  808a68:	1013d43a 	srai	r9,r2,16
  808a6c:	39c00104 	addi	r7,r7,4
  808a70:	337ff436 	bltu	r6,r13,808a44 <__mdiff+0xcc>
  808a74:	38bfff17 	ldw	r2,-4(r7)
  808a78:	38ffff04 	addi	r3,r7,-4
  808a7c:	1000041e 	bne	r2,zero,808a90 <__mdiff+0x118>
  808a80:	18ffff04 	addi	r3,r3,-4
  808a84:	18800017 	ldw	r2,0(r3)
  808a88:	52bfffc4 	addi	r10,r10,-1
  808a8c:	103ffc26 	beq	r2,zero,808a80 <__mdiff+0x108>
  808a90:	6005883a 	mov	r2,r12
  808a94:	62800415 	stw	r10,16(r12)
  808a98:	dfc00417 	ldw	ra,16(sp)
  808a9c:	dcc00317 	ldw	r19,12(sp)
  808aa0:	dc800217 	ldw	r18,8(sp)
  808aa4:	dc400117 	ldw	r17,4(sp)
  808aa8:	dc000017 	ldw	r16,0(sp)
  808aac:	dec00504 	addi	sp,sp,20
  808ab0:	f800283a 	ret
  808ab4:	9009883a 	mov	r4,r18
  808ab8:	000b883a 	mov	r5,zero
  808abc:	08087400 	call	808740 <_Balloc>
  808ac0:	1019883a 	mov	r12,r2
  808ac4:	00800044 	movi	r2,1
  808ac8:	60800415 	stw	r2,16(r12)
  808acc:	6005883a 	mov	r2,r12
  808ad0:	60000515 	stw	zero,20(r12)
  808ad4:	dfc00417 	ldw	ra,16(sp)
  808ad8:	dcc00317 	ldw	r19,12(sp)
  808adc:	dc800217 	ldw	r18,8(sp)
  808ae0:	dc400117 	ldw	r17,4(sp)
  808ae4:	dc000017 	ldw	r16,0(sp)
  808ae8:	dec00504 	addi	sp,sp,20
  808aec:	f800283a 	ret
  808af0:	880d883a 	mov	r6,r17
  808af4:	04c00044 	movi	r19,1
  808af8:	8023883a 	mov	r17,r16
  808afc:	3021883a 	mov	r16,r6
  808b00:	003fac06 	br	8089b4 <__mdiff+0x3c>

00808b04 <__lshift>:
  808b04:	defff904 	addi	sp,sp,-28
  808b08:	28800417 	ldw	r2,16(r5)
  808b0c:	dc000015 	stw	r16,0(sp)
  808b10:	3021d17a 	srai	r16,r6,5
  808b14:	28c00217 	ldw	r3,8(r5)
  808b18:	10800044 	addi	r2,r2,1
  808b1c:	dc400115 	stw	r17,4(sp)
  808b20:	80a3883a 	add	r17,r16,r2
  808b24:	dd400515 	stw	r21,20(sp)
  808b28:	dd000415 	stw	r20,16(sp)
  808b2c:	dc800215 	stw	r18,8(sp)
  808b30:	dfc00615 	stw	ra,24(sp)
  808b34:	2825883a 	mov	r18,r5
  808b38:	dcc00315 	stw	r19,12(sp)
  808b3c:	3029883a 	mov	r20,r6
  808b40:	202b883a 	mov	r21,r4
  808b44:	29400117 	ldw	r5,4(r5)
  808b48:	1c40030e 	bge	r3,r17,808b58 <__lshift+0x54>
  808b4c:	18c7883a 	add	r3,r3,r3
  808b50:	29400044 	addi	r5,r5,1
  808b54:	1c7ffd16 	blt	r3,r17,808b4c <__lshift+0x48>
  808b58:	a809883a 	mov	r4,r21
  808b5c:	08087400 	call	808740 <_Balloc>
  808b60:	1027883a 	mov	r19,r2
  808b64:	11400504 	addi	r5,r2,20
  808b68:	0400090e 	bge	zero,r16,808b90 <__lshift+0x8c>
  808b6c:	2805883a 	mov	r2,r5
  808b70:	0007883a 	mov	r3,zero
  808b74:	18c00044 	addi	r3,r3,1
  808b78:	10000015 	stw	zero,0(r2)
  808b7c:	10800104 	addi	r2,r2,4
  808b80:	80fffc1e 	bne	r16,r3,808b74 <__lshift+0x70>
  808b84:	8405883a 	add	r2,r16,r16
  808b88:	1085883a 	add	r2,r2,r2
  808b8c:	288b883a 	add	r5,r5,r2
  808b90:	90800417 	ldw	r2,16(r18)
  808b94:	91000504 	addi	r4,r18,20
  808b98:	a18007cc 	andi	r6,r20,31
  808b9c:	1085883a 	add	r2,r2,r2
  808ba0:	1085883a 	add	r2,r2,r2
  808ba4:	208f883a 	add	r7,r4,r2
  808ba8:	30001e26 	beq	r6,zero,808c24 <__lshift+0x120>
  808bac:	00800804 	movi	r2,32
  808bb0:	1191c83a 	sub	r8,r2,r6
  808bb4:	0007883a 	mov	r3,zero
  808bb8:	20800017 	ldw	r2,0(r4)
  808bbc:	1184983a 	sll	r2,r2,r6
  808bc0:	1884b03a 	or	r2,r3,r2
  808bc4:	28800015 	stw	r2,0(r5)
  808bc8:	20c00017 	ldw	r3,0(r4)
  808bcc:	21000104 	addi	r4,r4,4
  808bd0:	29400104 	addi	r5,r5,4
  808bd4:	1a06d83a 	srl	r3,r3,r8
  808bd8:	21fff736 	bltu	r4,r7,808bb8 <__lshift+0xb4>
  808bdc:	28c00015 	stw	r3,0(r5)
  808be0:	18000126 	beq	r3,zero,808be8 <__lshift+0xe4>
  808be4:	8c400044 	addi	r17,r17,1
  808be8:	88bfffc4 	addi	r2,r17,-1
  808bec:	98800415 	stw	r2,16(r19)
  808bf0:	a809883a 	mov	r4,r21
  808bf4:	900b883a 	mov	r5,r18
  808bf8:	08081c00 	call	8081c0 <_Bfree>
  808bfc:	9805883a 	mov	r2,r19
  808c00:	dfc00617 	ldw	ra,24(sp)
  808c04:	dd400517 	ldw	r21,20(sp)
  808c08:	dd000417 	ldw	r20,16(sp)
  808c0c:	dcc00317 	ldw	r19,12(sp)
  808c10:	dc800217 	ldw	r18,8(sp)
  808c14:	dc400117 	ldw	r17,4(sp)
  808c18:	dc000017 	ldw	r16,0(sp)
  808c1c:	dec00704 	addi	sp,sp,28
  808c20:	f800283a 	ret
  808c24:	20800017 	ldw	r2,0(r4)
  808c28:	21000104 	addi	r4,r4,4
  808c2c:	28800015 	stw	r2,0(r5)
  808c30:	29400104 	addi	r5,r5,4
  808c34:	21ffec2e 	bgeu	r4,r7,808be8 <__lshift+0xe4>
  808c38:	20800017 	ldw	r2,0(r4)
  808c3c:	21000104 	addi	r4,r4,4
  808c40:	28800015 	stw	r2,0(r5)
  808c44:	29400104 	addi	r5,r5,4
  808c48:	21fff636 	bltu	r4,r7,808c24 <__lshift+0x120>
  808c4c:	003fe606 	br	808be8 <__lshift+0xe4>

00808c50 <__multiply>:
  808c50:	defff004 	addi	sp,sp,-64
  808c54:	dc800815 	stw	r18,32(sp)
  808c58:	dc400715 	stw	r17,28(sp)
  808c5c:	2c800417 	ldw	r18,16(r5)
  808c60:	34400417 	ldw	r17,16(r6)
  808c64:	dcc00915 	stw	r19,36(sp)
  808c68:	dc000615 	stw	r16,24(sp)
  808c6c:	dfc00f15 	stw	ra,60(sp)
  808c70:	df000e15 	stw	fp,56(sp)
  808c74:	ddc00d15 	stw	r23,52(sp)
  808c78:	dd800c15 	stw	r22,48(sp)
  808c7c:	dd400b15 	stw	r21,44(sp)
  808c80:	dd000a15 	stw	r20,40(sp)
  808c84:	2821883a 	mov	r16,r5
  808c88:	3027883a 	mov	r19,r6
  808c8c:	9440040e 	bge	r18,r17,808ca0 <__multiply+0x50>
  808c90:	8825883a 	mov	r18,r17
  808c94:	2c400417 	ldw	r17,16(r5)
  808c98:	2827883a 	mov	r19,r5
  808c9c:	3021883a 	mov	r16,r6
  808ca0:	80800217 	ldw	r2,8(r16)
  808ca4:	9447883a 	add	r3,r18,r17
  808ca8:	d8c00415 	stw	r3,16(sp)
  808cac:	81400117 	ldw	r5,4(r16)
  808cb0:	10c0010e 	bge	r2,r3,808cb8 <__multiply+0x68>
  808cb4:	29400044 	addi	r5,r5,1
  808cb8:	08087400 	call	808740 <_Balloc>
  808cbc:	d8800515 	stw	r2,20(sp)
  808cc0:	d9000417 	ldw	r4,16(sp)
  808cc4:	d8c00517 	ldw	r3,20(sp)
  808cc8:	2105883a 	add	r2,r4,r4
  808ccc:	1085883a 	add	r2,r2,r2
  808cd0:	19000504 	addi	r4,r3,20
  808cd4:	2085883a 	add	r2,r4,r2
  808cd8:	d8800315 	stw	r2,12(sp)
  808cdc:	2080052e 	bgeu	r4,r2,808cf4 <__multiply+0xa4>
  808ce0:	2005883a 	mov	r2,r4
  808ce4:	d8c00317 	ldw	r3,12(sp)
  808ce8:	10000015 	stw	zero,0(r2)
  808cec:	10800104 	addi	r2,r2,4
  808cf0:	10fffc36 	bltu	r2,r3,808ce4 <__multiply+0x94>
  808cf4:	8c45883a 	add	r2,r17,r17
  808cf8:	9487883a 	add	r3,r18,r18
  808cfc:	9dc00504 	addi	r23,r19,20
  808d00:	1085883a 	add	r2,r2,r2
  808d04:	84000504 	addi	r16,r16,20
  808d08:	18c7883a 	add	r3,r3,r3
  808d0c:	b885883a 	add	r2,r23,r2
  808d10:	dc000015 	stw	r16,0(sp)
  808d14:	d8800215 	stw	r2,8(sp)
  808d18:	80f9883a 	add	fp,r16,r3
  808d1c:	b880432e 	bgeu	r23,r2,808e2c <__multiply+0x1dc>
  808d20:	d9000115 	stw	r4,4(sp)
  808d24:	b9000017 	ldw	r4,0(r23)
  808d28:	253fffcc 	andi	r20,r4,65535
  808d2c:	a0001a26 	beq	r20,zero,808d98 <__multiply+0x148>
  808d30:	dcc00017 	ldw	r19,0(sp)
  808d34:	dc800117 	ldw	r18,4(sp)
  808d38:	002b883a 	mov	r21,zero
  808d3c:	9c400017 	ldw	r17,0(r19)
  808d40:	94000017 	ldw	r16,0(r18)
  808d44:	a009883a 	mov	r4,r20
  808d48:	897fffcc 	andi	r5,r17,65535
  808d4c:	080f9440 	call	80f944 <__mulsi3>
  808d50:	880ad43a 	srli	r5,r17,16
  808d54:	80ffffcc 	andi	r3,r16,65535
  808d58:	a8c7883a 	add	r3,r21,r3
  808d5c:	a009883a 	mov	r4,r20
  808d60:	10e3883a 	add	r17,r2,r3
  808d64:	8020d43a 	srli	r16,r16,16
  808d68:	080f9440 	call	80f944 <__mulsi3>
  808d6c:	8806d43a 	srli	r3,r17,16
  808d70:	1405883a 	add	r2,r2,r16
  808d74:	9cc00104 	addi	r19,r19,4
  808d78:	1887883a 	add	r3,r3,r2
  808d7c:	90c0008d 	sth	r3,2(r18)
  808d80:	9440000d 	sth	r17,0(r18)
  808d84:	182ad43a 	srli	r21,r3,16
  808d88:	94800104 	addi	r18,r18,4
  808d8c:	9f3feb36 	bltu	r19,fp,808d3c <__multiply+0xec>
  808d90:	95400015 	stw	r21,0(r18)
  808d94:	b9000017 	ldw	r4,0(r23)
  808d98:	202ad43a 	srli	r21,r4,16
  808d9c:	a8001c26 	beq	r21,zero,808e10 <__multiply+0x1c0>
  808da0:	d9000117 	ldw	r4,4(sp)
  808da4:	dd000017 	ldw	r20,0(sp)
  808da8:	002d883a 	mov	r22,zero
  808dac:	24c00017 	ldw	r19,0(r4)
  808db0:	2025883a 	mov	r18,r4
  808db4:	9823883a 	mov	r17,r19
  808db8:	a4000017 	ldw	r16,0(r20)
  808dbc:	a809883a 	mov	r4,r21
  808dc0:	a5000104 	addi	r20,r20,4
  808dc4:	817fffcc 	andi	r5,r16,65535
  808dc8:	080f9440 	call	80f944 <__mulsi3>
  808dcc:	8806d43a 	srli	r3,r17,16
  808dd0:	800ad43a 	srli	r5,r16,16
  808dd4:	94c0000d 	sth	r19,0(r18)
  808dd8:	b0c7883a 	add	r3,r22,r3
  808ddc:	10e1883a 	add	r16,r2,r3
  808de0:	9400008d 	sth	r16,2(r18)
  808de4:	a809883a 	mov	r4,r21
  808de8:	94800104 	addi	r18,r18,4
  808dec:	080f9440 	call	80f944 <__mulsi3>
  808df0:	94400017 	ldw	r17,0(r18)
  808df4:	8020d43a 	srli	r16,r16,16
  808df8:	88ffffcc 	andi	r3,r17,65535
  808dfc:	10c5883a 	add	r2,r2,r3
  808e00:	80a7883a 	add	r19,r16,r2
  808e04:	982cd43a 	srli	r22,r19,16
  808e08:	a73feb36 	bltu	r20,fp,808db8 <__multiply+0x168>
  808e0c:	94c00015 	stw	r19,0(r18)
  808e10:	d8800217 	ldw	r2,8(sp)
  808e14:	bdc00104 	addi	r23,r23,4
  808e18:	b880042e 	bgeu	r23,r2,808e2c <__multiply+0x1dc>
  808e1c:	d8c00117 	ldw	r3,4(sp)
  808e20:	18c00104 	addi	r3,r3,4
  808e24:	d8c00115 	stw	r3,4(sp)
  808e28:	003fbe06 	br	808d24 <__multiply+0xd4>
  808e2c:	d9000417 	ldw	r4,16(sp)
  808e30:	01000c0e 	bge	zero,r4,808e64 <__multiply+0x214>
  808e34:	d8c00317 	ldw	r3,12(sp)
  808e38:	18bfff17 	ldw	r2,-4(r3)
  808e3c:	18ffff04 	addi	r3,r3,-4
  808e40:	10000326 	beq	r2,zero,808e50 <__multiply+0x200>
  808e44:	00000706 	br	808e64 <__multiply+0x214>
  808e48:	18800017 	ldw	r2,0(r3)
  808e4c:	1000051e 	bne	r2,zero,808e64 <__multiply+0x214>
  808e50:	d9000417 	ldw	r4,16(sp)
  808e54:	18ffff04 	addi	r3,r3,-4
  808e58:	213fffc4 	addi	r4,r4,-1
  808e5c:	d9000415 	stw	r4,16(sp)
  808e60:	203ff91e 	bne	r4,zero,808e48 <__multiply+0x1f8>
  808e64:	d8800417 	ldw	r2,16(sp)
  808e68:	d8c00517 	ldw	r3,20(sp)
  808e6c:	18800415 	stw	r2,16(r3)
  808e70:	1805883a 	mov	r2,r3
  808e74:	dfc00f17 	ldw	ra,60(sp)
  808e78:	df000e17 	ldw	fp,56(sp)
  808e7c:	ddc00d17 	ldw	r23,52(sp)
  808e80:	dd800c17 	ldw	r22,48(sp)
  808e84:	dd400b17 	ldw	r21,44(sp)
  808e88:	dd000a17 	ldw	r20,40(sp)
  808e8c:	dcc00917 	ldw	r19,36(sp)
  808e90:	dc800817 	ldw	r18,32(sp)
  808e94:	dc400717 	ldw	r17,28(sp)
  808e98:	dc000617 	ldw	r16,24(sp)
  808e9c:	dec01004 	addi	sp,sp,64
  808ea0:	f800283a 	ret

00808ea4 <__i2b>:
  808ea4:	defffd04 	addi	sp,sp,-12
  808ea8:	dc000015 	stw	r16,0(sp)
  808eac:	04000044 	movi	r16,1
  808eb0:	dc800115 	stw	r18,4(sp)
  808eb4:	2825883a 	mov	r18,r5
  808eb8:	800b883a 	mov	r5,r16
  808ebc:	dfc00215 	stw	ra,8(sp)
  808ec0:	08087400 	call	808740 <_Balloc>
  808ec4:	14000415 	stw	r16,16(r2)
  808ec8:	14800515 	stw	r18,20(r2)
  808ecc:	dfc00217 	ldw	ra,8(sp)
  808ed0:	dc800117 	ldw	r18,4(sp)
  808ed4:	dc000017 	ldw	r16,0(sp)
  808ed8:	dec00304 	addi	sp,sp,12
  808edc:	f800283a 	ret

00808ee0 <__multadd>:
  808ee0:	defff604 	addi	sp,sp,-40
  808ee4:	dd800615 	stw	r22,24(sp)
  808ee8:	2d800417 	ldw	r22,16(r5)
  808eec:	df000815 	stw	fp,32(sp)
  808ef0:	ddc00715 	stw	r23,28(sp)
  808ef4:	dd400515 	stw	r21,20(sp)
  808ef8:	dd000415 	stw	r20,16(sp)
  808efc:	dcc00315 	stw	r19,12(sp)
  808f00:	dc800215 	stw	r18,8(sp)
  808f04:	dfc00915 	stw	ra,36(sp)
  808f08:	dc400115 	stw	r17,4(sp)
  808f0c:	dc000015 	stw	r16,0(sp)
  808f10:	282f883a 	mov	r23,r5
  808f14:	2039883a 	mov	fp,r4
  808f18:	302b883a 	mov	r21,r6
  808f1c:	3829883a 	mov	r20,r7
  808f20:	2c800504 	addi	r18,r5,20
  808f24:	0027883a 	mov	r19,zero
  808f28:	94400017 	ldw	r17,0(r18)
  808f2c:	a80b883a 	mov	r5,r21
  808f30:	9cc00044 	addi	r19,r19,1
  808f34:	893fffcc 	andi	r4,r17,65535
  808f38:	080f9440 	call	80f944 <__mulsi3>
  808f3c:	8808d43a 	srli	r4,r17,16
  808f40:	1521883a 	add	r16,r2,r20
  808f44:	a80b883a 	mov	r5,r21
  808f48:	080f9440 	call	80f944 <__mulsi3>
  808f4c:	8008d43a 	srli	r4,r16,16
  808f50:	843fffcc 	andi	r16,r16,65535
  808f54:	1105883a 	add	r2,r2,r4
  808f58:	1006943a 	slli	r3,r2,16
  808f5c:	1028d43a 	srli	r20,r2,16
  808f60:	1c07883a 	add	r3,r3,r16
  808f64:	90c00015 	stw	r3,0(r18)
  808f68:	94800104 	addi	r18,r18,4
  808f6c:	9dbfee16 	blt	r19,r22,808f28 <__multadd+0x48>
  808f70:	a0000826 	beq	r20,zero,808f94 <__multadd+0xb4>
  808f74:	b8800217 	ldw	r2,8(r23)
  808f78:	b080130e 	bge	r22,r2,808fc8 <__multadd+0xe8>
  808f7c:	b585883a 	add	r2,r22,r22
  808f80:	1085883a 	add	r2,r2,r2
  808f84:	15c5883a 	add	r2,r2,r23
  808f88:	b0c00044 	addi	r3,r22,1
  808f8c:	15000515 	stw	r20,20(r2)
  808f90:	b8c00415 	stw	r3,16(r23)
  808f94:	b805883a 	mov	r2,r23
  808f98:	dfc00917 	ldw	ra,36(sp)
  808f9c:	df000817 	ldw	fp,32(sp)
  808fa0:	ddc00717 	ldw	r23,28(sp)
  808fa4:	dd800617 	ldw	r22,24(sp)
  808fa8:	dd400517 	ldw	r21,20(sp)
  808fac:	dd000417 	ldw	r20,16(sp)
  808fb0:	dcc00317 	ldw	r19,12(sp)
  808fb4:	dc800217 	ldw	r18,8(sp)
  808fb8:	dc400117 	ldw	r17,4(sp)
  808fbc:	dc000017 	ldw	r16,0(sp)
  808fc0:	dec00a04 	addi	sp,sp,40
  808fc4:	f800283a 	ret
  808fc8:	b9400117 	ldw	r5,4(r23)
  808fcc:	e009883a 	mov	r4,fp
  808fd0:	29400044 	addi	r5,r5,1
  808fd4:	08087400 	call	808740 <_Balloc>
  808fd8:	b9800417 	ldw	r6,16(r23)
  808fdc:	b9400304 	addi	r5,r23,12
  808fe0:	11000304 	addi	r4,r2,12
  808fe4:	318d883a 	add	r6,r6,r6
  808fe8:	318d883a 	add	r6,r6,r6
  808fec:	31800204 	addi	r6,r6,8
  808ff0:	1023883a 	mov	r17,r2
  808ff4:	0807fa80 	call	807fa8 <memcpy>
  808ff8:	b80b883a 	mov	r5,r23
  808ffc:	e009883a 	mov	r4,fp
  809000:	08081c00 	call	8081c0 <_Bfree>
  809004:	882f883a 	mov	r23,r17
  809008:	003fdc06 	br	808f7c <__multadd+0x9c>

0080900c <__pow5mult>:
  80900c:	defffa04 	addi	sp,sp,-24
  809010:	308000cc 	andi	r2,r6,3
  809014:	dd000415 	stw	r20,16(sp)
  809018:	dcc00315 	stw	r19,12(sp)
  80901c:	dc000015 	stw	r16,0(sp)
  809020:	dfc00515 	stw	ra,20(sp)
  809024:	dc800215 	stw	r18,8(sp)
  809028:	dc400115 	stw	r17,4(sp)
  80902c:	3021883a 	mov	r16,r6
  809030:	2027883a 	mov	r19,r4
  809034:	2829883a 	mov	r20,r5
  809038:	10002b1e 	bne	r2,zero,8090e8 <__pow5mult+0xdc>
  80903c:	8025d0ba 	srai	r18,r16,2
  809040:	90001b26 	beq	r18,zero,8090b0 <__pow5mult+0xa4>
  809044:	9c001217 	ldw	r16,72(r19)
  809048:	8000081e 	bne	r16,zero,80906c <__pow5mult+0x60>
  80904c:	00003006 	br	809110 <__pow5mult+0x104>
  809050:	800b883a 	mov	r5,r16
  809054:	800d883a 	mov	r6,r16
  809058:	9809883a 	mov	r4,r19
  80905c:	90001426 	beq	r18,zero,8090b0 <__pow5mult+0xa4>
  809060:	80800017 	ldw	r2,0(r16)
  809064:	10001b26 	beq	r2,zero,8090d4 <__pow5mult+0xc8>
  809068:	1021883a 	mov	r16,r2
  80906c:	9080004c 	andi	r2,r18,1
  809070:	1005003a 	cmpeq	r2,r2,zero
  809074:	9025d07a 	srai	r18,r18,1
  809078:	800d883a 	mov	r6,r16
  80907c:	9809883a 	mov	r4,r19
  809080:	a00b883a 	mov	r5,r20
  809084:	103ff21e 	bne	r2,zero,809050 <__pow5mult+0x44>
  809088:	0808c500 	call	808c50 <__multiply>
  80908c:	a00b883a 	mov	r5,r20
  809090:	9809883a 	mov	r4,r19
  809094:	1023883a 	mov	r17,r2
  809098:	08081c00 	call	8081c0 <_Bfree>
  80909c:	8829883a 	mov	r20,r17
  8090a0:	800b883a 	mov	r5,r16
  8090a4:	800d883a 	mov	r6,r16
  8090a8:	9809883a 	mov	r4,r19
  8090ac:	903fec1e 	bne	r18,zero,809060 <__pow5mult+0x54>
  8090b0:	a005883a 	mov	r2,r20
  8090b4:	dfc00517 	ldw	ra,20(sp)
  8090b8:	dd000417 	ldw	r20,16(sp)
  8090bc:	dcc00317 	ldw	r19,12(sp)
  8090c0:	dc800217 	ldw	r18,8(sp)
  8090c4:	dc400117 	ldw	r17,4(sp)
  8090c8:	dc000017 	ldw	r16,0(sp)
  8090cc:	dec00604 	addi	sp,sp,24
  8090d0:	f800283a 	ret
  8090d4:	0808c500 	call	808c50 <__multiply>
  8090d8:	80800015 	stw	r2,0(r16)
  8090dc:	1021883a 	mov	r16,r2
  8090e0:	10000015 	stw	zero,0(r2)
  8090e4:	003fe106 	br	80906c <__pow5mult+0x60>
  8090e8:	1085883a 	add	r2,r2,r2
  8090ec:	00c020b4 	movhi	r3,130
  8090f0:	18f1f804 	addi	r3,r3,-14368
  8090f4:	1085883a 	add	r2,r2,r2
  8090f8:	10c5883a 	add	r2,r2,r3
  8090fc:	11bfff17 	ldw	r6,-4(r2)
  809100:	000f883a 	mov	r7,zero
  809104:	0808ee00 	call	808ee0 <__multadd>
  809108:	1029883a 	mov	r20,r2
  80910c:	003fcb06 	br	80903c <__pow5mult+0x30>
  809110:	9809883a 	mov	r4,r19
  809114:	01409c44 	movi	r5,625
  809118:	0808ea40 	call	808ea4 <__i2b>
  80911c:	98801215 	stw	r2,72(r19)
  809120:	1021883a 	mov	r16,r2
  809124:	10000015 	stw	zero,0(r2)
  809128:	003fd006 	br	80906c <__pow5mult+0x60>

0080912c <__s2b>:
  80912c:	defff904 	addi	sp,sp,-28
  809130:	dcc00315 	stw	r19,12(sp)
  809134:	dc800215 	stw	r18,8(sp)
  809138:	2827883a 	mov	r19,r5
  80913c:	2025883a 	mov	r18,r4
  809140:	01400244 	movi	r5,9
  809144:	39000204 	addi	r4,r7,8
  809148:	dd000415 	stw	r20,16(sp)
  80914c:	dc400115 	stw	r17,4(sp)
  809150:	dfc00615 	stw	ra,24(sp)
  809154:	dd400515 	stw	r21,20(sp)
  809158:	dc000015 	stw	r16,0(sp)
  80915c:	3829883a 	mov	r20,r7
  809160:	3023883a 	mov	r17,r6
  809164:	080f8740 	call	80f874 <__divsi3>
  809168:	00c00044 	movi	r3,1
  80916c:	1880350e 	bge	r3,r2,809244 <__s2b+0x118>
  809170:	000b883a 	mov	r5,zero
  809174:	18c7883a 	add	r3,r3,r3
  809178:	29400044 	addi	r5,r5,1
  80917c:	18bffd16 	blt	r3,r2,809174 <__s2b+0x48>
  809180:	9009883a 	mov	r4,r18
  809184:	08087400 	call	808740 <_Balloc>
  809188:	1011883a 	mov	r8,r2
  80918c:	d8800717 	ldw	r2,28(sp)
  809190:	00c00044 	movi	r3,1
  809194:	01800244 	movi	r6,9
  809198:	40800515 	stw	r2,20(r8)
  80919c:	40c00415 	stw	r3,16(r8)
  8091a0:	3440260e 	bge	r6,r17,80923c <__s2b+0x110>
  8091a4:	3021883a 	mov	r16,r6
  8091a8:	99ab883a 	add	r21,r19,r6
  8091ac:	9c05883a 	add	r2,r19,r16
  8091b0:	11c00007 	ldb	r7,0(r2)
  8091b4:	400b883a 	mov	r5,r8
  8091b8:	9009883a 	mov	r4,r18
  8091bc:	39fff404 	addi	r7,r7,-48
  8091c0:	01800284 	movi	r6,10
  8091c4:	0808ee00 	call	808ee0 <__multadd>
  8091c8:	84000044 	addi	r16,r16,1
  8091cc:	1011883a 	mov	r8,r2
  8091d0:	8c3ff61e 	bne	r17,r16,8091ac <__s2b+0x80>
  8091d4:	ac45883a 	add	r2,r21,r17
  8091d8:	117ffe04 	addi	r5,r2,-8
  8091dc:	880d883a 	mov	r6,r17
  8091e0:	35000c0e 	bge	r6,r20,809214 <__s2b+0xe8>
  8091e4:	a185c83a 	sub	r2,r20,r6
  8091e8:	2821883a 	mov	r16,r5
  8091ec:	28a3883a 	add	r17,r5,r2
  8091f0:	81c00007 	ldb	r7,0(r16)
  8091f4:	400b883a 	mov	r5,r8
  8091f8:	9009883a 	mov	r4,r18
  8091fc:	39fff404 	addi	r7,r7,-48
  809200:	01800284 	movi	r6,10
  809204:	0808ee00 	call	808ee0 <__multadd>
  809208:	84000044 	addi	r16,r16,1
  80920c:	1011883a 	mov	r8,r2
  809210:	847ff71e 	bne	r16,r17,8091f0 <__s2b+0xc4>
  809214:	4005883a 	mov	r2,r8
  809218:	dfc00617 	ldw	ra,24(sp)
  80921c:	dd400517 	ldw	r21,20(sp)
  809220:	dd000417 	ldw	r20,16(sp)
  809224:	dcc00317 	ldw	r19,12(sp)
  809228:	dc800217 	ldw	r18,8(sp)
  80922c:	dc400117 	ldw	r17,4(sp)
  809230:	dc000017 	ldw	r16,0(sp)
  809234:	dec00704 	addi	sp,sp,28
  809238:	f800283a 	ret
  80923c:	99400284 	addi	r5,r19,10
  809240:	003fe706 	br	8091e0 <__s2b+0xb4>
  809244:	000b883a 	mov	r5,zero
  809248:	003fcd06 	br	809180 <__s2b+0x54>

0080924c <putc>:
  80924c:	defffc04 	addi	sp,sp,-16
  809250:	dc800215 	stw	r18,8(sp)
  809254:	048020b4 	movhi	r18,130
  809258:	94b96204 	addi	r18,r18,-6776
  80925c:	90c00017 	ldw	r3,0(r18)
  809260:	dc400115 	stw	r17,4(sp)
  809264:	dc000015 	stw	r16,0(sp)
  809268:	dfc00315 	stw	ra,12(sp)
  80926c:	2023883a 	mov	r17,r4
  809270:	2821883a 	mov	r16,r5
  809274:	18000226 	beq	r3,zero,809280 <putc+0x34>
  809278:	18800e17 	ldw	r2,56(r3)
  80927c:	10001126 	beq	r2,zero,8092c4 <putc+0x78>
  809280:	80800217 	ldw	r2,8(r16)
  809284:	10ffffc4 	addi	r3,r2,-1
  809288:	80c00215 	stw	r3,8(r16)
  80928c:	18001316 	blt	r3,zero,8092dc <putc+0x90>
  809290:	80800017 	ldw	r2,0(r16)
  809294:	14400005 	stb	r17,0(r2)
  809298:	80c00017 	ldw	r3,0(r16)
  80929c:	18800044 	addi	r2,r3,1
  8092a0:	18c00003 	ldbu	r3,0(r3)
  8092a4:	80800015 	stw	r2,0(r16)
  8092a8:	1805883a 	mov	r2,r3
  8092ac:	dfc00317 	ldw	ra,12(sp)
  8092b0:	dc800217 	ldw	r18,8(sp)
  8092b4:	dc400117 	ldw	r17,4(sp)
  8092b8:	dc000017 	ldw	r16,0(sp)
  8092bc:	dec00404 	addi	sp,sp,16
  8092c0:	f800283a 	ret
  8092c4:	1809883a 	mov	r4,r3
  8092c8:	0806c0c0 	call	806c0c <__sinit>
  8092cc:	80800217 	ldw	r2,8(r16)
  8092d0:	10ffffc4 	addi	r3,r2,-1
  8092d4:	80c00215 	stw	r3,8(r16)
  8092d8:	183fed0e 	bge	r3,zero,809290 <putc+0x44>
  8092dc:	80800617 	ldw	r2,24(r16)
  8092e0:	18800f16 	blt	r3,r2,809320 <putc+0xd4>
  8092e4:	80800017 	ldw	r2,0(r16)
  8092e8:	14400005 	stb	r17,0(r2)
  8092ec:	81000017 	ldw	r4,0(r16)
  8092f0:	00800284 	movi	r2,10
  8092f4:	20c00003 	ldbu	r3,0(r4)
  8092f8:	18801226 	beq	r3,r2,809344 <putc+0xf8>
  8092fc:	20800044 	addi	r2,r4,1
  809300:	80800015 	stw	r2,0(r16)
  809304:	1805883a 	mov	r2,r3
  809308:	dfc00317 	ldw	ra,12(sp)
  80930c:	dc800217 	ldw	r18,8(sp)
  809310:	dc400117 	ldw	r17,4(sp)
  809314:	dc000017 	ldw	r16,0(sp)
  809318:	dec00404 	addi	sp,sp,16
  80931c:	f800283a 	ret
  809320:	91000017 	ldw	r4,0(r18)
  809324:	880b883a 	mov	r5,r17
  809328:	800d883a 	mov	r6,r16
  80932c:	dfc00317 	ldw	ra,12(sp)
  809330:	dc800217 	ldw	r18,8(sp)
  809334:	dc400117 	ldw	r17,4(sp)
  809338:	dc000017 	ldw	r16,0(sp)
  80933c:	dec00404 	addi	sp,sp,16
  809340:	080c4141 	jmpi	80c414 <__swbuf_r>
  809344:	91000017 	ldw	r4,0(r18)
  809348:	180b883a 	mov	r5,r3
  80934c:	003ff606 	br	809328 <putc+0xdc>

00809350 <_putc_r>:
  809350:	defffc04 	addi	sp,sp,-16
  809354:	dc400215 	stw	r17,8(sp)
  809358:	dc000115 	stw	r16,4(sp)
  80935c:	dfc00315 	stw	ra,12(sp)
  809360:	2021883a 	mov	r16,r4
  809364:	2823883a 	mov	r17,r5
  809368:	20000226 	beq	r4,zero,809374 <_putc_r+0x24>
  80936c:	20800e17 	ldw	r2,56(r4)
  809370:	10001026 	beq	r2,zero,8093b4 <_putc_r+0x64>
  809374:	30800217 	ldw	r2,8(r6)
  809378:	10ffffc4 	addi	r3,r2,-1
  80937c:	30c00215 	stw	r3,8(r6)
  809380:	18001316 	blt	r3,zero,8093d0 <_putc_r+0x80>
  809384:	30800017 	ldw	r2,0(r6)
  809388:	14400005 	stb	r17,0(r2)
  80938c:	30c00017 	ldw	r3,0(r6)
  809390:	18800044 	addi	r2,r3,1
  809394:	18c00003 	ldbu	r3,0(r3)
  809398:	30800015 	stw	r2,0(r6)
  80939c:	1805883a 	mov	r2,r3
  8093a0:	dfc00317 	ldw	ra,12(sp)
  8093a4:	dc400217 	ldw	r17,8(sp)
  8093a8:	dc000117 	ldw	r16,4(sp)
  8093ac:	dec00404 	addi	sp,sp,16
  8093b0:	f800283a 	ret
  8093b4:	d9800015 	stw	r6,0(sp)
  8093b8:	0806c0c0 	call	806c0c <__sinit>
  8093bc:	d9800017 	ldw	r6,0(sp)
  8093c0:	30800217 	ldw	r2,8(r6)
  8093c4:	10ffffc4 	addi	r3,r2,-1
  8093c8:	30c00215 	stw	r3,8(r6)
  8093cc:	183fed0e 	bge	r3,zero,809384 <_putc_r+0x34>
  8093d0:	30800617 	ldw	r2,24(r6)
  8093d4:	18800e16 	blt	r3,r2,809410 <_putc_r+0xc0>
  8093d8:	30800017 	ldw	r2,0(r6)
  8093dc:	14400005 	stb	r17,0(r2)
  8093e0:	31000017 	ldw	r4,0(r6)
  8093e4:	00800284 	movi	r2,10
  8093e8:	20c00003 	ldbu	r3,0(r4)
  8093ec:	18800f26 	beq	r3,r2,80942c <_putc_r+0xdc>
  8093f0:	20800044 	addi	r2,r4,1
  8093f4:	30800015 	stw	r2,0(r6)
  8093f8:	1805883a 	mov	r2,r3
  8093fc:	dfc00317 	ldw	ra,12(sp)
  809400:	dc400217 	ldw	r17,8(sp)
  809404:	dc000117 	ldw	r16,4(sp)
  809408:	dec00404 	addi	sp,sp,16
  80940c:	f800283a 	ret
  809410:	8009883a 	mov	r4,r16
  809414:	880b883a 	mov	r5,r17
  809418:	dfc00317 	ldw	ra,12(sp)
  80941c:	dc400217 	ldw	r17,8(sp)
  809420:	dc000117 	ldw	r16,4(sp)
  809424:	dec00404 	addi	sp,sp,16
  809428:	080c4141 	jmpi	80c414 <__swbuf_r>
  80942c:	8009883a 	mov	r4,r16
  809430:	180b883a 	mov	r5,r3
  809434:	003ff806 	br	809418 <_putc_r+0xc8>

00809438 <_realloc_r>:
  809438:	defff404 	addi	sp,sp,-48
  80943c:	dd800815 	stw	r22,32(sp)
  809440:	dc800415 	stw	r18,16(sp)
  809444:	dc400315 	stw	r17,12(sp)
  809448:	dfc00b15 	stw	ra,44(sp)
  80944c:	df000a15 	stw	fp,40(sp)
  809450:	ddc00915 	stw	r23,36(sp)
  809454:	dd400715 	stw	r21,28(sp)
  809458:	dd000615 	stw	r20,24(sp)
  80945c:	dcc00515 	stw	r19,20(sp)
  809460:	dc000215 	stw	r16,8(sp)
  809464:	2825883a 	mov	r18,r5
  809468:	3023883a 	mov	r17,r6
  80946c:	202d883a 	mov	r22,r4
  809470:	2800c926 	beq	r5,zero,809798 <_realloc_r+0x360>
  809474:	0810e400 	call	810e40 <__malloc_lock>
  809478:	943ffe04 	addi	r16,r18,-8
  80947c:	88c002c4 	addi	r3,r17,11
  809480:	00800584 	movi	r2,22
  809484:	82000117 	ldw	r8,4(r16)
  809488:	10c01b2e 	bgeu	r2,r3,8094f8 <_realloc_r+0xc0>
  80948c:	00bffe04 	movi	r2,-8
  809490:	188e703a 	and	r7,r3,r2
  809494:	3839883a 	mov	fp,r7
  809498:	38001a16 	blt	r7,zero,809504 <_realloc_r+0xcc>
  80949c:	e4401936 	bltu	fp,r17,809504 <_realloc_r+0xcc>
  8094a0:	013fff04 	movi	r4,-4
  8094a4:	4126703a 	and	r19,r8,r4
  8094a8:	99c02616 	blt	r19,r7,809544 <_realloc_r+0x10c>
  8094ac:	802b883a 	mov	r21,r16
  8094b0:	9829883a 	mov	r20,r19
  8094b4:	84000204 	addi	r16,r16,8
  8094b8:	a80f883a 	mov	r7,r21
  8094bc:	a70dc83a 	sub	r6,r20,fp
  8094c0:	008003c4 	movi	r2,15
  8094c4:	1180c136 	bltu	r2,r6,8097cc <_realloc_r+0x394>
  8094c8:	38800117 	ldw	r2,4(r7)
  8094cc:	a549883a 	add	r4,r20,r21
  8094d0:	1080004c 	andi	r2,r2,1
  8094d4:	a084b03a 	or	r2,r20,r2
  8094d8:	38800115 	stw	r2,4(r7)
  8094dc:	20c00117 	ldw	r3,4(r4)
  8094e0:	18c00054 	ori	r3,r3,1
  8094e4:	20c00115 	stw	r3,4(r4)
  8094e8:	b009883a 	mov	r4,r22
  8094ec:	0810f480 	call	810f48 <__malloc_unlock>
  8094f0:	8023883a 	mov	r17,r16
  8094f4:	00000606 	br	809510 <_realloc_r+0xd8>
  8094f8:	01c00404 	movi	r7,16
  8094fc:	3839883a 	mov	fp,r7
  809500:	e47fe72e 	bgeu	fp,r17,8094a0 <_realloc_r+0x68>
  809504:	00800304 	movi	r2,12
  809508:	0023883a 	mov	r17,zero
  80950c:	b0800015 	stw	r2,0(r22)
  809510:	8805883a 	mov	r2,r17
  809514:	dfc00b17 	ldw	ra,44(sp)
  809518:	df000a17 	ldw	fp,40(sp)
  80951c:	ddc00917 	ldw	r23,36(sp)
  809520:	dd800817 	ldw	r22,32(sp)
  809524:	dd400717 	ldw	r21,28(sp)
  809528:	dd000617 	ldw	r20,24(sp)
  80952c:	dcc00517 	ldw	r19,20(sp)
  809530:	dc800417 	ldw	r18,16(sp)
  809534:	dc400317 	ldw	r17,12(sp)
  809538:	dc000217 	ldw	r16,8(sp)
  80953c:	dec00c04 	addi	sp,sp,48
  809540:	f800283a 	ret
  809544:	008020b4 	movhi	r2,130
  809548:	10b2b504 	addi	r2,r2,-13612
  80954c:	12400217 	ldw	r9,8(r2)
  809550:	84cd883a 	add	r6,r16,r19
  809554:	802b883a 	mov	r21,r16
  809558:	3240b926 	beq	r6,r9,809840 <_realloc_r+0x408>
  80955c:	31400117 	ldw	r5,4(r6)
  809560:	00bfff84 	movi	r2,-2
  809564:	2884703a 	and	r2,r5,r2
  809568:	1185883a 	add	r2,r2,r6
  80956c:	10c00117 	ldw	r3,4(r2)
  809570:	18c0004c 	andi	r3,r3,1
  809574:	1807003a 	cmpeq	r3,r3,zero
  809578:	1800a326 	beq	r3,zero,809808 <_realloc_r+0x3d0>
  80957c:	2908703a 	and	r4,r5,r4
  809580:	9929883a 	add	r20,r19,r4
  809584:	a1c0a30e 	bge	r20,r7,809814 <_realloc_r+0x3dc>
  809588:	4080004c 	andi	r2,r8,1
  80958c:	1000551e 	bne	r2,zero,8096e4 <_realloc_r+0x2ac>
  809590:	80800017 	ldw	r2,0(r16)
  809594:	80afc83a 	sub	r23,r16,r2
  809598:	b8c00117 	ldw	r3,4(r23)
  80959c:	00bfff04 	movi	r2,-4
  8095a0:	1884703a 	and	r2,r3,r2
  8095a4:	30002e26 	beq	r6,zero,809660 <_realloc_r+0x228>
  8095a8:	3240b926 	beq	r6,r9,809890 <_realloc_r+0x458>
  8095ac:	98a9883a 	add	r20,r19,r2
  8095b0:	2509883a 	add	r4,r4,r20
  8095b4:	d9000015 	stw	r4,0(sp)
  8095b8:	21c02a16 	blt	r4,r7,809664 <_realloc_r+0x22c>
  8095bc:	30800317 	ldw	r2,12(r6)
  8095c0:	30c00217 	ldw	r3,8(r6)
  8095c4:	01400904 	movi	r5,36
  8095c8:	99bfff04 	addi	r6,r19,-4
  8095cc:	18800315 	stw	r2,12(r3)
  8095d0:	10c00215 	stw	r3,8(r2)
  8095d4:	b9000317 	ldw	r4,12(r23)
  8095d8:	b8800217 	ldw	r2,8(r23)
  8095dc:	b82b883a 	mov	r21,r23
  8095e0:	bc000204 	addi	r16,r23,8
  8095e4:	20800215 	stw	r2,8(r4)
  8095e8:	11000315 	stw	r4,12(r2)
  8095ec:	2980e436 	bltu	r5,r6,809980 <_realloc_r+0x548>
  8095f0:	008004c4 	movi	r2,19
  8095f4:	9009883a 	mov	r4,r18
  8095f8:	8011883a 	mov	r8,r16
  8095fc:	11800f2e 	bgeu	r2,r6,80963c <_realloc_r+0x204>
  809600:	90800017 	ldw	r2,0(r18)
  809604:	ba000404 	addi	r8,r23,16
  809608:	91000204 	addi	r4,r18,8
  80960c:	b8800215 	stw	r2,8(r23)
  809610:	90c00117 	ldw	r3,4(r18)
  809614:	008006c4 	movi	r2,27
  809618:	b8c00315 	stw	r3,12(r23)
  80961c:	1180072e 	bgeu	r2,r6,80963c <_realloc_r+0x204>
  809620:	90c00217 	ldw	r3,8(r18)
  809624:	ba000604 	addi	r8,r23,24
  809628:	91000404 	addi	r4,r18,16
  80962c:	b8c00415 	stw	r3,16(r23)
  809630:	90800317 	ldw	r2,12(r18)
  809634:	b8800515 	stw	r2,20(r23)
  809638:	3140e726 	beq	r6,r5,8099d8 <_realloc_r+0x5a0>
  80963c:	20800017 	ldw	r2,0(r4)
  809640:	dd000017 	ldw	r20,0(sp)
  809644:	b80f883a 	mov	r7,r23
  809648:	40800015 	stw	r2,0(r8)
  80964c:	20c00117 	ldw	r3,4(r4)
  809650:	40c00115 	stw	r3,4(r8)
  809654:	20800217 	ldw	r2,8(r4)
  809658:	40800215 	stw	r2,8(r8)
  80965c:	003f9706 	br	8094bc <_realloc_r+0x84>
  809660:	98a9883a 	add	r20,r19,r2
  809664:	a1c01f16 	blt	r20,r7,8096e4 <_realloc_r+0x2ac>
  809668:	b8c00317 	ldw	r3,12(r23)
  80966c:	b8800217 	ldw	r2,8(r23)
  809670:	99bfff04 	addi	r6,r19,-4
  809674:	01400904 	movi	r5,36
  809678:	b82b883a 	mov	r21,r23
  80967c:	18800215 	stw	r2,8(r3)
  809680:	10c00315 	stw	r3,12(r2)
  809684:	bc000204 	addi	r16,r23,8
  809688:	2980c336 	bltu	r5,r6,809998 <_realloc_r+0x560>
  80968c:	008004c4 	movi	r2,19
  809690:	9009883a 	mov	r4,r18
  809694:	8011883a 	mov	r8,r16
  809698:	11800f2e 	bgeu	r2,r6,8096d8 <_realloc_r+0x2a0>
  80969c:	90800017 	ldw	r2,0(r18)
  8096a0:	ba000404 	addi	r8,r23,16
  8096a4:	91000204 	addi	r4,r18,8
  8096a8:	b8800215 	stw	r2,8(r23)
  8096ac:	90c00117 	ldw	r3,4(r18)
  8096b0:	008006c4 	movi	r2,27
  8096b4:	b8c00315 	stw	r3,12(r23)
  8096b8:	1180072e 	bgeu	r2,r6,8096d8 <_realloc_r+0x2a0>
  8096bc:	90c00217 	ldw	r3,8(r18)
  8096c0:	ba000604 	addi	r8,r23,24
  8096c4:	91000404 	addi	r4,r18,16
  8096c8:	b8c00415 	stw	r3,16(r23)
  8096cc:	90800317 	ldw	r2,12(r18)
  8096d0:	b8800515 	stw	r2,20(r23)
  8096d4:	3140c726 	beq	r6,r5,8099f4 <_realloc_r+0x5bc>
  8096d8:	20800017 	ldw	r2,0(r4)
  8096dc:	b80f883a 	mov	r7,r23
  8096e0:	003fd906 	br	809648 <_realloc_r+0x210>
  8096e4:	880b883a 	mov	r5,r17
  8096e8:	b009883a 	mov	r4,r22
  8096ec:	0800d2c0 	call	800d2c <_malloc_r>
  8096f0:	1023883a 	mov	r17,r2
  8096f4:	10002526 	beq	r2,zero,80978c <_realloc_r+0x354>
  8096f8:	80800117 	ldw	r2,4(r16)
  8096fc:	00ffff84 	movi	r3,-2
  809700:	893ffe04 	addi	r4,r17,-8
  809704:	10c4703a 	and	r2,r2,r3
  809708:	8085883a 	add	r2,r16,r2
  80970c:	20809526 	beq	r4,r2,809964 <_realloc_r+0x52c>
  809710:	99bfff04 	addi	r6,r19,-4
  809714:	01c00904 	movi	r7,36
  809718:	39804536 	bltu	r7,r6,809830 <_realloc_r+0x3f8>
  80971c:	008004c4 	movi	r2,19
  809720:	9009883a 	mov	r4,r18
  809724:	880b883a 	mov	r5,r17
  809728:	11800f2e 	bgeu	r2,r6,809768 <_realloc_r+0x330>
  80972c:	90800017 	ldw	r2,0(r18)
  809730:	89400204 	addi	r5,r17,8
  809734:	91000204 	addi	r4,r18,8
  809738:	88800015 	stw	r2,0(r17)
  80973c:	90c00117 	ldw	r3,4(r18)
  809740:	008006c4 	movi	r2,27
  809744:	88c00115 	stw	r3,4(r17)
  809748:	1180072e 	bgeu	r2,r6,809768 <_realloc_r+0x330>
  80974c:	90c00217 	ldw	r3,8(r18)
  809750:	89400404 	addi	r5,r17,16
  809754:	91000404 	addi	r4,r18,16
  809758:	88c00215 	stw	r3,8(r17)
  80975c:	90800317 	ldw	r2,12(r18)
  809760:	88800315 	stw	r2,12(r17)
  809764:	31c09126 	beq	r6,r7,8099ac <_realloc_r+0x574>
  809768:	20800017 	ldw	r2,0(r4)
  80976c:	28800015 	stw	r2,0(r5)
  809770:	20c00117 	ldw	r3,4(r4)
  809774:	28c00115 	stw	r3,4(r5)
  809778:	20800217 	ldw	r2,8(r4)
  80977c:	28800215 	stw	r2,8(r5)
  809780:	900b883a 	mov	r5,r18
  809784:	b009883a 	mov	r4,r22
  809788:	08072100 	call	807210 <_free_r>
  80978c:	b009883a 	mov	r4,r22
  809790:	0810f480 	call	810f48 <__malloc_unlock>
  809794:	003f5e06 	br	809510 <_realloc_r+0xd8>
  809798:	300b883a 	mov	r5,r6
  80979c:	dfc00b17 	ldw	ra,44(sp)
  8097a0:	df000a17 	ldw	fp,40(sp)
  8097a4:	ddc00917 	ldw	r23,36(sp)
  8097a8:	dd800817 	ldw	r22,32(sp)
  8097ac:	dd400717 	ldw	r21,28(sp)
  8097b0:	dd000617 	ldw	r20,24(sp)
  8097b4:	dcc00517 	ldw	r19,20(sp)
  8097b8:	dc800417 	ldw	r18,16(sp)
  8097bc:	dc400317 	ldw	r17,12(sp)
  8097c0:	dc000217 	ldw	r16,8(sp)
  8097c4:	dec00c04 	addi	sp,sp,48
  8097c8:	0800d2c1 	jmpi	800d2c <_malloc_r>
  8097cc:	38800117 	ldw	r2,4(r7)
  8097d0:	e54b883a 	add	r5,fp,r21
  8097d4:	31000054 	ori	r4,r6,1
  8097d8:	1080004c 	andi	r2,r2,1
  8097dc:	1704b03a 	or	r2,r2,fp
  8097e0:	38800115 	stw	r2,4(r7)
  8097e4:	29000115 	stw	r4,4(r5)
  8097e8:	2987883a 	add	r3,r5,r6
  8097ec:	18800117 	ldw	r2,4(r3)
  8097f0:	29400204 	addi	r5,r5,8
  8097f4:	b009883a 	mov	r4,r22
  8097f8:	10800054 	ori	r2,r2,1
  8097fc:	18800115 	stw	r2,4(r3)
  809800:	08072100 	call	807210 <_free_r>
  809804:	003f3806 	br	8094e8 <_realloc_r+0xb0>
  809808:	000d883a 	mov	r6,zero
  80980c:	0009883a 	mov	r4,zero
  809810:	003f5d06 	br	809588 <_realloc_r+0x150>
  809814:	30c00217 	ldw	r3,8(r6)
  809818:	30800317 	ldw	r2,12(r6)
  80981c:	800f883a 	mov	r7,r16
  809820:	84000204 	addi	r16,r16,8
  809824:	10c00215 	stw	r3,8(r2)
  809828:	18800315 	stw	r2,12(r3)
  80982c:	003f2306 	br	8094bc <_realloc_r+0x84>
  809830:	8809883a 	mov	r4,r17
  809834:	900b883a 	mov	r5,r18
  809838:	08080480 	call	808048 <memmove>
  80983c:	003fd006 	br	809780 <_realloc_r+0x348>
  809840:	30800117 	ldw	r2,4(r6)
  809844:	e0c00404 	addi	r3,fp,16
  809848:	1108703a 	and	r4,r2,r4
  80984c:	9905883a 	add	r2,r19,r4
  809850:	10ff4d16 	blt	r2,r3,809588 <_realloc_r+0x150>
  809854:	1705c83a 	sub	r2,r2,fp
  809858:	870b883a 	add	r5,r16,fp
  80985c:	10800054 	ori	r2,r2,1
  809860:	28800115 	stw	r2,4(r5)
  809864:	80c00117 	ldw	r3,4(r16)
  809868:	008020b4 	movhi	r2,130
  80986c:	10b2b504 	addi	r2,r2,-13612
  809870:	b009883a 	mov	r4,r22
  809874:	18c0004c 	andi	r3,r3,1
  809878:	e0c6b03a 	or	r3,fp,r3
  80987c:	11400215 	stw	r5,8(r2)
  809880:	80c00115 	stw	r3,4(r16)
  809884:	0810f480 	call	810f48 <__malloc_unlock>
  809888:	84400204 	addi	r17,r16,8
  80988c:	003f2006 	br	809510 <_realloc_r+0xd8>
  809890:	98a9883a 	add	r20,r19,r2
  809894:	2509883a 	add	r4,r4,r20
  809898:	e0800404 	addi	r2,fp,16
  80989c:	d9000115 	stw	r4,4(sp)
  8098a0:	20bf7016 	blt	r4,r2,809664 <_realloc_r+0x22c>
  8098a4:	b8c00317 	ldw	r3,12(r23)
  8098a8:	b8800217 	ldw	r2,8(r23)
  8098ac:	99bfff04 	addi	r6,r19,-4
  8098b0:	01400904 	movi	r5,36
  8098b4:	18800215 	stw	r2,8(r3)
  8098b8:	10c00315 	stw	r3,12(r2)
  8098bc:	bc400204 	addi	r17,r23,8
  8098c0:	29804136 	bltu	r5,r6,8099c8 <_realloc_r+0x590>
  8098c4:	008004c4 	movi	r2,19
  8098c8:	9009883a 	mov	r4,r18
  8098cc:	880f883a 	mov	r7,r17
  8098d0:	11800f2e 	bgeu	r2,r6,809910 <_realloc_r+0x4d8>
  8098d4:	90800017 	ldw	r2,0(r18)
  8098d8:	b9c00404 	addi	r7,r23,16
  8098dc:	91000204 	addi	r4,r18,8
  8098e0:	b8800215 	stw	r2,8(r23)
  8098e4:	90c00117 	ldw	r3,4(r18)
  8098e8:	008006c4 	movi	r2,27
  8098ec:	b8c00315 	stw	r3,12(r23)
  8098f0:	1180072e 	bgeu	r2,r6,809910 <_realloc_r+0x4d8>
  8098f4:	90c00217 	ldw	r3,8(r18)
  8098f8:	b9c00604 	addi	r7,r23,24
  8098fc:	91000404 	addi	r4,r18,16
  809900:	b8c00415 	stw	r3,16(r23)
  809904:	90800317 	ldw	r2,12(r18)
  809908:	b8800515 	stw	r2,20(r23)
  80990c:	31404026 	beq	r6,r5,809a10 <_realloc_r+0x5d8>
  809910:	20800017 	ldw	r2,0(r4)
  809914:	38800015 	stw	r2,0(r7)
  809918:	20c00117 	ldw	r3,4(r4)
  80991c:	38c00115 	stw	r3,4(r7)
  809920:	20800217 	ldw	r2,8(r4)
  809924:	38800215 	stw	r2,8(r7)
  809928:	d8c00117 	ldw	r3,4(sp)
  80992c:	bf0b883a 	add	r5,r23,fp
  809930:	b009883a 	mov	r4,r22
  809934:	1f05c83a 	sub	r2,r3,fp
  809938:	10800054 	ori	r2,r2,1
  80993c:	28800115 	stw	r2,4(r5)
  809940:	b8c00117 	ldw	r3,4(r23)
  809944:	008020b4 	movhi	r2,130
  809948:	10b2b504 	addi	r2,r2,-13612
  80994c:	11400215 	stw	r5,8(r2)
  809950:	18c0004c 	andi	r3,r3,1
  809954:	e0c6b03a 	or	r3,fp,r3
  809958:	b8c00115 	stw	r3,4(r23)
  80995c:	0810f480 	call	810f48 <__malloc_unlock>
  809960:	003eeb06 	br	809510 <_realloc_r+0xd8>
  809964:	20800117 	ldw	r2,4(r4)
  809968:	00ffff04 	movi	r3,-4
  80996c:	800f883a 	mov	r7,r16
  809970:	10c4703a 	and	r2,r2,r3
  809974:	98a9883a 	add	r20,r19,r2
  809978:	84000204 	addi	r16,r16,8
  80997c:	003ecf06 	br	8094bc <_realloc_r+0x84>
  809980:	900b883a 	mov	r5,r18
  809984:	8009883a 	mov	r4,r16
  809988:	08080480 	call	808048 <memmove>
  80998c:	dd000017 	ldw	r20,0(sp)
  809990:	b80f883a 	mov	r7,r23
  809994:	003ec906 	br	8094bc <_realloc_r+0x84>
  809998:	900b883a 	mov	r5,r18
  80999c:	8009883a 	mov	r4,r16
  8099a0:	08080480 	call	808048 <memmove>
  8099a4:	b80f883a 	mov	r7,r23
  8099a8:	003ec406 	br	8094bc <_realloc_r+0x84>
  8099ac:	90c00417 	ldw	r3,16(r18)
  8099b0:	89400604 	addi	r5,r17,24
  8099b4:	91000604 	addi	r4,r18,24
  8099b8:	88c00415 	stw	r3,16(r17)
  8099bc:	90800517 	ldw	r2,20(r18)
  8099c0:	88800515 	stw	r2,20(r17)
  8099c4:	003f6806 	br	809768 <_realloc_r+0x330>
  8099c8:	900b883a 	mov	r5,r18
  8099cc:	8809883a 	mov	r4,r17
  8099d0:	08080480 	call	808048 <memmove>
  8099d4:	003fd406 	br	809928 <_realloc_r+0x4f0>
  8099d8:	90c00417 	ldw	r3,16(r18)
  8099dc:	91000604 	addi	r4,r18,24
  8099e0:	ba000804 	addi	r8,r23,32
  8099e4:	b8c00615 	stw	r3,24(r23)
  8099e8:	90800517 	ldw	r2,20(r18)
  8099ec:	b8800715 	stw	r2,28(r23)
  8099f0:	003f1206 	br	80963c <_realloc_r+0x204>
  8099f4:	90c00417 	ldw	r3,16(r18)
  8099f8:	91000604 	addi	r4,r18,24
  8099fc:	ba000804 	addi	r8,r23,32
  809a00:	b8c00615 	stw	r3,24(r23)
  809a04:	90800517 	ldw	r2,20(r18)
  809a08:	b8800715 	stw	r2,28(r23)
  809a0c:	003f3206 	br	8096d8 <_realloc_r+0x2a0>
  809a10:	90c00417 	ldw	r3,16(r18)
  809a14:	91000604 	addi	r4,r18,24
  809a18:	b9c00804 	addi	r7,r23,32
  809a1c:	b8c00615 	stw	r3,24(r23)
  809a20:	90800517 	ldw	r2,20(r18)
  809a24:	b8800715 	stw	r2,28(r23)
  809a28:	003fb906 	br	809910 <_realloc_r+0x4d8>

00809a2c <__srefill_r>:
  809a2c:	defffd04 	addi	sp,sp,-12
  809a30:	dc400115 	stw	r17,4(sp)
  809a34:	dc000015 	stw	r16,0(sp)
  809a38:	dfc00215 	stw	ra,8(sp)
  809a3c:	2023883a 	mov	r17,r4
  809a40:	2821883a 	mov	r16,r5
  809a44:	20000226 	beq	r4,zero,809a50 <__srefill_r+0x24>
  809a48:	20800e17 	ldw	r2,56(r4)
  809a4c:	10004126 	beq	r2,zero,809b54 <__srefill_r+0x128>
  809a50:	80c0030b 	ldhu	r3,12(r16)
  809a54:	80000115 	stw	zero,4(r16)
  809a58:	1880080c 	andi	r2,r3,32
  809a5c:	1000361e 	bne	r2,zero,809b38 <__srefill_r+0x10c>
  809a60:	1880010c 	andi	r2,r3,4
  809a64:	1000211e 	bne	r2,zero,809aec <__srefill_r+0xc0>
  809a68:	1880040c 	andi	r2,r3,16
  809a6c:	10005026 	beq	r2,zero,809bb0 <__srefill_r+0x184>
  809a70:	1880020c 	andi	r2,r3,8
  809a74:	1000541e 	bne	r2,zero,809bc8 <__srefill_r+0x19c>
  809a78:	8080030b 	ldhu	r2,12(r16)
  809a7c:	10800114 	ori	r2,r2,4
  809a80:	8080030d 	sth	r2,12(r16)
  809a84:	80800417 	ldw	r2,16(r16)
  809a88:	10004526 	beq	r2,zero,809ba0 <__srefill_r+0x174>
  809a8c:	8080030b 	ldhu	r2,12(r16)
  809a90:	108000cc 	andi	r2,r2,3
  809a94:	1000361e 	bne	r2,zero,809b70 <__srefill_r+0x144>
  809a98:	81800417 	ldw	r6,16(r16)
  809a9c:	80c00817 	ldw	r3,32(r16)
  809aa0:	81400717 	ldw	r5,28(r16)
  809aa4:	81c00517 	ldw	r7,20(r16)
  809aa8:	8809883a 	mov	r4,r17
  809aac:	81800015 	stw	r6,0(r16)
  809ab0:	183ee83a 	callr	r3
  809ab4:	80c0030b 	ldhu	r3,12(r16)
  809ab8:	1009883a 	mov	r4,r2
  809abc:	80800115 	stw	r2,4(r16)
  809ac0:	00b7ffc4 	movi	r2,-8193
  809ac4:	1884703a 	and	r2,r3,r2
  809ac8:	8080030d 	sth	r2,12(r16)
  809acc:	0100230e 	bge	zero,r4,809b5c <__srefill_r+0x130>
  809ad0:	0009883a 	mov	r4,zero
  809ad4:	2005883a 	mov	r2,r4
  809ad8:	dfc00217 	ldw	ra,8(sp)
  809adc:	dc400117 	ldw	r17,4(sp)
  809ae0:	dc000017 	ldw	r16,0(sp)
  809ae4:	dec00304 	addi	sp,sp,12
  809ae8:	f800283a 	ret
  809aec:	81400c17 	ldw	r5,48(r16)
  809af0:	283fe426 	beq	r5,zero,809a84 <__srefill_r+0x58>
  809af4:	80801004 	addi	r2,r16,64
  809af8:	28800226 	beq	r5,r2,809b04 <__srefill_r+0xd8>
  809afc:	8809883a 	mov	r4,r17
  809b00:	08072100 	call	807210 <_free_r>
  809b04:	80800f17 	ldw	r2,60(r16)
  809b08:	80000c15 	stw	zero,48(r16)
  809b0c:	80800115 	stw	r2,4(r16)
  809b10:	103fdc26 	beq	r2,zero,809a84 <__srefill_r+0x58>
  809b14:	80800e17 	ldw	r2,56(r16)
  809b18:	0009883a 	mov	r4,zero
  809b1c:	80800015 	stw	r2,0(r16)
  809b20:	2005883a 	mov	r2,r4
  809b24:	dfc00217 	ldw	ra,8(sp)
  809b28:	dc400117 	ldw	r17,4(sp)
  809b2c:	dc000017 	ldw	r16,0(sp)
  809b30:	dec00304 	addi	sp,sp,12
  809b34:	f800283a 	ret
  809b38:	013fffc4 	movi	r4,-1
  809b3c:	2005883a 	mov	r2,r4
  809b40:	dfc00217 	ldw	ra,8(sp)
  809b44:	dc400117 	ldw	r17,4(sp)
  809b48:	dc000017 	ldw	r16,0(sp)
  809b4c:	dec00304 	addi	sp,sp,12
  809b50:	f800283a 	ret
  809b54:	0806c0c0 	call	806c0c <__sinit>
  809b58:	003fbd06 	br	809a50 <__srefill_r+0x24>
  809b5c:	20000b1e 	bne	r4,zero,809b8c <__srefill_r+0x160>
  809b60:	10800814 	ori	r2,r2,32
  809b64:	013fffc4 	movi	r4,-1
  809b68:	8080030d 	sth	r2,12(r16)
  809b6c:	003fd906 	br	809ad4 <__srefill_r+0xa8>
  809b70:	008020b4 	movhi	r2,130
  809b74:	10b96304 	addi	r2,r2,-6772
  809b78:	11000017 	ldw	r4,0(r2)
  809b7c:	01402074 	movhi	r5,129
  809b80:	2966fc04 	addi	r5,r5,-25616
  809b84:	0807a880 	call	807a88 <_fwalk>
  809b88:	003fc306 	br	809a98 <__srefill_r+0x6c>
  809b8c:	10801014 	ori	r2,r2,64
  809b90:	013fffc4 	movi	r4,-1
  809b94:	8080030d 	sth	r2,12(r16)
  809b98:	80000115 	stw	zero,4(r16)
  809b9c:	003fcd06 	br	809ad4 <__srefill_r+0xa8>
  809ba0:	8809883a 	mov	r4,r17
  809ba4:	800b883a 	mov	r5,r16
  809ba8:	0807c300 	call	807c30 <__smakebuf_r>
  809bac:	003fb706 	br	809a8c <__srefill_r+0x60>
  809bb0:	18c01014 	ori	r3,r3,64
  809bb4:	00800244 	movi	r2,9
  809bb8:	013fffc4 	movi	r4,-1
  809bbc:	88800015 	stw	r2,0(r17)
  809bc0:	80c0030d 	sth	r3,12(r16)
  809bc4:	003fc306 	br	809ad4 <__srefill_r+0xa8>
  809bc8:	8809883a 	mov	r4,r17
  809bcc:	800b883a 	mov	r5,r16
  809bd0:	08069740 	call	806974 <_fflush_r>
  809bd4:	103fd81e 	bne	r2,zero,809b38 <__srefill_r+0x10c>
  809bd8:	8080030b 	ldhu	r2,12(r16)
  809bdc:	80000215 	stw	zero,8(r16)
  809be0:	80000615 	stw	zero,24(r16)
  809be4:	10bffdcc 	andi	r2,r2,65527
  809be8:	8080030d 	sth	r2,12(r16)
  809bec:	003fa206 	br	809a78 <__srefill_r+0x4c>

00809bf0 <lflush>:
  809bf0:	20c0030b 	ldhu	r3,12(r4)
  809bf4:	01400244 	movi	r5,9
  809bf8:	0005883a 	mov	r2,zero
  809bfc:	18c0024c 	andi	r3,r3,9
  809c00:	19400126 	beq	r3,r5,809c08 <lflush+0x18>
  809c04:	f800283a 	ret
  809c08:	0806b701 	jmpi	806b70 <fflush>

00809c0c <__isinfd>:
  809c0c:	200d883a 	mov	r6,r4
  809c10:	0109c83a 	sub	r4,zero,r4
  809c14:	2188b03a 	or	r4,r4,r6
  809c18:	2008d7fa 	srli	r4,r4,31
  809c1c:	00a00034 	movhi	r2,32768
  809c20:	10bfffc4 	addi	r2,r2,-1
  809c24:	1144703a 	and	r2,r2,r5
  809c28:	2088b03a 	or	r4,r4,r2
  809c2c:	009ffc34 	movhi	r2,32752
  809c30:	1105c83a 	sub	r2,r2,r4
  809c34:	0087c83a 	sub	r3,zero,r2
  809c38:	10c4b03a 	or	r2,r2,r3
  809c3c:	1004d7fa 	srli	r2,r2,31
  809c40:	00c00044 	movi	r3,1
  809c44:	1885c83a 	sub	r2,r3,r2
  809c48:	f800283a 	ret

00809c4c <__isnand>:
  809c4c:	200d883a 	mov	r6,r4
  809c50:	0109c83a 	sub	r4,zero,r4
  809c54:	2188b03a 	or	r4,r4,r6
  809c58:	2008d7fa 	srli	r4,r4,31
  809c5c:	00a00034 	movhi	r2,32768
  809c60:	10bfffc4 	addi	r2,r2,-1
  809c64:	1144703a 	and	r2,r2,r5
  809c68:	2088b03a 	or	r4,r4,r2
  809c6c:	009ffc34 	movhi	r2,32752
  809c70:	1105c83a 	sub	r2,r2,r4
  809c74:	1004d7fa 	srli	r2,r2,31
  809c78:	f800283a 	ret

00809c7c <__sccl>:
  809c7c:	28c00003 	ldbu	r3,0(r5)
  809c80:	00801784 	movi	r2,94
  809c84:	2a000044 	addi	r8,r5,1
  809c88:	18802526 	beq	r3,r2,809d20 <__sccl+0xa4>
  809c8c:	180f883a 	mov	r7,r3
  809c90:	0013883a 	mov	r9,zero
  809c94:	000d883a 	mov	r6,zero
  809c98:	0007883a 	mov	r3,zero
  809c9c:	01404004 	movi	r5,256
  809ca0:	1905883a 	add	r2,r3,r4
  809ca4:	18c00044 	addi	r3,r3,1
  809ca8:	11800005 	stb	r6,0(r2)
  809cac:	197ffc1e 	bne	r3,r5,809ca0 <__sccl+0x24>
  809cb0:	38000c26 	beq	r7,zero,809ce4 <__sccl+0x68>
  809cb4:	00800044 	movi	r2,1
  809cb8:	124dc83a 	sub	r6,r2,r9
  809cbc:	3905883a 	add	r2,r7,r4
  809cc0:	11800005 	stb	r6,0(r2)
  809cc4:	41400044 	addi	r5,r8,1
  809cc8:	02400b44 	movi	r9,45
  809ccc:	02801744 	movi	r10,93
  809cd0:	28bfffc3 	ldbu	r2,-1(r5)
  809cd4:	2811883a 	mov	r8,r5
  809cd8:	12400726 	beq	r2,r9,809cf8 <__sccl+0x7c>
  809cdc:	12800226 	beq	r2,r10,809ce8 <__sccl+0x6c>
  809ce0:	1000031e 	bne	r2,zero,809cf0 <__sccl+0x74>
  809ce4:	423fffc4 	addi	r8,r8,-1
  809ce8:	4005883a 	mov	r2,r8
  809cec:	f800283a 	ret
  809cf0:	100f883a 	mov	r7,r2
  809cf4:	003ff106 	br	809cbc <__sccl+0x40>
  809cf8:	28c00003 	ldbu	r3,0(r5)
  809cfc:	1a800d26 	beq	r3,r10,809d34 <__sccl+0xb8>
  809d00:	19c00c16 	blt	r3,r7,809d34 <__sccl+0xb8>
  809d04:	21c5883a 	add	r2,r4,r7
  809d08:	39c00044 	addi	r7,r7,1
  809d0c:	11800045 	stb	r6,1(r2)
  809d10:	10800044 	addi	r2,r2,1
  809d14:	38fffc16 	blt	r7,r3,809d08 <__sccl+0x8c>
  809d18:	29400084 	addi	r5,r5,2
  809d1c:	003fec06 	br	809cd0 <__sccl+0x54>
  809d20:	29c00043 	ldbu	r7,1(r5)
  809d24:	02400044 	movi	r9,1
  809d28:	2a000084 	addi	r8,r5,2
  809d2c:	480d883a 	mov	r6,r9
  809d30:	003fd906 	br	809c98 <__sccl+0x1c>
  809d34:	01c00b44 	movi	r7,45
  809d38:	003fe006 	br	809cbc <__sccl+0x40>

00809d3c <nanf>:
  809d3c:	009ff034 	movhi	r2,32704
  809d40:	f800283a 	ret

00809d44 <__sclose>:
  809d44:	2940038f 	ldh	r5,14(r5)
  809d48:	080c6a01 	jmpi	80c6a0 <_close_r>

00809d4c <__sseek>:
  809d4c:	defffe04 	addi	sp,sp,-8
  809d50:	dc000015 	stw	r16,0(sp)
  809d54:	2821883a 	mov	r16,r5
  809d58:	2940038f 	ldh	r5,14(r5)
  809d5c:	dfc00115 	stw	ra,4(sp)
  809d60:	080d4e40 	call	80d4e4 <_lseek_r>
  809d64:	1007883a 	mov	r3,r2
  809d68:	00bfffc4 	movi	r2,-1
  809d6c:	18800926 	beq	r3,r2,809d94 <__sseek+0x48>
  809d70:	8080030b 	ldhu	r2,12(r16)
  809d74:	80c01415 	stw	r3,80(r16)
  809d78:	10840014 	ori	r2,r2,4096
  809d7c:	8080030d 	sth	r2,12(r16)
  809d80:	1805883a 	mov	r2,r3
  809d84:	dfc00117 	ldw	ra,4(sp)
  809d88:	dc000017 	ldw	r16,0(sp)
  809d8c:	dec00204 	addi	sp,sp,8
  809d90:	f800283a 	ret
  809d94:	8080030b 	ldhu	r2,12(r16)
  809d98:	10bbffcc 	andi	r2,r2,61439
  809d9c:	8080030d 	sth	r2,12(r16)
  809da0:	1805883a 	mov	r2,r3
  809da4:	dfc00117 	ldw	ra,4(sp)
  809da8:	dc000017 	ldw	r16,0(sp)
  809dac:	dec00204 	addi	sp,sp,8
  809db0:	f800283a 	ret

00809db4 <__swrite>:
  809db4:	2880030b 	ldhu	r2,12(r5)
  809db8:	defffb04 	addi	sp,sp,-20
  809dbc:	dcc00315 	stw	r19,12(sp)
  809dc0:	1080400c 	andi	r2,r2,256
  809dc4:	dc800215 	stw	r18,8(sp)
  809dc8:	dc400115 	stw	r17,4(sp)
  809dcc:	dc000015 	stw	r16,0(sp)
  809dd0:	3027883a 	mov	r19,r6
  809dd4:	3825883a 	mov	r18,r7
  809dd8:	dfc00415 	stw	ra,16(sp)
  809ddc:	2821883a 	mov	r16,r5
  809de0:	000d883a 	mov	r6,zero
  809de4:	01c00084 	movi	r7,2
  809de8:	2023883a 	mov	r17,r4
  809dec:	10000226 	beq	r2,zero,809df8 <__swrite+0x44>
  809df0:	2940038f 	ldh	r5,14(r5)
  809df4:	080d4e40 	call	80d4e4 <_lseek_r>
  809df8:	8080030b 	ldhu	r2,12(r16)
  809dfc:	8140038f 	ldh	r5,14(r16)
  809e00:	8809883a 	mov	r4,r17
  809e04:	10bbffcc 	andi	r2,r2,61439
  809e08:	980d883a 	mov	r6,r19
  809e0c:	900f883a 	mov	r7,r18
  809e10:	8080030d 	sth	r2,12(r16)
  809e14:	dfc00417 	ldw	ra,16(sp)
  809e18:	dcc00317 	ldw	r19,12(sp)
  809e1c:	dc800217 	ldw	r18,8(sp)
  809e20:	dc400117 	ldw	r17,4(sp)
  809e24:	dc000017 	ldw	r16,0(sp)
  809e28:	dec00504 	addi	sp,sp,20
  809e2c:	080c5601 	jmpi	80c560 <_write_r>

00809e30 <__sread>:
  809e30:	defffe04 	addi	sp,sp,-8
  809e34:	dc000015 	stw	r16,0(sp)
  809e38:	2821883a 	mov	r16,r5
  809e3c:	2940038f 	ldh	r5,14(r5)
  809e40:	dfc00115 	stw	ra,4(sp)
  809e44:	080d55c0 	call	80d55c <_read_r>
  809e48:	1007883a 	mov	r3,r2
  809e4c:	10000816 	blt	r2,zero,809e70 <__sread+0x40>
  809e50:	80801417 	ldw	r2,80(r16)
  809e54:	10c5883a 	add	r2,r2,r3
  809e58:	80801415 	stw	r2,80(r16)
  809e5c:	1805883a 	mov	r2,r3
  809e60:	dfc00117 	ldw	ra,4(sp)
  809e64:	dc000017 	ldw	r16,0(sp)
  809e68:	dec00204 	addi	sp,sp,8
  809e6c:	f800283a 	ret
  809e70:	8080030b 	ldhu	r2,12(r16)
  809e74:	10bbffcc 	andi	r2,r2,61439
  809e78:	8080030d 	sth	r2,12(r16)
  809e7c:	1805883a 	mov	r2,r3
  809e80:	dfc00117 	ldw	ra,4(sp)
  809e84:	dc000017 	ldw	r16,0(sp)
  809e88:	dec00204 	addi	sp,sp,8
  809e8c:	f800283a 	ret

00809e90 <strcmp>:
  809e90:	2144b03a 	or	r2,r4,r5
  809e94:	108000cc 	andi	r2,r2,3
  809e98:	10001d1e 	bne	r2,zero,809f10 <strcmp+0x80>
  809e9c:	200f883a 	mov	r7,r4
  809ea0:	28800017 	ldw	r2,0(r5)
  809ea4:	21000017 	ldw	r4,0(r4)
  809ea8:	280d883a 	mov	r6,r5
  809eac:	2080161e 	bne	r4,r2,809f08 <strcmp+0x78>
  809eb0:	023fbff4 	movhi	r8,65279
  809eb4:	423fbfc4 	addi	r8,r8,-257
  809eb8:	2207883a 	add	r3,r4,r8
  809ebc:	01602074 	movhi	r5,32897
  809ec0:	29602004 	addi	r5,r5,-32640
  809ec4:	1946703a 	and	r3,r3,r5
  809ec8:	0104303a 	nor	r2,zero,r4
  809ecc:	10c4703a 	and	r2,r2,r3
  809ed0:	10001c1e 	bne	r2,zero,809f44 <strcmp+0xb4>
  809ed4:	4013883a 	mov	r9,r8
  809ed8:	2811883a 	mov	r8,r5
  809edc:	00000106 	br	809ee4 <strcmp+0x54>
  809ee0:	1800181e 	bne	r3,zero,809f44 <strcmp+0xb4>
  809ee4:	39c00104 	addi	r7,r7,4
  809ee8:	39000017 	ldw	r4,0(r7)
  809eec:	31800104 	addi	r6,r6,4
  809ef0:	31400017 	ldw	r5,0(r6)
  809ef4:	2245883a 	add	r2,r4,r9
  809ef8:	1204703a 	and	r2,r2,r8
  809efc:	0106303a 	nor	r3,zero,r4
  809f00:	1886703a 	and	r3,r3,r2
  809f04:	217ff626 	beq	r4,r5,809ee0 <strcmp+0x50>
  809f08:	3809883a 	mov	r4,r7
  809f0c:	300b883a 	mov	r5,r6
  809f10:	20c00007 	ldb	r3,0(r4)
  809f14:	1800051e 	bne	r3,zero,809f2c <strcmp+0x9c>
  809f18:	00000606 	br	809f34 <strcmp+0xa4>
  809f1c:	21000044 	addi	r4,r4,1
  809f20:	20c00007 	ldb	r3,0(r4)
  809f24:	29400044 	addi	r5,r5,1
  809f28:	18000226 	beq	r3,zero,809f34 <strcmp+0xa4>
  809f2c:	28800007 	ldb	r2,0(r5)
  809f30:	18bffa26 	beq	r3,r2,809f1c <strcmp+0x8c>
  809f34:	20c00003 	ldbu	r3,0(r4)
  809f38:	28800003 	ldbu	r2,0(r5)
  809f3c:	1885c83a 	sub	r2,r3,r2
  809f40:	f800283a 	ret
  809f44:	0005883a 	mov	r2,zero
  809f48:	f800283a 	ret

00809f4c <match>:
  809f4c:	21800017 	ldw	r6,0(r4)
  809f50:	01c01004 	movi	r7,64
  809f54:	02001684 	movi	r8,90
  809f58:	28800007 	ldb	r2,0(r5)
  809f5c:	29400044 	addi	r5,r5,1
  809f60:	10000826 	beq	r2,zero,809f84 <match+0x38>
  809f64:	31800044 	addi	r6,r6,1
  809f68:	30c00007 	ldb	r3,0(r6)
  809f6c:	38c0020e 	bge	r7,r3,809f78 <match+0x2c>
  809f70:	40c00116 	blt	r8,r3,809f78 <match+0x2c>
  809f74:	18c00804 	addi	r3,r3,32
  809f78:	18bff726 	beq	r3,r2,809f58 <match+0xc>
  809f7c:	0005883a 	mov	r2,zero
  809f80:	f800283a 	ret
  809f84:	30800044 	addi	r2,r6,1
  809f88:	20800015 	stw	r2,0(r4)
  809f8c:	00800044 	movi	r2,1
  809f90:	f800283a 	ret

00809f94 <_strtod_r>:
  809f94:	deffd504 	addi	sp,sp,-172
  809f98:	df002915 	stw	fp,164(sp)
  809f9c:	dd402615 	stw	r21,152(sp)
  809fa0:	dd002515 	stw	r20,148(sp)
  809fa4:	dfc02a15 	stw	ra,168(sp)
  809fa8:	ddc02815 	stw	r23,160(sp)
  809fac:	dd802715 	stw	r22,156(sp)
  809fb0:	dcc02415 	stw	r19,144(sp)
  809fb4:	dc802315 	stw	r18,140(sp)
  809fb8:	dc402215 	stw	r17,136(sp)
  809fbc:	dc002115 	stw	r16,132(sp)
  809fc0:	2829883a 	mov	r20,r5
  809fc4:	202b883a 	mov	r21,r4
  809fc8:	d9801d15 	stw	r6,116(sp)
  809fcc:	d8000915 	stw	zero,36(sp)
  809fd0:	d8000a15 	stw	zero,40(sp)
  809fd4:	d9400415 	stw	r5,16(sp)
  809fd8:	df000904 	addi	fp,sp,36
  809fdc:	dc000417 	ldw	r16,16(sp)
  809fe0:	00800b44 	movi	r2,45
  809fe4:	80c00003 	ldbu	r3,0(r16)
  809fe8:	10c03536 	bltu	r2,r3,80a0c0 <_strtod_r+0x12c>
  809fec:	18c5883a 	add	r2,r3,r3
  809ff0:	1085883a 	add	r2,r2,r2
  809ff4:	00c02074 	movhi	r3,129
  809ff8:	18e80204 	addi	r3,r3,-24568
  809ffc:	10c5883a 	add	r2,r2,r3
  80a000:	11000017 	ldw	r4,0(r2)
  80a004:	2000683a 	jmp	r4
  80a008:	0080a240 	call	80a24 <OSCtxSw_SWITCH_PC+0x809e4>
  80a00c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a010:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a014:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a018:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a01c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a020:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a024:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a028:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a02c:	0080a588 	cmpgei	r2,zero,662
  80a030:	0080a588 	cmpgei	r2,zero,662
  80a034:	0080a588 	cmpgei	r2,zero,662
  80a038:	0080a588 	cmpgei	r2,zero,662
  80a03c:	0080a588 	cmpgei	r2,zero,662
  80a040:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a044:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a048:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a04c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a050:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a054:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a058:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a05c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a060:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a064:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a068:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a06c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a070:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a074:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a078:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a07c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a080:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a084:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a088:	0080a588 	cmpgei	r2,zero,662
  80a08c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a090:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a094:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a098:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a09c:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0a0:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0a4:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0a8:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0ac:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0b0:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0b4:	0080a568 	cmpgeui	r2,zero,661
  80a0b8:	0080a0c0 	call	80a0c <OSCtxSw_SWITCH_PC+0x809cc>
  80a0bc:	0080a594 	movui	r2,662
  80a0c0:	d8001515 	stw	zero,84(sp)
  80a0c4:	80c00007 	ldb	r3,0(r16)
  80a0c8:	00800c04 	movi	r2,48
  80a0cc:	1880e926 	beq	r3,r2,80a474 <_strtod_r+0x4e0>
  80a0d0:	d8001615 	stw	zero,88(sp)
  80a0d4:	dc001415 	stw	r16,80(sp)
  80a0d8:	84400007 	ldb	r17,0(r16)
  80a0dc:	00800bc4 	movi	r2,47
  80a0e0:	1443760e 	bge	r2,r17,80aebc <_strtod_r+0xf28>
  80a0e4:	00800e44 	movi	r2,57
  80a0e8:	14437416 	blt	r2,r17,80aebc <_strtod_r+0xf28>
  80a0ec:	8025883a 	mov	r18,r16
  80a0f0:	0027883a 	mov	r19,zero
  80a0f4:	d8001215 	stw	zero,72(sp)
  80a0f8:	d8001115 	stw	zero,68(sp)
  80a0fc:	00000f06 	br	80a13c <_strtod_r+0x1a8>
  80a100:	d9001217 	ldw	r4,72(sp)
  80a104:	01400284 	movi	r5,10
  80a108:	080f9440 	call	80f944 <__mulsi3>
  80a10c:	1445883a 	add	r2,r2,r17
  80a110:	10bff404 	addi	r2,r2,-48
  80a114:	d8801215 	stw	r2,72(sp)
  80a118:	94000044 	addi	r16,r18,1
  80a11c:	dc000415 	stw	r16,16(sp)
  80a120:	84400007 	ldb	r17,0(r16)
  80a124:	00800bc4 	movi	r2,47
  80a128:	9cc00044 	addi	r19,r19,1
  80a12c:	8025883a 	mov	r18,r16
  80a130:	1440130e 	bge	r2,r17,80a180 <_strtod_r+0x1ec>
  80a134:	00800e44 	movi	r2,57
  80a138:	14401116 	blt	r2,r17,80a180 <_strtod_r+0x1ec>
  80a13c:	00800204 	movi	r2,8
  80a140:	14ffef0e 	bge	r2,r19,80a100 <_strtod_r+0x16c>
  80a144:	008003c4 	movi	r2,15
  80a148:	14fff316 	blt	r2,r19,80a118 <_strtod_r+0x184>
  80a14c:	d9001117 	ldw	r4,68(sp)
  80a150:	01400284 	movi	r5,10
  80a154:	94000044 	addi	r16,r18,1
  80a158:	080f9440 	call	80f944 <__mulsi3>
  80a15c:	1445883a 	add	r2,r2,r17
  80a160:	10bff404 	addi	r2,r2,-48
  80a164:	d8801115 	stw	r2,68(sp)
  80a168:	dc000415 	stw	r16,16(sp)
  80a16c:	84400007 	ldb	r17,0(r16)
  80a170:	00800bc4 	movi	r2,47
  80a174:	9cc00044 	addi	r19,r19,1
  80a178:	8025883a 	mov	r18,r16
  80a17c:	147fed16 	blt	r2,r17,80a134 <_strtod_r+0x1a0>
  80a180:	00800b84 	movi	r2,46
  80a184:	8880c926 	beq	r17,r2,80a4ac <_strtod_r+0x518>
  80a188:	dcc01815 	stw	r19,96(sp)
  80a18c:	d8001b15 	stw	zero,108(sp)
  80a190:	d8001715 	stw	zero,92(sp)
  80a194:	000d883a 	mov	r6,zero
  80a198:	00801944 	movi	r2,101
  80a19c:	88802126 	beq	r17,r2,80a224 <_strtod_r+0x290>
  80a1a0:	00801144 	movi	r2,69
  80a1a4:	88801f26 	beq	r17,r2,80a224 <_strtod_r+0x290>
  80a1a8:	d9001817 	ldw	r4,96(sp)
  80a1ac:	2024c03a 	cmpne	r18,r4,zero
  80a1b0:	0009883a 	mov	r4,zero
  80a1b4:	9000651e 	bne	r18,zero,80a34c <_strtod_r+0x3b8>
  80a1b8:	3000c926 	beq	r6,zero,80a4e0 <_strtod_r+0x54c>
  80a1bc:	d8801d17 	ldw	r2,116(sp)
  80a1c0:	10000326 	beq	r2,zero,80a1d0 <_strtod_r+0x23c>
  80a1c4:	d8800417 	ldw	r2,16(sp)
  80a1c8:	d8c01d17 	ldw	r3,116(sp)
  80a1cc:	18800015 	stw	r2,0(r3)
  80a1d0:	d9001517 	ldw	r4,84(sp)
  80a1d4:	2005003a 	cmpeq	r2,r4,zero
  80a1d8:	10001c1e 	bne	r2,zero,80a24c <_strtod_r+0x2b8>
  80a1dc:	e0800017 	ldw	r2,0(fp)
  80a1e0:	e0c00117 	ldw	r3,4(fp)
  80a1e4:	1009883a 	mov	r4,r2
  80a1e8:	1960003c 	xorhi	r5,r3,32768
  80a1ec:	2005883a 	mov	r2,r4
  80a1f0:	2807883a 	mov	r3,r5
  80a1f4:	dfc02a17 	ldw	ra,168(sp)
  80a1f8:	df002917 	ldw	fp,164(sp)
  80a1fc:	ddc02817 	ldw	r23,160(sp)
  80a200:	dd802717 	ldw	r22,156(sp)
  80a204:	dd402617 	ldw	r21,152(sp)
  80a208:	dd002517 	ldw	r20,148(sp)
  80a20c:	dcc02417 	ldw	r19,144(sp)
  80a210:	dc802317 	ldw	r18,140(sp)
  80a214:	dc402217 	ldw	r17,136(sp)
  80a218:	dc002117 	ldw	r16,132(sp)
  80a21c:	dec02b04 	addi	sp,sp,172
  80a220:	f800283a 	ret
  80a224:	d8801817 	ldw	r2,96(sp)
  80a228:	1024c03a 	cmpne	r18,r2,zero
  80a22c:	90000a1e 	bne	r18,zero,80a258 <_strtod_r+0x2c4>
  80a230:	3000091e 	bne	r6,zero,80a258 <_strtod_r+0x2c4>
  80a234:	d8c01617 	ldw	r3,88(sp)
  80a238:	1805003a 	cmpeq	r2,r3,zero
  80a23c:	10000626 	beq	r2,zero,80a258 <_strtod_r+0x2c4>
  80a240:	d8001515 	stw	zero,84(sp)
  80a244:	dd000415 	stw	r20,16(sp)
  80a248:	003fdc06 	br	80a1bc <_strtod_r+0x228>
  80a24c:	e1000017 	ldw	r4,0(fp)
  80a250:	e1400117 	ldw	r5,4(fp)
  80a254:	003fe506 	br	80a1ec <_strtod_r+0x258>
  80a258:	dd000417 	ldw	r20,16(sp)
  80a25c:	00800ac4 	movi	r2,43
  80a260:	a4000044 	addi	r16,r20,1
  80a264:	dc000415 	stw	r16,16(sp)
  80a268:	a0c00047 	ldb	r3,1(r20)
  80a26c:	8009883a 	mov	r4,r16
  80a270:	1880cb26 	beq	r3,r2,80a5a0 <_strtod_r+0x60c>
  80a274:	00800b44 	movi	r2,45
  80a278:	18838326 	beq	r3,r2,80b088 <_strtod_r+0x10f4>
  80a27c:	1823883a 	mov	r17,r3
  80a280:	88fff404 	addi	r3,r17,-48
  80a284:	00800244 	movi	r2,9
  80a288:	d8001915 	stw	zero,100(sp)
  80a28c:	10c0cb36 	bltu	r2,r3,80a5bc <_strtod_r+0x628>
  80a290:	00800c04 	movi	r2,48
  80a294:	8880061e 	bne	r17,r2,80a2b0 <_strtod_r+0x31c>
  80a298:	dc000417 	ldw	r16,16(sp)
  80a29c:	8805883a 	mov	r2,r17
  80a2a0:	84000044 	addi	r16,r16,1
  80a2a4:	dc000415 	stw	r16,16(sp)
  80a2a8:	84400007 	ldb	r17,0(r16)
  80a2ac:	88bffc26 	beq	r17,r2,80a2a0 <_strtod_r+0x30c>
  80a2b0:	88fff3c4 	addi	r3,r17,-49
  80a2b4:	00800204 	movi	r2,8
  80a2b8:	10ffbd36 	bltu	r2,r3,80a1b0 <_strtod_r+0x21c>
  80a2bc:	dc000417 	ldw	r16,16(sp)
  80a2c0:	893ff404 	addi	r4,r17,-48
  80a2c4:	00c00bc4 	movi	r3,47
  80a2c8:	dc001315 	stw	r16,76(sp)
  80a2cc:	84000044 	addi	r16,r16,1
  80a2d0:	dc000415 	stw	r16,16(sp)
  80a2d4:	84400007 	ldb	r17,0(r16)
  80a2d8:	1c40100e 	bge	r3,r17,80a31c <_strtod_r+0x388>
  80a2dc:	00800e44 	movi	r2,57
  80a2e0:	14400e16 	blt	r2,r17,80a31c <_strtod_r+0x388>
  80a2e4:	182f883a 	mov	r23,r3
  80a2e8:	102d883a 	mov	r22,r2
  80a2ec:	00000106 	br	80a2f4 <_strtod_r+0x360>
  80a2f0:	b4400a16 	blt	r22,r17,80a31c <_strtod_r+0x388>
  80a2f4:	84000044 	addi	r16,r16,1
  80a2f8:	01400284 	movi	r5,10
  80a2fc:	d9802015 	stw	r6,128(sp)
  80a300:	080f9440 	call	80f944 <__mulsi3>
  80a304:	dc000415 	stw	r16,16(sp)
  80a308:	8885883a 	add	r2,r17,r2
  80a30c:	84400007 	ldb	r17,0(r16)
  80a310:	113ff404 	addi	r4,r2,-48
  80a314:	d9802017 	ldw	r6,128(sp)
  80a318:	bc7ff516 	blt	r23,r17,80a2f0 <_strtod_r+0x35c>
  80a31c:	d8801317 	ldw	r2,76(sp)
  80a320:	8087c83a 	sub	r3,r16,r2
  80a324:	00800204 	movi	r2,8
  80a328:	10c2ff16 	blt	r2,r3,80af28 <_strtod_r+0xf94>
  80a32c:	009387c4 	movi	r2,19999
  80a330:	1100010e 	bge	r2,r4,80a338 <_strtod_r+0x3a4>
  80a334:	1009883a 	mov	r4,r2
  80a338:	d8c01917 	ldw	r3,100(sp)
  80a33c:	1805003a 	cmpeq	r2,r3,zero
  80a340:	103f9c1e 	bne	r2,zero,80a1b4 <_strtod_r+0x220>
  80a344:	0109c83a 	sub	r4,zero,r4
  80a348:	903f9b26 	beq	r18,zero,80a1b8 <_strtod_r+0x224>
  80a34c:	d8801717 	ldw	r2,92(sp)
  80a350:	2089c83a 	sub	r4,r4,r2
  80a354:	d9000f15 	stw	r4,60(sp)
  80a358:	9800811e 	bne	r19,zero,80a560 <_strtod_r+0x5cc>
  80a35c:	dd001817 	ldw	r20,96(sp)
  80a360:	dc801817 	ldw	r18,96(sp)
  80a364:	00800404 	movi	r2,16
  80a368:	1480010e 	bge	r2,r18,80a370 <_strtod_r+0x3dc>
  80a36c:	1025883a 	mov	r18,r2
  80a370:	d9001217 	ldw	r4,72(sp)
  80a374:	080f6640 	call	80f664 <__floatunsidf>
  80a378:	100f883a 	mov	r7,r2
  80a37c:	e0800015 	stw	r2,0(fp)
  80a380:	00800244 	movi	r2,9
  80a384:	e0c00115 	stw	r3,4(fp)
  80a388:	1480160e 	bge	r2,r18,80a3e4 <_strtod_r+0x450>
  80a38c:	900c90fa 	slli	r6,r18,3
  80a390:	010020b4 	movhi	r4,130
  80a394:	2131b204 	addi	r4,r4,-14648
  80a398:	180b883a 	mov	r5,r3
  80a39c:	310d883a 	add	r6,r6,r4
  80a3a0:	30ffef17 	ldw	r3,-68(r6)
  80a3a4:	30bfee17 	ldw	r2,-72(r6)
  80a3a8:	3809883a 	mov	r4,r7
  80a3ac:	180f883a 	mov	r7,r3
  80a3b0:	100d883a 	mov	r6,r2
  80a3b4:	080ead40 	call	80ead4 <__muldf3>
  80a3b8:	d9001117 	ldw	r4,68(sp)
  80a3bc:	1021883a 	mov	r16,r2
  80a3c0:	1823883a 	mov	r17,r3
  80a3c4:	080f6640 	call	80f664 <__floatunsidf>
  80a3c8:	880b883a 	mov	r5,r17
  80a3cc:	180f883a 	mov	r7,r3
  80a3d0:	8009883a 	mov	r4,r16
  80a3d4:	100d883a 	mov	r6,r2
  80a3d8:	080ea600 	call	80ea60 <__adddf3>
  80a3dc:	e0c00115 	stw	r3,4(fp)
  80a3e0:	e0800015 	stw	r2,0(fp)
  80a3e4:	d8c01817 	ldw	r3,96(sp)
  80a3e8:	010003c4 	movi	r4,15
  80a3ec:	20c09e16 	blt	r4,r3,80a668 <_strtod_r+0x6d4>
  80a3f0:	d8800f17 	ldw	r2,60(sp)
  80a3f4:	103f7126 	beq	r2,zero,80a1bc <_strtod_r+0x228>
  80a3f8:	0083d90e 	bge	zero,r2,80b360 <_strtod_r+0x13cc>
  80a3fc:	d8c00f17 	ldw	r3,60(sp)
  80a400:	00800584 	movi	r2,22
  80a404:	10c2ca0e 	bge	r2,r3,80af30 <_strtod_r+0xf9c>
  80a408:	d8801817 	ldw	r2,96(sp)
  80a40c:	d8c00f17 	ldw	r3,60(sp)
  80a410:	20a3c83a 	sub	r17,r4,r2
  80a414:	88800584 	addi	r2,r17,22
  80a418:	10c09316 	blt	r2,r3,80a668 <_strtod_r+0x6d4>
  80a41c:	880890fa 	slli	r4,r17,3
  80a420:	040020b4 	movhi	r16,130
  80a424:	8431b204 	addi	r16,r16,-14648
  80a428:	e0800017 	ldw	r2,0(fp)
  80a42c:	2409883a 	add	r4,r4,r16
  80a430:	22000017 	ldw	r8,0(r4)
  80a434:	22400117 	ldw	r9,4(r4)
  80a438:	e0c00117 	ldw	r3,4(fp)
  80a43c:	1009883a 	mov	r4,r2
  80a440:	480f883a 	mov	r7,r9
  80a444:	180b883a 	mov	r5,r3
  80a448:	400d883a 	mov	r6,r8
  80a44c:	080ead40 	call	80ead4 <__muldf3>
  80a450:	d9000f17 	ldw	r4,60(sp)
  80a454:	180b883a 	mov	r5,r3
  80a458:	2455c83a 	sub	r10,r4,r17
  80a45c:	501490fa 	slli	r10,r10,3
  80a460:	1009883a 	mov	r4,r2
  80a464:	5415883a 	add	r10,r10,r16
  80a468:	52000017 	ldw	r8,0(r10)
  80a46c:	52400117 	ldw	r9,4(r10)
  80a470:	0002b906 	br	80af58 <_strtod_r+0xfc4>
  80a474:	80c00047 	ldb	r3,1(r16)
  80a478:	00801604 	movi	r2,88
  80a47c:	18805226 	beq	r3,r2,80a5c8 <_strtod_r+0x634>
  80a480:	00801e04 	movi	r2,120
  80a484:	18805026 	beq	r3,r2,80a5c8 <_strtod_r+0x634>
  80a488:	84000044 	addi	r16,r16,1
  80a48c:	dc000415 	stw	r16,16(sp)
  80a490:	80c00007 	ldb	r3,0(r16)
  80a494:	00800c04 	movi	r2,48
  80a498:	18bffb26 	beq	r3,r2,80a488 <_strtod_r+0x4f4>
  80a49c:	183f4726 	beq	r3,zero,80a1bc <_strtod_r+0x228>
  80a4a0:	01000044 	movi	r4,1
  80a4a4:	d9001615 	stw	r4,88(sp)
  80a4a8:	003f0a06 	br	80a0d4 <_strtod_r+0x140>
  80a4ac:	84000044 	addi	r16,r16,1
  80a4b0:	dc000415 	stw	r16,16(sp)
  80a4b4:	94400047 	ldb	r17,1(r18)
  80a4b8:	9800ba26 	beq	r19,zero,80a7a4 <_strtod_r+0x810>
  80a4bc:	dcc01815 	stw	r19,96(sp)
  80a4c0:	d8001715 	stw	zero,92(sp)
  80a4c4:	000d883a 	mov	r6,zero
  80a4c8:	8dbff404 	addi	r22,r17,-48
  80a4cc:	00800244 	movi	r2,9
  80a4d0:	15826e2e 	bgeu	r2,r22,80ae8c <_strtod_r+0xef8>
  80a4d4:	01000044 	movi	r4,1
  80a4d8:	d9001b15 	stw	r4,108(sp)
  80a4dc:	003f2e06 	br	80a198 <_strtod_r+0x204>
  80a4e0:	d8c01617 	ldw	r3,88(sp)
  80a4e4:	1804c03a 	cmpne	r2,r3,zero
  80a4e8:	103f341e 	bne	r2,zero,80a1bc <_strtod_r+0x228>
  80a4ec:	d9001b17 	ldw	r4,108(sp)
  80a4f0:	2004c03a 	cmpne	r2,r4,zero
  80a4f4:	103f521e 	bne	r2,zero,80a240 <_strtod_r+0x2ac>
  80a4f8:	00801384 	movi	r2,78
  80a4fc:	8883b526 	beq	r17,r2,80b3d4 <_strtod_r+0x1440>
  80a500:	1443b016 	blt	r2,r17,80b3c4 <_strtod_r+0x1430>
  80a504:	00801244 	movi	r2,73
  80a508:	88bf4d1e 	bne	r17,r2,80a240 <_strtod_r+0x2ac>
  80a50c:	dc000404 	addi	r16,sp,16
  80a510:	8009883a 	mov	r4,r16
  80a514:	014020b4 	movhi	r5,130
  80a518:	2971fb04 	addi	r5,r5,-14356
  80a51c:	0809f4c0 	call	809f4c <match>
  80a520:	103f4726 	beq	r2,zero,80a240 <_strtod_r+0x2ac>
  80a524:	d8800417 	ldw	r2,16(sp)
  80a528:	8009883a 	mov	r4,r16
  80a52c:	014020b4 	movhi	r5,130
  80a530:	2971fc04 	addi	r5,r5,-14352
  80a534:	143fffc4 	addi	r16,r2,-1
  80a538:	dc000415 	stw	r16,16(sp)
  80a53c:	0809f4c0 	call	809f4c <match>
  80a540:	1000031e 	bne	r2,zero,80a550 <_strtod_r+0x5bc>
  80a544:	d8800417 	ldw	r2,16(sp)
  80a548:	14000044 	addi	r16,r2,1
  80a54c:	dc000415 	stw	r16,16(sp)
  80a550:	019ffc34 	movhi	r6,32752
  80a554:	e1800115 	stw	r6,4(fp)
  80a558:	e0000015 	stw	zero,0(fp)
  80a55c:	003f1706 	br	80a1bc <_strtod_r+0x228>
  80a560:	9829883a 	mov	r20,r19
  80a564:	003f7e06 	br	80a360 <_strtod_r+0x3cc>
  80a568:	d8001515 	stw	zero,84(sp)
  80a56c:	84000044 	addi	r16,r16,1
  80a570:	dc000415 	stw	r16,16(sp)
  80a574:	80800007 	ldb	r2,0(r16)
  80a578:	103ed21e 	bne	r2,zero,80a0c4 <_strtod_r+0x130>
  80a57c:	d8001515 	stw	zero,84(sp)
  80a580:	dd000415 	stw	r20,16(sp)
  80a584:	003f0d06 	br	80a1bc <_strtod_r+0x228>
  80a588:	84000044 	addi	r16,r16,1
  80a58c:	dc000415 	stw	r16,16(sp)
  80a590:	003e9206 	br	809fdc <_strtod_r+0x48>
  80a594:	00800044 	movi	r2,1
  80a598:	d8801515 	stw	r2,84(sp)
  80a59c:	003ff306 	br	80a56c <_strtod_r+0x5d8>
  80a5a0:	d8001915 	stw	zero,100(sp)
  80a5a4:	84000044 	addi	r16,r16,1
  80a5a8:	dc000415 	stw	r16,16(sp)
  80a5ac:	24400047 	ldb	r17,1(r4)
  80a5b0:	00800244 	movi	r2,9
  80a5b4:	88fff404 	addi	r3,r17,-48
  80a5b8:	10ff352e 	bgeu	r2,r3,80a290 <_strtod_r+0x2fc>
  80a5bc:	0009883a 	mov	r4,zero
  80a5c0:	dd000415 	stw	r20,16(sp)
  80a5c4:	003efb06 	br	80a1b4 <_strtod_r+0x220>
  80a5c8:	d8c01517 	ldw	r3,84(sp)
  80a5cc:	044020b4 	movhi	r17,130
  80a5d0:	8c74bf04 	addi	r17,r17,-11524
  80a5d4:	d8800504 	addi	r2,sp,20
  80a5d8:	a809883a 	mov	r4,r21
  80a5dc:	d9400404 	addi	r5,sp,16
  80a5e0:	880d883a 	mov	r6,r17
  80a5e4:	d9c00604 	addi	r7,sp,24
  80a5e8:	d8800015 	stw	r2,0(sp)
  80a5ec:	d8c00115 	stw	r3,4(sp)
  80a5f0:	080c9e40 	call	80c9e4 <__gethex>
  80a5f4:	140001cc 	andi	r16,r2,7
  80a5f8:	1025883a 	mov	r18,r2
  80a5fc:	803eef26 	beq	r16,zero,80a1bc <_strtod_r+0x228>
  80a600:	04c00184 	movi	r19,6
  80a604:	84ff0e26 	beq	r16,r19,80a240 <_strtod_r+0x2ac>
  80a608:	d9800517 	ldw	r6,20(sp)
  80a60c:	30000626 	beq	r6,zero,80a628 <_strtod_r+0x694>
  80a610:	89400017 	ldw	r5,0(r17)
  80a614:	d9000d04 	addi	r4,sp,52
  80a618:	08086600 	call	808660 <__copybits>
  80a61c:	d9400517 	ldw	r5,20(sp)
  80a620:	a809883a 	mov	r4,r21
  80a624:	08081c00 	call	8081c0 <_Bfree>
  80a628:	d9400617 	ldw	r5,24(sp)
  80a62c:	9c025436 	bltu	r19,r16,80af80 <_strtod_r+0xfec>
  80a630:	8405883a 	add	r2,r16,r16
  80a634:	1085883a 	add	r2,r2,r2
  80a638:	00c02074 	movhi	r3,129
  80a63c:	18e99304 	addi	r3,r3,-22964
  80a640:	10c5883a 	add	r2,r2,r3
  80a644:	11000017 	ldw	r4,0(r2)
  80a648:	2000683a 	jmp	r4
  80a64c:	0080afc0 	call	80afc <OSCtxSw_SWITCH_PC+0x80abc>
  80a650:	0080afcc 	andi	r2,zero,703
  80a654:	0080af70 	cmpltui	r2,zero,701
  80a658:	0080af98 	cmpnei	r2,zero,702
  80a65c:	0080afa8 	cmpgeui	r2,zero,702
  80a660:	0080afcc 	andi	r2,zero,703
  80a664:	0080afc0 	call	80afc <OSCtxSw_SWITCH_PC+0x80abc>
  80a668:	d9001817 	ldw	r4,96(sp)
  80a66c:	d8c00f17 	ldw	r3,60(sp)
  80a670:	2485c83a 	sub	r2,r4,r18
  80a674:	18a1883a 	add	r16,r3,r2
  80a678:	0402e80e 	bge	zero,r16,80b21c <_strtod_r+0x1288>
  80a67c:	814003cc 	andi	r5,r16,15
  80a680:	28000f26 	beq	r5,zero,80a6c0 <_strtod_r+0x72c>
  80a684:	280a90fa 	slli	r5,r5,3
  80a688:	010020b4 	movhi	r4,130
  80a68c:	2131b204 	addi	r4,r4,-14648
  80a690:	e0800017 	ldw	r2,0(fp)
  80a694:	290b883a 	add	r5,r5,r4
  80a698:	2a000017 	ldw	r8,0(r5)
  80a69c:	e0c00117 	ldw	r3,4(fp)
  80a6a0:	2a400117 	ldw	r9,4(r5)
  80a6a4:	1009883a 	mov	r4,r2
  80a6a8:	180b883a 	mov	r5,r3
  80a6ac:	480f883a 	mov	r7,r9
  80a6b0:	400d883a 	mov	r6,r8
  80a6b4:	080ead40 	call	80ead4 <__muldf3>
  80a6b8:	e0c00115 	stw	r3,4(fp)
  80a6bc:	e0800015 	stw	r2,0(fp)
  80a6c0:	00bffc04 	movi	r2,-16
  80a6c4:	808c703a 	and	r6,r16,r2
  80a6c8:	30006726 	beq	r6,zero,80a868 <_strtod_r+0x8d4>
  80a6cc:	00804d04 	movi	r2,308
  80a6d0:	11820f16 	blt	r2,r6,80af10 <_strtod_r+0xf7c>
  80a6d4:	3021d13a 	srai	r16,r6,4
  80a6d8:	00800044 	movi	r2,1
  80a6dc:	14037f0e 	bge	r2,r16,80b4dc <_strtod_r+0x1548>
  80a6e0:	058020b4 	movhi	r22,130
  80a6e4:	b5b1e404 	addi	r22,r22,-14448
  80a6e8:	1027883a 	mov	r19,r2
  80a6ec:	0025883a 	mov	r18,zero
  80a6f0:	b023883a 	mov	r17,r22
  80a6f4:	8080004c 	andi	r2,r16,1
  80a6f8:	1005003a 	cmpeq	r2,r2,zero
  80a6fc:	1000091e 	bne	r2,zero,80a724 <_strtod_r+0x790>
  80a700:	e0800017 	ldw	r2,0(fp)
  80a704:	e0c00117 	ldw	r3,4(fp)
  80a708:	89800017 	ldw	r6,0(r17)
  80a70c:	89c00117 	ldw	r7,4(r17)
  80a710:	180b883a 	mov	r5,r3
  80a714:	1009883a 	mov	r4,r2
  80a718:	080ead40 	call	80ead4 <__muldf3>
  80a71c:	e0c00115 	stw	r3,4(fp)
  80a720:	e0800015 	stw	r2,0(fp)
  80a724:	8021d07a 	srai	r16,r16,1
  80a728:	94800044 	addi	r18,r18,1
  80a72c:	8c400204 	addi	r17,r17,8
  80a730:	9c3ff016 	blt	r19,r16,80a6f4 <_strtod_r+0x760>
  80a734:	900e90fa 	slli	r7,r18,3
  80a738:	e2000117 	ldw	r8,4(fp)
  80a73c:	e1000017 	ldw	r4,0(fp)
  80a740:	3d8f883a 	add	r7,r7,r22
  80a744:	38800017 	ldw	r2,0(r7)
  80a748:	38c00117 	ldw	r3,4(r7)
  80a74c:	01bf2c34 	movhi	r6,64688
  80a750:	418d883a 	add	r6,r8,r6
  80a754:	300b883a 	mov	r5,r6
  80a758:	180f883a 	mov	r7,r3
  80a75c:	100d883a 	mov	r6,r2
  80a760:	080ead40 	call	80ead4 <__muldf3>
  80a764:	1009883a 	mov	r4,r2
  80a768:	180b883a 	mov	r5,r3
  80a76c:	199ffc2c 	andhi	r6,r3,32752
  80a770:	009f2834 	movhi	r2,31904
  80a774:	e1000015 	stw	r4,0(fp)
  80a778:	e1400115 	stw	r5,4(fp)
  80a77c:	1181e436 	bltu	r2,r6,80af10 <_strtod_r+0xf7c>
  80a780:	009f2434 	movhi	r2,31888
  80a784:	11833f2e 	bgeu	r2,r6,80b484 <_strtod_r+0x14f0>
  80a788:	d8001c15 	stw	zero,112(sp)
  80a78c:	019ffc34 	movhi	r6,32752
  80a790:	31bfffc4 	addi	r6,r6,-1
  80a794:	01ffffc4 	movi	r7,-1
  80a798:	e1800115 	stw	r6,4(fp)
  80a79c:	e1c00015 	stw	r7,0(fp)
  80a7a0:	00003206 	br	80a86c <_strtod_r+0x8d8>
  80a7a4:	00800c04 	movi	r2,48
  80a7a8:	8883221e 	bne	r17,r2,80b434 <_strtod_r+0x14a0>
  80a7ac:	8805883a 	mov	r2,r17
  80a7b0:	000d883a 	mov	r6,zero
  80a7b4:	84000044 	addi	r16,r16,1
  80a7b8:	dc000415 	stw	r16,16(sp)
  80a7bc:	84400007 	ldb	r17,0(r16)
  80a7c0:	31800044 	addi	r6,r6,1
  80a7c4:	88bffb26 	beq	r17,r2,80a7b4 <_strtod_r+0x820>
  80a7c8:	88fff3c4 	addi	r3,r17,-49
  80a7cc:	00800204 	movi	r2,8
  80a7d0:	10c1ca36 	bltu	r2,r3,80aefc <_strtod_r+0xf68>
  80a7d4:	d8c00417 	ldw	r3,16(sp)
  80a7d8:	d9801715 	stw	r6,92(sp)
  80a7dc:	8dbff404 	addi	r22,r17,-48
  80a7e0:	d8c01415 	stw	r3,80(sp)
  80a7e4:	1821883a 	mov	r16,r3
  80a7e8:	d8001815 	stw	zero,96(sp)
  80a7ec:	01800044 	movi	r6,1
  80a7f0:	b0023526 	beq	r22,zero,80b0c8 <_strtod_r+0x1134>
  80a7f4:	d9001717 	ldw	r4,92(sp)
  80a7f8:	00800044 	movi	r2,1
  80a7fc:	2189883a 	add	r4,r4,r6
  80a800:	d9001715 	stw	r4,92(sp)
  80a804:	1183390e 	bge	r2,r6,80b4ec <_strtod_r+0x1558>
  80a808:	dc401817 	ldw	r17,96(sp)
  80a80c:	1025883a 	mov	r18,r2
  80a810:	05c00204 	movi	r23,8
  80a814:	00000806 	br	80a838 <_strtod_r+0x8a4>
  80a818:	d9001217 	ldw	r4,72(sp)
  80a81c:	01400284 	movi	r5,10
  80a820:	d9802015 	stw	r6,128(sp)
  80a824:	080f9440 	call	80f944 <__mulsi3>
  80a828:	d9802017 	ldw	r6,128(sp)
  80a82c:	d8801215 	stw	r2,72(sp)
  80a830:	94800044 	addi	r18,r18,1
  80a834:	91821726 	beq	r18,r6,80b094 <_strtod_r+0x1100>
  80a838:	8c400044 	addi	r17,r17,1
  80a83c:	88bfffc4 	addi	r2,r17,-1
  80a840:	b8bff50e 	bge	r23,r2,80a818 <_strtod_r+0x884>
  80a844:	00800404 	movi	r2,16
  80a848:	147ff916 	blt	r2,r17,80a830 <_strtod_r+0x89c>
  80a84c:	d9001117 	ldw	r4,68(sp)
  80a850:	01400284 	movi	r5,10
  80a854:	d9802015 	stw	r6,128(sp)
  80a858:	080f9440 	call	80f944 <__mulsi3>
  80a85c:	d9802017 	ldw	r6,128(sp)
  80a860:	d8801115 	stw	r2,68(sp)
  80a864:	003ff206 	br	80a830 <_strtod_r+0x89c>
  80a868:	d8001c15 	stw	zero,112(sp)
  80a86c:	d8c01217 	ldw	r3,72(sp)
  80a870:	d9401417 	ldw	r5,80(sp)
  80a874:	d9c01817 	ldw	r7,96(sp)
  80a878:	a809883a 	mov	r4,r21
  80a87c:	a00d883a 	mov	r6,r20
  80a880:	d8c00015 	stw	r3,0(sp)
  80a884:	080912c0 	call	80912c <__s2b>
  80a888:	11000304 	addi	r4,r2,12
  80a88c:	d8801015 	stw	r2,64(sp)
  80a890:	d8800f17 	ldw	r2,60(sp)
  80a894:	d9001f15 	stw	r4,124(sp)
  80a898:	1004803a 	cmplt	r2,r2,zero
  80a89c:	d8801e15 	stw	r2,120(sp)
  80a8a0:	d8c01017 	ldw	r3,64(sp)
  80a8a4:	a809883a 	mov	r4,r21
  80a8a8:	19400117 	ldw	r5,4(r3)
  80a8ac:	08087400 	call	808740 <_Balloc>
  80a8b0:	d9001017 	ldw	r4,64(sp)
  80a8b4:	d9401f17 	ldw	r5,124(sp)
  80a8b8:	102f883a 	mov	r23,r2
  80a8bc:	21800417 	ldw	r6,16(r4)
  80a8c0:	11000304 	addi	r4,r2,12
  80a8c4:	318d883a 	add	r6,r6,r6
  80a8c8:	318d883a 	add	r6,r6,r6
  80a8cc:	31800204 	addi	r6,r6,8
  80a8d0:	0807fa80 	call	807fa8 <memcpy>
  80a8d4:	e2000017 	ldw	r8,0(fp)
  80a8d8:	e2400117 	ldw	r9,4(fp)
  80a8dc:	a809883a 	mov	r4,r21
  80a8e0:	400b883a 	mov	r5,r8
  80a8e4:	d9c00204 	addi	r7,sp,8
  80a8e8:	d8800304 	addi	r2,sp,12
  80a8ec:	480d883a 	mov	r6,r9
  80a8f0:	d8800015 	stw	r2,0(sp)
  80a8f4:	08087fc0 	call	8087fc <__d2b>
  80a8f8:	a809883a 	mov	r4,r21
  80a8fc:	01400044 	movi	r5,1
  80a900:	d8800515 	stw	r2,20(sp)
  80a904:	0808ea40 	call	808ea4 <__i2b>
  80a908:	d8c01e17 	ldw	r3,120(sp)
  80a90c:	102d883a 	mov	r22,r2
  80a910:	1801091e 	bne	r3,zero,80ad38 <_strtod_r+0xda4>
  80a914:	dd000f17 	ldw	r20,60(sp)
  80a918:	000f883a 	mov	r7,zero
  80a91c:	0013883a 	mov	r9,zero
  80a920:	a011883a 	mov	r8,r20
  80a924:	d8800217 	ldw	r2,8(sp)
  80a928:	10010116 	blt	r2,zero,80ad30 <_strtod_r+0xd9c>
  80a92c:	388f883a 	add	r7,r7,r2
  80a930:	d8c01c17 	ldw	r3,112(sp)
  80a934:	d9400317 	ldw	r5,12(sp)
  80a938:	10c9c83a 	sub	r4,r2,r3
  80a93c:	2145883a 	add	r2,r4,r5
  80a940:	10bfffc4 	addi	r2,r2,-1
  80a944:	00ff0084 	movi	r3,-1022
  80a948:	10c09f0e 	bge	r2,r3,80abc8 <_strtod_r+0xc34>
  80a94c:	21810cc4 	addi	r6,r4,1075
  80a950:	d9001c17 	ldw	r4,112(sp)
  80a954:	4185883a 	add	r2,r8,r6
  80a958:	39a1883a 	add	r16,r7,r6
  80a95c:	20a5883a 	add	r18,r4,r2
  80a960:	3807883a 	mov	r3,r7
  80a964:	81c0010e 	bge	r16,r7,80a96c <_strtod_r+0x9d8>
  80a968:	8007883a 	mov	r3,r16
  80a96c:	9005883a 	mov	r2,r18
  80a970:	1c80010e 	bge	r3,r18,80a978 <_strtod_r+0x9e4>
  80a974:	1805883a 	mov	r2,r3
  80a978:	0080eb0e 	bge	zero,r2,80ad28 <_strtod_r+0xd94>
  80a97c:	38a7c83a 	sub	r19,r7,r2
  80a980:	80a1c83a 	sub	r16,r16,r2
  80a984:	90a5c83a 	sub	r18,r18,r2
  80a988:	02400e0e 	bge	zero,r9,80a9c4 <_strtod_r+0xa30>
  80a98c:	480d883a 	mov	r6,r9
  80a990:	b00b883a 	mov	r5,r22
  80a994:	a809883a 	mov	r4,r21
  80a998:	080900c0 	call	80900c <__pow5mult>
  80a99c:	d9800517 	ldw	r6,20(sp)
  80a9a0:	a809883a 	mov	r4,r21
  80a9a4:	100b883a 	mov	r5,r2
  80a9a8:	102d883a 	mov	r22,r2
  80a9ac:	0808c500 	call	808c50 <__multiply>
  80a9b0:	d9400517 	ldw	r5,20(sp)
  80a9b4:	1023883a 	mov	r17,r2
  80a9b8:	a809883a 	mov	r4,r21
  80a9bc:	08081c00 	call	8081c0 <_Bfree>
  80a9c0:	dc400515 	stw	r17,20(sp)
  80a9c4:	0400050e 	bge	zero,r16,80a9dc <_strtod_r+0xa48>
  80a9c8:	d9400517 	ldw	r5,20(sp)
  80a9cc:	800d883a 	mov	r6,r16
  80a9d0:	a809883a 	mov	r4,r21
  80a9d4:	0808b040 	call	808b04 <__lshift>
  80a9d8:	d8800515 	stw	r2,20(sp)
  80a9dc:	a000741e 	bne	r20,zero,80abb0 <_strtod_r+0xc1c>
  80a9e0:	0480050e 	bge	zero,r18,80a9f8 <_strtod_r+0xa64>
  80a9e4:	b80b883a 	mov	r5,r23
  80a9e8:	900d883a 	mov	r6,r18
  80a9ec:	a809883a 	mov	r4,r21
  80a9f0:	0808b040 	call	808b04 <__lshift>
  80a9f4:	102f883a 	mov	r23,r2
  80a9f8:	04c0050e 	bge	zero,r19,80aa10 <_strtod_r+0xa7c>
  80a9fc:	b00b883a 	mov	r5,r22
  80aa00:	980d883a 	mov	r6,r19
  80aa04:	a809883a 	mov	r4,r21
  80aa08:	0808b040 	call	808b04 <__lshift>
  80aa0c:	102d883a 	mov	r22,r2
  80aa10:	d9400517 	ldw	r5,20(sp)
  80aa14:	a809883a 	mov	r4,r21
  80aa18:	b80d883a 	mov	r6,r23
  80aa1c:	08089780 	call	808978 <__mdiff>
  80aa20:	1029883a 	mov	r20,r2
  80aa24:	10800317 	ldw	r2,12(r2)
  80aa28:	a009883a 	mov	r4,r20
  80aa2c:	a0000315 	stw	zero,12(r20)
  80aa30:	b00b883a 	mov	r5,r22
  80aa34:	d8801a15 	stw	r2,104(sp)
  80aa38:	080831c0 	call	80831c <__mcmp>
  80aa3c:	1001a616 	blt	r2,zero,80b0d8 <_strtod_r+0x1144>
  80aa40:	10016d26 	beq	r2,zero,80aff8 <_strtod_r+0x1064>
  80aa44:	a009883a 	mov	r4,r20
  80aa48:	b00b883a 	mov	r5,r22
  80aa4c:	080851c0 	call	80851c <__ratio>
  80aa50:	0011883a 	mov	r8,zero
  80aa54:	02500034 	movhi	r9,16384
  80aa58:	480f883a 	mov	r7,r9
  80aa5c:	1009883a 	mov	r4,r2
  80aa60:	180b883a 	mov	r5,r3
  80aa64:	400d883a 	mov	r6,r8
  80aa68:	1021883a 	mov	r16,r2
  80aa6c:	1823883a 	mov	r17,r3
  80aa70:	080f3980 	call	80f398 <__ledf2>
  80aa74:	00805716 	blt	zero,r2,80abd4 <_strtod_r+0xc40>
  80aa78:	d8801a17 	ldw	r2,104(sp)
  80aa7c:	1025003a 	cmpeq	r18,r2,zero
  80aa80:	90008c1e 	bne	r18,zero,80acb4 <_strtod_r+0xd20>
  80aa84:	008ffc34 	movhi	r2,16368
  80aa88:	0021883a 	mov	r16,zero
  80aa8c:	1023883a 	mov	r17,r2
  80aa90:	d8000715 	stw	zero,28(sp)
  80aa94:	d8800815 	stw	r2,32(sp)
  80aa98:	e1c00117 	ldw	r7,4(fp)
  80aa9c:	009ff834 	movhi	r2,32736
  80aaa0:	3cdffc2c 	andhi	r19,r7,32752
  80aaa4:	98805f26 	beq	r19,r2,80ac24 <_strtod_r+0xc90>
  80aaa8:	d8c01c17 	ldw	r3,112(sp)
  80aaac:	18001b26 	beq	r3,zero,80ab1c <_strtod_r+0xb88>
  80aab0:	0081a834 	movhi	r2,1696
  80aab4:	14c01936 	bltu	r2,r19,80ab1c <_strtod_r+0xb88>
  80aab8:	00bff034 	movhi	r2,65472
  80aabc:	00d07834 	movhi	r3,16864
  80aac0:	18ffffc4 	addi	r3,r3,-1
  80aac4:	180f883a 	mov	r7,r3
  80aac8:	8009883a 	mov	r4,r16
  80aacc:	880b883a 	mov	r5,r17
  80aad0:	100d883a 	mov	r6,r2
  80aad4:	080f3980 	call	80f398 <__ledf2>
  80aad8:	00800b16 	blt	zero,r2,80ab08 <_strtod_r+0xb74>
  80aadc:	880b883a 	mov	r5,r17
  80aae0:	8009883a 	mov	r4,r16
  80aae4:	080d6f80 	call	80d6f8 <__fixunsdfsi>
  80aae8:	1000e31e 	bne	r2,zero,80ae78 <_strtod_r+0xee4>
  80aaec:	0021883a 	mov	r16,zero
  80aaf0:	044ffc34 	movhi	r17,16368
  80aaf4:	9000dd1e 	bne	r18,zero,80ae6c <_strtod_r+0xed8>
  80aaf8:	8005883a 	mov	r2,r16
  80aafc:	8807883a 	mov	r3,r17
  80ab00:	d8c00815 	stw	r3,32(sp)
  80ab04:	d8800715 	stw	r2,28(sp)
  80ab08:	d8800817 	ldw	r2,32(sp)
  80ab0c:	00c1ac34 	movhi	r3,1712
  80ab10:	14c5c83a 	sub	r2,r2,r19
  80ab14:	10c5883a 	add	r2,r2,r3
  80ab18:	d8800815 	stw	r2,32(sp)
  80ab1c:	e0800017 	ldw	r2,0(fp)
  80ab20:	e0c00117 	ldw	r3,4(fp)
  80ab24:	1009883a 	mov	r4,r2
  80ab28:	180b883a 	mov	r5,r3
  80ab2c:	080837c0 	call	80837c <__ulp>
  80ab30:	d9800717 	ldw	r6,28(sp)
  80ab34:	d9c00817 	ldw	r7,32(sp)
  80ab38:	180b883a 	mov	r5,r3
  80ab3c:	1009883a 	mov	r4,r2
  80ab40:	080ead40 	call	80ead4 <__muldf3>
  80ab44:	e2000017 	ldw	r8,0(fp)
  80ab48:	e2400117 	ldw	r9,4(fp)
  80ab4c:	180b883a 	mov	r5,r3
  80ab50:	1009883a 	mov	r4,r2
  80ab54:	480f883a 	mov	r7,r9
  80ab58:	400d883a 	mov	r6,r8
  80ab5c:	080ea600 	call	80ea60 <__adddf3>
  80ab60:	e0c00115 	stw	r3,4(fp)
  80ab64:	e0800015 	stw	r2,0(fp)
  80ab68:	d9001c17 	ldw	r4,112(sp)
  80ab6c:	e4800117 	ldw	r18,4(fp)
  80ab70:	2000021e 	bne	r4,zero,80ab7c <_strtod_r+0xbe8>
  80ab74:	909ffc2c 	andhi	r2,r18,32752
  80ab78:	98807f26 	beq	r19,r2,80ad78 <_strtod_r+0xde4>
  80ab7c:	d9400517 	ldw	r5,20(sp)
  80ab80:	a809883a 	mov	r4,r21
  80ab84:	08081c00 	call	8081c0 <_Bfree>
  80ab88:	a809883a 	mov	r4,r21
  80ab8c:	b80b883a 	mov	r5,r23
  80ab90:	08081c00 	call	8081c0 <_Bfree>
  80ab94:	a809883a 	mov	r4,r21
  80ab98:	b00b883a 	mov	r5,r22
  80ab9c:	08081c00 	call	8081c0 <_Bfree>
  80aba0:	a809883a 	mov	r4,r21
  80aba4:	a00b883a 	mov	r5,r20
  80aba8:	08081c00 	call	8081c0 <_Bfree>
  80abac:	003f3c06 	br	80a8a0 <_strtod_r+0x90c>
  80abb0:	b80b883a 	mov	r5,r23
  80abb4:	a00d883a 	mov	r6,r20
  80abb8:	a809883a 	mov	r4,r21
  80abbc:	080900c0 	call	80900c <__pow5mult>
  80abc0:	102f883a 	mov	r23,r2
  80abc4:	003f8606 	br	80a9e0 <_strtod_r+0xa4c>
  80abc8:	00800d84 	movi	r2,54
  80abcc:	114dc83a 	sub	r6,r2,r5
  80abd0:	003f5f06 	br	80a950 <_strtod_r+0x9bc>
  80abd4:	0005883a 	mov	r2,zero
  80abd8:	00cff834 	movhi	r3,16352
  80abdc:	8009883a 	mov	r4,r16
  80abe0:	880b883a 	mov	r5,r17
  80abe4:	180f883a 	mov	r7,r3
  80abe8:	100d883a 	mov	r6,r2
  80abec:	080ead40 	call	80ead4 <__muldf3>
  80abf0:	1009883a 	mov	r4,r2
  80abf4:	d8801a17 	ldw	r2,104(sp)
  80abf8:	2021883a 	mov	r16,r4
  80abfc:	1823883a 	mov	r17,r3
  80ac00:	1025003a 	cmpeq	r18,r2,zero
  80ac04:	9000451e 	bne	r18,zero,80ad1c <_strtod_r+0xd88>
  80ac08:	2005883a 	mov	r2,r4
  80ac0c:	d8800715 	stw	r2,28(sp)
  80ac10:	d8c00815 	stw	r3,32(sp)
  80ac14:	e1c00117 	ldw	r7,4(fp)
  80ac18:	009ff834 	movhi	r2,32736
  80ac1c:	3cdffc2c 	andhi	r19,r7,32752
  80ac20:	98bfa11e 	bne	r19,r2,80aaa8 <_strtod_r+0xb14>
  80ac24:	e1000017 	ldw	r4,0(fp)
  80ac28:	01bf2c34 	movhi	r6,64688
  80ac2c:	398d883a 	add	r6,r7,r6
  80ac30:	d9000b15 	stw	r4,44(sp)
  80ac34:	d9c00c15 	stw	r7,48(sp)
  80ac38:	300b883a 	mov	r5,r6
  80ac3c:	e1800115 	stw	r6,4(fp)
  80ac40:	080837c0 	call	80837c <__ulp>
  80ac44:	d9800717 	ldw	r6,28(sp)
  80ac48:	d9c00817 	ldw	r7,32(sp)
  80ac4c:	180b883a 	mov	r5,r3
  80ac50:	1009883a 	mov	r4,r2
  80ac54:	080ead40 	call	80ead4 <__muldf3>
  80ac58:	e2000017 	ldw	r8,0(fp)
  80ac5c:	e2400117 	ldw	r9,4(fp)
  80ac60:	180b883a 	mov	r5,r3
  80ac64:	1009883a 	mov	r4,r2
  80ac68:	480f883a 	mov	r7,r9
  80ac6c:	400d883a 	mov	r6,r8
  80ac70:	080ea600 	call	80ea60 <__adddf3>
  80ac74:	1009883a 	mov	r4,r2
  80ac78:	180b883a 	mov	r5,r3
  80ac7c:	009f2834 	movhi	r2,31904
  80ac80:	10bfffc4 	addi	r2,r2,-1
  80ac84:	18dffc2c 	andhi	r3,r3,32752
  80ac88:	e1000015 	stw	r4,0(fp)
  80ac8c:	e1400115 	stw	r5,4(fp)
  80ac90:	10c0722e 	bgeu	r2,r3,80ae5c <_strtod_r+0xec8>
  80ac94:	d8800c17 	ldw	r2,48(sp)
  80ac98:	011ffc34 	movhi	r4,32752
  80ac9c:	213fffc4 	addi	r4,r4,-1
  80aca0:	11007d26 	beq	r2,r4,80ae98 <_strtod_r+0xf04>
  80aca4:	01ffffc4 	movi	r7,-1
  80aca8:	e1000115 	stw	r4,4(fp)
  80acac:	e1c00015 	stw	r7,0(fp)
  80acb0:	003fb206 	br	80ab7c <_strtod_r+0xbe8>
  80acb4:	e0c00017 	ldw	r3,0(fp)
  80acb8:	1800251e 	bne	r3,zero,80ad50 <_strtod_r+0xdbc>
  80acbc:	e0800117 	ldw	r2,4(fp)
  80acc0:	00c00434 	movhi	r3,16
  80acc4:	18ffffc4 	addi	r3,r3,-1
  80acc8:	10c4703a 	and	r2,r2,r3
  80accc:	1000241e 	bne	r2,zero,80ad60 <_strtod_r+0xdcc>
  80acd0:	0005883a 	mov	r2,zero
  80acd4:	00cffc34 	movhi	r3,16368
  80acd8:	180f883a 	mov	r7,r3
  80acdc:	8009883a 	mov	r4,r16
  80ace0:	880b883a 	mov	r5,r17
  80ace4:	100d883a 	mov	r6,r2
  80ace8:	080f3100 	call	80f310 <__ltdf2>
  80acec:	10014616 	blt	r2,zero,80b208 <_strtod_r+0x1274>
  80acf0:	0005883a 	mov	r2,zero
  80acf4:	00cff834 	movhi	r3,16352
  80acf8:	880b883a 	mov	r5,r17
  80acfc:	8009883a 	mov	r4,r16
  80ad00:	180f883a 	mov	r7,r3
  80ad04:	100d883a 	mov	r6,r2
  80ad08:	080ead40 	call	80ead4 <__muldf3>
  80ad0c:	1823883a 	mov	r17,r3
  80ad10:	1021883a 	mov	r16,r2
  80ad14:	18e0003c 	xorhi	r3,r3,32768
  80ad18:	003fbc06 	br	80ac0c <_strtod_r+0xc78>
  80ad1c:	2005883a 	mov	r2,r4
  80ad20:	18e0003c 	xorhi	r3,r3,32768
  80ad24:	003fb906 	br	80ac0c <_strtod_r+0xc78>
  80ad28:	3827883a 	mov	r19,r7
  80ad2c:	003f1606 	br	80a988 <_strtod_r+0x9f4>
  80ad30:	4091c83a 	sub	r8,r8,r2
  80ad34:	003efe06 	br	80a930 <_strtod_r+0x99c>
  80ad38:	d9000f17 	ldw	r4,60(sp)
  80ad3c:	0011883a 	mov	r8,zero
  80ad40:	0029883a 	mov	r20,zero
  80ad44:	0113c83a 	sub	r9,zero,r4
  80ad48:	480f883a 	mov	r7,r9
  80ad4c:	003ef506 	br	80a924 <_strtod_r+0x990>
  80ad50:	00800044 	movi	r2,1
  80ad54:	1880021e 	bne	r3,r2,80ad60 <_strtod_r+0xdcc>
  80ad58:	e0800117 	ldw	r2,4(fp)
  80ad5c:	1000c526 	beq	r2,zero,80b074 <_strtod_r+0x10e0>
  80ad60:	00affc34 	movhi	r2,49136
  80ad64:	0021883a 	mov	r16,zero
  80ad68:	044ffc34 	movhi	r17,16368
  80ad6c:	d8800815 	stw	r2,32(sp)
  80ad70:	d8000715 	stw	zero,28(sp)
  80ad74:	003f4806 	br	80aa98 <_strtod_r+0xb04>
  80ad78:	880b883a 	mov	r5,r17
  80ad7c:	8009883a 	mov	r4,r16
  80ad80:	080f5180 	call	80f518 <__fixdfsi>
  80ad84:	1009883a 	mov	r4,r2
  80ad88:	080f4200 	call	80f420 <__floatsidf>
  80ad8c:	880b883a 	mov	r5,r17
  80ad90:	8009883a 	mov	r4,r16
  80ad94:	100d883a 	mov	r6,r2
  80ad98:	180f883a 	mov	r7,r3
  80ad9c:	080e9e00 	call	80e9e0 <__subdf3>
  80ada0:	100b883a 	mov	r5,r2
  80ada4:	1021883a 	mov	r16,r2
  80ada8:	d8801a17 	ldw	r2,104(sp)
  80adac:	180d883a 	mov	r6,r3
  80adb0:	1823883a 	mov	r17,r3
  80adb4:	1000061e 	bne	r2,zero,80add0 <_strtod_r+0xe3c>
  80adb8:	e0800017 	ldw	r2,0(fp)
  80adbc:	1000041e 	bne	r2,zero,80add0 <_strtod_r+0xe3c>
  80adc0:	00c00434 	movhi	r3,16
  80adc4:	18ffffc4 	addi	r3,r3,-1
  80adc8:	90c4703a 	and	r2,r18,r3
  80adcc:	10004026 	beq	r2,zero,80aed0 <_strtod_r+0xf3c>
  80add0:	00a52834 	movhi	r2,38048
  80add4:	108d6544 	addi	r2,r2,13717
  80add8:	00cff834 	movhi	r3,16352
  80addc:	18ffffc4 	addi	r3,r3,-1
  80ade0:	180f883a 	mov	r7,r3
  80ade4:	8009883a 	mov	r4,r16
  80ade8:	880b883a 	mov	r5,r17
  80adec:	100d883a 	mov	r6,r2
  80adf0:	080f3100 	call	80f310 <__ltdf2>
  80adf4:	10000916 	blt	r2,zero,80ae1c <_strtod_r+0xe88>
  80adf8:	008d6c34 	movhi	r2,13744
  80adfc:	10b94d44 	addi	r2,r2,-6859
  80ae00:	00cff834 	movhi	r3,16352
  80ae04:	880b883a 	mov	r5,r17
  80ae08:	180f883a 	mov	r7,r3
  80ae0c:	8009883a 	mov	r4,r16
  80ae10:	100d883a 	mov	r6,r2
  80ae14:	080f2000 	call	80f200 <__gtdf2>
  80ae18:	00bf580e 	bge	zero,r2,80ab7c <_strtod_r+0xbe8>
  80ae1c:	d9400517 	ldw	r5,20(sp)
  80ae20:	a809883a 	mov	r4,r21
  80ae24:	08081c00 	call	8081c0 <_Bfree>
  80ae28:	a809883a 	mov	r4,r21
  80ae2c:	b80b883a 	mov	r5,r23
  80ae30:	08081c00 	call	8081c0 <_Bfree>
  80ae34:	a809883a 	mov	r4,r21
  80ae38:	b00b883a 	mov	r5,r22
  80ae3c:	08081c00 	call	8081c0 <_Bfree>
  80ae40:	d9401017 	ldw	r5,64(sp)
  80ae44:	a809883a 	mov	r4,r21
  80ae48:	08081c00 	call	8081c0 <_Bfree>
  80ae4c:	a809883a 	mov	r4,r21
  80ae50:	a00b883a 	mov	r5,r20
  80ae54:	08081c00 	call	8081c0 <_Bfree>
  80ae58:	003cd806 	br	80a1bc <_strtod_r+0x228>
  80ae5c:	0080d434 	movhi	r2,848
  80ae60:	288d883a 	add	r6,r5,r2
  80ae64:	e1800115 	stw	r6,4(fp)
  80ae68:	003f3f06 	br	80ab68 <_strtod_r+0xbd4>
  80ae6c:	8005883a 	mov	r2,r16
  80ae70:	88e0003c 	xorhi	r3,r17,32768
  80ae74:	003f2206 	br	80ab00 <_strtod_r+0xb6c>
  80ae78:	1009883a 	mov	r4,r2
  80ae7c:	080f6640 	call	80f664 <__floatunsidf>
  80ae80:	1021883a 	mov	r16,r2
  80ae84:	1823883a 	mov	r17,r3
  80ae88:	003f1a06 	br	80aaf4 <_strtod_r+0xb60>
  80ae8c:	dc000417 	ldw	r16,16(sp)
  80ae90:	31800044 	addi	r6,r6,1
  80ae94:	003e5606 	br	80a7f0 <_strtod_r+0x85c>
  80ae98:	d8c00b17 	ldw	r3,44(sp)
  80ae9c:	00bfffc4 	movi	r2,-1
  80aea0:	18bf801e 	bne	r3,r2,80aca4 <_strtod_r+0xd10>
  80aea4:	00c00884 	movi	r3,34
  80aea8:	a8c00015 	stw	r3,0(r21)
  80aeac:	009ffc34 	movhi	r2,32752
  80aeb0:	e0800115 	stw	r2,4(fp)
  80aeb4:	e0000015 	stw	zero,0(fp)
  80aeb8:	003fd806 	br	80ae1c <_strtod_r+0xe88>
  80aebc:	8025883a 	mov	r18,r16
  80aec0:	0027883a 	mov	r19,zero
  80aec4:	d8001215 	stw	zero,72(sp)
  80aec8:	d8001115 	stw	zero,68(sp)
  80aecc:	003cac06 	br	80a180 <_strtod_r+0x1ec>
  80aed0:	00a52834 	movhi	r2,38048
  80aed4:	108d6544 	addi	r2,r2,13717
  80aed8:	00cff434 	movhi	r3,16336
  80aedc:	18ffffc4 	addi	r3,r3,-1
  80aee0:	2809883a 	mov	r4,r5
  80aee4:	180f883a 	mov	r7,r3
  80aee8:	300b883a 	mov	r5,r6
  80aeec:	100d883a 	mov	r6,r2
  80aef0:	080f3100 	call	80f310 <__ltdf2>
  80aef4:	103f210e 	bge	r2,zero,80ab7c <_strtod_r+0xbe8>
  80aef8:	003fc806 	br	80ae1c <_strtod_r+0xe88>
  80aefc:	00800044 	movi	r2,1
  80af00:	d8001815 	stw	zero,96(sp)
  80af04:	d8801b15 	stw	r2,108(sp)
  80af08:	d8001715 	stw	zero,92(sp)
  80af0c:	003ca206 	br	80a198 <_strtod_r+0x204>
  80af10:	00800884 	movi	r2,34
  80af14:	a8800015 	stw	r2,0(r21)
  80af18:	019ffc34 	movhi	r6,32752
  80af1c:	e1800115 	stw	r6,4(fp)
  80af20:	e0000015 	stw	zero,0(fp)
  80af24:	003ca506 	br	80a1bc <_strtod_r+0x228>
  80af28:	011387c4 	movi	r4,19999
  80af2c:	003d0206 	br	80a338 <_strtod_r+0x3a4>
  80af30:	180a90fa 	slli	r5,r3,3
  80af34:	e0800017 	ldw	r2,0(fp)
  80af38:	e0c00117 	ldw	r3,4(fp)
  80af3c:	010020b4 	movhi	r4,130
  80af40:	2131b204 	addi	r4,r4,-14648
  80af44:	290b883a 	add	r5,r5,r4
  80af48:	2a000017 	ldw	r8,0(r5)
  80af4c:	2a400117 	ldw	r9,4(r5)
  80af50:	1009883a 	mov	r4,r2
  80af54:	180b883a 	mov	r5,r3
  80af58:	480f883a 	mov	r7,r9
  80af5c:	400d883a 	mov	r6,r8
  80af60:	080ead40 	call	80ead4 <__muldf3>
  80af64:	e0c00115 	stw	r3,4(fp)
  80af68:	e0800015 	stw	r2,0(fp)
  80af6c:	003c9306 	br	80a1bc <_strtod_r+0x228>
  80af70:	d8800d17 	ldw	r2,52(sp)
  80af74:	e0800015 	stw	r2,0(fp)
  80af78:	d8c00e17 	ldw	r3,56(sp)
  80af7c:	e0c00115 	stw	r3,4(fp)
  80af80:	9080020c 	andi	r2,r18,8
  80af84:	103c8d26 	beq	r2,zero,80a1bc <_strtod_r+0x228>
  80af88:	e0800117 	ldw	r2,4(fp)
  80af8c:	10a00034 	orhi	r2,r2,32768
  80af90:	e0800115 	stw	r2,4(fp)
  80af94:	003c8906 	br	80a1bc <_strtod_r+0x228>
  80af98:	009ffc34 	movhi	r2,32752
  80af9c:	e0800115 	stw	r2,4(fp)
  80afa0:	e0000015 	stw	zero,0(fp)
  80afa4:	003ff606 	br	80af80 <_strtod_r+0xfec>
  80afa8:	00a00034 	movhi	r2,32768
  80afac:	10bfffc4 	addi	r2,r2,-1
  80afb0:	00ffffc4 	movi	r3,-1
  80afb4:	e0800115 	stw	r2,4(fp)
  80afb8:	e0c00015 	stw	r3,0(fp)
  80afbc:	003ff006 	br	80af80 <_strtod_r+0xfec>
  80afc0:	e0000115 	stw	zero,4(fp)
  80afc4:	e0000015 	stw	zero,0(fp)
  80afc8:	003fed06 	br	80af80 <_strtod_r+0xfec>
  80afcc:	d8800e17 	ldw	r2,56(sp)
  80afd0:	29010cc4 	addi	r4,r5,1075
  80afd4:	00fffc34 	movhi	r3,65520
  80afd8:	18ffffc4 	addi	r3,r3,-1
  80afdc:	2008953a 	slli	r4,r4,20
  80afe0:	10c4703a 	and	r2,r2,r3
  80afe4:	d8c00d17 	ldw	r3,52(sp)
  80afe8:	1104b03a 	or	r2,r2,r4
  80afec:	e0800115 	stw	r2,4(fp)
  80aff0:	e0c00015 	stw	r3,0(fp)
  80aff4:	003fe206 	br	80af80 <_strtod_r+0xfec>
  80aff8:	d8c01a17 	ldw	r3,104(sp)
  80affc:	1825003a 	cmpeq	r18,r3,zero
  80b000:	9000cf1e 	bne	r18,zero,80b340 <_strtod_r+0x13ac>
  80b004:	e1400117 	ldw	r5,4(fp)
  80b008:	01000434 	movhi	r4,16
  80b00c:	213fffc4 	addi	r4,r4,-1
  80b010:	2904703a 	and	r2,r5,r4
  80b014:	11006826 	beq	r2,r4,80b1b8 <_strtod_r+0x1224>
  80b018:	e1c00017 	ldw	r7,0(fp)
  80b01c:	3880004c 	andi	r2,r7,1
  80b020:	1005003a 	cmpeq	r2,r2,zero
  80b024:	1000601e 	bne	r2,zero,80b1a8 <_strtod_r+0x1214>
  80b028:	90010426 	beq	r18,zero,80b43c <_strtod_r+0x14a8>
  80b02c:	e4400117 	ldw	r17,4(fp)
  80b030:	3809883a 	mov	r4,r7
  80b034:	3821883a 	mov	r16,r7
  80b038:	880b883a 	mov	r5,r17
  80b03c:	080837c0 	call	80837c <__ulp>
  80b040:	180f883a 	mov	r7,r3
  80b044:	880b883a 	mov	r5,r17
  80b048:	8009883a 	mov	r4,r16
  80b04c:	100d883a 	mov	r6,r2
  80b050:	080e9e00 	call	80e9e0 <__subdf3>
  80b054:	1009883a 	mov	r4,r2
  80b058:	000d883a 	mov	r6,zero
  80b05c:	000f883a 	mov	r7,zero
  80b060:	180b883a 	mov	r5,r3
  80b064:	e0800015 	stw	r2,0(fp)
  80b068:	e0c00115 	stw	r3,4(fp)
  80b06c:	080f1780 	call	80f178 <__nedf2>
  80b070:	10004d1e 	bne	r2,zero,80b1a8 <_strtod_r+0x1214>
  80b074:	00800884 	movi	r2,34
  80b078:	a8800015 	stw	r2,0(r21)
  80b07c:	e0000015 	stw	zero,0(fp)
  80b080:	e0000115 	stw	zero,4(fp)
  80b084:	003f6506 	br	80ae1c <_strtod_r+0xe88>
  80b088:	00800044 	movi	r2,1
  80b08c:	d8801915 	stw	r2,100(sp)
  80b090:	003d4406 	br	80a5a4 <_strtod_r+0x610>
  80b094:	d8c01817 	ldw	r3,96(sp)
  80b098:	1985883a 	add	r2,r3,r6
  80b09c:	11ffffc4 	addi	r7,r2,-1
  80b0a0:	39000044 	addi	r4,r7,1
  80b0a4:	00800204 	movi	r2,8
  80b0a8:	d9001815 	stw	r4,96(sp)
  80b0ac:	11c0d716 	blt	r2,r7,80b40c <_strtod_r+0x1478>
  80b0b0:	d9001217 	ldw	r4,72(sp)
  80b0b4:	01400284 	movi	r5,10
  80b0b8:	080f9440 	call	80f944 <__mulsi3>
  80b0bc:	1585883a 	add	r2,r2,r22
  80b0c0:	d8801215 	stw	r2,72(sp)
  80b0c4:	000d883a 	mov	r6,zero
  80b0c8:	84000044 	addi	r16,r16,1
  80b0cc:	dc000415 	stw	r16,16(sp)
  80b0d0:	84400007 	ldb	r17,0(r16)
  80b0d4:	003cfc06 	br	80a4c8 <_strtod_r+0x534>
  80b0d8:	d8c01a17 	ldw	r3,104(sp)
  80b0dc:	1800321e 	bne	r3,zero,80b1a8 <_strtod_r+0x1214>
  80b0e0:	e0800017 	ldw	r2,0(fp)
  80b0e4:	1000b31e 	bne	r2,zero,80b3b4 <_strtod_r+0x1420>
  80b0e8:	e0c00117 	ldw	r3,4(fp)
  80b0ec:	01000434 	movhi	r4,16
  80b0f0:	213fffc4 	addi	r4,r4,-1
  80b0f4:	1904703a 	and	r2,r3,r4
  80b0f8:	1000e71e 	bne	r2,zero,80b498 <_strtod_r+0x1504>
  80b0fc:	18dffc2c 	andhi	r3,r3,32752
  80b100:	0081ac34 	movhi	r2,1712
  80b104:	10c0282e 	bgeu	r2,r3,80b1a8 <_strtod_r+0x1214>
  80b108:	a0800517 	ldw	r2,20(r20)
  80b10c:	1000031e 	bne	r2,zero,80b11c <_strtod_r+0x1188>
  80b110:	a0c00417 	ldw	r3,16(r20)
  80b114:	00800044 	movi	r2,1
  80b118:	10c0a60e 	bge	r2,r3,80b3b4 <_strtod_r+0x1420>
  80b11c:	a00b883a 	mov	r5,r20
  80b120:	a809883a 	mov	r4,r21
  80b124:	01800044 	movi	r6,1
  80b128:	0808b040 	call	808b04 <__lshift>
  80b12c:	1009883a 	mov	r4,r2
  80b130:	b00b883a 	mov	r5,r22
  80b134:	1029883a 	mov	r20,r2
  80b138:	080831c0 	call	80831c <__mcmp>
  80b13c:	00809d0e 	bge	zero,r2,80b3b4 <_strtod_r+0x1420>
  80b140:	e1800117 	ldw	r6,4(fp)
  80b144:	d9001c17 	ldw	r4,112(sp)
  80b148:	2013003a 	cmpeq	r9,r4,zero
  80b14c:	4800d61e 	bne	r9,zero,80b4a8 <_strtod_r+0x1514>
  80b150:	30dffc2c 	andhi	r3,r6,32752
  80b154:	0081ac34 	movhi	r2,1712
  80b158:	10c0d336 	bltu	r2,r3,80b4a8 <_strtod_r+0x1514>
  80b15c:	0080dc34 	movhi	r2,880
  80b160:	10ffc42e 	bgeu	r2,r3,80b074 <_strtod_r+0x10e0>
  80b164:	e0800017 	ldw	r2,0(fp)
  80b168:	e0c00117 	ldw	r3,4(fp)
  80b16c:	020e5434 	movhi	r8,14672
  80b170:	000d883a 	mov	r6,zero
  80b174:	400f883a 	mov	r7,r8
  80b178:	180b883a 	mov	r5,r3
  80b17c:	1009883a 	mov	r4,r2
  80b180:	da000c15 	stw	r8,48(sp)
  80b184:	d8000b15 	stw	zero,44(sp)
  80b188:	080ead40 	call	80ead4 <__muldf3>
  80b18c:	e0800015 	stw	r2,0(fp)
  80b190:	e0c00115 	stw	r3,4(fp)
  80b194:	183f211e 	bne	r3,zero,80ae1c <_strtod_r+0xe88>
  80b198:	103f201e 	bne	r2,zero,80ae1c <_strtod_r+0xe88>
  80b19c:	00800884 	movi	r2,34
  80b1a0:	a8800015 	stw	r2,0(r21)
  80b1a4:	003f1d06 	br	80ae1c <_strtod_r+0xe88>
  80b1a8:	d9001c17 	ldw	r4,112(sp)
  80b1ac:	2013003a 	cmpeq	r9,r4,zero
  80b1b0:	483f1a1e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b1b4:	003feb06 	br	80b164 <_strtod_r+0x11d0>
  80b1b8:	d8801c17 	ldw	r2,112(sp)
  80b1bc:	e1c00017 	ldw	r7,0(fp)
  80b1c0:	1013003a 	cmpeq	r9,r2,zero
  80b1c4:	4800c31e 	bne	r9,zero,80b4d4 <_strtod_r+0x1540>
  80b1c8:	28dffc2c 	andhi	r3,r5,32752
  80b1cc:	0081a834 	movhi	r2,1696
  80b1d0:	10c0c036 	bltu	r2,r3,80b4d4 <_strtod_r+0x1540>
  80b1d4:	1804d53a 	srli	r2,r3,20
  80b1d8:	00c01ac4 	movi	r3,107
  80b1dc:	013fffc4 	movi	r4,-1
  80b1e0:	1887c83a 	sub	r3,r3,r2
  80b1e4:	20c4983a 	sll	r2,r4,r3
  80b1e8:	11ff8c1e 	bne	r2,r7,80b01c <_strtod_r+0x1088>
  80b1ec:	28dffc2c 	andhi	r3,r5,32752
  80b1f0:	00800434 	movhi	r2,16
  80b1f4:	188d883a 	add	r6,r3,r2
  80b1f8:	e1800115 	stw	r6,4(fp)
  80b1fc:	e0000015 	stw	zero,0(fp)
  80b200:	483f061e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b204:	003fd706 	br	80b164 <_strtod_r+0x11d0>
  80b208:	0021883a 	mov	r16,zero
  80b20c:	0005883a 	mov	r2,zero
  80b210:	044ff834 	movhi	r17,16352
  80b214:	00eff834 	movhi	r3,49120
  80b218:	003e7c06 	br	80ac0c <_strtod_r+0xc78>
  80b21c:	803d9226 	beq	r16,zero,80a868 <_strtod_r+0x8d4>
  80b220:	0421c83a 	sub	r16,zero,r16
  80b224:	814003cc 	andi	r5,r16,15
  80b228:	28000f26 	beq	r5,zero,80b268 <_strtod_r+0x12d4>
  80b22c:	280a90fa 	slli	r5,r5,3
  80b230:	010020b4 	movhi	r4,130
  80b234:	2131b204 	addi	r4,r4,-14648
  80b238:	e0800017 	ldw	r2,0(fp)
  80b23c:	290b883a 	add	r5,r5,r4
  80b240:	2a000017 	ldw	r8,0(r5)
  80b244:	e0c00117 	ldw	r3,4(fp)
  80b248:	2a400117 	ldw	r9,4(r5)
  80b24c:	1009883a 	mov	r4,r2
  80b250:	180b883a 	mov	r5,r3
  80b254:	480f883a 	mov	r7,r9
  80b258:	400d883a 	mov	r6,r8
  80b25c:	080ee980 	call	80ee98 <__divdf3>
  80b260:	e0c00115 	stw	r3,4(fp)
  80b264:	e0800015 	stw	r2,0(fp)
  80b268:	8021d13a 	srai	r16,r16,4
  80b26c:	803d7e26 	beq	r16,zero,80a868 <_strtod_r+0x8d4>
  80b270:	008007c4 	movi	r2,31
  80b274:	14002d16 	blt	r2,r16,80b32c <_strtod_r+0x1398>
  80b278:	8080040c 	andi	r2,r16,16
  80b27c:	10009d26 	beq	r2,zero,80b4f4 <_strtod_r+0x1560>
  80b280:	01001a84 	movi	r4,106
  80b284:	d9001c15 	stw	r4,112(sp)
  80b288:	0400110e 	bge	zero,r16,80b2d0 <_strtod_r+0x133c>
  80b28c:	044020b4 	movhi	r17,130
  80b290:	8c71ff04 	addi	r17,r17,-14340
  80b294:	8080004c 	andi	r2,r16,1
  80b298:	1005003a 	cmpeq	r2,r2,zero
  80b29c:	1000091e 	bne	r2,zero,80b2c4 <_strtod_r+0x1330>
  80b2a0:	e0800017 	ldw	r2,0(fp)
  80b2a4:	e0c00117 	ldw	r3,4(fp)
  80b2a8:	89800017 	ldw	r6,0(r17)
  80b2ac:	89c00117 	ldw	r7,4(r17)
  80b2b0:	180b883a 	mov	r5,r3
  80b2b4:	1009883a 	mov	r4,r2
  80b2b8:	080ead40 	call	80ead4 <__muldf3>
  80b2bc:	e0c00115 	stw	r3,4(fp)
  80b2c0:	e0800015 	stw	r2,0(fp)
  80b2c4:	8021d07a 	srai	r16,r16,1
  80b2c8:	8c400204 	addi	r17,r17,8
  80b2cc:	043ff116 	blt	zero,r16,80b294 <_strtod_r+0x1300>
  80b2d0:	d8801c17 	ldw	r2,112(sp)
  80b2d4:	10000d26 	beq	r2,zero,80b30c <_strtod_r+0x1378>
  80b2d8:	e1000117 	ldw	r4,4(fp)
  80b2dc:	00c01ac4 	movi	r3,107
  80b2e0:	209ffc2c 	andhi	r2,r4,32752
  80b2e4:	1004d53a 	srli	r2,r2,20
  80b2e8:	1887c83a 	sub	r3,r3,r2
  80b2ec:	00c0070e 	bge	zero,r3,80b30c <_strtod_r+0x1378>
  80b2f0:	008007c4 	movi	r2,31
  80b2f4:	10c0940e 	bge	r2,r3,80b548 <_strtod_r+0x15b4>
  80b2f8:	00800d04 	movi	r2,52
  80b2fc:	e0000015 	stw	zero,0(fp)
  80b300:	10c08b0e 	bge	r2,r3,80b530 <_strtod_r+0x159c>
  80b304:	0180dc34 	movhi	r6,880
  80b308:	e1800115 	stw	r6,4(fp)
  80b30c:	e0800017 	ldw	r2,0(fp)
  80b310:	e0c00117 	ldw	r3,4(fp)
  80b314:	000d883a 	mov	r6,zero
  80b318:	000f883a 	mov	r7,zero
  80b31c:	180b883a 	mov	r5,r3
  80b320:	1009883a 	mov	r4,r2
  80b324:	080f1780 	call	80f178 <__nedf2>
  80b328:	103d501e 	bne	r2,zero,80a86c <_strtod_r+0x8d8>
  80b32c:	00800884 	movi	r2,34
  80b330:	a8800015 	stw	r2,0(r21)
  80b334:	e0000015 	stw	zero,0(fp)
  80b338:	e0000115 	stw	zero,4(fp)
  80b33c:	003b9f06 	br	80a1bc <_strtod_r+0x228>
  80b340:	e1800117 	ldw	r6,4(fp)
  80b344:	00c00434 	movhi	r3,16
  80b348:	18ffffc4 	addi	r3,r3,-1
  80b34c:	30c4703a 	and	r2,r6,r3
  80b350:	103f311e 	bne	r2,zero,80b018 <_strtod_r+0x1084>
  80b354:	e1c00017 	ldw	r7,0(fp)
  80b358:	383f301e 	bne	r7,zero,80b01c <_strtod_r+0x1088>
  80b35c:	003f7906 	br	80b144 <_strtod_r+0x11b0>
  80b360:	d8c00f17 	ldw	r3,60(sp)
  80b364:	00bffa84 	movi	r2,-22
  80b368:	18bcbf16 	blt	r3,r2,80a668 <_strtod_r+0x6d4>
  80b36c:	1809883a 	mov	r4,r3
  80b370:	017ffe04 	movi	r5,-8
  80b374:	080f9440 	call	80f944 <__mulsi3>
  80b378:	00c020b4 	movhi	r3,130
  80b37c:	18f1b204 	addi	r3,r3,-14648
  80b380:	10c5883a 	add	r2,r2,r3
  80b384:	e2000017 	ldw	r8,0(fp)
  80b388:	e2400117 	ldw	r9,4(fp)
  80b38c:	12800017 	ldw	r10,0(r2)
  80b390:	12c00117 	ldw	r11,4(r2)
  80b394:	480b883a 	mov	r5,r9
  80b398:	4009883a 	mov	r4,r8
  80b39c:	580f883a 	mov	r7,r11
  80b3a0:	500d883a 	mov	r6,r10
  80b3a4:	080ee980 	call	80ee98 <__divdf3>
  80b3a8:	e0c00115 	stw	r3,4(fp)
  80b3ac:	e0800015 	stw	r2,0(fp)
  80b3b0:	003b8206 	br	80a1bc <_strtod_r+0x228>
  80b3b4:	d8801c17 	ldw	r2,112(sp)
  80b3b8:	1013003a 	cmpeq	r9,r2,zero
  80b3bc:	483e971e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b3c0:	003f6806 	br	80b164 <_strtod_r+0x11d0>
  80b3c4:	00801a44 	movi	r2,105
  80b3c8:	88bc5026 	beq	r17,r2,80a50c <_strtod_r+0x578>
  80b3cc:	00801b84 	movi	r2,110
  80b3d0:	88bb9b1e 	bne	r17,r2,80a240 <_strtod_r+0x2ac>
  80b3d4:	dc000404 	addi	r16,sp,16
  80b3d8:	8009883a 	mov	r4,r16
  80b3dc:	014020b4 	movhi	r5,130
  80b3e0:	2971fe04 	addi	r5,r5,-14344
  80b3e4:	0809f4c0 	call	809f4c <match>
  80b3e8:	103b9526 	beq	r2,zero,80a240 <_strtod_r+0x2ac>
  80b3ec:	d8800417 	ldw	r2,16(sp)
  80b3f0:	00c00a04 	movi	r3,40
  80b3f4:	11000007 	ldb	r4,0(r2)
  80b3f8:	20c04026 	beq	r4,r3,80b4fc <_strtod_r+0x1568>
  80b3fc:	01bffe34 	movhi	r6,65528
  80b400:	e1800115 	stw	r6,4(fp)
  80b404:	e0000015 	stw	zero,0(fp)
  80b408:	003b6c06 	br	80a1bc <_strtod_r+0x228>
  80b40c:	d8c01817 	ldw	r3,96(sp)
  80b410:	00800404 	movi	r2,16
  80b414:	10c00516 	blt	r2,r3,80b42c <_strtod_r+0x1498>
  80b418:	d9001117 	ldw	r4,68(sp)
  80b41c:	01400284 	movi	r5,10
  80b420:	080f9440 	call	80f944 <__mulsi3>
  80b424:	1585883a 	add	r2,r2,r22
  80b428:	d8801115 	stw	r2,68(sp)
  80b42c:	000d883a 	mov	r6,zero
  80b430:	003f2506 	br	80b0c8 <_strtod_r+0x1134>
  80b434:	000d883a 	mov	r6,zero
  80b438:	003ce306 	br	80a7c8 <_strtod_r+0x834>
  80b43c:	e4400117 	ldw	r17,4(fp)
  80b440:	3809883a 	mov	r4,r7
  80b444:	3821883a 	mov	r16,r7
  80b448:	880b883a 	mov	r5,r17
  80b44c:	080837c0 	call	80837c <__ulp>
  80b450:	180f883a 	mov	r7,r3
  80b454:	880b883a 	mov	r5,r17
  80b458:	8009883a 	mov	r4,r16
  80b45c:	100d883a 	mov	r6,r2
  80b460:	080ea600 	call	80ea60 <__adddf3>
  80b464:	180b883a 	mov	r5,r3
  80b468:	d8c01c17 	ldw	r3,112(sp)
  80b46c:	1009883a 	mov	r4,r2
  80b470:	e1400115 	stw	r5,4(fp)
  80b474:	1813003a 	cmpeq	r9,r3,zero
  80b478:	e1000015 	stw	r4,0(fp)
  80b47c:	483e671e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b480:	003f3806 	br	80b164 <_strtod_r+0x11d0>
  80b484:	0080d434 	movhi	r2,848
  80b488:	188d883a 	add	r6,r3,r2
  80b48c:	d8001c15 	stw	zero,112(sp)
  80b490:	e1800115 	stw	r6,4(fp)
  80b494:	003cf506 	br	80a86c <_strtod_r+0x8d8>
  80b498:	d8c01c17 	ldw	r3,112(sp)
  80b49c:	1813003a 	cmpeq	r9,r3,zero
  80b4a0:	483e5e1e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b4a4:	003f2f06 	br	80b164 <_strtod_r+0x11d0>
  80b4a8:	309ffc2c 	andhi	r2,r6,32752
  80b4ac:	00fffc34 	movhi	r3,65520
  80b4b0:	10c5883a 	add	r2,r2,r3
  80b4b4:	00c00434 	movhi	r3,16
  80b4b8:	18ffffc4 	addi	r3,r3,-1
  80b4bc:	10ccb03a 	or	r6,r2,r3
  80b4c0:	01ffffc4 	movi	r7,-1
  80b4c4:	e1800115 	stw	r6,4(fp)
  80b4c8:	e1c00015 	stw	r7,0(fp)
  80b4cc:	483e531e 	bne	r9,zero,80ae1c <_strtod_r+0xe88>
  80b4d0:	003f2406 	br	80b164 <_strtod_r+0x11d0>
  80b4d4:	00bfffc4 	movi	r2,-1
  80b4d8:	003f4306 	br	80b1e8 <_strtod_r+0x1254>
  80b4dc:	0025883a 	mov	r18,zero
  80b4e0:	058020b4 	movhi	r22,130
  80b4e4:	b5b1e404 	addi	r22,r22,-14448
  80b4e8:	003c9206 	br	80a734 <_strtod_r+0x7a0>
  80b4ec:	d9c01817 	ldw	r7,96(sp)
  80b4f0:	003eeb06 	br	80b0a0 <_strtod_r+0x110c>
  80b4f4:	d8001c15 	stw	zero,112(sp)
  80b4f8:	003f6306 	br	80b288 <_strtod_r+0x12f4>
  80b4fc:	8009883a 	mov	r4,r16
  80b500:	014020b4 	movhi	r5,130
  80b504:	2974ba04 	addi	r5,r5,-11544
  80b508:	d9800d04 	addi	r6,sp,52
  80b50c:	080d22c0 	call	80d22c <__hexnan>
  80b510:	00c00144 	movi	r3,5
  80b514:	10ffb91e 	bne	r2,r3,80b3fc <_strtod_r+0x1468>
  80b518:	d8800e17 	ldw	r2,56(sp)
  80b51c:	d9c00d17 	ldw	r7,52(sp)
  80b520:	119ffc34 	orhi	r6,r2,32752
  80b524:	e1800115 	stw	r6,4(fp)
  80b528:	e1c00015 	stw	r7,0(fp)
  80b52c:	003b2306 	br	80a1bc <_strtod_r+0x228>
  80b530:	18fff804 	addi	r3,r3,-32
  80b534:	00bfffc4 	movi	r2,-1
  80b538:	10c4983a 	sll	r2,r2,r3
  80b53c:	208c703a 	and	r6,r4,r2
  80b540:	e1800115 	stw	r6,4(fp)
  80b544:	003f7106 	br	80b30c <_strtod_r+0x1378>
  80b548:	00bfffc4 	movi	r2,-1
  80b54c:	10c4983a 	sll	r2,r2,r3
  80b550:	e0c00017 	ldw	r3,0(fp)
  80b554:	188e703a 	and	r7,r3,r2
  80b558:	e1c00015 	stw	r7,0(fp)
  80b55c:	003f6b06 	br	80b30c <_strtod_r+0x1378>

0080b560 <strtof>:
  80b560:	defffa04 	addi	sp,sp,-24
  80b564:	dd000415 	stw	r20,16(sp)
  80b568:	050020b4 	movhi	r20,130
  80b56c:	a5396204 	addi	r20,r20,-6776
  80b570:	2007883a 	mov	r3,r4
  80b574:	a1000017 	ldw	r4,0(r20)
  80b578:	280d883a 	mov	r6,r5
  80b57c:	180b883a 	mov	r5,r3
  80b580:	dfc00515 	stw	ra,20(sp)
  80b584:	dcc00315 	stw	r19,12(sp)
  80b588:	dc800215 	stw	r18,8(sp)
  80b58c:	dc400115 	stw	r17,4(sp)
  80b590:	dc000015 	stw	r16,0(sp)
  80b594:	0809f940 	call	809f94 <_strtod_r>
  80b598:	180b883a 	mov	r5,r3
  80b59c:	1009883a 	mov	r4,r2
  80b5a0:	1823883a 	mov	r17,r3
  80b5a4:	1021883a 	mov	r16,r2
  80b5a8:	080f5f00 	call	80f5f0 <__truncdfsf2>
  80b5ac:	1009883a 	mov	r4,r2
  80b5b0:	000b883a 	mov	r5,zero
  80b5b4:	1025883a 	mov	r18,r2
  80b5b8:	1027883a 	mov	r19,r2
  80b5bc:	080e4680 	call	80e468 <__nesf2>
  80b5c0:	000d883a 	mov	r6,zero
  80b5c4:	000f883a 	mov	r7,zero
  80b5c8:	8009883a 	mov	r4,r16
  80b5cc:	880b883a 	mov	r5,r17
  80b5d0:	10000e1e 	bne	r2,zero,80b60c <strtof+0xac>
  80b5d4:	080f1780 	call	80f178 <__nedf2>
  80b5d8:	10000c26 	beq	r2,zero,80b60c <strtof+0xac>
  80b5dc:	a0c00017 	ldw	r3,0(r20)
  80b5e0:	00800884 	movi	r2,34
  80b5e4:	18800015 	stw	r2,0(r3)
  80b5e8:	9805883a 	mov	r2,r19
  80b5ec:	dfc00517 	ldw	ra,20(sp)
  80b5f0:	dd000417 	ldw	r20,16(sp)
  80b5f4:	dcc00317 	ldw	r19,12(sp)
  80b5f8:	dc800217 	ldw	r18,8(sp)
  80b5fc:	dc400117 	ldw	r17,4(sp)
  80b600:	dc000017 	ldw	r16,0(sp)
  80b604:	dec00604 	addi	sp,sp,24
  80b608:	f800283a 	ret
  80b60c:	9009883a 	mov	r4,r18
  80b610:	015fe034 	movhi	r5,32640
  80b614:	297fffc4 	addi	r5,r5,-1
  80b618:	080e4e00 	call	80e4e0 <__gtsf2>
  80b61c:	00ffffc4 	movi	r3,-1
  80b620:	011ffc34 	movhi	r4,32752
  80b624:	213fffc4 	addi	r4,r4,-1
  80b628:	200f883a 	mov	r7,r4
  80b62c:	180d883a 	mov	r6,r3
  80b630:	8009883a 	mov	r4,r16
  80b634:	880b883a 	mov	r5,r17
  80b638:	00800f16 	blt	zero,r2,80b678 <strtof+0x118>
  80b63c:	9009883a 	mov	r4,r18
  80b640:	017fe034 	movhi	r5,65408
  80b644:	297fffc4 	addi	r5,r5,-1
  80b648:	080e5580 	call	80e558 <__ltsf2>
  80b64c:	023fffc4 	movi	r8,-1
  80b650:	027ffc34 	movhi	r9,65520
  80b654:	4a7fffc4 	addi	r9,r9,-1
  80b658:	880b883a 	mov	r5,r17
  80b65c:	480f883a 	mov	r7,r9
  80b660:	8009883a 	mov	r4,r16
  80b664:	400d883a 	mov	r6,r8
  80b668:	103fdf0e 	bge	r2,zero,80b5e8 <strtof+0x88>
  80b66c:	080f3100 	call	80f310 <__ltdf2>
  80b670:	103fda0e 	bge	r2,zero,80b5dc <strtof+0x7c>
  80b674:	003fdc06 	br	80b5e8 <strtof+0x88>
  80b678:	080f2000 	call	80f200 <__gtdf2>
  80b67c:	00bfd70e 	bge	zero,r2,80b5dc <strtof+0x7c>
  80b680:	003fee06 	br	80b63c <strtof+0xdc>

0080b684 <strtod>:
  80b684:	018020b4 	movhi	r6,130
  80b688:	31b96204 	addi	r6,r6,-6776
  80b68c:	2007883a 	mov	r3,r4
  80b690:	31000017 	ldw	r4,0(r6)
  80b694:	280d883a 	mov	r6,r5
  80b698:	180b883a 	mov	r5,r3
  80b69c:	0809f941 	jmpi	809f94 <_strtod_r>

0080b6a0 <_strtol_r>:
  80b6a0:	defff304 	addi	sp,sp,-52
  80b6a4:	008020b4 	movhi	r2,130
  80b6a8:	10b96104 	addi	r2,r2,-6780
  80b6ac:	dd000715 	stw	r20,28(sp)
  80b6b0:	15000017 	ldw	r20,0(r2)
  80b6b4:	ddc00a15 	stw	r23,40(sp)
  80b6b8:	dc800515 	stw	r18,20(sp)
  80b6bc:	dc400415 	stw	r17,16(sp)
  80b6c0:	dfc00c15 	stw	ra,48(sp)
  80b6c4:	df000b15 	stw	fp,44(sp)
  80b6c8:	dd800915 	stw	r22,36(sp)
  80b6cc:	dd400815 	stw	r21,32(sp)
  80b6d0:	dcc00615 	stw	r19,24(sp)
  80b6d4:	dc000315 	stw	r16,12(sp)
  80b6d8:	282f883a 	mov	r23,r5
  80b6dc:	d9000115 	stw	r4,4(sp)
  80b6e0:	d9800215 	stw	r6,8(sp)
  80b6e4:	3825883a 	mov	r18,r7
  80b6e8:	2823883a 	mov	r17,r5
  80b6ec:	8c000007 	ldb	r16,0(r17)
  80b6f0:	8c400044 	addi	r17,r17,1
  80b6f4:	a407883a 	add	r3,r20,r16
  80b6f8:	18800003 	ldbu	r2,0(r3)
  80b6fc:	1080020c 	andi	r2,r2,8
  80b700:	103ffa1e 	bne	r2,zero,80b6ec <_strtol_r+0x4c>
  80b704:	00800b44 	movi	r2,45
  80b708:	80805c26 	beq	r16,r2,80b87c <_strtol_r+0x1dc>
  80b70c:	00800ac4 	movi	r2,43
  80b710:	80805726 	beq	r16,r2,80b870 <_strtol_r+0x1d0>
  80b714:	d8000015 	stw	zero,0(sp)
  80b718:	9007003a 	cmpeq	r3,r18,zero
  80b71c:	1800431e 	bne	r3,zero,80b82c <_strtol_r+0x18c>
  80b720:	00800404 	movi	r2,16
  80b724:	90804126 	beq	r18,r2,80b82c <_strtol_r+0x18c>
  80b728:	902b883a 	mov	r21,r18
  80b72c:	d8c00017 	ldw	r3,0(sp)
  80b730:	1838c03a 	cmpne	fp,r3,zero
  80b734:	e0004a1e 	bne	fp,zero,80b860 <_strtol_r+0x1c0>
  80b738:	04e00034 	movhi	r19,32768
  80b73c:	9cffffc4 	addi	r19,r19,-1
  80b740:	9809883a 	mov	r4,r19
  80b744:	a80b883a 	mov	r5,r21
  80b748:	080f93c0 	call	80f93c <__umodsi3>
  80b74c:	9809883a 	mov	r4,r19
  80b750:	a80b883a 	mov	r5,r21
  80b754:	102d883a 	mov	r22,r2
  80b758:	080f9340 	call	80f934 <__udivsi3>
  80b75c:	1027883a 	mov	r19,r2
  80b760:	a405883a 	add	r2,r20,r16
  80b764:	11400003 	ldbu	r5,0(r2)
  80b768:	0009883a 	mov	r4,zero
  80b76c:	000d883a 	mov	r6,zero
  80b770:	28c0010c 	andi	r3,r5,4
  80b774:	18000f26 	beq	r3,zero,80b7b4 <_strtol_r+0x114>
  80b778:	843ff404 	addi	r16,r16,-48
  80b77c:	8480150e 	bge	r16,r18,80b7d4 <_strtol_r+0x134>
  80b780:	30003216 	blt	r6,zero,80b84c <_strtol_r+0x1ac>
  80b784:	99003136 	bltu	r19,r4,80b84c <_strtol_r+0x1ac>
  80b788:	24c02f26 	beq	r4,r19,80b848 <_strtol_r+0x1a8>
  80b78c:	a80b883a 	mov	r5,r21
  80b790:	080f9440 	call	80f944 <__mulsi3>
  80b794:	1409883a 	add	r4,r2,r16
  80b798:	01800044 	movi	r6,1
  80b79c:	8c000007 	ldb	r16,0(r17)
  80b7a0:	8c400044 	addi	r17,r17,1
  80b7a4:	a405883a 	add	r2,r20,r16
  80b7a8:	11400003 	ldbu	r5,0(r2)
  80b7ac:	28c0010c 	andi	r3,r5,4
  80b7b0:	183ff11e 	bne	r3,zero,80b778 <_strtol_r+0xd8>
  80b7b4:	288000cc 	andi	r2,r5,3
  80b7b8:	10000626 	beq	r2,zero,80b7d4 <_strtol_r+0x134>
  80b7bc:	2880004c 	andi	r2,r5,1
  80b7c0:	1005003a 	cmpeq	r2,r2,zero
  80b7c4:	1000231e 	bne	r2,zero,80b854 <_strtol_r+0x1b4>
  80b7c8:	00800dc4 	movi	r2,55
  80b7cc:	80a1c83a 	sub	r16,r16,r2
  80b7d0:	84bfeb16 	blt	r16,r18,80b780 <_strtol_r+0xe0>
  80b7d4:	30002e16 	blt	r6,zero,80b890 <_strtol_r+0x1f0>
  80b7d8:	e000231e 	bne	fp,zero,80b868 <_strtol_r+0x1c8>
  80b7dc:	2007883a 	mov	r3,r4
  80b7e0:	d8800217 	ldw	r2,8(sp)
  80b7e4:	10000426 	beq	r2,zero,80b7f8 <_strtol_r+0x158>
  80b7e8:	30000126 	beq	r6,zero,80b7f0 <_strtol_r+0x150>
  80b7ec:	8dffffc4 	addi	r23,r17,-1
  80b7f0:	d9000217 	ldw	r4,8(sp)
  80b7f4:	25c00015 	stw	r23,0(r4)
  80b7f8:	1805883a 	mov	r2,r3
  80b7fc:	dfc00c17 	ldw	ra,48(sp)
  80b800:	df000b17 	ldw	fp,44(sp)
  80b804:	ddc00a17 	ldw	r23,40(sp)
  80b808:	dd800917 	ldw	r22,36(sp)
  80b80c:	dd400817 	ldw	r21,32(sp)
  80b810:	dd000717 	ldw	r20,28(sp)
  80b814:	dcc00617 	ldw	r19,24(sp)
  80b818:	dc800517 	ldw	r18,20(sp)
  80b81c:	dc400417 	ldw	r17,16(sp)
  80b820:	dc000317 	ldw	r16,12(sp)
  80b824:	dec00d04 	addi	sp,sp,52
  80b828:	f800283a 	ret
  80b82c:	00800c04 	movi	r2,48
  80b830:	80801f26 	beq	r16,r2,80b8b0 <_strtol_r+0x210>
  80b834:	183fbc26 	beq	r3,zero,80b728 <_strtol_r+0x88>
  80b838:	00800c04 	movi	r2,48
  80b83c:	80802926 	beq	r16,r2,80b8e4 <_strtol_r+0x244>
  80b840:	04800284 	movi	r18,10
  80b844:	003fb806 	br	80b728 <_strtol_r+0x88>
  80b848:	b43fd00e 	bge	r22,r16,80b78c <_strtol_r+0xec>
  80b84c:	01bfffc4 	movi	r6,-1
  80b850:	003fd206 	br	80b79c <_strtol_r+0xfc>
  80b854:	008015c4 	movi	r2,87
  80b858:	80a1c83a 	sub	r16,r16,r2
  80b85c:	003fdc06 	br	80b7d0 <_strtol_r+0x130>
  80b860:	04e00034 	movhi	r19,32768
  80b864:	003fb606 	br	80b740 <_strtol_r+0xa0>
  80b868:	0107c83a 	sub	r3,zero,r4
  80b86c:	003fdc06 	br	80b7e0 <_strtol_r+0x140>
  80b870:	8c000007 	ldb	r16,0(r17)
  80b874:	8c400044 	addi	r17,r17,1
  80b878:	003fa606 	br	80b714 <_strtol_r+0x74>
  80b87c:	8c000007 	ldb	r16,0(r17)
  80b880:	00800044 	movi	r2,1
  80b884:	8c400044 	addi	r17,r17,1
  80b888:	d8800015 	stw	r2,0(sp)
  80b88c:	003fa206 	br	80b718 <_strtol_r+0x78>
  80b890:	d9000017 	ldw	r4,0(sp)
  80b894:	2005003a 	cmpeq	r2,r4,zero
  80b898:	10000f1e 	bne	r2,zero,80b8d8 <_strtol_r+0x238>
  80b89c:	00e00034 	movhi	r3,32768
  80b8a0:	d9000117 	ldw	r4,4(sp)
  80b8a4:	00800884 	movi	r2,34
  80b8a8:	20800015 	stw	r2,0(r4)
  80b8ac:	003fcc06 	br	80b7e0 <_strtol_r+0x140>
  80b8b0:	89000007 	ldb	r4,0(r17)
  80b8b4:	00801e04 	movi	r2,120
  80b8b8:	20800226 	beq	r4,r2,80b8c4 <_strtol_r+0x224>
  80b8bc:	00801604 	movi	r2,88
  80b8c0:	20bfdc1e 	bne	r4,r2,80b834 <_strtol_r+0x194>
  80b8c4:	8c000047 	ldb	r16,1(r17)
  80b8c8:	04800404 	movi	r18,16
  80b8cc:	8c400084 	addi	r17,r17,2
  80b8d0:	902b883a 	mov	r21,r18
  80b8d4:	003f9506 	br	80b72c <_strtol_r+0x8c>
  80b8d8:	00e00034 	movhi	r3,32768
  80b8dc:	18ffffc4 	addi	r3,r3,-1
  80b8e0:	003fef06 	br	80b8a0 <_strtol_r+0x200>
  80b8e4:	04800204 	movi	r18,8
  80b8e8:	902b883a 	mov	r21,r18
  80b8ec:	003f8f06 	br	80b72c <_strtol_r+0x8c>

0080b8f0 <strtol>:
  80b8f0:	008020b4 	movhi	r2,130
  80b8f4:	10b96204 	addi	r2,r2,-6776
  80b8f8:	2013883a 	mov	r9,r4
  80b8fc:	11000017 	ldw	r4,0(r2)
  80b900:	2805883a 	mov	r2,r5
  80b904:	300f883a 	mov	r7,r6
  80b908:	480b883a 	mov	r5,r9
  80b90c:	100d883a 	mov	r6,r2
  80b910:	080b6a01 	jmpi	80b6a0 <_strtol_r>

0080b914 <_strtoll_r>:
  80b914:	defff004 	addi	sp,sp,-64
  80b918:	008020b4 	movhi	r2,130
  80b91c:	10b96104 	addi	r2,r2,-6780
  80b920:	df000e15 	stw	fp,56(sp)
  80b924:	17000017 	ldw	fp,0(r2)
  80b928:	ddc00d15 	stw	r23,52(sp)
  80b92c:	dd000a15 	stw	r20,40(sp)
  80b930:	dfc00f15 	stw	ra,60(sp)
  80b934:	dd800c15 	stw	r22,48(sp)
  80b938:	dd400b15 	stw	r21,44(sp)
  80b93c:	dcc00915 	stw	r19,36(sp)
  80b940:	dc800815 	stw	r18,32(sp)
  80b944:	dc400715 	stw	r17,28(sp)
  80b948:	dc000615 	stw	r16,24(sp)
  80b94c:	d9400315 	stw	r5,12(sp)
  80b950:	d9000215 	stw	r4,8(sp)
  80b954:	d9800415 	stw	r6,16(sp)
  80b958:	382f883a 	mov	r23,r7
  80b95c:	2829883a 	mov	r20,r5
  80b960:	a4c00007 	ldb	r19,0(r20)
  80b964:	a5000044 	addi	r20,r20,1
  80b968:	e4c7883a 	add	r3,fp,r19
  80b96c:	18800003 	ldbu	r2,0(r3)
  80b970:	1080020c 	andi	r2,r2,8
  80b974:	103ffa1e 	bne	r2,zero,80b960 <_strtoll_r+0x4c>
  80b978:	00800b44 	movi	r2,45
  80b97c:	98808826 	beq	r19,r2,80bba0 <_strtoll_r+0x28c>
  80b980:	00800ac4 	movi	r2,43
  80b984:	98808326 	beq	r19,r2,80bb94 <_strtoll_r+0x280>
  80b988:	d8000115 	stw	zero,4(sp)
  80b98c:	b807003a 	cmpeq	r3,r23,zero
  80b990:	18005f1e 	bne	r3,zero,80bb10 <_strtoll_r+0x1fc>
  80b994:	00800404 	movi	r2,16
  80b998:	b8805d26 	beq	r23,r2,80bb10 <_strtoll_r+0x1fc>
  80b99c:	b82dd7fa 	srai	r22,r23,31
  80b9a0:	b82b883a 	mov	r21,r23
  80b9a4:	d8c00117 	ldw	r3,4(sp)
  80b9a8:	1806c03a 	cmpne	r3,r3,zero
  80b9ac:	d8c00515 	stw	r3,20(sp)
  80b9b0:	1800631e 	bne	r3,zero,80bb40 <_strtoll_r+0x22c>
  80b9b4:	043fffc4 	movi	r16,-1
  80b9b8:	04600034 	movhi	r17,32768
  80b9bc:	8c7fffc4 	addi	r17,r17,-1
  80b9c0:	880b883a 	mov	r5,r17
  80b9c4:	8009883a 	mov	r4,r16
  80b9c8:	a80d883a 	mov	r6,r21
  80b9cc:	b00f883a 	mov	r7,r22
  80b9d0:	080de080 	call	80de08 <__umoddi3>
  80b9d4:	880b883a 	mov	r5,r17
  80b9d8:	8009883a 	mov	r4,r16
  80b9dc:	b00f883a 	mov	r7,r22
  80b9e0:	a80d883a 	mov	r6,r21
  80b9e4:	d8800015 	stw	r2,0(sp)
  80b9e8:	080d79c0 	call	80d79c <__udivdi3>
  80b9ec:	1023883a 	mov	r17,r2
  80b9f0:	e4c5883a 	add	r2,fp,r19
  80b9f4:	11000003 	ldbu	r4,0(r2)
  80b9f8:	1825883a 	mov	r18,r3
  80b9fc:	0015883a 	mov	r10,zero
  80ba00:	20c0010c 	andi	r3,r4,4
  80ba04:	0017883a 	mov	r11,zero
  80ba08:	000f883a 	mov	r7,zero
  80ba0c:	18001a26 	beq	r3,zero,80ba78 <_strtoll_r+0x164>
  80ba10:	9c3ff404 	addi	r16,r19,-48
  80ba14:	85c0200e 	bge	r16,r23,80ba98 <_strtoll_r+0x184>
  80ba18:	38003b16 	blt	r7,zero,80bb08 <_strtoll_r+0x1f4>
  80ba1c:	92c03a36 	bltu	r18,r11,80bb08 <_strtoll_r+0x1f4>
  80ba20:	5c803826 	beq	r11,r18,80bb04 <_strtoll_r+0x1f0>
  80ba24:	54404c26 	beq	r10,r17,80bb58 <_strtoll_r+0x244>
  80ba28:	580b883a 	mov	r5,r11
  80ba2c:	5009883a 	mov	r4,r10
  80ba30:	a80d883a 	mov	r6,r21
  80ba34:	b00f883a 	mov	r7,r22
  80ba38:	080d5d40 	call	80d5d4 <__muldi3>
  80ba3c:	8013d7fa 	srai	r9,r16,31
  80ba40:	100d883a 	mov	r6,r2
  80ba44:	1405883a 	add	r2,r2,r16
  80ba48:	118d803a 	cmpltu	r6,r2,r6
  80ba4c:	1a47883a 	add	r3,r3,r9
  80ba50:	30cd883a 	add	r6,r6,r3
  80ba54:	1015883a 	mov	r10,r2
  80ba58:	3017883a 	mov	r11,r6
  80ba5c:	01c00044 	movi	r7,1
  80ba60:	a4c00007 	ldb	r19,0(r20)
  80ba64:	a5000044 	addi	r20,r20,1
  80ba68:	e4c5883a 	add	r2,fp,r19
  80ba6c:	11000003 	ldbu	r4,0(r2)
  80ba70:	20c0010c 	andi	r3,r4,4
  80ba74:	183fe61e 	bne	r3,zero,80ba10 <_strtoll_r+0xfc>
  80ba78:	208000cc 	andi	r2,r4,3
  80ba7c:	10000626 	beq	r2,zero,80ba98 <_strtoll_r+0x184>
  80ba80:	2080004c 	andi	r2,r4,1
  80ba84:	1005003a 	cmpeq	r2,r2,zero
  80ba88:	1000301e 	bne	r2,zero,80bb4c <_strtoll_r+0x238>
  80ba8c:	02000dc4 	movi	r8,55
  80ba90:	9a21c83a 	sub	r16,r19,r8
  80ba94:	85ffe016 	blt	r16,r23,80ba18 <_strtoll_r+0x104>
  80ba98:	38004616 	blt	r7,zero,80bbb4 <_strtoll_r+0x2a0>
  80ba9c:	d8800517 	ldw	r2,20(sp)
  80baa0:	1000341e 	bne	r2,zero,80bb74 <_strtoll_r+0x260>
  80baa4:	500b883a 	mov	r5,r10
  80baa8:	580d883a 	mov	r6,r11
  80baac:	d8c00417 	ldw	r3,16(sp)
  80bab0:	18000626 	beq	r3,zero,80bacc <_strtoll_r+0x1b8>
  80bab4:	38000226 	beq	r7,zero,80bac0 <_strtoll_r+0x1ac>
  80bab8:	a53fffc4 	addi	r20,r20,-1
  80babc:	dd000315 	stw	r20,12(sp)
  80bac0:	d8c00317 	ldw	r3,12(sp)
  80bac4:	d8800417 	ldw	r2,16(sp)
  80bac8:	10c00015 	stw	r3,0(r2)
  80bacc:	2805883a 	mov	r2,r5
  80bad0:	3007883a 	mov	r3,r6
  80bad4:	dfc00f17 	ldw	ra,60(sp)
  80bad8:	df000e17 	ldw	fp,56(sp)
  80badc:	ddc00d17 	ldw	r23,52(sp)
  80bae0:	dd800c17 	ldw	r22,48(sp)
  80bae4:	dd400b17 	ldw	r21,44(sp)
  80bae8:	dd000a17 	ldw	r20,40(sp)
  80baec:	dcc00917 	ldw	r19,36(sp)
  80baf0:	dc800817 	ldw	r18,32(sp)
  80baf4:	dc400717 	ldw	r17,28(sp)
  80baf8:	dc000617 	ldw	r16,24(sp)
  80bafc:	dec01004 	addi	sp,sp,64
  80bb00:	f800283a 	ret
  80bb04:	8abfc72e 	bgeu	r17,r10,80ba24 <_strtoll_r+0x110>
  80bb08:	01ffffc4 	movi	r7,-1
  80bb0c:	003fd406 	br	80ba60 <_strtoll_r+0x14c>
  80bb10:	00800c04 	movi	r2,48
  80bb14:	98803226 	beq	r19,r2,80bbe0 <_strtoll_r+0x2cc>
  80bb18:	183fa026 	beq	r3,zero,80b99c <_strtoll_r+0x88>
  80bb1c:	00800c04 	movi	r2,48
  80bb20:	98803e26 	beq	r19,r2,80bc1c <_strtoll_r+0x308>
  80bb24:	d8c00117 	ldw	r3,4(sp)
  80bb28:	05c00284 	movi	r23,10
  80bb2c:	b82b883a 	mov	r21,r23
  80bb30:	1806c03a 	cmpne	r3,r3,zero
  80bb34:	002d883a 	mov	r22,zero
  80bb38:	d8c00515 	stw	r3,20(sp)
  80bb3c:	183f9d26 	beq	r3,zero,80b9b4 <_strtoll_r+0xa0>
  80bb40:	0021883a 	mov	r16,zero
  80bb44:	04600034 	movhi	r17,32768
  80bb48:	003f9d06 	br	80b9c0 <_strtoll_r+0xac>
  80bb4c:	020015c4 	movi	r8,87
  80bb50:	9a21c83a 	sub	r16,r19,r8
  80bb54:	003fcf06 	br	80ba94 <_strtoll_r+0x180>
  80bb58:	5cbfb31e 	bne	r11,r18,80ba28 <_strtoll_r+0x114>
  80bb5c:	d8800017 	ldw	r2,0(sp)
  80bb60:	143fb10e 	bge	r2,r16,80ba28 <_strtoll_r+0x114>
  80bb64:	8815883a 	mov	r10,r17
  80bb68:	9017883a 	mov	r11,r18
  80bb6c:	01ffffc4 	movi	r7,-1
  80bb70:	003fbb06 	br	80ba60 <_strtoll_r+0x14c>
  80bb74:	0009883a 	mov	r4,zero
  80bb78:	2285c83a 	sub	r2,r4,r10
  80bb7c:	2089803a 	cmpltu	r4,r4,r2
  80bb80:	02c7c83a 	sub	r3,zero,r11
  80bb84:	1909c83a 	sub	r4,r3,r4
  80bb88:	100b883a 	mov	r5,r2
  80bb8c:	200d883a 	mov	r6,r4
  80bb90:	003fc606 	br	80baac <_strtoll_r+0x198>
  80bb94:	a4c00007 	ldb	r19,0(r20)
  80bb98:	a5000044 	addi	r20,r20,1
  80bb9c:	003f7a06 	br	80b988 <_strtoll_r+0x74>
  80bba0:	a4c00007 	ldb	r19,0(r20)
  80bba4:	00800044 	movi	r2,1
  80bba8:	a5000044 	addi	r20,r20,1
  80bbac:	d8800115 	stw	r2,4(sp)
  80bbb0:	003f7606 	br	80b98c <_strtoll_r+0x78>
  80bbb4:	d8c00117 	ldw	r3,4(sp)
  80bbb8:	1805003a 	cmpeq	r2,r3,zero
  80bbbc:	1000131e 	bne	r2,zero,80bc0c <_strtoll_r+0x2f8>
  80bbc0:	0005883a 	mov	r2,zero
  80bbc4:	00e00034 	movhi	r3,32768
  80bbc8:	100b883a 	mov	r5,r2
  80bbcc:	180d883a 	mov	r6,r3
  80bbd0:	d8c00217 	ldw	r3,8(sp)
  80bbd4:	00800884 	movi	r2,34
  80bbd8:	18800015 	stw	r2,0(r3)
  80bbdc:	003fb306 	br	80baac <_strtoll_r+0x198>
  80bbe0:	a1000007 	ldb	r4,0(r20)
  80bbe4:	00801e04 	movi	r2,120
  80bbe8:	20800226 	beq	r4,r2,80bbf4 <_strtoll_r+0x2e0>
  80bbec:	00801604 	movi	r2,88
  80bbf0:	20bfc91e 	bne	r4,r2,80bb18 <_strtoll_r+0x204>
  80bbf4:	a4c00047 	ldb	r19,1(r20)
  80bbf8:	05c00404 	movi	r23,16
  80bbfc:	b82b883a 	mov	r21,r23
  80bc00:	a5000084 	addi	r20,r20,2
  80bc04:	002d883a 	mov	r22,zero
  80bc08:	003f6606 	br	80b9a4 <_strtoll_r+0x90>
  80bc0c:	017fffc4 	movi	r5,-1
  80bc10:	01a00034 	movhi	r6,32768
  80bc14:	31bfffc4 	addi	r6,r6,-1
  80bc18:	003fed06 	br	80bbd0 <_strtoll_r+0x2bc>
  80bc1c:	05c00204 	movi	r23,8
  80bc20:	b82b883a 	mov	r21,r23
  80bc24:	002d883a 	mov	r22,zero
  80bc28:	003f5e06 	br	80b9a4 <_strtoll_r+0x90>

0080bc2c <_strtoul_r>:
  80bc2c:	defff404 	addi	sp,sp,-48
  80bc30:	008020b4 	movhi	r2,130
  80bc34:	10b96104 	addi	r2,r2,-6780
  80bc38:	dd000615 	stw	r20,24(sp)
  80bc3c:	15000017 	ldw	r20,0(r2)
  80bc40:	df000a15 	stw	fp,40(sp)
  80bc44:	ddc00915 	stw	r23,36(sp)
  80bc48:	dc800415 	stw	r18,16(sp)
  80bc4c:	dc400315 	stw	r17,12(sp)
  80bc50:	dfc00b15 	stw	ra,44(sp)
  80bc54:	dd800815 	stw	r22,32(sp)
  80bc58:	dd400715 	stw	r21,28(sp)
  80bc5c:	dcc00515 	stw	r19,20(sp)
  80bc60:	dc000215 	stw	r16,8(sp)
  80bc64:	282f883a 	mov	r23,r5
  80bc68:	d9000115 	stw	r4,4(sp)
  80bc6c:	3039883a 	mov	fp,r6
  80bc70:	3825883a 	mov	r18,r7
  80bc74:	2823883a 	mov	r17,r5
  80bc78:	8c000007 	ldb	r16,0(r17)
  80bc7c:	8c400044 	addi	r17,r17,1
  80bc80:	a407883a 	add	r3,r20,r16
  80bc84:	18800003 	ldbu	r2,0(r3)
  80bc88:	1080020c 	andi	r2,r2,8
  80bc8c:	103ffa1e 	bne	r2,zero,80bc78 <_strtoul_r+0x4c>
  80bc90:	00800b44 	movi	r2,45
  80bc94:	80805826 	beq	r16,r2,80bdf8 <_strtoul_r+0x1cc>
  80bc98:	00800ac4 	movi	r2,43
  80bc9c:	80805326 	beq	r16,r2,80bdec <_strtoul_r+0x1c0>
  80bca0:	d8000015 	stw	zero,0(sp)
  80bca4:	9007003a 	cmpeq	r3,r18,zero
  80bca8:	18003d1e 	bne	r3,zero,80bda0 <_strtoul_r+0x174>
  80bcac:	00800404 	movi	r2,16
  80bcb0:	90803b26 	beq	r18,r2,80bda0 <_strtoul_r+0x174>
  80bcb4:	013fffc4 	movi	r4,-1
  80bcb8:	900b883a 	mov	r5,r18
  80bcbc:	080f9340 	call	80f934 <__udivsi3>
  80bcc0:	013fffc4 	movi	r4,-1
  80bcc4:	900b883a 	mov	r5,r18
  80bcc8:	1027883a 	mov	r19,r2
  80bccc:	080f93c0 	call	80f93c <__umodsi3>
  80bcd0:	102d883a 	mov	r22,r2
  80bcd4:	902b883a 	mov	r21,r18
  80bcd8:	a405883a 	add	r2,r20,r16
  80bcdc:	11400003 	ldbu	r5,0(r2)
  80bce0:	0009883a 	mov	r4,zero
  80bce4:	000d883a 	mov	r6,zero
  80bce8:	28c0010c 	andi	r3,r5,4
  80bcec:	18000f26 	beq	r3,zero,80bd2c <_strtoul_r+0x100>
  80bcf0:	843ff404 	addi	r16,r16,-48
  80bcf4:	8480150e 	bge	r16,r18,80bd4c <_strtoul_r+0x120>
  80bcf8:	30003516 	blt	r6,zero,80bdd0 <_strtoul_r+0x1a4>
  80bcfc:	99003436 	bltu	r19,r4,80bdd0 <_strtoul_r+0x1a4>
  80bd00:	24c03226 	beq	r4,r19,80bdcc <_strtoul_r+0x1a0>
  80bd04:	a80b883a 	mov	r5,r21
  80bd08:	080f9440 	call	80f944 <__mulsi3>
  80bd0c:	1409883a 	add	r4,r2,r16
  80bd10:	01800044 	movi	r6,1
  80bd14:	8c000007 	ldb	r16,0(r17)
  80bd18:	8c400044 	addi	r17,r17,1
  80bd1c:	a405883a 	add	r2,r20,r16
  80bd20:	11400003 	ldbu	r5,0(r2)
  80bd24:	28c0010c 	andi	r3,r5,4
  80bd28:	183ff11e 	bne	r3,zero,80bcf0 <_strtoul_r+0xc4>
  80bd2c:	288000cc 	andi	r2,r5,3
  80bd30:	10000626 	beq	r2,zero,80bd4c <_strtoul_r+0x120>
  80bd34:	2880004c 	andi	r2,r5,1
  80bd38:	1005003a 	cmpeq	r2,r2,zero
  80bd3c:	1000261e 	bne	r2,zero,80bdd8 <_strtoul_r+0x1ac>
  80bd40:	00800dc4 	movi	r2,55
  80bd44:	80a1c83a 	sub	r16,r16,r2
  80bd48:	84bfeb16 	blt	r16,r18,80bcf8 <_strtoul_r+0xcc>
  80bd4c:	3000420e 	bge	r6,zero,80be58 <_strtoul_r+0x22c>
  80bd50:	d8c00117 	ldw	r3,4(sp)
  80bd54:	00800884 	movi	r2,34
  80bd58:	013fffc4 	movi	r4,-1
  80bd5c:	18800015 	stw	r2,0(r3)
  80bd60:	e0000226 	beq	fp,zero,80bd6c <_strtoul_r+0x140>
  80bd64:	30001f1e 	bne	r6,zero,80bde4 <_strtoul_r+0x1b8>
  80bd68:	e5c00015 	stw	r23,0(fp)
  80bd6c:	2005883a 	mov	r2,r4
  80bd70:	dfc00b17 	ldw	ra,44(sp)
  80bd74:	df000a17 	ldw	fp,40(sp)
  80bd78:	ddc00917 	ldw	r23,36(sp)
  80bd7c:	dd800817 	ldw	r22,32(sp)
  80bd80:	dd400717 	ldw	r21,28(sp)
  80bd84:	dd000617 	ldw	r20,24(sp)
  80bd88:	dcc00517 	ldw	r19,20(sp)
  80bd8c:	dc800417 	ldw	r18,16(sp)
  80bd90:	dc400317 	ldw	r17,12(sp)
  80bd94:	dc000217 	ldw	r16,8(sp)
  80bd98:	dec00c04 	addi	sp,sp,48
  80bd9c:	f800283a 	ret
  80bda0:	00800c04 	movi	r2,48
  80bda4:	80801926 	beq	r16,r2,80be0c <_strtoul_r+0x1e0>
  80bda8:	183fc226 	beq	r3,zero,80bcb4 <_strtoul_r+0x88>
  80bdac:	00800c04 	movi	r2,48
  80bdb0:	80802326 	beq	r16,r2,80be40 <_strtoul_r+0x214>
  80bdb4:	04800284 	movi	r18,10
  80bdb8:	902b883a 	mov	r21,r18
  80bdbc:	04c666b4 	movhi	r19,6554
  80bdc0:	9ce66644 	addi	r19,r19,-26215
  80bdc4:	05800144 	movi	r22,5
  80bdc8:	003fc306 	br	80bcd8 <_strtoul_r+0xac>
  80bdcc:	b43fcd0e 	bge	r22,r16,80bd04 <_strtoul_r+0xd8>
  80bdd0:	01bfffc4 	movi	r6,-1
  80bdd4:	003fcf06 	br	80bd14 <_strtoul_r+0xe8>
  80bdd8:	008015c4 	movi	r2,87
  80bddc:	80a1c83a 	sub	r16,r16,r2
  80bde0:	003fd906 	br	80bd48 <_strtoul_r+0x11c>
  80bde4:	8dffffc4 	addi	r23,r17,-1
  80bde8:	003fdf06 	br	80bd68 <_strtoul_r+0x13c>
  80bdec:	8c000007 	ldb	r16,0(r17)
  80bdf0:	8c400044 	addi	r17,r17,1
  80bdf4:	003faa06 	br	80bca0 <_strtoul_r+0x74>
  80bdf8:	8c000007 	ldb	r16,0(r17)
  80bdfc:	00800044 	movi	r2,1
  80be00:	8c400044 	addi	r17,r17,1
  80be04:	d8800015 	stw	r2,0(sp)
  80be08:	003fa606 	br	80bca4 <_strtoul_r+0x78>
  80be0c:	89000007 	ldb	r4,0(r17)
  80be10:	00801e04 	movi	r2,120
  80be14:	20800226 	beq	r4,r2,80be20 <_strtoul_r+0x1f4>
  80be18:	00801604 	movi	r2,88
  80be1c:	20bfe21e 	bne	r4,r2,80bda8 <_strtoul_r+0x17c>
  80be20:	8c000047 	ldb	r16,1(r17)
  80be24:	04800404 	movi	r18,16
  80be28:	8c400084 	addi	r17,r17,2
  80be2c:	902b883a 	mov	r21,r18
  80be30:	04c40034 	movhi	r19,4096
  80be34:	9cffffc4 	addi	r19,r19,-1
  80be38:	058003c4 	movi	r22,15
  80be3c:	003fa606 	br	80bcd8 <_strtoul_r+0xac>
  80be40:	04800204 	movi	r18,8
  80be44:	902b883a 	mov	r21,r18
  80be48:	04c80034 	movhi	r19,8192
  80be4c:	9cffffc4 	addi	r19,r19,-1
  80be50:	058001c4 	movi	r22,7
  80be54:	003fa006 	br	80bcd8 <_strtoul_r+0xac>
  80be58:	d8c00017 	ldw	r3,0(sp)
  80be5c:	1805003a 	cmpeq	r2,r3,zero
  80be60:	103fbf1e 	bne	r2,zero,80bd60 <_strtoul_r+0x134>
  80be64:	0109c83a 	sub	r4,zero,r4
  80be68:	003fbd06 	br	80bd60 <_strtoul_r+0x134>

0080be6c <strtoul>:
  80be6c:	008020b4 	movhi	r2,130
  80be70:	10b96204 	addi	r2,r2,-6776
  80be74:	2013883a 	mov	r9,r4
  80be78:	11000017 	ldw	r4,0(r2)
  80be7c:	2805883a 	mov	r2,r5
  80be80:	300f883a 	mov	r7,r6
  80be84:	480b883a 	mov	r5,r9
  80be88:	100d883a 	mov	r6,r2
  80be8c:	080bc2c1 	jmpi	80bc2c <_strtoul_r>

0080be90 <_strtoull_r>:
  80be90:	defff104 	addi	sp,sp,-60
  80be94:	008020b4 	movhi	r2,130
  80be98:	10b96104 	addi	r2,r2,-6780
  80be9c:	df000d15 	stw	fp,52(sp)
  80bea0:	17000017 	ldw	fp,0(r2)
  80bea4:	ddc00c15 	stw	r23,48(sp)
  80bea8:	dcc00815 	stw	r19,32(sp)
  80beac:	dfc00e15 	stw	ra,56(sp)
  80beb0:	dd800b15 	stw	r22,44(sp)
  80beb4:	dd400a15 	stw	r21,40(sp)
  80beb8:	dd000915 	stw	r20,36(sp)
  80bebc:	dc800715 	stw	r18,28(sp)
  80bec0:	dc400615 	stw	r17,24(sp)
  80bec4:	dc000515 	stw	r16,20(sp)
  80bec8:	d9400215 	stw	r5,8(sp)
  80becc:	d9000115 	stw	r4,4(sp)
  80bed0:	d9800315 	stw	r6,12(sp)
  80bed4:	382f883a 	mov	r23,r7
  80bed8:	2827883a 	mov	r19,r5
  80bedc:	9d000007 	ldb	r20,0(r19)
  80bee0:	9cc00044 	addi	r19,r19,1
  80bee4:	e507883a 	add	r3,fp,r20
  80bee8:	18800003 	ldbu	r2,0(r3)
  80beec:	1080020c 	andi	r2,r2,8
  80bef0:	103ffa1e 	bne	r2,zero,80bedc <_strtoull_r+0x4c>
  80bef4:	00800b44 	movi	r2,45
  80bef8:	a0807a26 	beq	r20,r2,80c0e4 <_strtoull_r+0x254>
  80befc:	00800ac4 	movi	r2,43
  80bf00:	a0807526 	beq	r20,r2,80c0d8 <_strtoull_r+0x248>
  80bf04:	d8000015 	stw	zero,0(sp)
  80bf08:	b807003a 	cmpeq	r3,r23,zero
  80bf0c:	18005a1e 	bne	r3,zero,80c078 <_strtoull_r+0x1e8>
  80bf10:	00800404 	movi	r2,16
  80bf14:	b8805826 	beq	r23,r2,80c078 <_strtoull_r+0x1e8>
  80bf18:	b82dd7fa 	srai	r22,r23,31
  80bf1c:	043fffc4 	movi	r16,-1
  80bf20:	8009883a 	mov	r4,r16
  80bf24:	800b883a 	mov	r5,r16
  80bf28:	b80d883a 	mov	r6,r23
  80bf2c:	b00f883a 	mov	r7,r22
  80bf30:	080d79c0 	call	80d79c <__udivdi3>
  80bf34:	8009883a 	mov	r4,r16
  80bf38:	800b883a 	mov	r5,r16
  80bf3c:	b80d883a 	mov	r6,r23
  80bf40:	b00f883a 	mov	r7,r22
  80bf44:	1023883a 	mov	r17,r2
  80bf48:	1825883a 	mov	r18,r3
  80bf4c:	080de080 	call	80de08 <__umoddi3>
  80bf50:	b82b883a 	mov	r21,r23
  80bf54:	1019883a 	mov	r12,r2
  80bf58:	e505883a 	add	r2,fp,r20
  80bf5c:	11000003 	ldbu	r4,0(r2)
  80bf60:	0015883a 	mov	r10,zero
  80bf64:	0017883a 	mov	r11,zero
  80bf68:	20c0010c 	andi	r3,r4,4
  80bf6c:	000d883a 	mov	r6,zero
  80bf70:	18001c26 	beq	r3,zero,80bfe4 <_strtoull_r+0x154>
  80bf74:	a43ff404 	addi	r16,r20,-48
  80bf78:	85c0220e 	bge	r16,r23,80c004 <_strtoull_r+0x174>
  80bf7c:	30003c16 	blt	r6,zero,80c070 <_strtoull_r+0x1e0>
  80bf80:	92c03b36 	bltu	r18,r11,80c070 <_strtoull_r+0x1e0>
  80bf84:	5c803926 	beq	r11,r18,80c06c <_strtoull_r+0x1dc>
  80bf88:	54404c26 	beq	r10,r17,80c0bc <_strtoull_r+0x22c>
  80bf8c:	580b883a 	mov	r5,r11
  80bf90:	5009883a 	mov	r4,r10
  80bf94:	a80d883a 	mov	r6,r21
  80bf98:	b00f883a 	mov	r7,r22
  80bf9c:	db000415 	stw	r12,16(sp)
  80bfa0:	080d5d40 	call	80d5d4 <__muldi3>
  80bfa4:	8013d7fa 	srai	r9,r16,31
  80bfa8:	100d883a 	mov	r6,r2
  80bfac:	1405883a 	add	r2,r2,r16
  80bfb0:	118d803a 	cmpltu	r6,r2,r6
  80bfb4:	1a47883a 	add	r3,r3,r9
  80bfb8:	db000417 	ldw	r12,16(sp)
  80bfbc:	30cd883a 	add	r6,r6,r3
  80bfc0:	3017883a 	mov	r11,r6
  80bfc4:	1015883a 	mov	r10,r2
  80bfc8:	01800044 	movi	r6,1
  80bfcc:	9d000007 	ldb	r20,0(r19)
  80bfd0:	9cc00044 	addi	r19,r19,1
  80bfd4:	e505883a 	add	r2,fp,r20
  80bfd8:	11000003 	ldbu	r4,0(r2)
  80bfdc:	20c0010c 	andi	r3,r4,4
  80bfe0:	183fe41e 	bne	r3,zero,80bf74 <_strtoull_r+0xe4>
  80bfe4:	208000cc 	andi	r2,r4,3
  80bfe8:	10000626 	beq	r2,zero,80c004 <_strtoull_r+0x174>
  80bfec:	2080004c 	andi	r2,r4,1
  80bff0:	1005003a 	cmpeq	r2,r2,zero
  80bff4:	10002e1e 	bne	r2,zero,80c0b0 <_strtoull_r+0x220>
  80bff8:	02000dc4 	movi	r8,55
  80bffc:	a221c83a 	sub	r16,r20,r8
  80c000:	85ffde16 	blt	r16,r23,80bf7c <_strtoull_r+0xec>
  80c004:	3000530e 	bge	r6,zero,80c154 <_strtoull_r+0x2c4>
  80c008:	d8c00117 	ldw	r3,4(sp)
  80c00c:	02bfffc4 	movi	r10,-1
  80c010:	00800884 	movi	r2,34
  80c014:	5017883a 	mov	r11,r10
  80c018:	18800015 	stw	r2,0(r3)
  80c01c:	d8800317 	ldw	r2,12(sp)
  80c020:	10000426 	beq	r2,zero,80c034 <_strtoull_r+0x1a4>
  80c024:	3000291e 	bne	r6,zero,80c0cc <_strtoull_r+0x23c>
  80c028:	d8800217 	ldw	r2,8(sp)
  80c02c:	d8c00317 	ldw	r3,12(sp)
  80c030:	18800015 	stw	r2,0(r3)
  80c034:	5005883a 	mov	r2,r10
  80c038:	5807883a 	mov	r3,r11
  80c03c:	dfc00e17 	ldw	ra,56(sp)
  80c040:	df000d17 	ldw	fp,52(sp)
  80c044:	ddc00c17 	ldw	r23,48(sp)
  80c048:	dd800b17 	ldw	r22,44(sp)
  80c04c:	dd400a17 	ldw	r21,40(sp)
  80c050:	dd000917 	ldw	r20,36(sp)
  80c054:	dcc00817 	ldw	r19,32(sp)
  80c058:	dc800717 	ldw	r18,28(sp)
  80c05c:	dc400617 	ldw	r17,24(sp)
  80c060:	dc000517 	ldw	r16,20(sp)
  80c064:	dec00f04 	addi	sp,sp,60
  80c068:	f800283a 	ret
  80c06c:	8abfc62e 	bgeu	r17,r10,80bf88 <_strtoull_r+0xf8>
  80c070:	01bfffc4 	movi	r6,-1
  80c074:	003fd506 	br	80bfcc <_strtoull_r+0x13c>
  80c078:	00800c04 	movi	r2,48
  80c07c:	a0801e26 	beq	r20,r2,80c0f8 <_strtoull_r+0x268>
  80c080:	183fa526 	beq	r3,zero,80bf18 <_strtoull_r+0x88>
  80c084:	00800c04 	movi	r2,48
  80c088:	a0802a26 	beq	r20,r2,80c134 <_strtoull_r+0x2a4>
  80c08c:	05c00284 	movi	r23,10
  80c090:	b82b883a 	mov	r21,r23
  80c094:	046666b4 	movhi	r17,39322
  80c098:	8c666644 	addi	r17,r17,-26215
  80c09c:	002d883a 	mov	r22,zero
  80c0a0:	048666b4 	movhi	r18,6554
  80c0a4:	94a66644 	addi	r18,r18,-26215
  80c0a8:	03000144 	movi	r12,5
  80c0ac:	003faa06 	br	80bf58 <_strtoull_r+0xc8>
  80c0b0:	020015c4 	movi	r8,87
  80c0b4:	a221c83a 	sub	r16,r20,r8
  80c0b8:	003fd106 	br	80c000 <_strtoull_r+0x170>
  80c0bc:	5cbfb31e 	bne	r11,r18,80bf8c <_strtoull_r+0xfc>
  80c0c0:	643fb20e 	bge	r12,r16,80bf8c <_strtoull_r+0xfc>
  80c0c4:	01bfffc4 	movi	r6,-1
  80c0c8:	003fc006 	br	80bfcc <_strtoull_r+0x13c>
  80c0cc:	9cffffc4 	addi	r19,r19,-1
  80c0d0:	dcc00215 	stw	r19,8(sp)
  80c0d4:	003fd406 	br	80c028 <_strtoull_r+0x198>
  80c0d8:	9d000007 	ldb	r20,0(r19)
  80c0dc:	9cc00044 	addi	r19,r19,1
  80c0e0:	003f8806 	br	80bf04 <_strtoull_r+0x74>
  80c0e4:	9d000007 	ldb	r20,0(r19)
  80c0e8:	00800044 	movi	r2,1
  80c0ec:	9cc00044 	addi	r19,r19,1
  80c0f0:	d8800015 	stw	r2,0(sp)
  80c0f4:	003f8406 	br	80bf08 <_strtoull_r+0x78>
  80c0f8:	99000007 	ldb	r4,0(r19)
  80c0fc:	00801e04 	movi	r2,120
  80c100:	20800226 	beq	r4,r2,80c10c <_strtoull_r+0x27c>
  80c104:	00801604 	movi	r2,88
  80c108:	20bfdd1e 	bne	r4,r2,80c080 <_strtoull_r+0x1f0>
  80c10c:	9d000047 	ldb	r20,1(r19)
  80c110:	05c00404 	movi	r23,16
  80c114:	b82b883a 	mov	r21,r23
  80c118:	047fffc4 	movi	r17,-1
  80c11c:	9cc00084 	addi	r19,r19,2
  80c120:	002d883a 	mov	r22,zero
  80c124:	04840034 	movhi	r18,4096
  80c128:	94bfffc4 	addi	r18,r18,-1
  80c12c:	030003c4 	movi	r12,15
  80c130:	003f8906 	br	80bf58 <_strtoull_r+0xc8>
  80c134:	05c00204 	movi	r23,8
  80c138:	b82b883a 	mov	r21,r23
  80c13c:	047fffc4 	movi	r17,-1
  80c140:	002d883a 	mov	r22,zero
  80c144:	04880034 	movhi	r18,8192
  80c148:	94bfffc4 	addi	r18,r18,-1
  80c14c:	030001c4 	movi	r12,7
  80c150:	003f8106 	br	80bf58 <_strtoull_r+0xc8>
  80c154:	d8c00017 	ldw	r3,0(sp)
  80c158:	1805003a 	cmpeq	r2,r3,zero
  80c15c:	103faf1e 	bne	r2,zero,80c01c <_strtoull_r+0x18c>
  80c160:	0009883a 	mov	r4,zero
  80c164:	2285c83a 	sub	r2,r4,r10
  80c168:	02c7c83a 	sub	r3,zero,r11
  80c16c:	2089803a 	cmpltu	r4,r4,r2
  80c170:	1909c83a 	sub	r4,r3,r4
  80c174:	1015883a 	mov	r10,r2
  80c178:	2017883a 	mov	r11,r4
  80c17c:	003fa706 	br	80c01c <_strtoull_r+0x18c>

0080c180 <__submore>:
  80c180:	defffa04 	addi	sp,sp,-24
  80c184:	28c00c17 	ldw	r3,48(r5)
  80c188:	dc800215 	stw	r18,8(sp)
  80c18c:	2825883a 	mov	r18,r5
  80c190:	dc000015 	stw	r16,0(sp)
  80c194:	90801004 	addi	r2,r18,64
  80c198:	04010004 	movi	r16,1024
  80c19c:	dfc00515 	stw	ra,20(sp)
  80c1a0:	dd000415 	stw	r20,16(sp)
  80c1a4:	dcc00315 	stw	r19,12(sp)
  80c1a8:	dc400115 	stw	r17,4(sp)
  80c1ac:	800b883a 	mov	r5,r16
  80c1b0:	18801b26 	beq	r3,r2,80c220 <__submore+0xa0>
  80c1b4:	94400d17 	ldw	r17,52(r18)
  80c1b8:	180b883a 	mov	r5,r3
  80c1bc:	8c69883a 	add	r20,r17,r17
  80c1c0:	a00d883a 	mov	r6,r20
  80c1c4:	08094380 	call	809438 <_realloc_r>
  80c1c8:	1467883a 	add	r19,r2,r17
  80c1cc:	1021883a 	mov	r16,r2
  80c1d0:	880d883a 	mov	r6,r17
  80c1d4:	9809883a 	mov	r4,r19
  80c1d8:	100b883a 	mov	r5,r2
  80c1dc:	10000e26 	beq	r2,zero,80c218 <__submore+0x98>
  80c1e0:	0807fa80 	call	807fa8 <memcpy>
  80c1e4:	000d883a 	mov	r6,zero
  80c1e8:	95000d15 	stw	r20,52(r18)
  80c1ec:	94c00015 	stw	r19,0(r18)
  80c1f0:	94000c15 	stw	r16,48(r18)
  80c1f4:	3005883a 	mov	r2,r6
  80c1f8:	dfc00517 	ldw	ra,20(sp)
  80c1fc:	dd000417 	ldw	r20,16(sp)
  80c200:	dcc00317 	ldw	r19,12(sp)
  80c204:	dc800217 	ldw	r18,8(sp)
  80c208:	dc400117 	ldw	r17,4(sp)
  80c20c:	dc000017 	ldw	r16,0(sp)
  80c210:	dec00604 	addi	sp,sp,24
  80c214:	f800283a 	ret
  80c218:	01bfffc4 	movi	r6,-1
  80c21c:	003ff506 	br	80c1f4 <__submore+0x74>
  80c220:	0800d2c0 	call	800d2c <_malloc_r>
  80c224:	1009883a 	mov	r4,r2
  80c228:	1140ff44 	addi	r5,r2,1021
  80c22c:	000d883a 	mov	r6,zero
  80c230:	103ff926 	beq	r2,zero,80c218 <__submore+0x98>
  80c234:	90801083 	ldbu	r2,66(r18)
  80c238:	94000d15 	stw	r16,52(r18)
  80c23c:	91000c15 	stw	r4,48(r18)
  80c240:	28800085 	stb	r2,2(r5)
  80c244:	90c01043 	ldbu	r3,65(r18)
  80c248:	28c00045 	stb	r3,1(r5)
  80c24c:	90801003 	ldbu	r2,64(r18)
  80c250:	2080ff45 	stb	r2,1021(r4)
  80c254:	91400015 	stw	r5,0(r18)
  80c258:	003fe606 	br	80c1f4 <__submore+0x74>

0080c25c <_ungetc_r>:
  80c25c:	defffc04 	addi	sp,sp,-16
  80c260:	00bfffc4 	movi	r2,-1
  80c264:	dc400215 	stw	r17,8(sp)
  80c268:	dc000115 	stw	r16,4(sp)
  80c26c:	dfc00315 	stw	ra,12(sp)
  80c270:	2821883a 	mov	r16,r5
  80c274:	2023883a 	mov	r17,r4
  80c278:	28801826 	beq	r5,r2,80c2dc <_ungetc_r+0x80>
  80c27c:	20000226 	beq	r4,zero,80c288 <_ungetc_r+0x2c>
  80c280:	20800e17 	ldw	r2,56(r4)
  80c284:	10001b26 	beq	r2,zero,80c2f4 <_ungetc_r+0x98>
  80c288:	3100030b 	ldhu	r4,12(r6)
  80c28c:	00bff7c4 	movi	r2,-33
  80c290:	2084703a 	and	r2,r4,r2
  80c294:	117fffcc 	andi	r5,r2,65535
  80c298:	28c0010c 	andi	r3,r5,4
  80c29c:	1009883a 	mov	r4,r2
  80c2a0:	3080030d 	sth	r2,12(r6)
  80c2a4:	18003526 	beq	r3,zero,80c37c <_ungetc_r+0x120>
  80c2a8:	30800c17 	ldw	r2,48(r6)
  80c2ac:	84003fcc 	andi	r16,r16,255
  80c2b0:	10001426 	beq	r2,zero,80c304 <_ungetc_r+0xa8>
  80c2b4:	30c00117 	ldw	r3,4(r6)
  80c2b8:	30800d17 	ldw	r2,52(r6)
  80c2bc:	1880380e 	bge	r3,r2,80c3a0 <_ungetc_r+0x144>
  80c2c0:	30c00017 	ldw	r3,0(r6)
  80c2c4:	19ffffc4 	addi	r7,r3,-1
  80c2c8:	31c00015 	stw	r7,0(r6)
  80c2cc:	1c3fffc5 	stb	r16,-1(r3)
  80c2d0:	30800117 	ldw	r2,4(r6)
  80c2d4:	10800044 	addi	r2,r2,1
  80c2d8:	30800115 	stw	r2,4(r6)
  80c2dc:	8005883a 	mov	r2,r16
  80c2e0:	dfc00317 	ldw	ra,12(sp)
  80c2e4:	dc400217 	ldw	r17,8(sp)
  80c2e8:	dc000117 	ldw	r16,4(sp)
  80c2ec:	dec00404 	addi	sp,sp,16
  80c2f0:	f800283a 	ret
  80c2f4:	d9800015 	stw	r6,0(sp)
  80c2f8:	0806c0c0 	call	806c0c <__sinit>
  80c2fc:	d9800017 	ldw	r6,0(sp)
  80c300:	003fe106 	br	80c288 <_ungetc_r+0x2c>
  80c304:	30800417 	ldw	r2,16(r6)
  80c308:	10002326 	beq	r2,zero,80c398 <_ungetc_r+0x13c>
  80c30c:	31c00017 	ldw	r7,0(r6)
  80c310:	11c0022e 	bgeu	r2,r7,80c31c <_ungetc_r+0xc0>
  80c314:	38bfffc3 	ldbu	r2,-1(r7)
  80c318:	80801226 	beq	r16,r2,80c364 <_ungetc_r+0x108>
  80c31c:	30c00117 	ldw	r3,4(r6)
  80c320:	00800044 	movi	r2,1
  80c324:	30800115 	stw	r2,4(r6)
  80c328:	008000c4 	movi	r2,3
  80c32c:	31001004 	addi	r4,r6,64
  80c330:	31401084 	addi	r5,r6,66
  80c334:	30800d15 	stw	r2,52(r6)
  80c338:	8005883a 	mov	r2,r16
  80c33c:	30c00f15 	stw	r3,60(r6)
  80c340:	31c00e15 	stw	r7,56(r6)
  80c344:	31000c15 	stw	r4,48(r6)
  80c348:	31400015 	stw	r5,0(r6)
  80c34c:	34001085 	stb	r16,66(r6)
  80c350:	dfc00317 	ldw	ra,12(sp)
  80c354:	dc400217 	ldw	r17,8(sp)
  80c358:	dc000117 	ldw	r16,4(sp)
  80c35c:	dec00404 	addi	sp,sp,16
  80c360:	f800283a 	ret
  80c364:	30800117 	ldw	r2,4(r6)
  80c368:	39ffffc4 	addi	r7,r7,-1
  80c36c:	31c00015 	stw	r7,0(r6)
  80c370:	10800044 	addi	r2,r2,1
  80c374:	30800115 	stw	r2,4(r6)
  80c378:	003fd806 	br	80c2dc <_ungetc_r+0x80>
  80c37c:	2880040c 	andi	r2,r5,16
  80c380:	10000d26 	beq	r2,zero,80c3b8 <_ungetc_r+0x15c>
  80c384:	2880020c 	andi	r2,r5,8
  80c388:	10000d1e 	bne	r2,zero,80c3c0 <_ungetc_r+0x164>
  80c38c:	20800114 	ori	r2,r4,4
  80c390:	3080030d 	sth	r2,12(r6)
  80c394:	003fc406 	br	80c2a8 <_ungetc_r+0x4c>
  80c398:	31c00017 	ldw	r7,0(r6)
  80c39c:	003fdf06 	br	80c31c <_ungetc_r+0xc0>
  80c3a0:	300b883a 	mov	r5,r6
  80c3a4:	8809883a 	mov	r4,r17
  80c3a8:	d9800015 	stw	r6,0(sp)
  80c3ac:	080c1800 	call	80c180 <__submore>
  80c3b0:	d9800017 	ldw	r6,0(sp)
  80c3b4:	103fc226 	beq	r2,zero,80c2c0 <_ungetc_r+0x64>
  80c3b8:	043fffc4 	movi	r16,-1
  80c3bc:	003fc706 	br	80c2dc <_ungetc_r+0x80>
  80c3c0:	300b883a 	mov	r5,r6
  80c3c4:	8809883a 	mov	r4,r17
  80c3c8:	d9800015 	stw	r6,0(sp)
  80c3cc:	08069740 	call	806974 <_fflush_r>
  80c3d0:	d9800017 	ldw	r6,0(sp)
  80c3d4:	103ff81e 	bne	r2,zero,80c3b8 <_ungetc_r+0x15c>
  80c3d8:	3100030b 	ldhu	r4,12(r6)
  80c3dc:	00bffdc4 	movi	r2,-9
  80c3e0:	30000215 	stw	zero,8(r6)
  80c3e4:	2084703a 	and	r2,r4,r2
  80c3e8:	1009883a 	mov	r4,r2
  80c3ec:	3080030d 	sth	r2,12(r6)
  80c3f0:	30000615 	stw	zero,24(r6)
  80c3f4:	003fe506 	br	80c38c <_ungetc_r+0x130>

0080c3f8 <ungetc>:
  80c3f8:	018020b4 	movhi	r6,130
  80c3fc:	31b96204 	addi	r6,r6,-6776
  80c400:	2007883a 	mov	r3,r4
  80c404:	31000017 	ldw	r4,0(r6)
  80c408:	280d883a 	mov	r6,r5
  80c40c:	180b883a 	mov	r5,r3
  80c410:	080c25c1 	jmpi	80c25c <_ungetc_r>

0080c414 <__swbuf_r>:
  80c414:	defffc04 	addi	sp,sp,-16
  80c418:	dc400215 	stw	r17,8(sp)
  80c41c:	dc000115 	stw	r16,4(sp)
  80c420:	dfc00315 	stw	ra,12(sp)
  80c424:	2023883a 	mov	r17,r4
  80c428:	2821883a 	mov	r16,r5
  80c42c:	20000226 	beq	r4,zero,80c438 <__swbuf_r+0x24>
  80c430:	20800e17 	ldw	r2,56(r4)
  80c434:	10002f26 	beq	r2,zero,80c4f4 <__swbuf_r+0xe0>
  80c438:	3080030b 	ldhu	r2,12(r6)
  80c43c:	30c00617 	ldw	r3,24(r6)
  80c440:	1080020c 	andi	r2,r2,8
  80c444:	30c00215 	stw	r3,8(r6)
  80c448:	10002226 	beq	r2,zero,80c4d4 <__swbuf_r+0xc0>
  80c44c:	30c00417 	ldw	r3,16(r6)
  80c450:	18002026 	beq	r3,zero,80c4d4 <__swbuf_r+0xc0>
  80c454:	31000017 	ldw	r4,0(r6)
  80c458:	30800517 	ldw	r2,20(r6)
  80c45c:	20c7c83a 	sub	r3,r4,r3
  80c460:	18802f0e 	bge	r3,r2,80c520 <__swbuf_r+0x10c>
  80c464:	19400044 	addi	r5,r3,1
  80c468:	30800217 	ldw	r2,8(r6)
  80c46c:	84003fcc 	andi	r16,r16,255
  80c470:	20c00044 	addi	r3,r4,1
  80c474:	10bfffc4 	addi	r2,r2,-1
  80c478:	30800215 	stw	r2,8(r6)
  80c47c:	24000005 	stb	r16,0(r4)
  80c480:	30800517 	ldw	r2,20(r6)
  80c484:	30c00015 	stw	r3,0(r6)
  80c488:	11400c26 	beq	r2,r5,80c4bc <__swbuf_r+0xa8>
  80c48c:	3080030b 	ldhu	r2,12(r6)
  80c490:	1080004c 	andi	r2,r2,1
  80c494:	1005003a 	cmpeq	r2,r2,zero
  80c498:	10000626 	beq	r2,zero,80c4b4 <__swbuf_r+0xa0>
  80c49c:	8005883a 	mov	r2,r16
  80c4a0:	dfc00317 	ldw	ra,12(sp)
  80c4a4:	dc400217 	ldw	r17,8(sp)
  80c4a8:	dc000117 	ldw	r16,4(sp)
  80c4ac:	dec00404 	addi	sp,sp,16
  80c4b0:	f800283a 	ret
  80c4b4:	00800284 	movi	r2,10
  80c4b8:	80bff81e 	bne	r16,r2,80c49c <__swbuf_r+0x88>
  80c4bc:	8809883a 	mov	r4,r17
  80c4c0:	300b883a 	mov	r5,r6
  80c4c4:	08069740 	call	806974 <_fflush_r>
  80c4c8:	103ff426 	beq	r2,zero,80c49c <__swbuf_r+0x88>
  80c4cc:	043fffc4 	movi	r16,-1
  80c4d0:	003ff206 	br	80c49c <__swbuf_r+0x88>
  80c4d4:	300b883a 	mov	r5,r6
  80c4d8:	8809883a 	mov	r4,r17
  80c4dc:	d9800015 	stw	r6,0(sp)
  80c4e0:	08050400 	call	805040 <__swsetup_r>
  80c4e4:	d9800017 	ldw	r6,0(sp)
  80c4e8:	1000061e 	bne	r2,zero,80c504 <__swbuf_r+0xf0>
  80c4ec:	30c00417 	ldw	r3,16(r6)
  80c4f0:	003fd806 	br	80c454 <__swbuf_r+0x40>
  80c4f4:	d9800015 	stw	r6,0(sp)
  80c4f8:	0806c0c0 	call	806c0c <__sinit>
  80c4fc:	d9800017 	ldw	r6,0(sp)
  80c500:	003fcd06 	br	80c438 <__swbuf_r+0x24>
  80c504:	3080030b 	ldhu	r2,12(r6)
  80c508:	00c00244 	movi	r3,9
  80c50c:	043fffc4 	movi	r16,-1
  80c510:	10801014 	ori	r2,r2,64
  80c514:	3080030d 	sth	r2,12(r6)
  80c518:	88c00015 	stw	r3,0(r17)
  80c51c:	003fdf06 	br	80c49c <__swbuf_r+0x88>
  80c520:	300b883a 	mov	r5,r6
  80c524:	8809883a 	mov	r4,r17
  80c528:	d9800015 	stw	r6,0(sp)
  80c52c:	08069740 	call	806974 <_fflush_r>
  80c530:	d9800017 	ldw	r6,0(sp)
  80c534:	103fe51e 	bne	r2,zero,80c4cc <__swbuf_r+0xb8>
  80c538:	31000017 	ldw	r4,0(r6)
  80c53c:	01400044 	movi	r5,1
  80c540:	003fc906 	br	80c468 <__swbuf_r+0x54>

0080c544 <__swbuf>:
  80c544:	018020b4 	movhi	r6,130
  80c548:	31b96204 	addi	r6,r6,-6776
  80c54c:	2007883a 	mov	r3,r4
  80c550:	31000017 	ldw	r4,0(r6)
  80c554:	280d883a 	mov	r6,r5
  80c558:	180b883a 	mov	r5,r3
  80c55c:	080c4141 	jmpi	80c414 <__swbuf_r>

0080c560 <_write_r>:
  80c560:	defffd04 	addi	sp,sp,-12
  80c564:	dc000015 	stw	r16,0(sp)
  80c568:	040020b4 	movhi	r16,130
  80c56c:	84007204 	addi	r16,r16,456
  80c570:	dc400115 	stw	r17,4(sp)
  80c574:	80000015 	stw	zero,0(r16)
  80c578:	2023883a 	mov	r17,r4
  80c57c:	2809883a 	mov	r4,r5
  80c580:	300b883a 	mov	r5,r6
  80c584:	380d883a 	mov	r6,r7
  80c588:	dfc00215 	stw	ra,8(sp)
  80c58c:	0810bb40 	call	810bb4 <write>
  80c590:	1007883a 	mov	r3,r2
  80c594:	00bfffc4 	movi	r2,-1
  80c598:	18800626 	beq	r3,r2,80c5b4 <_write_r+0x54>
  80c59c:	1805883a 	mov	r2,r3
  80c5a0:	dfc00217 	ldw	ra,8(sp)
  80c5a4:	dc400117 	ldw	r17,4(sp)
  80c5a8:	dc000017 	ldw	r16,0(sp)
  80c5ac:	dec00304 	addi	sp,sp,12
  80c5b0:	f800283a 	ret
  80c5b4:	80800017 	ldw	r2,0(r16)
  80c5b8:	103ff826 	beq	r2,zero,80c59c <_write_r+0x3c>
  80c5bc:	88800015 	stw	r2,0(r17)
  80c5c0:	1805883a 	mov	r2,r3
  80c5c4:	dfc00217 	ldw	ra,8(sp)
  80c5c8:	dc400117 	ldw	r17,4(sp)
  80c5cc:	dc000017 	ldw	r16,0(sp)
  80c5d0:	dec00304 	addi	sp,sp,12
  80c5d4:	f800283a 	ret

0080c5d8 <_calloc_r>:
  80c5d8:	defffe04 	addi	sp,sp,-8
  80c5dc:	dc400015 	stw	r17,0(sp)
  80c5e0:	2023883a 	mov	r17,r4
  80c5e4:	2809883a 	mov	r4,r5
  80c5e8:	300b883a 	mov	r5,r6
  80c5ec:	dfc00115 	stw	ra,4(sp)
  80c5f0:	080f9440 	call	80f944 <__mulsi3>
  80c5f4:	100b883a 	mov	r5,r2
  80c5f8:	8809883a 	mov	r4,r17
  80c5fc:	0800d2c0 	call	800d2c <_malloc_r>
  80c600:	1023883a 	mov	r17,r2
  80c604:	01c00904 	movi	r7,36
  80c608:	10000d26 	beq	r2,zero,80c640 <_calloc_r+0x68>
  80c60c:	10ffff17 	ldw	r3,-4(r2)
  80c610:	1009883a 	mov	r4,r2
  80c614:	00bfff04 	movi	r2,-4
  80c618:	1886703a 	and	r3,r3,r2
  80c61c:	1887883a 	add	r3,r3,r2
  80c620:	180d883a 	mov	r6,r3
  80c624:	000b883a 	mov	r5,zero
  80c628:	38c01736 	bltu	r7,r3,80c688 <_calloc_r+0xb0>
  80c62c:	008004c4 	movi	r2,19
  80c630:	10c00836 	bltu	r2,r3,80c654 <_calloc_r+0x7c>
  80c634:	20000215 	stw	zero,8(r4)
  80c638:	20000015 	stw	zero,0(r4)
  80c63c:	20000115 	stw	zero,4(r4)
  80c640:	8805883a 	mov	r2,r17
  80c644:	dfc00117 	ldw	ra,4(sp)
  80c648:	dc400017 	ldw	r17,0(sp)
  80c64c:	dec00204 	addi	sp,sp,8
  80c650:	f800283a 	ret
  80c654:	008006c4 	movi	r2,27
  80c658:	88000015 	stw	zero,0(r17)
  80c65c:	88000115 	stw	zero,4(r17)
  80c660:	89000204 	addi	r4,r17,8
  80c664:	10fff32e 	bgeu	r2,r3,80c634 <_calloc_r+0x5c>
  80c668:	88000215 	stw	zero,8(r17)
  80c66c:	88000315 	stw	zero,12(r17)
  80c670:	89000404 	addi	r4,r17,16
  80c674:	19ffef1e 	bne	r3,r7,80c634 <_calloc_r+0x5c>
  80c678:	89000604 	addi	r4,r17,24
  80c67c:	88000415 	stw	zero,16(r17)
  80c680:	88000515 	stw	zero,20(r17)
  80c684:	003feb06 	br	80c634 <_calloc_r+0x5c>
  80c688:	08081280 	call	808128 <memset>
  80c68c:	8805883a 	mov	r2,r17
  80c690:	dfc00117 	ldw	ra,4(sp)
  80c694:	dc400017 	ldw	r17,0(sp)
  80c698:	dec00204 	addi	sp,sp,8
  80c69c:	f800283a 	ret

0080c6a0 <_close_r>:
  80c6a0:	defffd04 	addi	sp,sp,-12
  80c6a4:	dc000015 	stw	r16,0(sp)
  80c6a8:	040020b4 	movhi	r16,130
  80c6ac:	84007204 	addi	r16,r16,456
  80c6b0:	dc400115 	stw	r17,4(sp)
  80c6b4:	80000015 	stw	zero,0(r16)
  80c6b8:	2023883a 	mov	r17,r4
  80c6bc:	2809883a 	mov	r4,r5
  80c6c0:	dfc00215 	stw	ra,8(sp)
  80c6c4:	081020c0 	call	81020c <close>
  80c6c8:	1007883a 	mov	r3,r2
  80c6cc:	00bfffc4 	movi	r2,-1
  80c6d0:	18800626 	beq	r3,r2,80c6ec <_close_r+0x4c>
  80c6d4:	1805883a 	mov	r2,r3
  80c6d8:	dfc00217 	ldw	ra,8(sp)
  80c6dc:	dc400117 	ldw	r17,4(sp)
  80c6e0:	dc000017 	ldw	r16,0(sp)
  80c6e4:	dec00304 	addi	sp,sp,12
  80c6e8:	f800283a 	ret
  80c6ec:	80800017 	ldw	r2,0(r16)
  80c6f0:	103ff826 	beq	r2,zero,80c6d4 <_close_r+0x34>
  80c6f4:	88800015 	stw	r2,0(r17)
  80c6f8:	1805883a 	mov	r2,r3
  80c6fc:	dfc00217 	ldw	ra,8(sp)
  80c700:	dc400117 	ldw	r17,4(sp)
  80c704:	dc000017 	ldw	r16,0(sp)
  80c708:	dec00304 	addi	sp,sp,12
  80c70c:	f800283a 	ret

0080c710 <_fclose_r>:
  80c710:	defffc04 	addi	sp,sp,-16
  80c714:	dc400115 	stw	r17,4(sp)
  80c718:	dc000015 	stw	r16,0(sp)
  80c71c:	dfc00315 	stw	ra,12(sp)
  80c720:	dc800215 	stw	r18,8(sp)
  80c724:	2821883a 	mov	r16,r5
  80c728:	2023883a 	mov	r17,r4
  80c72c:	28002926 	beq	r5,zero,80c7d4 <_fclose_r+0xc4>
  80c730:	0806bfc0 	call	806bfc <__sfp_lock_acquire>
  80c734:	88000226 	beq	r17,zero,80c740 <_fclose_r+0x30>
  80c738:	88800e17 	ldw	r2,56(r17)
  80c73c:	10002d26 	beq	r2,zero,80c7f4 <_fclose_r+0xe4>
  80c740:	8080030f 	ldh	r2,12(r16)
  80c744:	10002226 	beq	r2,zero,80c7d0 <_fclose_r+0xc0>
  80c748:	8809883a 	mov	r4,r17
  80c74c:	800b883a 	mov	r5,r16
  80c750:	08069740 	call	806974 <_fflush_r>
  80c754:	1025883a 	mov	r18,r2
  80c758:	80800b17 	ldw	r2,44(r16)
  80c75c:	10000426 	beq	r2,zero,80c770 <_fclose_r+0x60>
  80c760:	81400717 	ldw	r5,28(r16)
  80c764:	8809883a 	mov	r4,r17
  80c768:	103ee83a 	callr	r2
  80c76c:	10002a16 	blt	r2,zero,80c818 <_fclose_r+0x108>
  80c770:	8080030b 	ldhu	r2,12(r16)
  80c774:	1080200c 	andi	r2,r2,128
  80c778:	1000231e 	bne	r2,zero,80c808 <_fclose_r+0xf8>
  80c77c:	81400c17 	ldw	r5,48(r16)
  80c780:	28000526 	beq	r5,zero,80c798 <_fclose_r+0x88>
  80c784:	80801004 	addi	r2,r16,64
  80c788:	28800226 	beq	r5,r2,80c794 <_fclose_r+0x84>
  80c78c:	8809883a 	mov	r4,r17
  80c790:	08072100 	call	807210 <_free_r>
  80c794:	80000c15 	stw	zero,48(r16)
  80c798:	81401117 	ldw	r5,68(r16)
  80c79c:	28000326 	beq	r5,zero,80c7ac <_fclose_r+0x9c>
  80c7a0:	8809883a 	mov	r4,r17
  80c7a4:	08072100 	call	807210 <_free_r>
  80c7a8:	80001115 	stw	zero,68(r16)
  80c7ac:	8000030d 	sth	zero,12(r16)
  80c7b0:	0806c000 	call	806c00 <__sfp_lock_release>
  80c7b4:	9005883a 	mov	r2,r18
  80c7b8:	dfc00317 	ldw	ra,12(sp)
  80c7bc:	dc800217 	ldw	r18,8(sp)
  80c7c0:	dc400117 	ldw	r17,4(sp)
  80c7c4:	dc000017 	ldw	r16,0(sp)
  80c7c8:	dec00404 	addi	sp,sp,16
  80c7cc:	f800283a 	ret
  80c7d0:	0806c000 	call	806c00 <__sfp_lock_release>
  80c7d4:	0025883a 	mov	r18,zero
  80c7d8:	9005883a 	mov	r2,r18
  80c7dc:	dfc00317 	ldw	ra,12(sp)
  80c7e0:	dc800217 	ldw	r18,8(sp)
  80c7e4:	dc400117 	ldw	r17,4(sp)
  80c7e8:	dc000017 	ldw	r16,0(sp)
  80c7ec:	dec00404 	addi	sp,sp,16
  80c7f0:	f800283a 	ret
  80c7f4:	8809883a 	mov	r4,r17
  80c7f8:	0806c0c0 	call	806c0c <__sinit>
  80c7fc:	8080030f 	ldh	r2,12(r16)
  80c800:	103fd11e 	bne	r2,zero,80c748 <_fclose_r+0x38>
  80c804:	003ff206 	br	80c7d0 <_fclose_r+0xc0>
  80c808:	81400417 	ldw	r5,16(r16)
  80c80c:	8809883a 	mov	r4,r17
  80c810:	08072100 	call	807210 <_free_r>
  80c814:	003fd906 	br	80c77c <_fclose_r+0x6c>
  80c818:	04bfffc4 	movi	r18,-1
  80c81c:	003fd406 	br	80c770 <_fclose_r+0x60>

0080c820 <fclose>:
  80c820:	008020b4 	movhi	r2,130
  80c824:	10b96204 	addi	r2,r2,-6776
  80c828:	200b883a 	mov	r5,r4
  80c82c:	11000017 	ldw	r4,0(r2)
  80c830:	080c7101 	jmpi	80c710 <_fclose_r>

0080c834 <_fstat_r>:
  80c834:	defffd04 	addi	sp,sp,-12
  80c838:	dc000015 	stw	r16,0(sp)
  80c83c:	040020b4 	movhi	r16,130
  80c840:	84007204 	addi	r16,r16,456
  80c844:	dc400115 	stw	r17,4(sp)
  80c848:	80000015 	stw	zero,0(r16)
  80c84c:	2023883a 	mov	r17,r4
  80c850:	2809883a 	mov	r4,r5
  80c854:	300b883a 	mov	r5,r6
  80c858:	dfc00215 	stw	ra,8(sp)
  80c85c:	08103980 	call	810398 <fstat>
  80c860:	1007883a 	mov	r3,r2
  80c864:	00bfffc4 	movi	r2,-1
  80c868:	18800626 	beq	r3,r2,80c884 <_fstat_r+0x50>
  80c86c:	1805883a 	mov	r2,r3
  80c870:	dfc00217 	ldw	ra,8(sp)
  80c874:	dc400117 	ldw	r17,4(sp)
  80c878:	dc000017 	ldw	r16,0(sp)
  80c87c:	dec00304 	addi	sp,sp,12
  80c880:	f800283a 	ret
  80c884:	80800017 	ldw	r2,0(r16)
  80c888:	103ff826 	beq	r2,zero,80c86c <_fstat_r+0x38>
  80c88c:	88800015 	stw	r2,0(r17)
  80c890:	1805883a 	mov	r2,r3
  80c894:	dfc00217 	ldw	ra,8(sp)
  80c898:	dc400117 	ldw	r17,4(sp)
  80c89c:	dc000017 	ldw	r16,0(sp)
  80c8a0:	dec00304 	addi	sp,sp,12
  80c8a4:	f800283a 	ret

0080c8a8 <htinit>:
  80c8a8:	28800003 	ldbu	r2,0(r5)
  80c8ac:	10000626 	beq	r2,zero,80c8c8 <htinit+0x20>
  80c8b0:	1105883a 	add	r2,r2,r4
  80c8b4:	11800005 	stb	r6,0(r2)
  80c8b8:	28800043 	ldbu	r2,1(r5)
  80c8bc:	31800044 	addi	r6,r6,1
  80c8c0:	29400044 	addi	r5,r5,1
  80c8c4:	103ffa1e 	bne	r2,zero,80c8b0 <htinit+0x8>
  80c8c8:	f800283a 	ret

0080c8cc <__hexdig_init>:
  80c8cc:	defffd04 	addi	sp,sp,-12
  80c8d0:	dc400015 	stw	r17,0(sp)
  80c8d4:	044020b4 	movhi	r17,130
  80c8d8:	8c58af04 	addi	r17,r17,25276
  80c8dc:	dcc00115 	stw	r19,4(sp)
  80c8e0:	8809883a 	mov	r4,r17
  80c8e4:	04c00684 	movi	r19,26
  80c8e8:	014020b4 	movhi	r5,130
  80c8ec:	29720904 	addi	r5,r5,-14300
  80c8f0:	01800404 	movi	r6,16
  80c8f4:	dfc00215 	stw	ra,8(sp)
  80c8f8:	080c8a80 	call	80c8a8 <htinit>
  80c8fc:	980d883a 	mov	r6,r19
  80c900:	8809883a 	mov	r4,r17
  80c904:	014020b4 	movhi	r5,130
  80c908:	29720c04 	addi	r5,r5,-14288
  80c90c:	080c8a80 	call	80c8a8 <htinit>
  80c910:	8809883a 	mov	r4,r17
  80c914:	980d883a 	mov	r6,r19
  80c918:	014020b4 	movhi	r5,130
  80c91c:	29720e04 	addi	r5,r5,-14280
  80c920:	dfc00217 	ldw	ra,8(sp)
  80c924:	dcc00117 	ldw	r19,4(sp)
  80c928:	dc400017 	ldw	r17,0(sp)
  80c92c:	dec00304 	addi	sp,sp,12
  80c930:	080c8a81 	jmpi	80c8a8 <htinit>

0080c934 <rshift>:
  80c934:	2807d17a 	srai	r3,r5,5
  80c938:	20800417 	ldw	r2,16(r4)
  80c93c:	22400504 	addi	r9,r4,20
  80c940:	480f883a 	mov	r7,r9
  80c944:	1880190e 	bge	r3,r2,80c9ac <rshift+0x78>
  80c948:	1085883a 	add	r2,r2,r2
  80c94c:	18c7883a 	add	r3,r3,r3
  80c950:	1085883a 	add	r2,r2,r2
  80c954:	18c7883a 	add	r3,r3,r3
  80c958:	294007cc 	andi	r5,r5,31
  80c95c:	4891883a 	add	r8,r9,r2
  80c960:	48cd883a 	add	r6,r9,r3
  80c964:	28001726 	beq	r5,zero,80c9c4 <rshift+0x90>
  80c968:	30c00017 	ldw	r3,0(r6)
  80c96c:	00800804 	movi	r2,32
  80c970:	31800104 	addi	r6,r6,4
  80c974:	1155c83a 	sub	r10,r2,r5
  80c978:	1946d83a 	srl	r3,r3,r5
  80c97c:	3200092e 	bgeu	r6,r8,80c9a4 <rshift+0x70>
  80c980:	30800017 	ldw	r2,0(r6)
  80c984:	1284983a 	sll	r2,r2,r10
  80c988:	10c4b03a 	or	r2,r2,r3
  80c98c:	38800015 	stw	r2,0(r7)
  80c990:	30c00017 	ldw	r3,0(r6)
  80c994:	31800104 	addi	r6,r6,4
  80c998:	39c00104 	addi	r7,r7,4
  80c99c:	1946d83a 	srl	r3,r3,r5
  80c9a0:	323ff736 	bltu	r6,r8,80c980 <rshift+0x4c>
  80c9a4:	38c00015 	stw	r3,0(r7)
  80c9a8:	18000c1e 	bne	r3,zero,80c9dc <rshift+0xa8>
  80c9ac:	3a45c83a 	sub	r2,r7,r9
  80c9b0:	1005d0ba 	srai	r2,r2,2
  80c9b4:	20800415 	stw	r2,16(r4)
  80c9b8:	1000011e 	bne	r2,zero,80c9c0 <rshift+0x8c>
  80c9bc:	20000515 	stw	zero,20(r4)
  80c9c0:	f800283a 	ret
  80c9c4:	323ff92e 	bgeu	r6,r8,80c9ac <rshift+0x78>
  80c9c8:	30800017 	ldw	r2,0(r6)
  80c9cc:	31800104 	addi	r6,r6,4
  80c9d0:	38800015 	stw	r2,0(r7)
  80c9d4:	39c00104 	addi	r7,r7,4
  80c9d8:	003ffa06 	br	80c9c4 <rshift+0x90>
  80c9dc:	39c00104 	addi	r7,r7,4
  80c9e0:	003ff206 	br	80c9ac <rshift+0x78>

0080c9e4 <__gethex>:
  80c9e4:	defff104 	addi	sp,sp,-60
  80c9e8:	df000d15 	stw	fp,52(sp)
  80c9ec:	dcc00815 	stw	r19,32(sp)
  80c9f0:	dfc00e15 	stw	ra,56(sp)
  80c9f4:	ddc00c15 	stw	r23,48(sp)
  80c9f8:	dd800b15 	stw	r22,44(sp)
  80c9fc:	dd400a15 	stw	r21,40(sp)
  80ca00:	dd000915 	stw	r20,36(sp)
  80ca04:	dc800715 	stw	r18,28(sp)
  80ca08:	dc400615 	stw	r17,24(sp)
  80ca0c:	dc000515 	stw	r16,20(sp)
  80ca10:	04c020b4 	movhi	r19,130
  80ca14:	9cd8af04 	addi	r19,r19,25276
  80ca18:	98800c03 	ldbu	r2,48(r19)
  80ca1c:	d9000115 	stw	r4,4(sp)
  80ca20:	2839883a 	mov	fp,r5
  80ca24:	d9800215 	stw	r6,8(sp)
  80ca28:	d9c00315 	stw	r7,12(sp)
  80ca2c:	10007526 	beq	r2,zero,80cc04 <__gethex+0x220>
  80ca30:	e1800017 	ldw	r6,0(fp)
  80ca34:	00800c04 	movi	r2,48
  80ca38:	31000083 	ldbu	r4,2(r6)
  80ca3c:	30c00084 	addi	r3,r6,2
  80ca40:	2080761e 	bne	r4,r2,80cc1c <__gethex+0x238>
  80ca44:	200b883a 	mov	r5,r4
  80ca48:	3007883a 	mov	r3,r6
  80ca4c:	188000c3 	ldbu	r2,3(r3)
  80ca50:	18c00044 	addi	r3,r3,1
  80ca54:	1009883a 	mov	r4,r2
  80ca58:	117ffc26 	beq	r2,r5,80ca4c <__gethex+0x68>
  80ca5c:	198fc83a 	sub	r7,r3,r6
  80ca60:	19400084 	addi	r5,r3,2
  80ca64:	24c5883a 	add	r2,r4,r19
  80ca68:	10c00003 	ldbu	r3,0(r2)
  80ca6c:	18002e26 	beq	r3,zero,80cb28 <__gethex+0x144>
  80ca70:	29000003 	ldbu	r4,0(r5)
  80ca74:	282b883a 	mov	r21,r5
  80ca78:	000d883a 	mov	r6,zero
  80ca7c:	002d883a 	mov	r22,zero
  80ca80:	21003fcc 	andi	r4,r4,255
  80ca84:	24c5883a 	add	r2,r4,r19
  80ca88:	10c00003 	ldbu	r3,0(r2)
  80ca8c:	18000526 	beq	r3,zero,80caa4 <__gethex+0xc0>
  80ca90:	29400044 	addi	r5,r5,1
  80ca94:	29000003 	ldbu	r4,0(r5)
  80ca98:	24c5883a 	add	r2,r4,r19
  80ca9c:	10c00003 	ldbu	r3,0(r2)
  80caa0:	183ffb1e 	bne	r3,zero,80ca90 <__gethex+0xac>
  80caa4:	00800b84 	movi	r2,46
  80caa8:	20805f26 	beq	r4,r2,80cc28 <__gethex+0x244>
  80caac:	30008226 	beq	r6,zero,80ccb8 <__gethex+0x2d4>
  80cab0:	2985c83a 	sub	r2,r5,r6
  80cab4:	1085883a 	add	r2,r2,r2
  80cab8:	1085883a 	add	r2,r2,r2
  80cabc:	0085c83a 	sub	r2,zero,r2
  80cac0:	d8800015 	stw	r2,0(sp)
  80cac4:	2825883a 	mov	r18,r5
  80cac8:	90c00003 	ldbu	r3,0(r18)
  80cacc:	00801404 	movi	r2,80
  80cad0:	18801e26 	beq	r3,r2,80cb4c <__gethex+0x168>
  80cad4:	00801c04 	movi	r2,112
  80cad8:	18801c26 	beq	r3,r2,80cb4c <__gethex+0x168>
  80cadc:	9023883a 	mov	r17,r18
  80cae0:	b005003a 	cmpeq	r2,r22,zero
  80cae4:	e4400015 	stw	r17,0(fp)
  80cae8:	10008d1e 	bne	r2,zero,80cd20 <__gethex+0x33c>
  80caec:	38004326 	beq	r7,zero,80cbfc <__gethex+0x218>
  80caf0:	0025883a 	mov	r18,zero
  80caf4:	9005883a 	mov	r2,r18
  80caf8:	dfc00e17 	ldw	ra,56(sp)
  80cafc:	df000d17 	ldw	fp,52(sp)
  80cb00:	ddc00c17 	ldw	r23,48(sp)
  80cb04:	dd800b17 	ldw	r22,44(sp)
  80cb08:	dd400a17 	ldw	r21,40(sp)
  80cb0c:	dd000917 	ldw	r20,36(sp)
  80cb10:	dcc00817 	ldw	r19,32(sp)
  80cb14:	dc800717 	ldw	r18,28(sp)
  80cb18:	dc400617 	ldw	r17,24(sp)
  80cb1c:	dc000517 	ldw	r16,20(sp)
  80cb20:	dec00f04 	addi	sp,sp,60
  80cb24:	f800283a 	ret
  80cb28:	00800b84 	movi	r2,46
  80cb2c:	20805126 	beq	r4,r2,80cc74 <__gethex+0x290>
  80cb30:	2825883a 	mov	r18,r5
  80cb34:	d8000015 	stw	zero,0(sp)
  80cb38:	90c00003 	ldbu	r3,0(r18)
  80cb3c:	00801404 	movi	r2,80
  80cb40:	282b883a 	mov	r21,r5
  80cb44:	05800044 	movi	r22,1
  80cb48:	18bfe21e 	bne	r3,r2,80cad4 <__gethex+0xf0>
  80cb4c:	90c00043 	ldbu	r3,1(r18)
  80cb50:	00800ac4 	movi	r2,43
  80cb54:	91400044 	addi	r5,r18,1
  80cb58:	18805126 	beq	r3,r2,80cca0 <__gethex+0x2bc>
  80cb5c:	00800b44 	movi	r2,45
  80cb60:	18805326 	beq	r3,r2,80ccb0 <__gethex+0x2cc>
  80cb64:	002f883a 	mov	r23,zero
  80cb68:	1cc5883a 	add	r2,r3,r19
  80cb6c:	10800003 	ldbu	r2,0(r2)
  80cb70:	103fda26 	beq	r2,zero,80cadc <__gethex+0xf8>
  80cb74:	01800644 	movi	r6,25
  80cb78:	30bfd816 	blt	r6,r2,80cadc <__gethex+0xf8>
  80cb7c:	28c00043 	ldbu	r3,1(r5)
  80cb80:	113ffc04 	addi	r4,r2,-16
  80cb84:	008020b4 	movhi	r2,130
  80cb88:	1098af04 	addi	r2,r2,25276
  80cb8c:	1887883a 	add	r3,r3,r2
  80cb90:	18800003 	ldbu	r2,0(r3)
  80cb94:	2c400044 	addi	r17,r5,1
  80cb98:	10001126 	beq	r2,zero,80cbe0 <__gethex+0x1fc>
  80cb9c:	1021883a 	mov	r16,r2
  80cba0:	30800f16 	blt	r6,r2,80cbe0 <__gethex+0x1fc>
  80cba4:	3029883a 	mov	r20,r6
  80cba8:	00000106 	br	80cbb0 <__gethex+0x1cc>
  80cbac:	a0800c16 	blt	r20,r2,80cbe0 <__gethex+0x1fc>
  80cbb0:	8c400044 	addi	r17,r17,1
  80cbb4:	01400284 	movi	r5,10
  80cbb8:	d9c00415 	stw	r7,16(sp)
  80cbbc:	080f9440 	call	80f944 <__mulsi3>
  80cbc0:	88c00003 	ldbu	r3,0(r17)
  80cbc4:	1405883a 	add	r2,r2,r16
  80cbc8:	113ffc04 	addi	r4,r2,-16
  80cbcc:	1cc7883a 	add	r3,r3,r19
  80cbd0:	18800003 	ldbu	r2,0(r3)
  80cbd4:	d9c00417 	ldw	r7,16(sp)
  80cbd8:	1021883a 	mov	r16,r2
  80cbdc:	103ff31e 	bne	r2,zero,80cbac <__gethex+0x1c8>
  80cbe0:	b805003a 	cmpeq	r2,r23,zero
  80cbe4:	1000011e 	bne	r2,zero,80cbec <__gethex+0x208>
  80cbe8:	0109c83a 	sub	r4,zero,r4
  80cbec:	d8800017 	ldw	r2,0(sp)
  80cbf0:	1105883a 	add	r2,r2,r4
  80cbf4:	d8800015 	stw	r2,0(sp)
  80cbf8:	003fb906 	br	80cae0 <__gethex+0xfc>
  80cbfc:	04800184 	movi	r18,6
  80cc00:	003fbc06 	br	80caf4 <__gethex+0x110>
  80cc04:	080c8cc0 	call	80c8cc <__hexdig_init>
  80cc08:	e1800017 	ldw	r6,0(fp)
  80cc0c:	00800c04 	movi	r2,48
  80cc10:	31000083 	ldbu	r4,2(r6)
  80cc14:	30c00084 	addi	r3,r6,2
  80cc18:	20bf8a26 	beq	r4,r2,80ca44 <__gethex+0x60>
  80cc1c:	180b883a 	mov	r5,r3
  80cc20:	000f883a 	mov	r7,zero
  80cc24:	003f8f06 	br	80ca64 <__gethex+0x80>
  80cc28:	303fa11e 	bne	r6,zero,80cab0 <__gethex+0xcc>
  80cc2c:	29400044 	addi	r5,r5,1
  80cc30:	28800003 	ldbu	r2,0(r5)
  80cc34:	14c5883a 	add	r2,r2,r19
  80cc38:	10c00003 	ldbu	r3,0(r2)
  80cc3c:	1800b526 	beq	r3,zero,80cf14 <__gethex+0x530>
  80cc40:	2809883a 	mov	r4,r5
  80cc44:	21000044 	addi	r4,r4,1
  80cc48:	20800003 	ldbu	r2,0(r4)
  80cc4c:	14c5883a 	add	r2,r2,r19
  80cc50:	10c00003 	ldbu	r3,0(r2)
  80cc54:	183ffb1e 	bne	r3,zero,80cc44 <__gethex+0x260>
  80cc58:	2145c83a 	sub	r2,r4,r5
  80cc5c:	1085883a 	add	r2,r2,r2
  80cc60:	1085883a 	add	r2,r2,r2
  80cc64:	0085c83a 	sub	r2,zero,r2
  80cc68:	200b883a 	mov	r5,r4
  80cc6c:	d8800015 	stw	r2,0(sp)
  80cc70:	003f9406 	br	80cac4 <__gethex+0xe0>
  80cc74:	29000043 	ldbu	r4,1(r5)
  80cc78:	008020b4 	movhi	r2,130
  80cc7c:	1098af04 	addi	r2,r2,25276
  80cc80:	2c800044 	addi	r18,r5,1
  80cc84:	2085883a 	add	r2,r4,r2
  80cc88:	10c00003 	ldbu	r3,0(r2)
  80cc8c:	18000d1e 	bne	r3,zero,80ccc4 <__gethex+0x2e0>
  80cc90:	282b883a 	mov	r21,r5
  80cc94:	05800044 	movi	r22,1
  80cc98:	d8000015 	stw	zero,0(sp)
  80cc9c:	003f8a06 	br	80cac8 <__gethex+0xe4>
  80cca0:	002f883a 	mov	r23,zero
  80cca4:	29400044 	addi	r5,r5,1
  80cca8:	28c00003 	ldbu	r3,0(r5)
  80ccac:	003fae06 	br	80cb68 <__gethex+0x184>
  80ccb0:	05c00044 	movi	r23,1
  80ccb4:	003ffb06 	br	80cca4 <__gethex+0x2c0>
  80ccb8:	2825883a 	mov	r18,r5
  80ccbc:	d8000015 	stw	zero,0(sp)
  80ccc0:	003f8106 	br	80cac8 <__gethex+0xe4>
  80ccc4:	00800c04 	movi	r2,48
  80ccc8:	20800e1e 	bne	r4,r2,80cd04 <__gethex+0x320>
  80cccc:	2007883a 	mov	r3,r4
  80ccd0:	900b883a 	mov	r5,r18
  80ccd4:	29400044 	addi	r5,r5,1
  80ccd8:	29000003 	ldbu	r4,0(r5)
  80ccdc:	20803fcc 	andi	r2,r4,255
  80cce0:	10fffc26 	beq	r2,r3,80ccd4 <__gethex+0x2f0>
  80cce4:	14c5883a 	add	r2,r2,r19
  80cce8:	10c00003 	ldbu	r3,0(r2)
  80ccec:	1800071e 	bne	r3,zero,80cd0c <__gethex+0x328>
  80ccf0:	01c00044 	movi	r7,1
  80ccf4:	900d883a 	mov	r6,r18
  80ccf8:	282b883a 	mov	r21,r5
  80ccfc:	382d883a 	mov	r22,r7
  80cd00:	003f5f06 	br	80ca80 <__gethex+0x9c>
  80cd04:	91000003 	ldbu	r4,0(r18)
  80cd08:	900b883a 	mov	r5,r18
  80cd0c:	900d883a 	mov	r6,r18
  80cd10:	282b883a 	mov	r21,r5
  80cd14:	01c00044 	movi	r7,1
  80cd18:	002d883a 	mov	r22,zero
  80cd1c:	003f5806 	br	80ca80 <__gethex+0x9c>
  80cd20:	9545c83a 	sub	r2,r18,r21
  80cd24:	10bfffc4 	addi	r2,r2,-1
  80cd28:	00c001c4 	movi	r3,7
  80cd2c:	1880770e 	bge	r3,r2,80cf0c <__gethex+0x528>
  80cd30:	000b883a 	mov	r5,zero
  80cd34:	1005d07a 	srai	r2,r2,1
  80cd38:	29400044 	addi	r5,r5,1
  80cd3c:	18bffd16 	blt	r3,r2,80cd34 <__gethex+0x350>
  80cd40:	d9000117 	ldw	r4,4(sp)
  80cd44:	08087400 	call	808740 <_Balloc>
  80cd48:	1029883a 	mov	r20,r2
  80cd4c:	15800504 	addi	r22,r2,20
  80cd50:	ac80562e 	bgeu	r21,r18,80ceac <__gethex+0x4c8>
  80cd54:	900b883a 	mov	r5,r18
  80cd58:	b011883a 	mov	r8,r22
  80cd5c:	000f883a 	mov	r7,zero
  80cd60:	0009883a 	mov	r4,zero
  80cd64:	02400b84 	movi	r9,46
  80cd68:	02800804 	movi	r10,32
  80cd6c:	297fffc4 	addi	r5,r5,-1
  80cd70:	28c00003 	ldbu	r3,0(r5)
  80cd74:	1a400826 	beq	r3,r9,80cd98 <__gethex+0x3b4>
  80cd78:	380d883a 	mov	r6,r7
  80cd7c:	3a802a26 	beq	r7,r10,80ce28 <__gethex+0x444>
  80cd80:	39c00104 	addi	r7,r7,4
  80cd84:	1cc7883a 	add	r3,r3,r19
  80cd88:	18800003 	ldbu	r2,0(r3)
  80cd8c:	108003cc 	andi	r2,r2,15
  80cd90:	1184983a 	sll	r2,r2,r6
  80cd94:	2088b03a 	or	r4,r4,r2
  80cd98:	a97ff436 	bltu	r21,r5,80cd6c <__gethex+0x388>
  80cd9c:	40800104 	addi	r2,r8,4
  80cda0:	1585c83a 	sub	r2,r2,r22
  80cda4:	1021d0ba 	srai	r16,r2,2
  80cda8:	41000015 	stw	r4,0(r8)
  80cdac:	a4000415 	stw	r16,16(r20)
  80cdb0:	08081e80 	call	8081e8 <__hi0bits>
  80cdb4:	d9000217 	ldw	r4,8(sp)
  80cdb8:	8006917a 	slli	r3,r16,5
  80cdbc:	24c00017 	ldw	r19,0(r4)
  80cdc0:	1885c83a 	sub	r2,r3,r2
  80cdc4:	98801f16 	blt	r19,r2,80ce44 <__gethex+0x460>
  80cdc8:	14c00c16 	blt	r2,r19,80cdfc <__gethex+0x418>
  80cdcc:	002b883a 	mov	r21,zero
  80cdd0:	d9000217 	ldw	r4,8(sp)
  80cdd4:	d8c00017 	ldw	r3,0(sp)
  80cdd8:	20800217 	ldw	r2,8(r4)
  80cddc:	10c0360e 	bge	r2,r3,80ceb8 <__gethex+0x4d4>
  80cde0:	d9000117 	ldw	r4,4(sp)
  80cde4:	a00b883a 	mov	r5,r20
  80cde8:	048028c4 	movi	r18,163
  80cdec:	08081c00 	call	8081c0 <_Bfree>
  80cdf0:	d9000f17 	ldw	r4,60(sp)
  80cdf4:	20000015 	stw	zero,0(r4)
  80cdf8:	003f3e06 	br	80caf4 <__gethex+0x110>
  80cdfc:	d9000117 	ldw	r4,4(sp)
  80ce00:	98a1c83a 	sub	r16,r19,r2
  80ce04:	a00b883a 	mov	r5,r20
  80ce08:	800d883a 	mov	r6,r16
  80ce0c:	0808b040 	call	808b04 <__lshift>
  80ce10:	d8c00017 	ldw	r3,0(sp)
  80ce14:	1029883a 	mov	r20,r2
  80ce18:	15800504 	addi	r22,r2,20
  80ce1c:	1c07c83a 	sub	r3,r3,r16
  80ce20:	d8c00015 	stw	r3,0(sp)
  80ce24:	003fe906 	br	80cdcc <__gethex+0x3e8>
  80ce28:	41000015 	stw	r4,0(r8)
  80ce2c:	28c00003 	ldbu	r3,0(r5)
  80ce30:	01c00104 	movi	r7,4
  80ce34:	000d883a 	mov	r6,zero
  80ce38:	41d1883a 	add	r8,r8,r7
  80ce3c:	0009883a 	mov	r4,zero
  80ce40:	003fd006 	br	80cd84 <__gethex+0x3a0>
  80ce44:	14e1c83a 	sub	r16,r2,r19
  80ce48:	a009883a 	mov	r4,r20
  80ce4c:	800b883a 	mov	r5,r16
  80ce50:	08086b80 	call	8086b8 <__any_on>
  80ce54:	1000081e 	bne	r2,zero,80ce78 <__gethex+0x494>
  80ce58:	002b883a 	mov	r21,zero
  80ce5c:	a009883a 	mov	r4,r20
  80ce60:	800b883a 	mov	r5,r16
  80ce64:	080c9340 	call	80c934 <rshift>
  80ce68:	d8800017 	ldw	r2,0(sp)
  80ce6c:	1405883a 	add	r2,r2,r16
  80ce70:	d8800015 	stw	r2,0(sp)
  80ce74:	003fd606 	br	80cdd0 <__gethex+0x3ec>
  80ce78:	817fffc4 	addi	r5,r16,-1
  80ce7c:	2805d17a 	srai	r2,r5,5
  80ce80:	290007cc 	andi	r4,r5,31
  80ce84:	01800044 	movi	r6,1
  80ce88:	1085883a 	add	r2,r2,r2
  80ce8c:	1085883a 	add	r2,r2,r2
  80ce90:	1585883a 	add	r2,r2,r22
  80ce94:	3108983a 	sll	r4,r6,r4
  80ce98:	10c00017 	ldw	r3,0(r2)
  80ce9c:	20c8703a 	and	r4,r4,r3
  80cea0:	20001e1e 	bne	r4,zero,80cf1c <__gethex+0x538>
  80cea4:	302b883a 	mov	r21,r6
  80cea8:	003fec06 	br	80ce5c <__gethex+0x478>
  80ceac:	b011883a 	mov	r8,r22
  80ceb0:	0009883a 	mov	r4,zero
  80ceb4:	003fb906 	br	80cd9c <__gethex+0x3b8>
  80ceb8:	d8800217 	ldw	r2,8(sp)
  80cebc:	d8c00017 	ldw	r3,0(sp)
  80cec0:	11000117 	ldw	r4,4(r2)
  80cec4:	19001c16 	blt	r3,r4,80cf38 <__gethex+0x554>
  80cec8:	04800044 	movi	r18,1
  80cecc:	a8000926 	beq	r21,zero,80cef4 <__gethex+0x510>
  80ced0:	d8c00217 	ldw	r3,8(sp)
  80ced4:	00800084 	movi	r2,2
  80ced8:	19000317 	ldw	r4,12(r3)
  80cedc:	20809826 	beq	r4,r2,80d140 <__gethex+0x75c>
  80cee0:	008000c4 	movi	r2,3
  80cee4:	20805b26 	beq	r4,r2,80d054 <__gethex+0x670>
  80cee8:	00800044 	movi	r2,1
  80ceec:	20804326 	beq	r4,r2,80cffc <__gethex+0x618>
  80cef0:	94800414 	ori	r18,r18,16
  80cef4:	d9000f17 	ldw	r4,60(sp)
  80cef8:	d8800017 	ldw	r2,0(sp)
  80cefc:	d8c00317 	ldw	r3,12(sp)
  80cf00:	25000015 	stw	r20,0(r4)
  80cf04:	18800015 	stw	r2,0(r3)
  80cf08:	003efa06 	br	80caf4 <__gethex+0x110>
  80cf0c:	000b883a 	mov	r5,zero
  80cf10:	003f8b06 	br	80cd40 <__gethex+0x35c>
  80cf14:	d8000015 	stw	zero,0(sp)
  80cf18:	003eea06 	br	80cac4 <__gethex+0xe0>
  80cf1c:	3140180e 	bge	r6,r5,80cf80 <__gethex+0x59c>
  80cf20:	a009883a 	mov	r4,r20
  80cf24:	817fff84 	addi	r5,r16,-2
  80cf28:	08086b80 	call	8086b8 <__any_on>
  80cf2c:	10001426 	beq	r2,zero,80cf80 <__gethex+0x59c>
  80cf30:	054000c4 	movi	r21,3
  80cf34:	003fc906 	br	80ce5c <__gethex+0x478>
  80cf38:	d8800017 	ldw	r2,0(sp)
  80cf3c:	20a3c83a 	sub	r17,r4,r2
  80cf40:	8cc01116 	blt	r17,r19,80cf88 <__gethex+0x5a4>
  80cf44:	d8800217 	ldw	r2,8(sp)
  80cf48:	10c00317 	ldw	r3,12(r2)
  80cf4c:	00800084 	movi	r2,2
  80cf50:	18809426 	beq	r3,r2,80d1a4 <__gethex+0x7c0>
  80cf54:	008000c4 	movi	r2,3
  80cf58:	18808f26 	beq	r3,r2,80d198 <__gethex+0x7b4>
  80cf5c:	00800044 	movi	r2,1
  80cf60:	18807c26 	beq	r3,r2,80d154 <__gethex+0x770>
  80cf64:	d9000117 	ldw	r4,4(sp)
  80cf68:	a00b883a 	mov	r5,r20
  80cf6c:	04801404 	movi	r18,80
  80cf70:	08081c00 	call	8081c0 <_Bfree>
  80cf74:	d9000f17 	ldw	r4,60(sp)
  80cf78:	20000015 	stw	zero,0(r4)
  80cf7c:	003edd06 	br	80caf4 <__gethex+0x110>
  80cf80:	05400084 	movi	r21,2
  80cf84:	003fb506 	br	80ce5c <__gethex+0x478>
  80cf88:	8c3fffc4 	addi	r16,r17,-1
  80cf8c:	a8001526 	beq	r21,zero,80cfe4 <__gethex+0x600>
  80cf90:	05400044 	movi	r21,1
  80cf94:	8005d17a 	srai	r2,r16,5
  80cf98:	814007cc 	andi	r5,r16,31
  80cf9c:	00c00044 	movi	r3,1
  80cfa0:	1085883a 	add	r2,r2,r2
  80cfa4:	1085883a 	add	r2,r2,r2
  80cfa8:	1585883a 	add	r2,r2,r22
  80cfac:	1946983a 	sll	r3,r3,r5
  80cfb0:	11000017 	ldw	r4,0(r2)
  80cfb4:	1906703a 	and	r3,r3,r4
  80cfb8:	18000126 	beq	r3,zero,80cfc0 <__gethex+0x5dc>
  80cfbc:	ad400094 	ori	r21,r21,2
  80cfc0:	880b883a 	mov	r5,r17
  80cfc4:	a009883a 	mov	r4,r20
  80cfc8:	080c9340 	call	80c934 <rshift>
  80cfcc:	d8800217 	ldw	r2,8(sp)
  80cfd0:	9c67c83a 	sub	r19,r19,r17
  80cfd4:	04800084 	movi	r18,2
  80cfd8:	10800117 	ldw	r2,4(r2)
  80cfdc:	d8800015 	stw	r2,0(sp)
  80cfe0:	003fba06 	br	80cecc <__gethex+0x4e8>
  80cfe4:	043feb0e 	bge	zero,r16,80cf94 <__gethex+0x5b0>
  80cfe8:	a009883a 	mov	r4,r20
  80cfec:	800b883a 	mov	r5,r16
  80cff0:	08086b80 	call	8086b8 <__any_on>
  80cff4:	102b883a 	mov	r21,r2
  80cff8:	003fe606 	br	80cf94 <__gethex+0x5b0>
  80cffc:	a880008c 	andi	r2,r21,2
  80d000:	103fbb26 	beq	r2,zero,80cef0 <__gethex+0x50c>
  80d004:	b0800017 	ldw	r2,0(r22)
  80d008:	a884b03a 	or	r2,r21,r2
  80d00c:	1104703a 	and	r2,r2,r4
  80d010:	103fb726 	beq	r2,zero,80cef0 <__gethex+0x50c>
  80d014:	a4000417 	ldw	r16,16(r20)
  80d018:	b007883a 	mov	r3,r22
  80d01c:	017fffc4 	movi	r5,-1
  80d020:	8405883a 	add	r2,r16,r16
  80d024:	10ab883a 	add	r21,r2,r2
  80d028:	802f883a 	mov	r23,r16
  80d02c:	b549883a 	add	r4,r22,r21
  80d030:	00000306 	br	80d040 <__gethex+0x65c>
  80d034:	18000015 	stw	zero,0(r3)
  80d038:	18c00104 	addi	r3,r3,4
  80d03c:	1900082e 	bgeu	r3,r4,80d060 <__gethex+0x67c>
  80d040:	18800017 	ldw	r2,0(r3)
  80d044:	117ffb26 	beq	r2,r5,80d034 <__gethex+0x650>
  80d048:	10800044 	addi	r2,r2,1
  80d04c:	18800015 	stw	r2,0(r3)
  80d050:	00001e06 	br	80d0cc <__gethex+0x6e8>
  80d054:	d8801017 	ldw	r2,64(sp)
  80d058:	103fa526 	beq	r2,zero,80cef0 <__gethex+0x50c>
  80d05c:	003fed06 	br	80d014 <__gethex+0x630>
  80d060:	a0800217 	ldw	r2,8(r20)
  80d064:	80801216 	blt	r16,r2,80d0b0 <__gethex+0x6cc>
  80d068:	a1400117 	ldw	r5,4(r20)
  80d06c:	d9000117 	ldw	r4,4(sp)
  80d070:	29400044 	addi	r5,r5,1
  80d074:	08087400 	call	808740 <_Balloc>
  80d078:	a1800417 	ldw	r6,16(r20)
  80d07c:	a1400304 	addi	r5,r20,12
  80d080:	11000304 	addi	r4,r2,12
  80d084:	318d883a 	add	r6,r6,r6
  80d088:	318d883a 	add	r6,r6,r6
  80d08c:	31800204 	addi	r6,r6,8
  80d090:	1023883a 	mov	r17,r2
  80d094:	0807fa80 	call	807fa8 <memcpy>
  80d098:	d9000117 	ldw	r4,4(sp)
  80d09c:	a00b883a 	mov	r5,r20
  80d0a0:	8d800504 	addi	r22,r17,20
  80d0a4:	08081c00 	call	8081c0 <_Bfree>
  80d0a8:	8c000417 	ldw	r16,16(r17)
  80d0ac:	8829883a 	mov	r20,r17
  80d0b0:	8405883a 	add	r2,r16,r16
  80d0b4:	1085883a 	add	r2,r2,r2
  80d0b8:	1505883a 	add	r2,r2,r20
  80d0bc:	84000044 	addi	r16,r16,1
  80d0c0:	00c00044 	movi	r3,1
  80d0c4:	10c00515 	stw	r3,20(r2)
  80d0c8:	a4000415 	stw	r16,16(r20)
  80d0cc:	00800084 	movi	r2,2
  80d0d0:	90801526 	beq	r18,r2,80d128 <__gethex+0x744>
  80d0d4:	bc000a16 	blt	r23,r16,80d100 <__gethex+0x71c>
  80d0d8:	9c0007cc 	andi	r16,r19,31
  80d0dc:	8000021e 	bne	r16,zero,80d0e8 <__gethex+0x704>
  80d0e0:	94800814 	ori	r18,r18,32
  80d0e4:	003f8306 	br	80cef4 <__gethex+0x510>
  80d0e8:	b545883a 	add	r2,r22,r21
  80d0ec:	113fff17 	ldw	r4,-4(r2)
  80d0f0:	08081e80 	call	8081e8 <__hi0bits>
  80d0f4:	00c00804 	movi	r3,32
  80d0f8:	1c07c83a 	sub	r3,r3,r16
  80d0fc:	10fff80e 	bge	r2,r3,80d0e0 <__gethex+0x6fc>
  80d100:	a009883a 	mov	r4,r20
  80d104:	01400044 	movi	r5,1
  80d108:	080c9340 	call	80c934 <rshift>
  80d10c:	d9000217 	ldw	r4,8(sp)
  80d110:	d8c00017 	ldw	r3,0(sp)
  80d114:	20800217 	ldw	r2,8(r4)
  80d118:	18c00044 	addi	r3,r3,1
  80d11c:	d8c00015 	stw	r3,0(sp)
  80d120:	10ff2f16 	blt	r2,r3,80cde0 <__gethex+0x3fc>
  80d124:	003fee06 	br	80d0e0 <__gethex+0x6fc>
  80d128:	d8c00217 	ldw	r3,8(sp)
  80d12c:	18800017 	ldw	r2,0(r3)
  80d130:	10bfffc4 	addi	r2,r2,-1
  80d134:	98801e26 	beq	r19,r2,80d1b0 <__gethex+0x7cc>
  80d138:	04800884 	movi	r18,34
  80d13c:	003f6d06 	br	80cef4 <__gethex+0x510>
  80d140:	d9001017 	ldw	r4,64(sp)
  80d144:	00800044 	movi	r2,1
  80d148:	1105c83a 	sub	r2,r2,r4
  80d14c:	103f6826 	beq	r2,zero,80cef0 <__gethex+0x50c>
  80d150:	003fb006 	br	80d014 <__gethex+0x630>
  80d154:	9c7f831e 	bne	r19,r17,80cf64 <__gethex+0x580>
  80d158:	1cc0060e 	bge	r3,r19,80d174 <__gethex+0x790>
  80d15c:	98cbc83a 	sub	r5,r19,r3
  80d160:	a009883a 	mov	r4,r20
  80d164:	08086b80 	call	8086b8 <__any_on>
  80d168:	103f7e26 	beq	r2,zero,80cf64 <__gethex+0x580>
  80d16c:	d8c00217 	ldw	r3,8(sp)
  80d170:	19000117 	ldw	r4,4(r3)
  80d174:	d8800317 	ldw	r2,12(sp)
  80d178:	d8c00f17 	ldw	r3,60(sp)
  80d17c:	04000044 	movi	r16,1
  80d180:	11000015 	stw	r4,0(r2)
  80d184:	04801884 	movi	r18,98
  80d188:	b4000015 	stw	r16,0(r22)
  80d18c:	1d000015 	stw	r20,0(r3)
  80d190:	a4000415 	stw	r16,16(r20)
  80d194:	003e5706 	br	80caf4 <__gethex+0x110>
  80d198:	d8801017 	ldw	r2,64(sp)
  80d19c:	103f7126 	beq	r2,zero,80cf64 <__gethex+0x580>
  80d1a0:	003ff406 	br	80d174 <__gethex+0x790>
  80d1a4:	d8c01017 	ldw	r3,64(sp)
  80d1a8:	183ff226 	beq	r3,zero,80d174 <__gethex+0x790>
  80d1ac:	003f6d06 	br	80cf64 <__gethex+0x580>
  80d1b0:	9805d17a 	srai	r2,r19,5
  80d1b4:	994007cc 	andi	r5,r19,31
  80d1b8:	00c00044 	movi	r3,1
  80d1bc:	1085883a 	add	r2,r2,r2
  80d1c0:	1085883a 	add	r2,r2,r2
  80d1c4:	1585883a 	add	r2,r2,r22
  80d1c8:	1946983a 	sll	r3,r3,r5
  80d1cc:	11000017 	ldw	r4,0(r2)
  80d1d0:	1906703a 	and	r3,r3,r4
  80d1d4:	183fd826 	beq	r3,zero,80d138 <__gethex+0x754>
  80d1d8:	04800844 	movi	r18,33
  80d1dc:	003f4506 	br	80cef4 <__gethex+0x510>

0080d1e0 <L_shift>:
  80d1e0:	00800204 	movi	r2,8
  80d1e4:	1185c83a 	sub	r2,r2,r6
  80d1e8:	1085883a 	add	r2,r2,r2
  80d1ec:	21c00017 	ldw	r7,0(r4)
  80d1f0:	1093883a 	add	r9,r2,r2
  80d1f4:	00800804 	movi	r2,32
  80d1f8:	200d883a 	mov	r6,r4
  80d1fc:	1251c83a 	sub	r8,r2,r9
  80d200:	31800104 	addi	r6,r6,4
  80d204:	3805883a 	mov	r2,r7
  80d208:	31c00017 	ldw	r7,0(r6)
  80d20c:	3a08983a 	sll	r4,r7,r8
  80d210:	3a46d83a 	srl	r3,r7,r9
  80d214:	1104b03a 	or	r2,r2,r4
  80d218:	180f883a 	mov	r7,r3
  80d21c:	30bfff15 	stw	r2,-4(r6)
  80d220:	30c00015 	stw	r3,0(r6)
  80d224:	317ff636 	bltu	r6,r5,80d200 <L_shift+0x20>
  80d228:	f800283a 	ret

0080d22c <__hexnan>:
  80d22c:	defff404 	addi	sp,sp,-48
  80d230:	dd800815 	stw	r22,32(sp)
  80d234:	058020b4 	movhi	r22,130
  80d238:	b598af04 	addi	r22,r22,25276
  80d23c:	b0800c03 	ldbu	r2,48(r22)
  80d240:	dcc00515 	stw	r19,20(sp)
  80d244:	dc000215 	stw	r16,8(sp)
  80d248:	dfc00b15 	stw	ra,44(sp)
  80d24c:	df000a15 	stw	fp,40(sp)
  80d250:	ddc00915 	stw	r23,36(sp)
  80d254:	dd400715 	stw	r21,28(sp)
  80d258:	dd000615 	stw	r20,24(sp)
  80d25c:	dc800415 	stw	r18,16(sp)
  80d260:	dc400315 	stw	r17,12(sp)
  80d264:	d9000115 	stw	r4,4(sp)
  80d268:	2821883a 	mov	r16,r5
  80d26c:	3027883a 	mov	r19,r6
  80d270:	10007426 	beq	r2,zero,80d444 <__hexnan+0x218>
  80d274:	80c00017 	ldw	r3,0(r16)
  80d278:	1805d17a 	srai	r2,r3,5
  80d27c:	18c007cc 	andi	r3,r3,31
  80d280:	1839003a 	cmpeq	fp,r3,zero
  80d284:	1085883a 	add	r2,r2,r2
  80d288:	1085883a 	add	r2,r2,r2
  80d28c:	d8c00015 	stw	r3,0(sp)
  80d290:	14c5883a 	add	r2,r2,r19
  80d294:	e000011e 	bne	fp,zero,80d29c <__hexnan+0x70>
  80d298:	10800104 	addi	r2,r2,4
  80d29c:	d8c00117 	ldw	r3,4(sp)
  80d2a0:	153fff04 	addi	r20,r2,-4
  80d2a4:	a021883a 	mov	r16,r20
  80d2a8:	1c400017 	ldw	r17,0(r3)
  80d2ac:	a02b883a 	mov	r21,r20
  80d2b0:	0025883a 	mov	r18,zero
  80d2b4:	002f883a 	mov	r23,zero
  80d2b8:	000d883a 	mov	r6,zero
  80d2bc:	103fff15 	stw	zero,-4(r2)
  80d2c0:	8c400044 	addi	r17,r17,1
  80d2c4:	89000003 	ldbu	r4,0(r17)
  80d2c8:	20000e26 	beq	r4,zero,80d304 <__hexnan+0xd8>
  80d2cc:	2585883a 	add	r2,r4,r22
  80d2d0:	10c00003 	ldbu	r3,0(r2)
  80d2d4:	18002e1e 	bne	r3,zero,80d390 <__hexnan+0x164>
  80d2d8:	00800804 	movi	r2,32
  80d2dc:	11005536 	bltu	r2,r4,80d434 <__hexnan+0x208>
  80d2e0:	bcbff70e 	bge	r23,r18,80d2c0 <__hexnan+0x94>
  80d2e4:	8540022e 	bgeu	r16,r21,80d2f0 <__hexnan+0xc4>
  80d2e8:	008001c4 	movi	r2,7
  80d2ec:	11803c0e 	bge	r2,r6,80d3e0 <__hexnan+0x1b4>
  80d2f0:	9c003536 	bltu	r19,r16,80d3c8 <__hexnan+0x19c>
  80d2f4:	8c400044 	addi	r17,r17,1
  80d2f8:	89000003 	ldbu	r4,0(r17)
  80d2fc:	01800204 	movi	r6,8
  80d300:	203ff21e 	bne	r4,zero,80d2cc <__hexnan+0xa0>
  80d304:	90004d26 	beq	r18,zero,80d43c <__hexnan+0x210>
  80d308:	85404336 	bltu	r16,r21,80d418 <__hexnan+0x1ec>
  80d30c:	9c00382e 	bgeu	r19,r16,80d3f0 <__hexnan+0x1c4>
  80d310:	9807883a 	mov	r3,r19
  80d314:	80800017 	ldw	r2,0(r16)
  80d318:	84000104 	addi	r16,r16,4
  80d31c:	18800015 	stw	r2,0(r3)
  80d320:	18c00104 	addi	r3,r3,4
  80d324:	a43ffb2e 	bgeu	r20,r16,80d314 <__hexnan+0xe8>
  80d328:	18000015 	stw	zero,0(r3)
  80d32c:	18c00104 	addi	r3,r3,4
  80d330:	a0fffd2e 	bgeu	r20,r3,80d328 <__hexnan+0xfc>
  80d334:	a0800017 	ldw	r2,0(r20)
  80d338:	1000071e 	bne	r2,zero,80d358 <__hexnan+0x12c>
  80d33c:	9d004326 	beq	r19,r20,80d44c <__hexnan+0x220>
  80d340:	a007883a 	mov	r3,r20
  80d344:	00000106 	br	80d34c <__hexnan+0x120>
  80d348:	98c04026 	beq	r19,r3,80d44c <__hexnan+0x220>
  80d34c:	18ffff04 	addi	r3,r3,-4
  80d350:	18800017 	ldw	r2,0(r3)
  80d354:	103ffc26 	beq	r2,zero,80d348 <__hexnan+0x11c>
  80d358:	00c00144 	movi	r3,5
  80d35c:	1805883a 	mov	r2,r3
  80d360:	dfc00b17 	ldw	ra,44(sp)
  80d364:	df000a17 	ldw	fp,40(sp)
  80d368:	ddc00917 	ldw	r23,36(sp)
  80d36c:	dd800817 	ldw	r22,32(sp)
  80d370:	dd400717 	ldw	r21,28(sp)
  80d374:	dd000617 	ldw	r20,24(sp)
  80d378:	dcc00517 	ldw	r19,20(sp)
  80d37c:	dc800417 	ldw	r18,16(sp)
  80d380:	dc400317 	ldw	r17,12(sp)
  80d384:	dc000217 	ldw	r16,8(sp)
  80d388:	dec00c04 	addi	sp,sp,48
  80d38c:	f800283a 	ret
  80d390:	31800044 	addi	r6,r6,1
  80d394:	00800204 	movi	r2,8
  80d398:	94800044 	addi	r18,r18,1
  80d39c:	1180040e 	bge	r2,r6,80d3b0 <__hexnan+0x184>
  80d3a0:	9c3fc72e 	bgeu	r19,r16,80d2c0 <__hexnan+0x94>
  80d3a4:	843fff04 	addi	r16,r16,-4
  80d3a8:	80000015 	stw	zero,0(r16)
  80d3ac:	01800044 	movi	r6,1
  80d3b0:	80800017 	ldw	r2,0(r16)
  80d3b4:	18c003cc 	andi	r3,r3,15
  80d3b8:	1004913a 	slli	r2,r2,4
  80d3bc:	10c4b03a 	or	r2,r2,r3
  80d3c0:	80800015 	stw	r2,0(r16)
  80d3c4:	003fbe06 	br	80d2c0 <__hexnan+0x94>
  80d3c8:	843fff04 	addi	r16,r16,-4
  80d3cc:	802b883a 	mov	r21,r16
  80d3d0:	902f883a 	mov	r23,r18
  80d3d4:	000d883a 	mov	r6,zero
  80d3d8:	80000015 	stw	zero,0(r16)
  80d3dc:	003fb806 	br	80d2c0 <__hexnan+0x94>
  80d3e0:	8009883a 	mov	r4,r16
  80d3e4:	a80b883a 	mov	r5,r21
  80d3e8:	080d1e00 	call	80d1e0 <L_shift>
  80d3ec:	003fc006 	br	80d2f0 <__hexnan+0xc4>
  80d3f0:	e03fd01e 	bne	fp,zero,80d334 <__hexnan+0x108>
  80d3f4:	d8c00017 	ldw	r3,0(sp)
  80d3f8:	00800804 	movi	r2,32
  80d3fc:	10c5c83a 	sub	r2,r2,r3
  80d400:	00ffffc4 	movi	r3,-1
  80d404:	1886d83a 	srl	r3,r3,r2
  80d408:	a0800017 	ldw	r2,0(r20)
  80d40c:	10c4703a 	and	r2,r2,r3
  80d410:	a0800015 	stw	r2,0(r20)
  80d414:	003fc806 	br	80d338 <__hexnan+0x10c>
  80d418:	008001c4 	movi	r2,7
  80d41c:	11bfbb16 	blt	r2,r6,80d30c <__hexnan+0xe0>
  80d420:	a80b883a 	mov	r5,r21
  80d424:	8009883a 	mov	r4,r16
  80d428:	080d1e00 	call	80d1e0 <L_shift>
  80d42c:	9c3ff02e 	bgeu	r19,r16,80d3f0 <__hexnan+0x1c4>
  80d430:	003fb706 	br	80d310 <__hexnan+0xe4>
  80d434:	00800a44 	movi	r2,41
  80d438:	20800826 	beq	r4,r2,80d45c <__hexnan+0x230>
  80d43c:	00c00104 	movi	r3,4
  80d440:	003fc606 	br	80d35c <__hexnan+0x130>
  80d444:	080c8cc0 	call	80c8cc <__hexdig_init>
  80d448:	003f8a06 	br	80d274 <__hexnan+0x48>
  80d44c:	00800044 	movi	r2,1
  80d450:	00c00144 	movi	r3,5
  80d454:	98800015 	stw	r2,0(r19)
  80d458:	003fc006 	br	80d35c <__hexnan+0x130>
  80d45c:	903ff726 	beq	r18,zero,80d43c <__hexnan+0x210>
  80d460:	d8c00117 	ldw	r3,4(sp)
  80d464:	88800044 	addi	r2,r17,1
  80d468:	18800015 	stw	r2,0(r3)
  80d46c:	857fa72e 	bgeu	r16,r21,80d30c <__hexnan+0xe0>
  80d470:	003fe906 	br	80d418 <__hexnan+0x1ec>

0080d474 <_isatty_r>:
  80d474:	defffd04 	addi	sp,sp,-12
  80d478:	dc000015 	stw	r16,0(sp)
  80d47c:	040020b4 	movhi	r16,130
  80d480:	84007204 	addi	r16,r16,456
  80d484:	dc400115 	stw	r17,4(sp)
  80d488:	80000015 	stw	zero,0(r16)
  80d48c:	2023883a 	mov	r17,r4
  80d490:	2809883a 	mov	r4,r5
  80d494:	dfc00215 	stw	ra,8(sp)
  80d498:	08104d00 	call	8104d0 <isatty>
  80d49c:	1007883a 	mov	r3,r2
  80d4a0:	00bfffc4 	movi	r2,-1
  80d4a4:	18800626 	beq	r3,r2,80d4c0 <_isatty_r+0x4c>
  80d4a8:	1805883a 	mov	r2,r3
  80d4ac:	dfc00217 	ldw	ra,8(sp)
  80d4b0:	dc400117 	ldw	r17,4(sp)
  80d4b4:	dc000017 	ldw	r16,0(sp)
  80d4b8:	dec00304 	addi	sp,sp,12
  80d4bc:	f800283a 	ret
  80d4c0:	80800017 	ldw	r2,0(r16)
  80d4c4:	103ff826 	beq	r2,zero,80d4a8 <_isatty_r+0x34>
  80d4c8:	88800015 	stw	r2,0(r17)
  80d4cc:	1805883a 	mov	r2,r3
  80d4d0:	dfc00217 	ldw	ra,8(sp)
  80d4d4:	dc400117 	ldw	r17,4(sp)
  80d4d8:	dc000017 	ldw	r16,0(sp)
  80d4dc:	dec00304 	addi	sp,sp,12
  80d4e0:	f800283a 	ret

0080d4e4 <_lseek_r>:
  80d4e4:	defffd04 	addi	sp,sp,-12
  80d4e8:	dc000015 	stw	r16,0(sp)
  80d4ec:	040020b4 	movhi	r16,130
  80d4f0:	84007204 	addi	r16,r16,456
  80d4f4:	dc400115 	stw	r17,4(sp)
  80d4f8:	80000015 	stw	zero,0(r16)
  80d4fc:	2023883a 	mov	r17,r4
  80d500:	2809883a 	mov	r4,r5
  80d504:	300b883a 	mov	r5,r6
  80d508:	380d883a 	mov	r6,r7
  80d50c:	dfc00215 	stw	ra,8(sp)
  80d510:	08106e00 	call	8106e0 <lseek>
  80d514:	1007883a 	mov	r3,r2
  80d518:	00bfffc4 	movi	r2,-1
  80d51c:	18800626 	beq	r3,r2,80d538 <_lseek_r+0x54>
  80d520:	1805883a 	mov	r2,r3
  80d524:	dfc00217 	ldw	ra,8(sp)
  80d528:	dc400117 	ldw	r17,4(sp)
  80d52c:	dc000017 	ldw	r16,0(sp)
  80d530:	dec00304 	addi	sp,sp,12
  80d534:	f800283a 	ret
  80d538:	80800017 	ldw	r2,0(r16)
  80d53c:	103ff826 	beq	r2,zero,80d520 <_lseek_r+0x3c>
  80d540:	88800015 	stw	r2,0(r17)
  80d544:	1805883a 	mov	r2,r3
  80d548:	dfc00217 	ldw	ra,8(sp)
  80d54c:	dc400117 	ldw	r17,4(sp)
  80d550:	dc000017 	ldw	r16,0(sp)
  80d554:	dec00304 	addi	sp,sp,12
  80d558:	f800283a 	ret

0080d55c <_read_r>:
  80d55c:	defffd04 	addi	sp,sp,-12
  80d560:	dc000015 	stw	r16,0(sp)
  80d564:	040020b4 	movhi	r16,130
  80d568:	84007204 	addi	r16,r16,456
  80d56c:	dc400115 	stw	r17,4(sp)
  80d570:	80000015 	stw	zero,0(r16)
  80d574:	2023883a 	mov	r17,r4
  80d578:	2809883a 	mov	r4,r5
  80d57c:	300b883a 	mov	r5,r6
  80d580:	380d883a 	mov	r6,r7
  80d584:	dfc00215 	stw	ra,8(sp)
  80d588:	08108fc0 	call	8108fc <read>
  80d58c:	1007883a 	mov	r3,r2
  80d590:	00bfffc4 	movi	r2,-1
  80d594:	18800626 	beq	r3,r2,80d5b0 <_read_r+0x54>
  80d598:	1805883a 	mov	r2,r3
  80d59c:	dfc00217 	ldw	ra,8(sp)
  80d5a0:	dc400117 	ldw	r17,4(sp)
  80d5a4:	dc000017 	ldw	r16,0(sp)
  80d5a8:	dec00304 	addi	sp,sp,12
  80d5ac:	f800283a 	ret
  80d5b0:	80800017 	ldw	r2,0(r16)
  80d5b4:	103ff826 	beq	r2,zero,80d598 <_read_r+0x3c>
  80d5b8:	88800015 	stw	r2,0(r17)
  80d5bc:	1805883a 	mov	r2,r3
  80d5c0:	dfc00217 	ldw	ra,8(sp)
  80d5c4:	dc400117 	ldw	r17,4(sp)
  80d5c8:	dc000017 	ldw	r16,0(sp)
  80d5cc:	dec00304 	addi	sp,sp,12
  80d5d0:	f800283a 	ret

0080d5d4 <__muldi3>:
  80d5d4:	defff204 	addi	sp,sp,-56
  80d5d8:	df000c15 	stw	fp,48(sp)
  80d5dc:	3038d43a 	srli	fp,r6,16
  80d5e0:	dd000815 	stw	r20,32(sp)
  80d5e4:	dc400515 	stw	r17,20(sp)
  80d5e8:	2028d43a 	srli	r20,r4,16
  80d5ec:	247fffcc 	andi	r17,r4,65535
  80d5f0:	dc000415 	stw	r16,16(sp)
  80d5f4:	343fffcc 	andi	r16,r6,65535
  80d5f8:	dcc00715 	stw	r19,28(sp)
  80d5fc:	d9000015 	stw	r4,0(sp)
  80d600:	2827883a 	mov	r19,r5
  80d604:	8809883a 	mov	r4,r17
  80d608:	d9400115 	stw	r5,4(sp)
  80d60c:	800b883a 	mov	r5,r16
  80d610:	d9800215 	stw	r6,8(sp)
  80d614:	dfc00d15 	stw	ra,52(sp)
  80d618:	d9c00315 	stw	r7,12(sp)
  80d61c:	dd800a15 	stw	r22,40(sp)
  80d620:	dd400915 	stw	r21,36(sp)
  80d624:	302d883a 	mov	r22,r6
  80d628:	ddc00b15 	stw	r23,44(sp)
  80d62c:	dc800615 	stw	r18,24(sp)
  80d630:	080f9440 	call	80f944 <__mulsi3>
  80d634:	8809883a 	mov	r4,r17
  80d638:	e00b883a 	mov	r5,fp
  80d63c:	102b883a 	mov	r21,r2
  80d640:	080f9440 	call	80f944 <__mulsi3>
  80d644:	800b883a 	mov	r5,r16
  80d648:	a009883a 	mov	r4,r20
  80d64c:	1023883a 	mov	r17,r2
  80d650:	080f9440 	call	80f944 <__mulsi3>
  80d654:	a009883a 	mov	r4,r20
  80d658:	e00b883a 	mov	r5,fp
  80d65c:	1021883a 	mov	r16,r2
  80d660:	080f9440 	call	80f944 <__mulsi3>
  80d664:	a8ffffcc 	andi	r3,r21,65535
  80d668:	a82ad43a 	srli	r21,r21,16
  80d66c:	8c23883a 	add	r17,r17,r16
  80d670:	1011883a 	mov	r8,r2
  80d674:	ac6b883a 	add	r21,r21,r17
  80d678:	a804943a 	slli	r2,r21,16
  80d67c:	b009883a 	mov	r4,r22
  80d680:	980b883a 	mov	r5,r19
  80d684:	10c7883a 	add	r3,r2,r3
  80d688:	a812d43a 	srli	r9,r21,16
  80d68c:	180d883a 	mov	r6,r3
  80d690:	ac00022e 	bgeu	r21,r16,80d69c <__muldi3+0xc8>
  80d694:	00800074 	movhi	r2,1
  80d698:	4091883a 	add	r8,r8,r2
  80d69c:	4267883a 	add	r19,r8,r9
  80d6a0:	302d883a 	mov	r22,r6
  80d6a4:	080f9440 	call	80f944 <__mulsi3>
  80d6a8:	d9400317 	ldw	r5,12(sp)
  80d6ac:	d9000017 	ldw	r4,0(sp)
  80d6b0:	1023883a 	mov	r17,r2
  80d6b4:	080f9440 	call	80f944 <__mulsi3>
  80d6b8:	14cb883a 	add	r5,r2,r19
  80d6bc:	894b883a 	add	r5,r17,r5
  80d6c0:	b005883a 	mov	r2,r22
  80d6c4:	2807883a 	mov	r3,r5
  80d6c8:	dfc00d17 	ldw	ra,52(sp)
  80d6cc:	df000c17 	ldw	fp,48(sp)
  80d6d0:	ddc00b17 	ldw	r23,44(sp)
  80d6d4:	dd800a17 	ldw	r22,40(sp)
  80d6d8:	dd400917 	ldw	r21,36(sp)
  80d6dc:	dd000817 	ldw	r20,32(sp)
  80d6e0:	dcc00717 	ldw	r19,28(sp)
  80d6e4:	dc800617 	ldw	r18,24(sp)
  80d6e8:	dc400517 	ldw	r17,20(sp)
  80d6ec:	dc000417 	ldw	r16,16(sp)
  80d6f0:	dec00e04 	addi	sp,sp,56
  80d6f4:	f800283a 	ret

0080d6f8 <__fixunsdfsi>:
  80d6f8:	defffb04 	addi	sp,sp,-20
  80d6fc:	dc400115 	stw	r17,4(sp)
  80d700:	dc000015 	stw	r16,0(sp)
  80d704:	04507834 	movhi	r17,16864
  80d708:	0021883a 	mov	r16,zero
  80d70c:	800d883a 	mov	r6,r16
  80d710:	880f883a 	mov	r7,r17
  80d714:	dcc00315 	stw	r19,12(sp)
  80d718:	dc800215 	stw	r18,8(sp)
  80d71c:	2827883a 	mov	r19,r5
  80d720:	2025883a 	mov	r18,r4
  80d724:	dfc00415 	stw	ra,16(sp)
  80d728:	080f2880 	call	80f288 <__gedf2>
  80d72c:	000d883a 	mov	r6,zero
  80d730:	880f883a 	mov	r7,r17
  80d734:	980b883a 	mov	r5,r19
  80d738:	9009883a 	mov	r4,r18
  80d73c:	10000d16 	blt	r2,zero,80d774 <__fixunsdfsi+0x7c>
  80d740:	080e9e00 	call	80e9e0 <__subdf3>
  80d744:	180b883a 	mov	r5,r3
  80d748:	1009883a 	mov	r4,r2
  80d74c:	080f5180 	call	80f518 <__fixdfsi>
  80d750:	00e00034 	movhi	r3,32768
  80d754:	10c5883a 	add	r2,r2,r3
  80d758:	dfc00417 	ldw	ra,16(sp)
  80d75c:	dcc00317 	ldw	r19,12(sp)
  80d760:	dc800217 	ldw	r18,8(sp)
  80d764:	dc400117 	ldw	r17,4(sp)
  80d768:	dc000017 	ldw	r16,0(sp)
  80d76c:	dec00504 	addi	sp,sp,20
  80d770:	f800283a 	ret
  80d774:	980b883a 	mov	r5,r19
  80d778:	9009883a 	mov	r4,r18
  80d77c:	080f5180 	call	80f518 <__fixdfsi>
  80d780:	dfc00417 	ldw	ra,16(sp)
  80d784:	dcc00317 	ldw	r19,12(sp)
  80d788:	dc800217 	ldw	r18,8(sp)
  80d78c:	dc400117 	ldw	r17,4(sp)
  80d790:	dc000017 	ldw	r16,0(sp)
  80d794:	dec00504 	addi	sp,sp,20
  80d798:	f800283a 	ret

0080d79c <__udivdi3>:
  80d79c:	defff104 	addi	sp,sp,-60
  80d7a0:	0015883a 	mov	r10,zero
  80d7a4:	2005883a 	mov	r2,r4
  80d7a8:	3011883a 	mov	r8,r6
  80d7ac:	df000d15 	stw	fp,52(sp)
  80d7b0:	dd400a15 	stw	r21,40(sp)
  80d7b4:	dcc00815 	stw	r19,32(sp)
  80d7b8:	dfc00e15 	stw	ra,56(sp)
  80d7bc:	ddc00c15 	stw	r23,48(sp)
  80d7c0:	dd800b15 	stw	r22,44(sp)
  80d7c4:	dd000915 	stw	r20,36(sp)
  80d7c8:	dc800715 	stw	r18,28(sp)
  80d7cc:	dc400615 	stw	r17,24(sp)
  80d7d0:	dc000515 	stw	r16,20(sp)
  80d7d4:	da800315 	stw	r10,12(sp)
  80d7d8:	4027883a 	mov	r19,r8
  80d7dc:	1039883a 	mov	fp,r2
  80d7e0:	282b883a 	mov	r21,r5
  80d7e4:	da800415 	stw	r10,16(sp)
  80d7e8:	3800401e 	bne	r7,zero,80d8ec <__udivdi3+0x150>
  80d7ec:	2a006536 	bltu	r5,r8,80d984 <__udivdi3+0x1e8>
  80d7f0:	4000b526 	beq	r8,zero,80dac8 <__udivdi3+0x32c>
  80d7f4:	00bfffd4 	movui	r2,65535
  80d7f8:	14c0ad36 	bltu	r2,r19,80dab0 <__udivdi3+0x314>
  80d7fc:	00803fc4 	movi	r2,255
  80d800:	14c15e36 	bltu	r2,r19,80dd7c <__udivdi3+0x5e0>
  80d804:	000b883a 	mov	r5,zero
  80d808:	0005883a 	mov	r2,zero
  80d80c:	9884d83a 	srl	r2,r19,r2
  80d810:	010020b4 	movhi	r4,130
  80d814:	21321504 	addi	r4,r4,-14252
  80d818:	01800804 	movi	r6,32
  80d81c:	1105883a 	add	r2,r2,r4
  80d820:	10c00003 	ldbu	r3,0(r2)
  80d824:	28c7883a 	add	r3,r5,r3
  80d828:	30e9c83a 	sub	r20,r6,r3
  80d82c:	a0010a1e 	bne	r20,zero,80dc58 <__udivdi3+0x4bc>
  80d830:	982ed43a 	srli	r23,r19,16
  80d834:	acebc83a 	sub	r21,r21,r19
  80d838:	9dbfffcc 	andi	r22,r19,65535
  80d83c:	05000044 	movi	r20,1
  80d840:	a809883a 	mov	r4,r21
  80d844:	b80b883a 	mov	r5,r23
  80d848:	080f9340 	call	80f934 <__udivsi3>
  80d84c:	100b883a 	mov	r5,r2
  80d850:	b009883a 	mov	r4,r22
  80d854:	1021883a 	mov	r16,r2
  80d858:	080f9440 	call	80f944 <__mulsi3>
  80d85c:	a809883a 	mov	r4,r21
  80d860:	b80b883a 	mov	r5,r23
  80d864:	1023883a 	mov	r17,r2
  80d868:	080f93c0 	call	80f93c <__umodsi3>
  80d86c:	1004943a 	slli	r2,r2,16
  80d870:	e006d43a 	srli	r3,fp,16
  80d874:	10c4b03a 	or	r2,r2,r3
  80d878:	1440042e 	bgeu	r2,r17,80d88c <__udivdi3+0xf0>
  80d87c:	14c5883a 	add	r2,r2,r19
  80d880:	843fffc4 	addi	r16,r16,-1
  80d884:	14c00136 	bltu	r2,r19,80d88c <__udivdi3+0xf0>
  80d888:	14415c36 	bltu	r2,r17,80ddfc <__udivdi3+0x660>
  80d88c:	1463c83a 	sub	r17,r2,r17
  80d890:	8809883a 	mov	r4,r17
  80d894:	b80b883a 	mov	r5,r23
  80d898:	080f9340 	call	80f934 <__udivsi3>
  80d89c:	100b883a 	mov	r5,r2
  80d8a0:	b009883a 	mov	r4,r22
  80d8a4:	102b883a 	mov	r21,r2
  80d8a8:	080f9440 	call	80f944 <__mulsi3>
  80d8ac:	8809883a 	mov	r4,r17
  80d8b0:	b80b883a 	mov	r5,r23
  80d8b4:	1025883a 	mov	r18,r2
  80d8b8:	080f93c0 	call	80f93c <__umodsi3>
  80d8bc:	1004943a 	slli	r2,r2,16
  80d8c0:	e0ffffcc 	andi	r3,fp,65535
  80d8c4:	10c4b03a 	or	r2,r2,r3
  80d8c8:	1480042e 	bgeu	r2,r18,80d8dc <__udivdi3+0x140>
  80d8cc:	9885883a 	add	r2,r19,r2
  80d8d0:	ad7fffc4 	addi	r21,r21,-1
  80d8d4:	14c00136 	bltu	r2,r19,80d8dc <__udivdi3+0x140>
  80d8d8:	14813c36 	bltu	r2,r18,80ddcc <__udivdi3+0x630>
  80d8dc:	8004943a 	slli	r2,r16,16
  80d8e0:	a009883a 	mov	r4,r20
  80d8e4:	a884b03a 	or	r2,r21,r2
  80d8e8:	00001506 	br	80d940 <__udivdi3+0x1a4>
  80d8ec:	380d883a 	mov	r6,r7
  80d8f0:	29c06c36 	bltu	r5,r7,80daa4 <__udivdi3+0x308>
  80d8f4:	00bfffd4 	movui	r2,65535
  80d8f8:	11c06436 	bltu	r2,r7,80da8c <__udivdi3+0x2f0>
  80d8fc:	00803fc4 	movi	r2,255
  80d900:	11c11836 	bltu	r2,r7,80dd64 <__udivdi3+0x5c8>
  80d904:	000b883a 	mov	r5,zero
  80d908:	0005883a 	mov	r2,zero
  80d90c:	3084d83a 	srl	r2,r6,r2
  80d910:	010020b4 	movhi	r4,130
  80d914:	21321504 	addi	r4,r4,-14252
  80d918:	01c00804 	movi	r7,32
  80d91c:	1105883a 	add	r2,r2,r4
  80d920:	10c00003 	ldbu	r3,0(r2)
  80d924:	28c7883a 	add	r3,r5,r3
  80d928:	38edc83a 	sub	r22,r7,r3
  80d92c:	b000731e 	bne	r22,zero,80dafc <__udivdi3+0x360>
  80d930:	35400136 	bltu	r6,r21,80d938 <__udivdi3+0x19c>
  80d934:	e4c05b36 	bltu	fp,r19,80daa4 <__udivdi3+0x308>
  80d938:	00800044 	movi	r2,1
  80d93c:	0009883a 	mov	r4,zero
  80d940:	d8800315 	stw	r2,12(sp)
  80d944:	d9400317 	ldw	r5,12(sp)
  80d948:	2007883a 	mov	r3,r4
  80d94c:	d9000415 	stw	r4,16(sp)
  80d950:	2805883a 	mov	r2,r5
  80d954:	dfc00e17 	ldw	ra,56(sp)
  80d958:	df000d17 	ldw	fp,52(sp)
  80d95c:	ddc00c17 	ldw	r23,48(sp)
  80d960:	dd800b17 	ldw	r22,44(sp)
  80d964:	dd400a17 	ldw	r21,40(sp)
  80d968:	dd000917 	ldw	r20,36(sp)
  80d96c:	dcc00817 	ldw	r19,32(sp)
  80d970:	dc800717 	ldw	r18,28(sp)
  80d974:	dc400617 	ldw	r17,24(sp)
  80d978:	dc000517 	ldw	r16,20(sp)
  80d97c:	dec00f04 	addi	sp,sp,60
  80d980:	f800283a 	ret
  80d984:	00bfffd4 	movui	r2,65535
  80d988:	12005636 	bltu	r2,r8,80dae4 <__udivdi3+0x348>
  80d98c:	00803fc4 	movi	r2,255
  80d990:	12010036 	bltu	r2,r8,80dd94 <__udivdi3+0x5f8>
  80d994:	000b883a 	mov	r5,zero
  80d998:	0005883a 	mov	r2,zero
  80d99c:	9884d83a 	srl	r2,r19,r2
  80d9a0:	010020b4 	movhi	r4,130
  80d9a4:	21321504 	addi	r4,r4,-14252
  80d9a8:	01800804 	movi	r6,32
  80d9ac:	1105883a 	add	r2,r2,r4
  80d9b0:	10c00003 	ldbu	r3,0(r2)
  80d9b4:	28c7883a 	add	r3,r5,r3
  80d9b8:	30cbc83a 	sub	r5,r6,r3
  80d9bc:	28000626 	beq	r5,zero,80d9d8 <__udivdi3+0x23c>
  80d9c0:	3145c83a 	sub	r2,r6,r5
  80d9c4:	e084d83a 	srl	r2,fp,r2
  80d9c8:	a946983a 	sll	r3,r21,r5
  80d9cc:	e178983a 	sll	fp,fp,r5
  80d9d0:	9966983a 	sll	r19,r19,r5
  80d9d4:	18aab03a 	or	r21,r3,r2
  80d9d8:	982ed43a 	srli	r23,r19,16
  80d9dc:	a809883a 	mov	r4,r21
  80d9e0:	9cbfffcc 	andi	r18,r19,65535
  80d9e4:	b80b883a 	mov	r5,r23
  80d9e8:	080f9340 	call	80f934 <__udivsi3>
  80d9ec:	100b883a 	mov	r5,r2
  80d9f0:	9009883a 	mov	r4,r18
  80d9f4:	1021883a 	mov	r16,r2
  80d9f8:	080f9440 	call	80f944 <__mulsi3>
  80d9fc:	a809883a 	mov	r4,r21
  80da00:	b80b883a 	mov	r5,r23
  80da04:	1023883a 	mov	r17,r2
  80da08:	080f93c0 	call	80f93c <__umodsi3>
  80da0c:	1004943a 	slli	r2,r2,16
  80da10:	e006d43a 	srli	r3,fp,16
  80da14:	10c4b03a 	or	r2,r2,r3
  80da18:	1440042e 	bgeu	r2,r17,80da2c <__udivdi3+0x290>
  80da1c:	14c5883a 	add	r2,r2,r19
  80da20:	843fffc4 	addi	r16,r16,-1
  80da24:	14c00136 	bltu	r2,r19,80da2c <__udivdi3+0x290>
  80da28:	1440ea36 	bltu	r2,r17,80ddd4 <__udivdi3+0x638>
  80da2c:	1463c83a 	sub	r17,r2,r17
  80da30:	8809883a 	mov	r4,r17
  80da34:	b80b883a 	mov	r5,r23
  80da38:	080f9340 	call	80f934 <__udivsi3>
  80da3c:	100b883a 	mov	r5,r2
  80da40:	9009883a 	mov	r4,r18
  80da44:	102b883a 	mov	r21,r2
  80da48:	080f9440 	call	80f944 <__mulsi3>
  80da4c:	8809883a 	mov	r4,r17
  80da50:	b80b883a 	mov	r5,r23
  80da54:	1025883a 	mov	r18,r2
  80da58:	080f93c0 	call	80f93c <__umodsi3>
  80da5c:	1004943a 	slli	r2,r2,16
  80da60:	e0ffffcc 	andi	r3,fp,65535
  80da64:	10c4b03a 	or	r2,r2,r3
  80da68:	1480042e 	bgeu	r2,r18,80da7c <__udivdi3+0x2e0>
  80da6c:	9885883a 	add	r2,r19,r2
  80da70:	ad7fffc4 	addi	r21,r21,-1
  80da74:	14c00136 	bltu	r2,r19,80da7c <__udivdi3+0x2e0>
  80da78:	1480d936 	bltu	r2,r18,80dde0 <__udivdi3+0x644>
  80da7c:	8004943a 	slli	r2,r16,16
  80da80:	0009883a 	mov	r4,zero
  80da84:	a884b03a 	or	r2,r21,r2
  80da88:	003fad06 	br	80d940 <__udivdi3+0x1a4>
  80da8c:	00804034 	movhi	r2,256
  80da90:	10bfffc4 	addi	r2,r2,-1
  80da94:	11c0b636 	bltu	r2,r7,80dd70 <__udivdi3+0x5d4>
  80da98:	01400404 	movi	r5,16
  80da9c:	2805883a 	mov	r2,r5
  80daa0:	003f9a06 	br	80d90c <__udivdi3+0x170>
  80daa4:	0005883a 	mov	r2,zero
  80daa8:	0009883a 	mov	r4,zero
  80daac:	003fa406 	br	80d940 <__udivdi3+0x1a4>
  80dab0:	00804034 	movhi	r2,256
  80dab4:	10bfffc4 	addi	r2,r2,-1
  80dab8:	14c0b336 	bltu	r2,r19,80dd88 <__udivdi3+0x5ec>
  80dabc:	01400404 	movi	r5,16
  80dac0:	2805883a 	mov	r2,r5
  80dac4:	003f5106 	br	80d80c <__udivdi3+0x70>
  80dac8:	01000044 	movi	r4,1
  80dacc:	000b883a 	mov	r5,zero
  80dad0:	080f9340 	call	80f934 <__udivsi3>
  80dad4:	1027883a 	mov	r19,r2
  80dad8:	00bfffd4 	movui	r2,65535
  80dadc:	14fff436 	bltu	r2,r19,80dab0 <__udivdi3+0x314>
  80dae0:	003f4606 	br	80d7fc <__udivdi3+0x60>
  80dae4:	00804034 	movhi	r2,256
  80dae8:	10bfffc4 	addi	r2,r2,-1
  80daec:	1200ac36 	bltu	r2,r8,80dda0 <__udivdi3+0x604>
  80daf0:	01400404 	movi	r5,16
  80daf4:	2805883a 	mov	r2,r5
  80daf8:	003fa806 	br	80d99c <__udivdi3+0x200>
  80dafc:	3d85c83a 	sub	r2,r7,r22
  80db00:	3588983a 	sll	r4,r6,r22
  80db04:	9886d83a 	srl	r3,r19,r2
  80db08:	a8a2d83a 	srl	r17,r21,r2
  80db0c:	e084d83a 	srl	r2,fp,r2
  80db10:	20eeb03a 	or	r23,r4,r3
  80db14:	b824d43a 	srli	r18,r23,16
  80db18:	ad86983a 	sll	r3,r21,r22
  80db1c:	8809883a 	mov	r4,r17
  80db20:	900b883a 	mov	r5,r18
  80db24:	1886b03a 	or	r3,r3,r2
  80db28:	d8c00115 	stw	r3,4(sp)
  80db2c:	bc3fffcc 	andi	r16,r23,65535
  80db30:	080f9340 	call	80f934 <__udivsi3>
  80db34:	100b883a 	mov	r5,r2
  80db38:	8009883a 	mov	r4,r16
  80db3c:	1029883a 	mov	r20,r2
  80db40:	080f9440 	call	80f944 <__mulsi3>
  80db44:	900b883a 	mov	r5,r18
  80db48:	8809883a 	mov	r4,r17
  80db4c:	102b883a 	mov	r21,r2
  80db50:	080f93c0 	call	80f93c <__umodsi3>
  80db54:	d9400117 	ldw	r5,4(sp)
  80db58:	1004943a 	slli	r2,r2,16
  80db5c:	9da6983a 	sll	r19,r19,r22
  80db60:	2806d43a 	srli	r3,r5,16
  80db64:	10c4b03a 	or	r2,r2,r3
  80db68:	1540032e 	bgeu	r2,r21,80db78 <__udivdi3+0x3dc>
  80db6c:	15c5883a 	add	r2,r2,r23
  80db70:	a53fffc4 	addi	r20,r20,-1
  80db74:	15c0912e 	bgeu	r2,r23,80ddbc <__udivdi3+0x620>
  80db78:	1563c83a 	sub	r17,r2,r21
  80db7c:	8809883a 	mov	r4,r17
  80db80:	900b883a 	mov	r5,r18
  80db84:	080f9340 	call	80f934 <__udivsi3>
  80db88:	100b883a 	mov	r5,r2
  80db8c:	8009883a 	mov	r4,r16
  80db90:	102b883a 	mov	r21,r2
  80db94:	080f9440 	call	80f944 <__mulsi3>
  80db98:	8809883a 	mov	r4,r17
  80db9c:	900b883a 	mov	r5,r18
  80dba0:	1021883a 	mov	r16,r2
  80dba4:	080f93c0 	call	80f93c <__umodsi3>
  80dba8:	da800117 	ldw	r10,4(sp)
  80dbac:	1004943a 	slli	r2,r2,16
  80dbb0:	50ffffcc 	andi	r3,r10,65535
  80dbb4:	10c6b03a 	or	r3,r2,r3
  80dbb8:	1c00032e 	bgeu	r3,r16,80dbc8 <__udivdi3+0x42c>
  80dbbc:	1dc7883a 	add	r3,r3,r23
  80dbc0:	ad7fffc4 	addi	r21,r21,-1
  80dbc4:	1dc0792e 	bgeu	r3,r23,80ddac <__udivdi3+0x610>
  80dbc8:	a004943a 	slli	r2,r20,16
  80dbcc:	982ed43a 	srli	r23,r19,16
  80dbd0:	9cffffcc 	andi	r19,r19,65535
  80dbd4:	a8a4b03a 	or	r18,r21,r2
  80dbd8:	947fffcc 	andi	r17,r18,65535
  80dbdc:	902ad43a 	srli	r21,r18,16
  80dbe0:	8809883a 	mov	r4,r17
  80dbe4:	980b883a 	mov	r5,r19
  80dbe8:	1c21c83a 	sub	r16,r3,r16
  80dbec:	080f9440 	call	80f944 <__mulsi3>
  80dbf0:	8809883a 	mov	r4,r17
  80dbf4:	b80b883a 	mov	r5,r23
  80dbf8:	1029883a 	mov	r20,r2
  80dbfc:	080f9440 	call	80f944 <__mulsi3>
  80dc00:	980b883a 	mov	r5,r19
  80dc04:	a809883a 	mov	r4,r21
  80dc08:	1023883a 	mov	r17,r2
  80dc0c:	080f9440 	call	80f944 <__mulsi3>
  80dc10:	a809883a 	mov	r4,r21
  80dc14:	b80b883a 	mov	r5,r23
  80dc18:	1027883a 	mov	r19,r2
  80dc1c:	080f9440 	call	80f944 <__mulsi3>
  80dc20:	1009883a 	mov	r4,r2
  80dc24:	a004d43a 	srli	r2,r20,16
  80dc28:	8ce3883a 	add	r17,r17,r19
  80dc2c:	1447883a 	add	r3,r2,r17
  80dc30:	1cc0022e 	bgeu	r3,r19,80dc3c <__udivdi3+0x4a0>
  80dc34:	00800074 	movhi	r2,1
  80dc38:	2089883a 	add	r4,r4,r2
  80dc3c:	1804d43a 	srli	r2,r3,16
  80dc40:	2085883a 	add	r2,r4,r2
  80dc44:	80804436 	bltu	r16,r2,80dd58 <__udivdi3+0x5bc>
  80dc48:	80803e26 	beq	r16,r2,80dd44 <__udivdi3+0x5a8>
  80dc4c:	9005883a 	mov	r2,r18
  80dc50:	0009883a 	mov	r4,zero
  80dc54:	003f3a06 	br	80d940 <__udivdi3+0x1a4>
  80dc58:	9d26983a 	sll	r19,r19,r20
  80dc5c:	3505c83a 	sub	r2,r6,r20
  80dc60:	a8a2d83a 	srl	r17,r21,r2
  80dc64:	982ed43a 	srli	r23,r19,16
  80dc68:	e084d83a 	srl	r2,fp,r2
  80dc6c:	ad06983a 	sll	r3,r21,r20
  80dc70:	8809883a 	mov	r4,r17
  80dc74:	b80b883a 	mov	r5,r23
  80dc78:	1886b03a 	or	r3,r3,r2
  80dc7c:	d8c00015 	stw	r3,0(sp)
  80dc80:	9dbfffcc 	andi	r22,r19,65535
  80dc84:	080f9340 	call	80f934 <__udivsi3>
  80dc88:	100b883a 	mov	r5,r2
  80dc8c:	b009883a 	mov	r4,r22
  80dc90:	d8800215 	stw	r2,8(sp)
  80dc94:	080f9440 	call	80f944 <__mulsi3>
  80dc98:	8809883a 	mov	r4,r17
  80dc9c:	b80b883a 	mov	r5,r23
  80dca0:	102b883a 	mov	r21,r2
  80dca4:	080f93c0 	call	80f93c <__umodsi3>
  80dca8:	d9000017 	ldw	r4,0(sp)
  80dcac:	1004943a 	slli	r2,r2,16
  80dcb0:	2006d43a 	srli	r3,r4,16
  80dcb4:	10c4b03a 	or	r2,r2,r3
  80dcb8:	1540052e 	bgeu	r2,r21,80dcd0 <__udivdi3+0x534>
  80dcbc:	d9400217 	ldw	r5,8(sp)
  80dcc0:	14c5883a 	add	r2,r2,r19
  80dcc4:	297fffc4 	addi	r5,r5,-1
  80dcc8:	d9400215 	stw	r5,8(sp)
  80dccc:	14c0462e 	bgeu	r2,r19,80dde8 <__udivdi3+0x64c>
  80dcd0:	1563c83a 	sub	r17,r2,r21
  80dcd4:	8809883a 	mov	r4,r17
  80dcd8:	b80b883a 	mov	r5,r23
  80dcdc:	080f9340 	call	80f934 <__udivsi3>
  80dce0:	100b883a 	mov	r5,r2
  80dce4:	b009883a 	mov	r4,r22
  80dce8:	1025883a 	mov	r18,r2
  80dcec:	080f9440 	call	80f944 <__mulsi3>
  80dcf0:	8809883a 	mov	r4,r17
  80dcf4:	b80b883a 	mov	r5,r23
  80dcf8:	1021883a 	mov	r16,r2
  80dcfc:	080f93c0 	call	80f93c <__umodsi3>
  80dd00:	da800017 	ldw	r10,0(sp)
  80dd04:	1004943a 	slli	r2,r2,16
  80dd08:	50ffffcc 	andi	r3,r10,65535
  80dd0c:	10c6b03a 	or	r3,r2,r3
  80dd10:	1c00062e 	bgeu	r3,r16,80dd2c <__udivdi3+0x590>
  80dd14:	1cc7883a 	add	r3,r3,r19
  80dd18:	94bfffc4 	addi	r18,r18,-1
  80dd1c:	1cc00336 	bltu	r3,r19,80dd2c <__udivdi3+0x590>
  80dd20:	1c00022e 	bgeu	r3,r16,80dd2c <__udivdi3+0x590>
  80dd24:	94bfffc4 	addi	r18,r18,-1
  80dd28:	1cc7883a 	add	r3,r3,r19
  80dd2c:	d9000217 	ldw	r4,8(sp)
  80dd30:	e538983a 	sll	fp,fp,r20
  80dd34:	1c2bc83a 	sub	r21,r3,r16
  80dd38:	2004943a 	slli	r2,r4,16
  80dd3c:	90a8b03a 	or	r20,r18,r2
  80dd40:	003ebf06 	br	80d840 <__udivdi3+0xa4>
  80dd44:	1804943a 	slli	r2,r3,16
  80dd48:	e588983a 	sll	r4,fp,r22
  80dd4c:	a0ffffcc 	andi	r3,r20,65535
  80dd50:	10c5883a 	add	r2,r2,r3
  80dd54:	20bfbd2e 	bgeu	r4,r2,80dc4c <__udivdi3+0x4b0>
  80dd58:	90bfffc4 	addi	r2,r18,-1
  80dd5c:	0009883a 	mov	r4,zero
  80dd60:	003ef706 	br	80d940 <__udivdi3+0x1a4>
  80dd64:	01400204 	movi	r5,8
  80dd68:	2805883a 	mov	r2,r5
  80dd6c:	003ee706 	br	80d90c <__udivdi3+0x170>
  80dd70:	01400604 	movi	r5,24
  80dd74:	2805883a 	mov	r2,r5
  80dd78:	003ee406 	br	80d90c <__udivdi3+0x170>
  80dd7c:	01400204 	movi	r5,8
  80dd80:	2805883a 	mov	r2,r5
  80dd84:	003ea106 	br	80d80c <__udivdi3+0x70>
  80dd88:	01400604 	movi	r5,24
  80dd8c:	2805883a 	mov	r2,r5
  80dd90:	003e9e06 	br	80d80c <__udivdi3+0x70>
  80dd94:	01400204 	movi	r5,8
  80dd98:	2805883a 	mov	r2,r5
  80dd9c:	003eff06 	br	80d99c <__udivdi3+0x200>
  80dda0:	01400604 	movi	r5,24
  80dda4:	2805883a 	mov	r2,r5
  80dda8:	003efc06 	br	80d99c <__udivdi3+0x200>
  80ddac:	1c3f862e 	bgeu	r3,r16,80dbc8 <__udivdi3+0x42c>
  80ddb0:	1dc7883a 	add	r3,r3,r23
  80ddb4:	ad7fffc4 	addi	r21,r21,-1
  80ddb8:	003f8306 	br	80dbc8 <__udivdi3+0x42c>
  80ddbc:	157f6e2e 	bgeu	r2,r21,80db78 <__udivdi3+0x3dc>
  80ddc0:	a53fffc4 	addi	r20,r20,-1
  80ddc4:	15c5883a 	add	r2,r2,r23
  80ddc8:	003f6b06 	br	80db78 <__udivdi3+0x3dc>
  80ddcc:	ad7fffc4 	addi	r21,r21,-1
  80ddd0:	003ec206 	br	80d8dc <__udivdi3+0x140>
  80ddd4:	843fffc4 	addi	r16,r16,-1
  80ddd8:	14c5883a 	add	r2,r2,r19
  80dddc:	003f1306 	br	80da2c <__udivdi3+0x290>
  80dde0:	ad7fffc4 	addi	r21,r21,-1
  80dde4:	003f2506 	br	80da7c <__udivdi3+0x2e0>
  80dde8:	157fb92e 	bgeu	r2,r21,80dcd0 <__udivdi3+0x534>
  80ddec:	297fffc4 	addi	r5,r5,-1
  80ddf0:	14c5883a 	add	r2,r2,r19
  80ddf4:	d9400215 	stw	r5,8(sp)
  80ddf8:	003fb506 	br	80dcd0 <__udivdi3+0x534>
  80ddfc:	843fffc4 	addi	r16,r16,-1
  80de00:	14c5883a 	add	r2,r2,r19
  80de04:	003ea106 	br	80d88c <__udivdi3+0xf0>

0080de08 <__umoddi3>:
  80de08:	defff004 	addi	sp,sp,-64
  80de0c:	3011883a 	mov	r8,r6
  80de10:	000d883a 	mov	r6,zero
  80de14:	dd400b15 	stw	r21,44(sp)
  80de18:	dcc00915 	stw	r19,36(sp)
  80de1c:	dc000615 	stw	r16,24(sp)
  80de20:	dfc00f15 	stw	ra,60(sp)
  80de24:	df000e15 	stw	fp,56(sp)
  80de28:	ddc00d15 	stw	r23,52(sp)
  80de2c:	dd800c15 	stw	r22,48(sp)
  80de30:	dd000a15 	stw	r20,40(sp)
  80de34:	dc800815 	stw	r18,32(sp)
  80de38:	dc400715 	stw	r17,28(sp)
  80de3c:	2817883a 	mov	r11,r5
  80de40:	d9800415 	stw	r6,16(sp)
  80de44:	4027883a 	mov	r19,r8
  80de48:	d9800515 	stw	r6,20(sp)
  80de4c:	2021883a 	mov	r16,r4
  80de50:	282b883a 	mov	r21,r5
  80de54:	38002c1e 	bne	r7,zero,80df08 <__umoddi3+0x100>
  80de58:	2a005636 	bltu	r5,r8,80dfb4 <__umoddi3+0x1ac>
  80de5c:	40009a26 	beq	r8,zero,80e0c8 <__umoddi3+0x2c0>
  80de60:	00bfffd4 	movui	r2,65535
  80de64:	14c09236 	bltu	r2,r19,80e0b0 <__umoddi3+0x2a8>
  80de68:	00803fc4 	movi	r2,255
  80de6c:	14c15c36 	bltu	r2,r19,80e3e0 <__umoddi3+0x5d8>
  80de70:	000b883a 	mov	r5,zero
  80de74:	0005883a 	mov	r2,zero
  80de78:	9884d83a 	srl	r2,r19,r2
  80de7c:	010020b4 	movhi	r4,130
  80de80:	21321504 	addi	r4,r4,-14252
  80de84:	01800804 	movi	r6,32
  80de88:	1105883a 	add	r2,r2,r4
  80de8c:	10c00003 	ldbu	r3,0(r2)
  80de90:	28c7883a 	add	r3,r5,r3
  80de94:	30e5c83a 	sub	r18,r6,r3
  80de98:	9000a41e 	bne	r18,zero,80e12c <__umoddi3+0x324>
  80de9c:	982ed43a 	srli	r23,r19,16
  80dea0:	acebc83a 	sub	r21,r21,r19
  80dea4:	9d3fffcc 	andi	r20,r19,65535
  80dea8:	002d883a 	mov	r22,zero
  80deac:	a809883a 	mov	r4,r21
  80deb0:	b80b883a 	mov	r5,r23
  80deb4:	080f9340 	call	80f934 <__udivsi3>
  80deb8:	100b883a 	mov	r5,r2
  80debc:	a009883a 	mov	r4,r20
  80dec0:	080f9440 	call	80f944 <__mulsi3>
  80dec4:	a809883a 	mov	r4,r21
  80dec8:	b80b883a 	mov	r5,r23
  80decc:	1023883a 	mov	r17,r2
  80ded0:	080f93c0 	call	80f93c <__umodsi3>
  80ded4:	1004943a 	slli	r2,r2,16
  80ded8:	8006d43a 	srli	r3,r16,16
  80dedc:	10c4b03a 	or	r2,r2,r3
  80dee0:	1440032e 	bgeu	r2,r17,80def0 <__umoddi3+0xe8>
  80dee4:	14c5883a 	add	r2,r2,r19
  80dee8:	14c00136 	bltu	r2,r19,80def0 <__umoddi3+0xe8>
  80deec:	14415836 	bltu	r2,r17,80e450 <__umoddi3+0x648>
  80def0:	1463c83a 	sub	r17,r2,r17
  80def4:	8809883a 	mov	r4,r17
  80def8:	b80b883a 	mov	r5,r23
  80defc:	080f9340 	call	80f934 <__udivsi3>
  80df00:	a009883a 	mov	r4,r20
  80df04:	00005306 	br	80e054 <__umoddi3+0x24c>
  80df08:	380d883a 	mov	r6,r7
  80df0c:	29c0132e 	bgeu	r5,r7,80df5c <__umoddi3+0x154>
  80df10:	d9000415 	stw	r4,16(sp)
  80df14:	d9400515 	stw	r5,20(sp)
  80df18:	d9400417 	ldw	r5,16(sp)
  80df1c:	5813883a 	mov	r9,r11
  80df20:	2811883a 	mov	r8,r5
  80df24:	4005883a 	mov	r2,r8
  80df28:	4807883a 	mov	r3,r9
  80df2c:	dfc00f17 	ldw	ra,60(sp)
  80df30:	df000e17 	ldw	fp,56(sp)
  80df34:	ddc00d17 	ldw	r23,52(sp)
  80df38:	dd800c17 	ldw	r22,48(sp)
  80df3c:	dd400b17 	ldw	r21,44(sp)
  80df40:	dd000a17 	ldw	r20,40(sp)
  80df44:	dcc00917 	ldw	r19,36(sp)
  80df48:	dc800817 	ldw	r18,32(sp)
  80df4c:	dc400717 	ldw	r17,28(sp)
  80df50:	dc000617 	ldw	r16,24(sp)
  80df54:	dec01004 	addi	sp,sp,64
  80df58:	f800283a 	ret
  80df5c:	00bfffd4 	movui	r2,65535
  80df60:	11c06636 	bltu	r2,r7,80e0fc <__umoddi3+0x2f4>
  80df64:	00803fc4 	movi	r2,255
  80df68:	11c12036 	bltu	r2,r7,80e3ec <__umoddi3+0x5e4>
  80df6c:	000b883a 	mov	r5,zero
  80df70:	0005883a 	mov	r2,zero
  80df74:	3084d83a 	srl	r2,r6,r2
  80df78:	010020b4 	movhi	r4,130
  80df7c:	21321504 	addi	r4,r4,-14252
  80df80:	01c00804 	movi	r7,32
  80df84:	1105883a 	add	r2,r2,r4
  80df88:	10c00003 	ldbu	r3,0(r2)
  80df8c:	28c7883a 	add	r3,r5,r3
  80df90:	38e5c83a 	sub	r18,r7,r3
  80df94:	9000941e 	bne	r18,zero,80e1e8 <__umoddi3+0x3e0>
  80df98:	35405e36 	bltu	r6,r21,80e114 <__umoddi3+0x30c>
  80df9c:	84c05d2e 	bgeu	r16,r19,80e114 <__umoddi3+0x30c>
  80dfa0:	8011883a 	mov	r8,r16
  80dfa4:	a813883a 	mov	r9,r21
  80dfa8:	dc000415 	stw	r16,16(sp)
  80dfac:	dd400515 	stw	r21,20(sp)
  80dfb0:	003fdc06 	br	80df24 <__umoddi3+0x11c>
  80dfb4:	00bfffd4 	movui	r2,65535
  80dfb8:	12004a36 	bltu	r2,r8,80e0e4 <__umoddi3+0x2dc>
  80dfbc:	00803fc4 	movi	r2,255
  80dfc0:	12010d36 	bltu	r2,r8,80e3f8 <__umoddi3+0x5f0>
  80dfc4:	000b883a 	mov	r5,zero
  80dfc8:	0005883a 	mov	r2,zero
  80dfcc:	9884d83a 	srl	r2,r19,r2
  80dfd0:	010020b4 	movhi	r4,130
  80dfd4:	21321504 	addi	r4,r4,-14252
  80dfd8:	01800804 	movi	r6,32
  80dfdc:	1105883a 	add	r2,r2,r4
  80dfe0:	10c00003 	ldbu	r3,0(r2)
  80dfe4:	28c7883a 	add	r3,r5,r3
  80dfe8:	30c7c83a 	sub	r3,r6,r3
  80dfec:	1800dc1e 	bne	r3,zero,80e360 <__umoddi3+0x558>
  80dff0:	002d883a 	mov	r22,zero
  80dff4:	982ed43a 	srli	r23,r19,16
  80dff8:	a809883a 	mov	r4,r21
  80dffc:	9cbfffcc 	andi	r18,r19,65535
  80e000:	b80b883a 	mov	r5,r23
  80e004:	080f9340 	call	80f934 <__udivsi3>
  80e008:	100b883a 	mov	r5,r2
  80e00c:	9009883a 	mov	r4,r18
  80e010:	080f9440 	call	80f944 <__mulsi3>
  80e014:	a809883a 	mov	r4,r21
  80e018:	b80b883a 	mov	r5,r23
  80e01c:	1023883a 	mov	r17,r2
  80e020:	080f93c0 	call	80f93c <__umodsi3>
  80e024:	1004943a 	slli	r2,r2,16
  80e028:	8006d43a 	srli	r3,r16,16
  80e02c:	10c4b03a 	or	r2,r2,r3
  80e030:	1440032e 	bgeu	r2,r17,80e040 <__umoddi3+0x238>
  80e034:	14c5883a 	add	r2,r2,r19
  80e038:	14c00136 	bltu	r2,r19,80e040 <__umoddi3+0x238>
  80e03c:	14410236 	bltu	r2,r17,80e448 <__umoddi3+0x640>
  80e040:	1463c83a 	sub	r17,r2,r17
  80e044:	8809883a 	mov	r4,r17
  80e048:	b80b883a 	mov	r5,r23
  80e04c:	080f9340 	call	80f934 <__udivsi3>
  80e050:	9009883a 	mov	r4,r18
  80e054:	100b883a 	mov	r5,r2
  80e058:	080f9440 	call	80f944 <__mulsi3>
  80e05c:	8809883a 	mov	r4,r17
  80e060:	b80b883a 	mov	r5,r23
  80e064:	102b883a 	mov	r21,r2
  80e068:	080f93c0 	call	80f93c <__umodsi3>
  80e06c:	1004943a 	slli	r2,r2,16
  80e070:	80ffffcc 	andi	r3,r16,65535
  80e074:	10c4b03a 	or	r2,r2,r3
  80e078:	1540042e 	bgeu	r2,r21,80e08c <__umoddi3+0x284>
  80e07c:	14c5883a 	add	r2,r2,r19
  80e080:	14c00236 	bltu	r2,r19,80e08c <__umoddi3+0x284>
  80e084:	1540012e 	bgeu	r2,r21,80e08c <__umoddi3+0x284>
  80e088:	14c5883a 	add	r2,r2,r19
  80e08c:	1545c83a 	sub	r2,r2,r21
  80e090:	1584d83a 	srl	r2,r2,r22
  80e094:	0013883a 	mov	r9,zero
  80e098:	d8800415 	stw	r2,16(sp)
  80e09c:	d8c00417 	ldw	r3,16(sp)
  80e0a0:	0005883a 	mov	r2,zero
  80e0a4:	d8800515 	stw	r2,20(sp)
  80e0a8:	1811883a 	mov	r8,r3
  80e0ac:	003f9d06 	br	80df24 <__umoddi3+0x11c>
  80e0b0:	00804034 	movhi	r2,256
  80e0b4:	10bfffc4 	addi	r2,r2,-1
  80e0b8:	14c0c636 	bltu	r2,r19,80e3d4 <__umoddi3+0x5cc>
  80e0bc:	01400404 	movi	r5,16
  80e0c0:	2805883a 	mov	r2,r5
  80e0c4:	003f6c06 	br	80de78 <__umoddi3+0x70>
  80e0c8:	01000044 	movi	r4,1
  80e0cc:	000b883a 	mov	r5,zero
  80e0d0:	080f9340 	call	80f934 <__udivsi3>
  80e0d4:	1027883a 	mov	r19,r2
  80e0d8:	00bfffd4 	movui	r2,65535
  80e0dc:	14fff436 	bltu	r2,r19,80e0b0 <__umoddi3+0x2a8>
  80e0e0:	003f6106 	br	80de68 <__umoddi3+0x60>
  80e0e4:	00804034 	movhi	r2,256
  80e0e8:	10bfffc4 	addi	r2,r2,-1
  80e0ec:	1200c536 	bltu	r2,r8,80e404 <__umoddi3+0x5fc>
  80e0f0:	01400404 	movi	r5,16
  80e0f4:	2805883a 	mov	r2,r5
  80e0f8:	003fb406 	br	80dfcc <__umoddi3+0x1c4>
  80e0fc:	00804034 	movhi	r2,256
  80e100:	10bfffc4 	addi	r2,r2,-1
  80e104:	11c0c236 	bltu	r2,r7,80e410 <__umoddi3+0x608>
  80e108:	01400404 	movi	r5,16
  80e10c:	2805883a 	mov	r2,r5
  80e110:	003f9806 	br	80df74 <__umoddi3+0x16c>
  80e114:	84c9c83a 	sub	r4,r16,r19
  80e118:	8105803a 	cmpltu	r2,r16,r4
  80e11c:	a987c83a 	sub	r3,r21,r6
  80e120:	18abc83a 	sub	r21,r3,r2
  80e124:	2021883a 	mov	r16,r4
  80e128:	003f9d06 	br	80dfa0 <__umoddi3+0x198>
  80e12c:	9ca6983a 	sll	r19,r19,r18
  80e130:	3485c83a 	sub	r2,r6,r18
  80e134:	a8a2d83a 	srl	r17,r21,r2
  80e138:	982ed43a 	srli	r23,r19,16
  80e13c:	ac86983a 	sll	r3,r21,r18
  80e140:	8084d83a 	srl	r2,r16,r2
  80e144:	8809883a 	mov	r4,r17
  80e148:	b80b883a 	mov	r5,r23
  80e14c:	18b8b03a 	or	fp,r3,r2
  80e150:	9d3fffcc 	andi	r20,r19,65535
  80e154:	080f9340 	call	80f934 <__udivsi3>
  80e158:	100b883a 	mov	r5,r2
  80e15c:	a009883a 	mov	r4,r20
  80e160:	080f9440 	call	80f944 <__mulsi3>
  80e164:	8809883a 	mov	r4,r17
  80e168:	b80b883a 	mov	r5,r23
  80e16c:	102b883a 	mov	r21,r2
  80e170:	080f93c0 	call	80f93c <__umodsi3>
  80e174:	1004943a 	slli	r2,r2,16
  80e178:	e006d43a 	srli	r3,fp,16
  80e17c:	902d883a 	mov	r22,r18
  80e180:	10c4b03a 	or	r2,r2,r3
  80e184:	1540022e 	bgeu	r2,r21,80e190 <__umoddi3+0x388>
  80e188:	14c5883a 	add	r2,r2,r19
  80e18c:	14c0ab2e 	bgeu	r2,r19,80e43c <__umoddi3+0x634>
  80e190:	1563c83a 	sub	r17,r2,r21
  80e194:	8809883a 	mov	r4,r17
  80e198:	b80b883a 	mov	r5,r23
  80e19c:	080f9340 	call	80f934 <__udivsi3>
  80e1a0:	100b883a 	mov	r5,r2
  80e1a4:	a009883a 	mov	r4,r20
  80e1a8:	080f9440 	call	80f944 <__mulsi3>
  80e1ac:	8809883a 	mov	r4,r17
  80e1b0:	b80b883a 	mov	r5,r23
  80e1b4:	102b883a 	mov	r21,r2
  80e1b8:	080f93c0 	call	80f93c <__umodsi3>
  80e1bc:	1004943a 	slli	r2,r2,16
  80e1c0:	e0ffffcc 	andi	r3,fp,65535
  80e1c4:	10c4b03a 	or	r2,r2,r3
  80e1c8:	1540042e 	bgeu	r2,r21,80e1dc <__umoddi3+0x3d4>
  80e1cc:	14c5883a 	add	r2,r2,r19
  80e1d0:	14c00236 	bltu	r2,r19,80e1dc <__umoddi3+0x3d4>
  80e1d4:	1540012e 	bgeu	r2,r21,80e1dc <__umoddi3+0x3d4>
  80e1d8:	14c5883a 	add	r2,r2,r19
  80e1dc:	84a0983a 	sll	r16,r16,r18
  80e1e0:	156bc83a 	sub	r21,r2,r21
  80e1e4:	003f3106 	br	80deac <__umoddi3+0xa4>
  80e1e8:	3c8fc83a 	sub	r7,r7,r18
  80e1ec:	3486983a 	sll	r3,r6,r18
  80e1f0:	99c4d83a 	srl	r2,r19,r7
  80e1f4:	a9e2d83a 	srl	r17,r21,r7
  80e1f8:	ac8c983a 	sll	r6,r21,r18
  80e1fc:	18acb03a 	or	r22,r3,r2
  80e200:	b02ed43a 	srli	r23,r22,16
  80e204:	81c4d83a 	srl	r2,r16,r7
  80e208:	8809883a 	mov	r4,r17
  80e20c:	b80b883a 	mov	r5,r23
  80e210:	308cb03a 	or	r6,r6,r2
  80e214:	d9c00315 	stw	r7,12(sp)
  80e218:	d9800215 	stw	r6,8(sp)
  80e21c:	b53fffcc 	andi	r20,r22,65535
  80e220:	080f9340 	call	80f934 <__udivsi3>
  80e224:	100b883a 	mov	r5,r2
  80e228:	a009883a 	mov	r4,r20
  80e22c:	1039883a 	mov	fp,r2
  80e230:	080f9440 	call	80f944 <__mulsi3>
  80e234:	8809883a 	mov	r4,r17
  80e238:	b80b883a 	mov	r5,r23
  80e23c:	102b883a 	mov	r21,r2
  80e240:	080f93c0 	call	80f93c <__umodsi3>
  80e244:	d9000217 	ldw	r4,8(sp)
  80e248:	1004943a 	slli	r2,r2,16
  80e24c:	9ca6983a 	sll	r19,r19,r18
  80e250:	2006d43a 	srli	r3,r4,16
  80e254:	84a0983a 	sll	r16,r16,r18
  80e258:	dcc00015 	stw	r19,0(sp)
  80e25c:	10c4b03a 	or	r2,r2,r3
  80e260:	dc000115 	stw	r16,4(sp)
  80e264:	1540032e 	bgeu	r2,r21,80e274 <__umoddi3+0x46c>
  80e268:	1585883a 	add	r2,r2,r22
  80e26c:	e73fffc4 	addi	fp,fp,-1
  80e270:	15806e2e 	bgeu	r2,r22,80e42c <__umoddi3+0x624>
  80e274:	1563c83a 	sub	r17,r2,r21
  80e278:	8809883a 	mov	r4,r17
  80e27c:	b80b883a 	mov	r5,r23
  80e280:	080f9340 	call	80f934 <__udivsi3>
  80e284:	100b883a 	mov	r5,r2
  80e288:	a009883a 	mov	r4,r20
  80e28c:	1021883a 	mov	r16,r2
  80e290:	080f9440 	call	80f944 <__mulsi3>
  80e294:	b80b883a 	mov	r5,r23
  80e298:	8809883a 	mov	r4,r17
  80e29c:	1029883a 	mov	r20,r2
  80e2a0:	080f93c0 	call	80f93c <__umodsi3>
  80e2a4:	d9400217 	ldw	r5,8(sp)
  80e2a8:	1004943a 	slli	r2,r2,16
  80e2ac:	28ffffcc 	andi	r3,r5,65535
  80e2b0:	10c4b03a 	or	r2,r2,r3
  80e2b4:	1500032e 	bgeu	r2,r20,80e2c4 <__umoddi3+0x4bc>
  80e2b8:	1585883a 	add	r2,r2,r22
  80e2bc:	843fffc4 	addi	r16,r16,-1
  80e2c0:	1580562e 	bgeu	r2,r22,80e41c <__umoddi3+0x614>
  80e2c4:	d9800017 	ldw	r6,0(sp)
  80e2c8:	e022943a 	slli	r17,fp,16
  80e2cc:	302ed43a 	srli	r23,r6,16
  80e2d0:	8462b03a 	or	r17,r16,r17
  80e2d4:	34ffffcc 	andi	r19,r6,65535
  80e2d8:	882ad43a 	srli	r21,r17,16
  80e2dc:	8c7fffcc 	andi	r17,r17,65535
  80e2e0:	8809883a 	mov	r4,r17
  80e2e4:	980b883a 	mov	r5,r19
  80e2e8:	1521c83a 	sub	r16,r2,r20
  80e2ec:	080f9440 	call	80f944 <__mulsi3>
  80e2f0:	8809883a 	mov	r4,r17
  80e2f4:	b80b883a 	mov	r5,r23
  80e2f8:	1029883a 	mov	r20,r2
  80e2fc:	080f9440 	call	80f944 <__mulsi3>
  80e300:	980b883a 	mov	r5,r19
  80e304:	a809883a 	mov	r4,r21
  80e308:	1023883a 	mov	r17,r2
  80e30c:	080f9440 	call	80f944 <__mulsi3>
  80e310:	a809883a 	mov	r4,r21
  80e314:	b80b883a 	mov	r5,r23
  80e318:	1027883a 	mov	r19,r2
  80e31c:	080f9440 	call	80f944 <__mulsi3>
  80e320:	100b883a 	mov	r5,r2
  80e324:	a004d43a 	srli	r2,r20,16
  80e328:	8ce3883a 	add	r17,r17,r19
  80e32c:	1449883a 	add	r4,r2,r17
  80e330:	24c0022e 	bgeu	r4,r19,80e33c <__umoddi3+0x534>
  80e334:	00800074 	movhi	r2,1
  80e338:	288b883a 	add	r5,r5,r2
  80e33c:	2004d43a 	srli	r2,r4,16
  80e340:	2008943a 	slli	r4,r4,16
  80e344:	a0ffffcc 	andi	r3,r20,65535
  80e348:	288d883a 	add	r6,r5,r2
  80e34c:	20c9883a 	add	r4,r4,r3
  80e350:	81800b36 	bltu	r16,r6,80e380 <__umoddi3+0x578>
  80e354:	81804026 	beq	r16,r6,80e458 <__umoddi3+0x650>
  80e358:	818dc83a 	sub	r6,r16,r6
  80e35c:	00000f06 	br	80e39c <__umoddi3+0x594>
  80e360:	30c5c83a 	sub	r2,r6,r3
  80e364:	182d883a 	mov	r22,r3
  80e368:	8084d83a 	srl	r2,r16,r2
  80e36c:	a8c6983a 	sll	r3,r21,r3
  80e370:	9da6983a 	sll	r19,r19,r22
  80e374:	85a0983a 	sll	r16,r16,r22
  80e378:	18aab03a 	or	r21,r3,r2
  80e37c:	003f1d06 	br	80dff4 <__umoddi3+0x1ec>
  80e380:	d8c00017 	ldw	r3,0(sp)
  80e384:	20c5c83a 	sub	r2,r4,r3
  80e388:	2089803a 	cmpltu	r4,r4,r2
  80e38c:	3587c83a 	sub	r3,r6,r22
  80e390:	1907c83a 	sub	r3,r3,r4
  80e394:	80cdc83a 	sub	r6,r16,r3
  80e398:	1009883a 	mov	r4,r2
  80e39c:	d9400117 	ldw	r5,4(sp)
  80e3a0:	2905c83a 	sub	r2,r5,r4
  80e3a4:	2887803a 	cmpltu	r3,r5,r2
  80e3a8:	30c7c83a 	sub	r3,r6,r3
  80e3ac:	d9800317 	ldw	r6,12(sp)
  80e3b0:	1484d83a 	srl	r2,r2,r18
  80e3b4:	1988983a 	sll	r4,r3,r6
  80e3b8:	1c86d83a 	srl	r3,r3,r18
  80e3bc:	2088b03a 	or	r4,r4,r2
  80e3c0:	2011883a 	mov	r8,r4
  80e3c4:	1813883a 	mov	r9,r3
  80e3c8:	d9000415 	stw	r4,16(sp)
  80e3cc:	d8c00515 	stw	r3,20(sp)
  80e3d0:	003ed406 	br	80df24 <__umoddi3+0x11c>
  80e3d4:	01400604 	movi	r5,24
  80e3d8:	2805883a 	mov	r2,r5
  80e3dc:	003ea606 	br	80de78 <__umoddi3+0x70>
  80e3e0:	01400204 	movi	r5,8
  80e3e4:	2805883a 	mov	r2,r5
  80e3e8:	003ea306 	br	80de78 <__umoddi3+0x70>
  80e3ec:	01400204 	movi	r5,8
  80e3f0:	2805883a 	mov	r2,r5
  80e3f4:	003edf06 	br	80df74 <__umoddi3+0x16c>
  80e3f8:	01400204 	movi	r5,8
  80e3fc:	2805883a 	mov	r2,r5
  80e400:	003ef206 	br	80dfcc <__umoddi3+0x1c4>
  80e404:	01400604 	movi	r5,24
  80e408:	2805883a 	mov	r2,r5
  80e40c:	003eef06 	br	80dfcc <__umoddi3+0x1c4>
  80e410:	01400604 	movi	r5,24
  80e414:	2805883a 	mov	r2,r5
  80e418:	003ed606 	br	80df74 <__umoddi3+0x16c>
  80e41c:	153fa92e 	bgeu	r2,r20,80e2c4 <__umoddi3+0x4bc>
  80e420:	843fffc4 	addi	r16,r16,-1
  80e424:	1585883a 	add	r2,r2,r22
  80e428:	003fa606 	br	80e2c4 <__umoddi3+0x4bc>
  80e42c:	157f912e 	bgeu	r2,r21,80e274 <__umoddi3+0x46c>
  80e430:	e73fffc4 	addi	fp,fp,-1
  80e434:	1585883a 	add	r2,r2,r22
  80e438:	003f8e06 	br	80e274 <__umoddi3+0x46c>
  80e43c:	157f542e 	bgeu	r2,r21,80e190 <__umoddi3+0x388>
  80e440:	14c5883a 	add	r2,r2,r19
  80e444:	003f5206 	br	80e190 <__umoddi3+0x388>
  80e448:	14c5883a 	add	r2,r2,r19
  80e44c:	003efc06 	br	80e040 <__umoddi3+0x238>
  80e450:	14c5883a 	add	r2,r2,r19
  80e454:	003ea606 	br	80def0 <__umoddi3+0xe8>
  80e458:	d8800117 	ldw	r2,4(sp)
  80e45c:	113fc836 	bltu	r2,r4,80e380 <__umoddi3+0x578>
  80e460:	000d883a 	mov	r6,zero
  80e464:	003fcd06 	br	80e39c <__umoddi3+0x594>

0080e468 <__nesf2>:
  80e468:	defff304 	addi	sp,sp,-52
  80e46c:	dc400b15 	stw	r17,44(sp)
  80e470:	dc400204 	addi	r17,sp,8
  80e474:	dc000a15 	stw	r16,40(sp)
  80e478:	d9000015 	stw	r4,0(sp)
  80e47c:	d9400115 	stw	r5,4(sp)
  80e480:	d809883a 	mov	r4,sp
  80e484:	880b883a 	mov	r5,r17
  80e488:	dc000604 	addi	r16,sp,24
  80e48c:	dfc00c15 	stw	ra,48(sp)
  80e490:	080f9fc0 	call	80f9fc <__unpack_f>
  80e494:	d9000104 	addi	r4,sp,4
  80e498:	800b883a 	mov	r5,r16
  80e49c:	080f9fc0 	call	80f9fc <__unpack_f>
  80e4a0:	d8800217 	ldw	r2,8(sp)
  80e4a4:	00c00044 	movi	r3,1
  80e4a8:	180d883a 	mov	r6,r3
  80e4ac:	1880062e 	bgeu	r3,r2,80e4c8 <__nesf2+0x60>
  80e4b0:	d8800617 	ldw	r2,24(sp)
  80e4b4:	8809883a 	mov	r4,r17
  80e4b8:	800b883a 	mov	r5,r16
  80e4bc:	1880022e 	bgeu	r3,r2,80e4c8 <__nesf2+0x60>
  80e4c0:	080fac40 	call	80fac4 <__fpcmp_parts_f>
  80e4c4:	100d883a 	mov	r6,r2
  80e4c8:	3005883a 	mov	r2,r6
  80e4cc:	dfc00c17 	ldw	ra,48(sp)
  80e4d0:	dc400b17 	ldw	r17,44(sp)
  80e4d4:	dc000a17 	ldw	r16,40(sp)
  80e4d8:	dec00d04 	addi	sp,sp,52
  80e4dc:	f800283a 	ret

0080e4e0 <__gtsf2>:
  80e4e0:	defff304 	addi	sp,sp,-52
  80e4e4:	dc400b15 	stw	r17,44(sp)
  80e4e8:	dc400204 	addi	r17,sp,8
  80e4ec:	dc000a15 	stw	r16,40(sp)
  80e4f0:	d9000015 	stw	r4,0(sp)
  80e4f4:	d9400115 	stw	r5,4(sp)
  80e4f8:	d809883a 	mov	r4,sp
  80e4fc:	880b883a 	mov	r5,r17
  80e500:	dc000604 	addi	r16,sp,24
  80e504:	dfc00c15 	stw	ra,48(sp)
  80e508:	080f9fc0 	call	80f9fc <__unpack_f>
  80e50c:	d9000104 	addi	r4,sp,4
  80e510:	800b883a 	mov	r5,r16
  80e514:	080f9fc0 	call	80f9fc <__unpack_f>
  80e518:	d8800217 	ldw	r2,8(sp)
  80e51c:	00c00044 	movi	r3,1
  80e520:	01bfffc4 	movi	r6,-1
  80e524:	1880062e 	bgeu	r3,r2,80e540 <__gtsf2+0x60>
  80e528:	d8800617 	ldw	r2,24(sp)
  80e52c:	8809883a 	mov	r4,r17
  80e530:	800b883a 	mov	r5,r16
  80e534:	1880022e 	bgeu	r3,r2,80e540 <__gtsf2+0x60>
  80e538:	080fac40 	call	80fac4 <__fpcmp_parts_f>
  80e53c:	100d883a 	mov	r6,r2
  80e540:	3005883a 	mov	r2,r6
  80e544:	dfc00c17 	ldw	ra,48(sp)
  80e548:	dc400b17 	ldw	r17,44(sp)
  80e54c:	dc000a17 	ldw	r16,40(sp)
  80e550:	dec00d04 	addi	sp,sp,52
  80e554:	f800283a 	ret

0080e558 <__ltsf2>:
  80e558:	defff304 	addi	sp,sp,-52
  80e55c:	dc400b15 	stw	r17,44(sp)
  80e560:	dc400204 	addi	r17,sp,8
  80e564:	dc000a15 	stw	r16,40(sp)
  80e568:	d9000015 	stw	r4,0(sp)
  80e56c:	d9400115 	stw	r5,4(sp)
  80e570:	d809883a 	mov	r4,sp
  80e574:	880b883a 	mov	r5,r17
  80e578:	dc000604 	addi	r16,sp,24
  80e57c:	dfc00c15 	stw	ra,48(sp)
  80e580:	080f9fc0 	call	80f9fc <__unpack_f>
  80e584:	d9000104 	addi	r4,sp,4
  80e588:	800b883a 	mov	r5,r16
  80e58c:	080f9fc0 	call	80f9fc <__unpack_f>
  80e590:	d8800217 	ldw	r2,8(sp)
  80e594:	00c00044 	movi	r3,1
  80e598:	180d883a 	mov	r6,r3
  80e59c:	1880062e 	bgeu	r3,r2,80e5b8 <__ltsf2+0x60>
  80e5a0:	d8800617 	ldw	r2,24(sp)
  80e5a4:	8809883a 	mov	r4,r17
  80e5a8:	800b883a 	mov	r5,r16
  80e5ac:	1880022e 	bgeu	r3,r2,80e5b8 <__ltsf2+0x60>
  80e5b0:	080fac40 	call	80fac4 <__fpcmp_parts_f>
  80e5b4:	100d883a 	mov	r6,r2
  80e5b8:	3005883a 	mov	r2,r6
  80e5bc:	dfc00c17 	ldw	ra,48(sp)
  80e5c0:	dc400b17 	ldw	r17,44(sp)
  80e5c4:	dc000a17 	ldw	r16,40(sp)
  80e5c8:	dec00d04 	addi	sp,sp,52
  80e5cc:	f800283a 	ret

0080e5d0 <_fpadd_parts>:
  80e5d0:	defff804 	addi	sp,sp,-32
  80e5d4:	dcc00315 	stw	r19,12(sp)
  80e5d8:	2027883a 	mov	r19,r4
  80e5dc:	21000017 	ldw	r4,0(r4)
  80e5e0:	00c00044 	movi	r3,1
  80e5e4:	dd400515 	stw	r21,20(sp)
  80e5e8:	dd000415 	stw	r20,16(sp)
  80e5ec:	ddc00715 	stw	r23,28(sp)
  80e5f0:	dd800615 	stw	r22,24(sp)
  80e5f4:	dc800215 	stw	r18,8(sp)
  80e5f8:	dc400115 	stw	r17,4(sp)
  80e5fc:	dc000015 	stw	r16,0(sp)
  80e600:	282b883a 	mov	r21,r5
  80e604:	3029883a 	mov	r20,r6
  80e608:	1900632e 	bgeu	r3,r4,80e798 <_fpadd_parts+0x1c8>
  80e60c:	28800017 	ldw	r2,0(r5)
  80e610:	1880812e 	bgeu	r3,r2,80e818 <_fpadd_parts+0x248>
  80e614:	00c00104 	movi	r3,4
  80e618:	20c0dc26 	beq	r4,r3,80e98c <_fpadd_parts+0x3bc>
  80e61c:	10c07e26 	beq	r2,r3,80e818 <_fpadd_parts+0x248>
  80e620:	00c00084 	movi	r3,2
  80e624:	10c06726 	beq	r2,r3,80e7c4 <_fpadd_parts+0x1f4>
  80e628:	20c07b26 	beq	r4,r3,80e818 <_fpadd_parts+0x248>
  80e62c:	9dc00217 	ldw	r23,8(r19)
  80e630:	28c00217 	ldw	r3,8(r5)
  80e634:	9c400317 	ldw	r17,12(r19)
  80e638:	2bc00317 	ldw	r15,12(r5)
  80e63c:	b8cdc83a 	sub	r6,r23,r3
  80e640:	9c800417 	ldw	r18,16(r19)
  80e644:	2c000417 	ldw	r16,16(r5)
  80e648:	3009883a 	mov	r4,r6
  80e64c:	30009716 	blt	r6,zero,80e8ac <_fpadd_parts+0x2dc>
  80e650:	00800fc4 	movi	r2,63
  80e654:	11806b16 	blt	r2,r6,80e804 <_fpadd_parts+0x234>
  80e658:	0100a40e 	bge	zero,r4,80e8ec <_fpadd_parts+0x31c>
  80e65c:	35bff804 	addi	r22,r6,-32
  80e660:	b000bc16 	blt	r22,zero,80e954 <_fpadd_parts+0x384>
  80e664:	8596d83a 	srl	r11,r16,r22
  80e668:	0019883a 	mov	r12,zero
  80e66c:	0013883a 	mov	r9,zero
  80e670:	01000044 	movi	r4,1
  80e674:	0015883a 	mov	r10,zero
  80e678:	b000be16 	blt	r22,zero,80e974 <_fpadd_parts+0x3a4>
  80e67c:	2590983a 	sll	r8,r4,r22
  80e680:	000f883a 	mov	r7,zero
  80e684:	00bfffc4 	movi	r2,-1
  80e688:	3889883a 	add	r4,r7,r2
  80e68c:	408b883a 	add	r5,r8,r2
  80e690:	21cd803a 	cmpltu	r6,r4,r7
  80e694:	314b883a 	add	r5,r6,r5
  80e698:	7904703a 	and	r2,r15,r4
  80e69c:	8146703a 	and	r3,r16,r5
  80e6a0:	10c4b03a 	or	r2,r2,r3
  80e6a4:	10000226 	beq	r2,zero,80e6b0 <_fpadd_parts+0xe0>
  80e6a8:	02400044 	movi	r9,1
  80e6ac:	0015883a 	mov	r10,zero
  80e6b0:	5a5eb03a 	or	r15,r11,r9
  80e6b4:	62a0b03a 	or	r16,r12,r10
  80e6b8:	99400117 	ldw	r5,4(r19)
  80e6bc:	a8800117 	ldw	r2,4(r21)
  80e6c0:	28806e26 	beq	r5,r2,80e87c <_fpadd_parts+0x2ac>
  80e6c4:	28006626 	beq	r5,zero,80e860 <_fpadd_parts+0x290>
  80e6c8:	7c45c83a 	sub	r2,r15,r17
  80e6cc:	7889803a 	cmpltu	r4,r15,r2
  80e6d0:	8487c83a 	sub	r3,r16,r18
  80e6d4:	1909c83a 	sub	r4,r3,r4
  80e6d8:	100d883a 	mov	r6,r2
  80e6dc:	200f883a 	mov	r7,r4
  80e6e0:	38007716 	blt	r7,zero,80e8c0 <_fpadd_parts+0x2f0>
  80e6e4:	a5c00215 	stw	r23,8(r20)
  80e6e8:	a1c00415 	stw	r7,16(r20)
  80e6ec:	a0000115 	stw	zero,4(r20)
  80e6f0:	a1800315 	stw	r6,12(r20)
  80e6f4:	a2000317 	ldw	r8,12(r20)
  80e6f8:	a2400417 	ldw	r9,16(r20)
  80e6fc:	00bfffc4 	movi	r2,-1
  80e700:	408b883a 	add	r5,r8,r2
  80e704:	2a09803a 	cmpltu	r4,r5,r8
  80e708:	488d883a 	add	r6,r9,r2
  80e70c:	01c40034 	movhi	r7,4096
  80e710:	39ffffc4 	addi	r7,r7,-1
  80e714:	218d883a 	add	r6,r4,r6
  80e718:	39801736 	bltu	r7,r6,80e778 <_fpadd_parts+0x1a8>
  80e71c:	31c06526 	beq	r6,r7,80e8b4 <_fpadd_parts+0x2e4>
  80e720:	a3000217 	ldw	r12,8(r20)
  80e724:	4209883a 	add	r4,r8,r8
  80e728:	00bfffc4 	movi	r2,-1
  80e72c:	220f803a 	cmpltu	r7,r4,r8
  80e730:	4a4b883a 	add	r5,r9,r9
  80e734:	394f883a 	add	r7,r7,r5
  80e738:	2095883a 	add	r10,r4,r2
  80e73c:	3897883a 	add	r11,r7,r2
  80e740:	510d803a 	cmpltu	r6,r10,r4
  80e744:	6099883a 	add	r12,r12,r2
  80e748:	32d7883a 	add	r11,r6,r11
  80e74c:	00840034 	movhi	r2,4096
  80e750:	10bfffc4 	addi	r2,r2,-1
  80e754:	2011883a 	mov	r8,r4
  80e758:	3813883a 	mov	r9,r7
  80e75c:	a1000315 	stw	r4,12(r20)
  80e760:	a1c00415 	stw	r7,16(r20)
  80e764:	a3000215 	stw	r12,8(r20)
  80e768:	12c00336 	bltu	r2,r11,80e778 <_fpadd_parts+0x1a8>
  80e76c:	58bfed1e 	bne	r11,r2,80e724 <_fpadd_parts+0x154>
  80e770:	00bfff84 	movi	r2,-2
  80e774:	12bfeb2e 	bgeu	r2,r10,80e724 <_fpadd_parts+0x154>
  80e778:	a2800417 	ldw	r10,16(r20)
  80e77c:	008000c4 	movi	r2,3
  80e780:	00c80034 	movhi	r3,8192
  80e784:	18ffffc4 	addi	r3,r3,-1
  80e788:	a2400317 	ldw	r9,12(r20)
  80e78c:	a0800015 	stw	r2,0(r20)
  80e790:	1a802336 	bltu	r3,r10,80e820 <_fpadd_parts+0x250>
  80e794:	a027883a 	mov	r19,r20
  80e798:	9805883a 	mov	r2,r19
  80e79c:	ddc00717 	ldw	r23,28(sp)
  80e7a0:	dd800617 	ldw	r22,24(sp)
  80e7a4:	dd400517 	ldw	r21,20(sp)
  80e7a8:	dd000417 	ldw	r20,16(sp)
  80e7ac:	dcc00317 	ldw	r19,12(sp)
  80e7b0:	dc800217 	ldw	r18,8(sp)
  80e7b4:	dc400117 	ldw	r17,4(sp)
  80e7b8:	dc000017 	ldw	r16,0(sp)
  80e7bc:	dec00804 	addi	sp,sp,32
  80e7c0:	f800283a 	ret
  80e7c4:	20fff41e 	bne	r4,r3,80e798 <_fpadd_parts+0x1c8>
  80e7c8:	31000015 	stw	r4,0(r6)
  80e7cc:	98800117 	ldw	r2,4(r19)
  80e7d0:	30800115 	stw	r2,4(r6)
  80e7d4:	98c00217 	ldw	r3,8(r19)
  80e7d8:	30c00215 	stw	r3,8(r6)
  80e7dc:	98800317 	ldw	r2,12(r19)
  80e7e0:	30800315 	stw	r2,12(r6)
  80e7e4:	98c00417 	ldw	r3,16(r19)
  80e7e8:	30c00415 	stw	r3,16(r6)
  80e7ec:	98800117 	ldw	r2,4(r19)
  80e7f0:	28c00117 	ldw	r3,4(r5)
  80e7f4:	3027883a 	mov	r19,r6
  80e7f8:	10c4703a 	and	r2,r2,r3
  80e7fc:	30800115 	stw	r2,4(r6)
  80e800:	003fe506 	br	80e798 <_fpadd_parts+0x1c8>
  80e804:	1dc02616 	blt	r3,r23,80e8a0 <_fpadd_parts+0x2d0>
  80e808:	0023883a 	mov	r17,zero
  80e80c:	182f883a 	mov	r23,r3
  80e810:	0025883a 	mov	r18,zero
  80e814:	003fa806 	br	80e6b8 <_fpadd_parts+0xe8>
  80e818:	a827883a 	mov	r19,r21
  80e81c:	003fde06 	br	80e798 <_fpadd_parts+0x1c8>
  80e820:	01800044 	movi	r6,1
  80e824:	500497fa 	slli	r2,r10,31
  80e828:	4808d07a 	srli	r4,r9,1
  80e82c:	518ad83a 	srl	r5,r10,r6
  80e830:	a2000217 	ldw	r8,8(r20)
  80e834:	1108b03a 	or	r4,r2,r4
  80e838:	0007883a 	mov	r3,zero
  80e83c:	4984703a 	and	r2,r9,r6
  80e840:	208cb03a 	or	r6,r4,r2
  80e844:	28ceb03a 	or	r7,r5,r3
  80e848:	42000044 	addi	r8,r8,1
  80e84c:	a027883a 	mov	r19,r20
  80e850:	a1c00415 	stw	r7,16(r20)
  80e854:	a2000215 	stw	r8,8(r20)
  80e858:	a1800315 	stw	r6,12(r20)
  80e85c:	003fce06 	br	80e798 <_fpadd_parts+0x1c8>
  80e860:	8bc5c83a 	sub	r2,r17,r15
  80e864:	8889803a 	cmpltu	r4,r17,r2
  80e868:	9407c83a 	sub	r3,r18,r16
  80e86c:	1909c83a 	sub	r4,r3,r4
  80e870:	100d883a 	mov	r6,r2
  80e874:	200f883a 	mov	r7,r4
  80e878:	003f9906 	br	80e6e0 <_fpadd_parts+0x110>
  80e87c:	7c45883a 	add	r2,r15,r17
  80e880:	13c9803a 	cmpltu	r4,r2,r15
  80e884:	8487883a 	add	r3,r16,r18
  80e888:	20c9883a 	add	r4,r4,r3
  80e88c:	a1400115 	stw	r5,4(r20)
  80e890:	a5c00215 	stw	r23,8(r20)
  80e894:	a0800315 	stw	r2,12(r20)
  80e898:	a1000415 	stw	r4,16(r20)
  80e89c:	003fb606 	br	80e778 <_fpadd_parts+0x1a8>
  80e8a0:	001f883a 	mov	r15,zero
  80e8a4:	0021883a 	mov	r16,zero
  80e8a8:	003f8306 	br	80e6b8 <_fpadd_parts+0xe8>
  80e8ac:	018dc83a 	sub	r6,zero,r6
  80e8b0:	003f6706 	br	80e650 <_fpadd_parts+0x80>
  80e8b4:	00bfff84 	movi	r2,-2
  80e8b8:	117faf36 	bltu	r2,r5,80e778 <_fpadd_parts+0x1a8>
  80e8bc:	003f9806 	br	80e720 <_fpadd_parts+0x150>
  80e8c0:	0005883a 	mov	r2,zero
  80e8c4:	1189c83a 	sub	r4,r2,r6
  80e8c8:	1105803a 	cmpltu	r2,r2,r4
  80e8cc:	01cbc83a 	sub	r5,zero,r7
  80e8d0:	2885c83a 	sub	r2,r5,r2
  80e8d4:	01800044 	movi	r6,1
  80e8d8:	a1800115 	stw	r6,4(r20)
  80e8dc:	a5c00215 	stw	r23,8(r20)
  80e8e0:	a1000315 	stw	r4,12(r20)
  80e8e4:	a0800415 	stw	r2,16(r20)
  80e8e8:	003f8206 	br	80e6f4 <_fpadd_parts+0x124>
  80e8ec:	203f7226 	beq	r4,zero,80e6b8 <_fpadd_parts+0xe8>
  80e8f0:	35bff804 	addi	r22,r6,-32
  80e8f4:	b9af883a 	add	r23,r23,r6
  80e8f8:	b0003116 	blt	r22,zero,80e9c0 <_fpadd_parts+0x3f0>
  80e8fc:	959ad83a 	srl	r13,r18,r22
  80e900:	001d883a 	mov	r14,zero
  80e904:	000f883a 	mov	r7,zero
  80e908:	01000044 	movi	r4,1
  80e90c:	0011883a 	mov	r8,zero
  80e910:	b0002516 	blt	r22,zero,80e9a8 <_fpadd_parts+0x3d8>
  80e914:	2594983a 	sll	r10,r4,r22
  80e918:	0013883a 	mov	r9,zero
  80e91c:	00bfffc4 	movi	r2,-1
  80e920:	4889883a 	add	r4,r9,r2
  80e924:	508b883a 	add	r5,r10,r2
  80e928:	224d803a 	cmpltu	r6,r4,r9
  80e92c:	314b883a 	add	r5,r6,r5
  80e930:	8904703a 	and	r2,r17,r4
  80e934:	9146703a 	and	r3,r18,r5
  80e938:	10c4b03a 	or	r2,r2,r3
  80e93c:	10000226 	beq	r2,zero,80e948 <_fpadd_parts+0x378>
  80e940:	01c00044 	movi	r7,1
  80e944:	0011883a 	mov	r8,zero
  80e948:	69e2b03a 	or	r17,r13,r7
  80e94c:	7224b03a 	or	r18,r14,r8
  80e950:	003f5906 	br	80e6b8 <_fpadd_parts+0xe8>
  80e954:	8407883a 	add	r3,r16,r16
  80e958:	008007c4 	movi	r2,31
  80e95c:	1185c83a 	sub	r2,r2,r6
  80e960:	1886983a 	sll	r3,r3,r2
  80e964:	7996d83a 	srl	r11,r15,r6
  80e968:	8198d83a 	srl	r12,r16,r6
  80e96c:	1ad6b03a 	or	r11,r3,r11
  80e970:	003f3e06 	br	80e66c <_fpadd_parts+0x9c>
  80e974:	2006d07a 	srli	r3,r4,1
  80e978:	008007c4 	movi	r2,31
  80e97c:	1185c83a 	sub	r2,r2,r6
  80e980:	1890d83a 	srl	r8,r3,r2
  80e984:	218e983a 	sll	r7,r4,r6
  80e988:	003f3e06 	br	80e684 <_fpadd_parts+0xb4>
  80e98c:	113f821e 	bne	r2,r4,80e798 <_fpadd_parts+0x1c8>
  80e990:	28c00117 	ldw	r3,4(r5)
  80e994:	98800117 	ldw	r2,4(r19)
  80e998:	10ff7f26 	beq	r2,r3,80e798 <_fpadd_parts+0x1c8>
  80e99c:	04c020b4 	movhi	r19,130
  80e9a0:	9cf21004 	addi	r19,r19,-14272
  80e9a4:	003f7c06 	br	80e798 <_fpadd_parts+0x1c8>
  80e9a8:	2006d07a 	srli	r3,r4,1
  80e9ac:	008007c4 	movi	r2,31
  80e9b0:	1185c83a 	sub	r2,r2,r6
  80e9b4:	1894d83a 	srl	r10,r3,r2
  80e9b8:	2192983a 	sll	r9,r4,r6
  80e9bc:	003fd706 	br	80e91c <_fpadd_parts+0x34c>
  80e9c0:	9487883a 	add	r3,r18,r18
  80e9c4:	008007c4 	movi	r2,31
  80e9c8:	1185c83a 	sub	r2,r2,r6
  80e9cc:	1886983a 	sll	r3,r3,r2
  80e9d0:	899ad83a 	srl	r13,r17,r6
  80e9d4:	919cd83a 	srl	r14,r18,r6
  80e9d8:	1b5ab03a 	or	r13,r3,r13
  80e9dc:	003fc906 	br	80e904 <_fpadd_parts+0x334>

0080e9e0 <__subdf3>:
  80e9e0:	deffea04 	addi	sp,sp,-88
  80e9e4:	dcc01415 	stw	r19,80(sp)
  80e9e8:	dcc00404 	addi	r19,sp,16
  80e9ec:	2011883a 	mov	r8,r4
  80e9f0:	2813883a 	mov	r9,r5
  80e9f4:	dc401315 	stw	r17,76(sp)
  80e9f8:	d809883a 	mov	r4,sp
  80e9fc:	980b883a 	mov	r5,r19
  80ea00:	dc400904 	addi	r17,sp,36
  80ea04:	dfc01515 	stw	ra,84(sp)
  80ea08:	da400115 	stw	r9,4(sp)
  80ea0c:	d9c00315 	stw	r7,12(sp)
  80ea10:	da000015 	stw	r8,0(sp)
  80ea14:	d9800215 	stw	r6,8(sp)
  80ea18:	080feac0 	call	80feac <__unpack_d>
  80ea1c:	d9000204 	addi	r4,sp,8
  80ea20:	880b883a 	mov	r5,r17
  80ea24:	080feac0 	call	80feac <__unpack_d>
  80ea28:	d8800a17 	ldw	r2,40(sp)
  80ea2c:	880b883a 	mov	r5,r17
  80ea30:	9809883a 	mov	r4,r19
  80ea34:	d9800e04 	addi	r6,sp,56
  80ea38:	1080005c 	xori	r2,r2,1
  80ea3c:	d8800a15 	stw	r2,40(sp)
  80ea40:	080e5d00 	call	80e5d0 <_fpadd_parts>
  80ea44:	1009883a 	mov	r4,r2
  80ea48:	080fb980 	call	80fb98 <__pack_d>
  80ea4c:	dfc01517 	ldw	ra,84(sp)
  80ea50:	dcc01417 	ldw	r19,80(sp)
  80ea54:	dc401317 	ldw	r17,76(sp)
  80ea58:	dec01604 	addi	sp,sp,88
  80ea5c:	f800283a 	ret

0080ea60 <__adddf3>:
  80ea60:	deffea04 	addi	sp,sp,-88
  80ea64:	dcc01415 	stw	r19,80(sp)
  80ea68:	dcc00404 	addi	r19,sp,16
  80ea6c:	2011883a 	mov	r8,r4
  80ea70:	2813883a 	mov	r9,r5
  80ea74:	dc401315 	stw	r17,76(sp)
  80ea78:	d809883a 	mov	r4,sp
  80ea7c:	980b883a 	mov	r5,r19
  80ea80:	dc400904 	addi	r17,sp,36
  80ea84:	dfc01515 	stw	ra,84(sp)
  80ea88:	da400115 	stw	r9,4(sp)
  80ea8c:	d9c00315 	stw	r7,12(sp)
  80ea90:	da000015 	stw	r8,0(sp)
  80ea94:	d9800215 	stw	r6,8(sp)
  80ea98:	080feac0 	call	80feac <__unpack_d>
  80ea9c:	d9000204 	addi	r4,sp,8
  80eaa0:	880b883a 	mov	r5,r17
  80eaa4:	080feac0 	call	80feac <__unpack_d>
  80eaa8:	d9800e04 	addi	r6,sp,56
  80eaac:	9809883a 	mov	r4,r19
  80eab0:	880b883a 	mov	r5,r17
  80eab4:	080e5d00 	call	80e5d0 <_fpadd_parts>
  80eab8:	1009883a 	mov	r4,r2
  80eabc:	080fb980 	call	80fb98 <__pack_d>
  80eac0:	dfc01517 	ldw	ra,84(sp)
  80eac4:	dcc01417 	ldw	r19,80(sp)
  80eac8:	dc401317 	ldw	r17,76(sp)
  80eacc:	dec01604 	addi	sp,sp,88
  80ead0:	f800283a 	ret

0080ead4 <__muldf3>:
  80ead4:	deffe004 	addi	sp,sp,-128
  80ead8:	dc401815 	stw	r17,96(sp)
  80eadc:	dc400404 	addi	r17,sp,16
  80eae0:	2011883a 	mov	r8,r4
  80eae4:	2813883a 	mov	r9,r5
  80eae8:	dc001715 	stw	r16,92(sp)
  80eaec:	d809883a 	mov	r4,sp
  80eaf0:	880b883a 	mov	r5,r17
  80eaf4:	dc000904 	addi	r16,sp,36
  80eaf8:	dfc01f15 	stw	ra,124(sp)
  80eafc:	da400115 	stw	r9,4(sp)
  80eb00:	d9c00315 	stw	r7,12(sp)
  80eb04:	da000015 	stw	r8,0(sp)
  80eb08:	d9800215 	stw	r6,8(sp)
  80eb0c:	ddc01e15 	stw	r23,120(sp)
  80eb10:	dd801d15 	stw	r22,116(sp)
  80eb14:	dd401c15 	stw	r21,112(sp)
  80eb18:	dd001b15 	stw	r20,108(sp)
  80eb1c:	dcc01a15 	stw	r19,104(sp)
  80eb20:	dc801915 	stw	r18,100(sp)
  80eb24:	080feac0 	call	80feac <__unpack_d>
  80eb28:	d9000204 	addi	r4,sp,8
  80eb2c:	800b883a 	mov	r5,r16
  80eb30:	080feac0 	call	80feac <__unpack_d>
  80eb34:	d9000417 	ldw	r4,16(sp)
  80eb38:	00800044 	movi	r2,1
  80eb3c:	1100102e 	bgeu	r2,r4,80eb80 <__muldf3+0xac>
  80eb40:	d8c00917 	ldw	r3,36(sp)
  80eb44:	10c0062e 	bgeu	r2,r3,80eb60 <__muldf3+0x8c>
  80eb48:	00800104 	movi	r2,4
  80eb4c:	20800a26 	beq	r4,r2,80eb78 <__muldf3+0xa4>
  80eb50:	1880cc26 	beq	r3,r2,80ee84 <__muldf3+0x3b0>
  80eb54:	00800084 	movi	r2,2
  80eb58:	20800926 	beq	r4,r2,80eb80 <__muldf3+0xac>
  80eb5c:	1880191e 	bne	r3,r2,80ebc4 <__muldf3+0xf0>
  80eb60:	d8c00a17 	ldw	r3,40(sp)
  80eb64:	d8800517 	ldw	r2,20(sp)
  80eb68:	8009883a 	mov	r4,r16
  80eb6c:	10c4c03a 	cmpne	r2,r2,r3
  80eb70:	d8800a15 	stw	r2,40(sp)
  80eb74:	00000706 	br	80eb94 <__muldf3+0xc0>
  80eb78:	00800084 	movi	r2,2
  80eb7c:	1880c326 	beq	r3,r2,80ee8c <__muldf3+0x3b8>
  80eb80:	d8800517 	ldw	r2,20(sp)
  80eb84:	d8c00a17 	ldw	r3,40(sp)
  80eb88:	8809883a 	mov	r4,r17
  80eb8c:	10c4c03a 	cmpne	r2,r2,r3
  80eb90:	d8800515 	stw	r2,20(sp)
  80eb94:	080fb980 	call	80fb98 <__pack_d>
  80eb98:	dfc01f17 	ldw	ra,124(sp)
  80eb9c:	ddc01e17 	ldw	r23,120(sp)
  80eba0:	dd801d17 	ldw	r22,116(sp)
  80eba4:	dd401c17 	ldw	r21,112(sp)
  80eba8:	dd001b17 	ldw	r20,108(sp)
  80ebac:	dcc01a17 	ldw	r19,104(sp)
  80ebb0:	dc801917 	ldw	r18,100(sp)
  80ebb4:	dc401817 	ldw	r17,96(sp)
  80ebb8:	dc001717 	ldw	r16,92(sp)
  80ebbc:	dec02004 	addi	sp,sp,128
  80ebc0:	f800283a 	ret
  80ebc4:	dd800717 	ldw	r22,28(sp)
  80ebc8:	dc800c17 	ldw	r18,48(sp)
  80ebcc:	002b883a 	mov	r21,zero
  80ebd0:	0023883a 	mov	r17,zero
  80ebd4:	a80b883a 	mov	r5,r21
  80ebd8:	b00d883a 	mov	r6,r22
  80ebdc:	880f883a 	mov	r7,r17
  80ebe0:	ddc00817 	ldw	r23,32(sp)
  80ebe4:	dcc00d17 	ldw	r19,52(sp)
  80ebe8:	9009883a 	mov	r4,r18
  80ebec:	080d5d40 	call	80d5d4 <__muldi3>
  80ebf0:	001b883a 	mov	r13,zero
  80ebf4:	680f883a 	mov	r7,r13
  80ebf8:	b009883a 	mov	r4,r22
  80ebfc:	000b883a 	mov	r5,zero
  80ec00:	980d883a 	mov	r6,r19
  80ec04:	b82d883a 	mov	r22,r23
  80ec08:	002f883a 	mov	r23,zero
  80ec0c:	db401615 	stw	r13,88(sp)
  80ec10:	d8801315 	stw	r2,76(sp)
  80ec14:	d8c01415 	stw	r3,80(sp)
  80ec18:	dcc01515 	stw	r19,84(sp)
  80ec1c:	080d5d40 	call	80d5d4 <__muldi3>
  80ec20:	b00d883a 	mov	r6,r22
  80ec24:	000b883a 	mov	r5,zero
  80ec28:	9009883a 	mov	r4,r18
  80ec2c:	b80f883a 	mov	r7,r23
  80ec30:	1021883a 	mov	r16,r2
  80ec34:	1823883a 	mov	r17,r3
  80ec38:	080d5d40 	call	80d5d4 <__muldi3>
  80ec3c:	8085883a 	add	r2,r16,r2
  80ec40:	140d803a 	cmpltu	r6,r2,r16
  80ec44:	88c7883a 	add	r3,r17,r3
  80ec48:	30cd883a 	add	r6,r6,r3
  80ec4c:	1029883a 	mov	r20,r2
  80ec50:	302b883a 	mov	r21,r6
  80ec54:	da801317 	ldw	r10,76(sp)
  80ec58:	dac01417 	ldw	r11,80(sp)
  80ec5c:	db001517 	ldw	r12,84(sp)
  80ec60:	db401617 	ldw	r13,88(sp)
  80ec64:	3440612e 	bgeu	r6,r17,80edec <__muldf3+0x318>
  80ec68:	0009883a 	mov	r4,zero
  80ec6c:	5105883a 	add	r2,r10,r4
  80ec70:	128d803a 	cmpltu	r6,r2,r10
  80ec74:	5d07883a 	add	r3,r11,r20
  80ec78:	30cd883a 	add	r6,r6,r3
  80ec7c:	0021883a 	mov	r16,zero
  80ec80:	04400044 	movi	r17,1
  80ec84:	1025883a 	mov	r18,r2
  80ec88:	3027883a 	mov	r19,r6
  80ec8c:	32c06236 	bltu	r6,r11,80ee18 <__muldf3+0x344>
  80ec90:	59807a26 	beq	r11,r6,80ee7c <__muldf3+0x3a8>
  80ec94:	680b883a 	mov	r5,r13
  80ec98:	b80f883a 	mov	r7,r23
  80ec9c:	6009883a 	mov	r4,r12
  80eca0:	b00d883a 	mov	r6,r22
  80eca4:	080d5d40 	call	80d5d4 <__muldi3>
  80eca8:	1009883a 	mov	r4,r2
  80ecac:	000f883a 	mov	r7,zero
  80ecb0:	1545883a 	add	r2,r2,r21
  80ecb4:	1111803a 	cmpltu	r8,r2,r4
  80ecb8:	19c7883a 	add	r3,r3,r7
  80ecbc:	40c7883a 	add	r3,r8,r3
  80ecc0:	88cb883a 	add	r5,r17,r3
  80ecc4:	d8c00617 	ldw	r3,24(sp)
  80ecc8:	8089883a 	add	r4,r16,r2
  80eccc:	d8800b17 	ldw	r2,44(sp)
  80ecd0:	18c00104 	addi	r3,r3,4
  80ecd4:	240d803a 	cmpltu	r6,r4,r16
  80ecd8:	10c7883a 	add	r3,r2,r3
  80ecdc:	2013883a 	mov	r9,r4
  80ece0:	d8800a17 	ldw	r2,40(sp)
  80ece4:	d9000517 	ldw	r4,20(sp)
  80ece8:	314d883a 	add	r6,r6,r5
  80ecec:	3015883a 	mov	r10,r6
  80ecf0:	2088c03a 	cmpne	r4,r4,r2
  80ecf4:	00880034 	movhi	r2,8192
  80ecf8:	10bfffc4 	addi	r2,r2,-1
  80ecfc:	d9000f15 	stw	r4,60(sp)
  80ed00:	d8c01015 	stw	r3,64(sp)
  80ed04:	1180162e 	bgeu	r2,r6,80ed60 <__muldf3+0x28c>
  80ed08:	1811883a 	mov	r8,r3
  80ed0c:	101f883a 	mov	r15,r2
  80ed10:	980497fa 	slli	r2,r19,31
  80ed14:	9016d07a 	srli	r11,r18,1
  80ed18:	500697fa 	slli	r3,r10,31
  80ed1c:	480cd07a 	srli	r6,r9,1
  80ed20:	500ed07a 	srli	r7,r10,1
  80ed24:	12d6b03a 	or	r11,r2,r11
  80ed28:	00800044 	movi	r2,1
  80ed2c:	198cb03a 	or	r6,r3,r6
  80ed30:	4888703a 	and	r4,r9,r2
  80ed34:	9818d07a 	srli	r12,r19,1
  80ed38:	001b883a 	mov	r13,zero
  80ed3c:	03a00034 	movhi	r14,32768
  80ed40:	3013883a 	mov	r9,r6
  80ed44:	3815883a 	mov	r10,r7
  80ed48:	4091883a 	add	r8,r8,r2
  80ed4c:	20000226 	beq	r4,zero,80ed58 <__muldf3+0x284>
  80ed50:	5b64b03a 	or	r18,r11,r13
  80ed54:	63a6b03a 	or	r19,r12,r14
  80ed58:	7abfed36 	bltu	r15,r10,80ed10 <__muldf3+0x23c>
  80ed5c:	da001015 	stw	r8,64(sp)
  80ed60:	00840034 	movhi	r2,4096
  80ed64:	10bfffc4 	addi	r2,r2,-1
  80ed68:	12801436 	bltu	r2,r10,80edbc <__muldf3+0x2e8>
  80ed6c:	da001017 	ldw	r8,64(sp)
  80ed70:	101f883a 	mov	r15,r2
  80ed74:	4a45883a 	add	r2,r9,r9
  80ed78:	124d803a 	cmpltu	r6,r2,r9
  80ed7c:	5287883a 	add	r3,r10,r10
  80ed80:	9497883a 	add	r11,r18,r18
  80ed84:	5c8f803a 	cmpltu	r7,r11,r18
  80ed88:	9cd9883a 	add	r12,r19,r19
  80ed8c:	01000044 	movi	r4,1
  80ed90:	30cd883a 	add	r6,r6,r3
  80ed94:	3b0f883a 	add	r7,r7,r12
  80ed98:	423fffc4 	addi	r8,r8,-1
  80ed9c:	1013883a 	mov	r9,r2
  80eda0:	3015883a 	mov	r10,r6
  80eda4:	111ab03a 	or	r13,r2,r4
  80eda8:	98003016 	blt	r19,zero,80ee6c <__muldf3+0x398>
  80edac:	5825883a 	mov	r18,r11
  80edb0:	3827883a 	mov	r19,r7
  80edb4:	7abfef2e 	bgeu	r15,r10,80ed74 <__muldf3+0x2a0>
  80edb8:	da001015 	stw	r8,64(sp)
  80edbc:	00803fc4 	movi	r2,255
  80edc0:	488e703a 	and	r7,r9,r2
  80edc4:	00802004 	movi	r2,128
  80edc8:	0007883a 	mov	r3,zero
  80edcc:	0011883a 	mov	r8,zero
  80edd0:	38801826 	beq	r7,r2,80ee34 <__muldf3+0x360>
  80edd4:	008000c4 	movi	r2,3
  80edd8:	d9000e04 	addi	r4,sp,56
  80eddc:	da801215 	stw	r10,72(sp)
  80ede0:	d8800e15 	stw	r2,56(sp)
  80ede4:	da401115 	stw	r9,68(sp)
  80ede8:	003f6a06 	br	80eb94 <__muldf3+0xc0>
  80edec:	89802126 	beq	r17,r6,80ee74 <__muldf3+0x3a0>
  80edf0:	0009883a 	mov	r4,zero
  80edf4:	5105883a 	add	r2,r10,r4
  80edf8:	128d803a 	cmpltu	r6,r2,r10
  80edfc:	5d07883a 	add	r3,r11,r20
  80ee00:	30cd883a 	add	r6,r6,r3
  80ee04:	0021883a 	mov	r16,zero
  80ee08:	0023883a 	mov	r17,zero
  80ee0c:	1025883a 	mov	r18,r2
  80ee10:	3027883a 	mov	r19,r6
  80ee14:	32ff9e2e 	bgeu	r6,r11,80ec90 <__muldf3+0x1bc>
  80ee18:	00800044 	movi	r2,1
  80ee1c:	8089883a 	add	r4,r16,r2
  80ee20:	240d803a 	cmpltu	r6,r4,r16
  80ee24:	344d883a 	add	r6,r6,r17
  80ee28:	2021883a 	mov	r16,r4
  80ee2c:	3023883a 	mov	r17,r6
  80ee30:	003f9806 	br	80ec94 <__muldf3+0x1c0>
  80ee34:	403fe71e 	bne	r8,zero,80edd4 <__muldf3+0x300>
  80ee38:	01004004 	movi	r4,256
  80ee3c:	4904703a 	and	r2,r9,r4
  80ee40:	10c4b03a 	or	r2,r2,r3
  80ee44:	103fe31e 	bne	r2,zero,80edd4 <__muldf3+0x300>
  80ee48:	94c4b03a 	or	r2,r18,r19
  80ee4c:	103fe126 	beq	r2,zero,80edd4 <__muldf3+0x300>
  80ee50:	49c5883a 	add	r2,r9,r7
  80ee54:	1251803a 	cmpltu	r8,r2,r9
  80ee58:	4291883a 	add	r8,r8,r10
  80ee5c:	013fc004 	movi	r4,-256
  80ee60:	1112703a 	and	r9,r2,r4
  80ee64:	4015883a 	mov	r10,r8
  80ee68:	003fda06 	br	80edd4 <__muldf3+0x300>
  80ee6c:	6813883a 	mov	r9,r13
  80ee70:	003fce06 	br	80edac <__muldf3+0x2d8>
  80ee74:	143f7c36 	bltu	r2,r16,80ec68 <__muldf3+0x194>
  80ee78:	003fdd06 	br	80edf0 <__muldf3+0x31c>
  80ee7c:	12bf852e 	bgeu	r2,r10,80ec94 <__muldf3+0x1c0>
  80ee80:	003fe506 	br	80ee18 <__muldf3+0x344>
  80ee84:	00800084 	movi	r2,2
  80ee88:	20bf351e 	bne	r4,r2,80eb60 <__muldf3+0x8c>
  80ee8c:	010020b4 	movhi	r4,130
  80ee90:	21321004 	addi	r4,r4,-14272
  80ee94:	003f3f06 	br	80eb94 <__muldf3+0xc0>

0080ee98 <__divdf3>:
  80ee98:	deffed04 	addi	sp,sp,-76
  80ee9c:	dcc01115 	stw	r19,68(sp)
  80eea0:	dcc00404 	addi	r19,sp,16
  80eea4:	2011883a 	mov	r8,r4
  80eea8:	2813883a 	mov	r9,r5
  80eeac:	dc000e15 	stw	r16,56(sp)
  80eeb0:	d809883a 	mov	r4,sp
  80eeb4:	980b883a 	mov	r5,r19
  80eeb8:	dc000904 	addi	r16,sp,36
  80eebc:	dfc01215 	stw	ra,72(sp)
  80eec0:	da400115 	stw	r9,4(sp)
  80eec4:	d9c00315 	stw	r7,12(sp)
  80eec8:	da000015 	stw	r8,0(sp)
  80eecc:	d9800215 	stw	r6,8(sp)
  80eed0:	dc801015 	stw	r18,64(sp)
  80eed4:	dc400f15 	stw	r17,60(sp)
  80eed8:	080feac0 	call	80feac <__unpack_d>
  80eedc:	d9000204 	addi	r4,sp,8
  80eee0:	800b883a 	mov	r5,r16
  80eee4:	080feac0 	call	80feac <__unpack_d>
  80eee8:	d9000417 	ldw	r4,16(sp)
  80eeec:	00800044 	movi	r2,1
  80eef0:	11000b2e 	bgeu	r2,r4,80ef20 <__divdf3+0x88>
  80eef4:	d9400917 	ldw	r5,36(sp)
  80eef8:	1140762e 	bgeu	r2,r5,80f0d4 <__divdf3+0x23c>
  80eefc:	d8800517 	ldw	r2,20(sp)
  80ef00:	d8c00a17 	ldw	r3,40(sp)
  80ef04:	01800104 	movi	r6,4
  80ef08:	10c4f03a 	xor	r2,r2,r3
  80ef0c:	d8800515 	stw	r2,20(sp)
  80ef10:	21800226 	beq	r4,r6,80ef1c <__divdf3+0x84>
  80ef14:	00800084 	movi	r2,2
  80ef18:	2080141e 	bne	r4,r2,80ef6c <__divdf3+0xd4>
  80ef1c:	29000926 	beq	r5,r4,80ef44 <__divdf3+0xac>
  80ef20:	9809883a 	mov	r4,r19
  80ef24:	080fb980 	call	80fb98 <__pack_d>
  80ef28:	dfc01217 	ldw	ra,72(sp)
  80ef2c:	dcc01117 	ldw	r19,68(sp)
  80ef30:	dc801017 	ldw	r18,64(sp)
  80ef34:	dc400f17 	ldw	r17,60(sp)
  80ef38:	dc000e17 	ldw	r16,56(sp)
  80ef3c:	dec01304 	addi	sp,sp,76
  80ef40:	f800283a 	ret
  80ef44:	010020b4 	movhi	r4,130
  80ef48:	21321004 	addi	r4,r4,-14272
  80ef4c:	080fb980 	call	80fb98 <__pack_d>
  80ef50:	dfc01217 	ldw	ra,72(sp)
  80ef54:	dcc01117 	ldw	r19,68(sp)
  80ef58:	dc801017 	ldw	r18,64(sp)
  80ef5c:	dc400f17 	ldw	r17,60(sp)
  80ef60:	dc000e17 	ldw	r16,56(sp)
  80ef64:	dec01304 	addi	sp,sp,76
  80ef68:	f800283a 	ret
  80ef6c:	29805b26 	beq	r5,r6,80f0dc <__divdf3+0x244>
  80ef70:	28802d26 	beq	r5,r2,80f028 <__divdf3+0x190>
  80ef74:	d8c00617 	ldw	r3,24(sp)
  80ef78:	d8800b17 	ldw	r2,44(sp)
  80ef7c:	d9c00817 	ldw	r7,32(sp)
  80ef80:	dc400d17 	ldw	r17,52(sp)
  80ef84:	188bc83a 	sub	r5,r3,r2
  80ef88:	d9800717 	ldw	r6,28(sp)
  80ef8c:	dc000c17 	ldw	r16,48(sp)
  80ef90:	d9400615 	stw	r5,24(sp)
  80ef94:	3c403836 	bltu	r7,r17,80f078 <__divdf3+0x1e0>
  80ef98:	89c03626 	beq	r17,r7,80f074 <__divdf3+0x1dc>
  80ef9c:	0015883a 	mov	r10,zero
  80efa0:	001d883a 	mov	r14,zero
  80efa4:	02c40034 	movhi	r11,4096
  80efa8:	001f883a 	mov	r15,zero
  80efac:	003f883a 	mov	ra,zero
  80efb0:	04800f44 	movi	r18,61
  80efb4:	00000f06 	br	80eff4 <__divdf3+0x15c>
  80efb8:	601d883a 	mov	r14,r12
  80efbc:	681f883a 	mov	r15,r13
  80efc0:	400d883a 	mov	r6,r8
  80efc4:	100f883a 	mov	r7,r2
  80efc8:	3191883a 	add	r8,r6,r6
  80efcc:	5808d07a 	srli	r4,r11,1
  80efd0:	4185803a 	cmpltu	r2,r8,r6
  80efd4:	39d3883a 	add	r9,r7,r7
  80efd8:	28c6b03a 	or	r3,r5,r3
  80efdc:	1245883a 	add	r2,r2,r9
  80efe0:	1815883a 	mov	r10,r3
  80efe4:	2017883a 	mov	r11,r4
  80efe8:	400d883a 	mov	r6,r8
  80efec:	100f883a 	mov	r7,r2
  80eff0:	fc801726 	beq	ra,r18,80f050 <__divdf3+0x1b8>
  80eff4:	580a97fa 	slli	r5,r11,31
  80eff8:	5006d07a 	srli	r3,r10,1
  80effc:	ffc00044 	addi	ra,ra,1
  80f000:	3c7ff136 	bltu	r7,r17,80efc8 <__divdf3+0x130>
  80f004:	3411c83a 	sub	r8,r6,r16
  80f008:	3205803a 	cmpltu	r2,r6,r8
  80f00c:	3c53c83a 	sub	r9,r7,r17
  80f010:	7298b03a 	or	r12,r14,r10
  80f014:	7adab03a 	or	r13,r15,r11
  80f018:	4885c83a 	sub	r2,r9,r2
  80f01c:	89ffe61e 	bne	r17,r7,80efb8 <__divdf3+0x120>
  80f020:	343fe936 	bltu	r6,r16,80efc8 <__divdf3+0x130>
  80f024:	003fe406 	br	80efb8 <__divdf3+0x120>
  80f028:	9809883a 	mov	r4,r19
  80f02c:	d9800415 	stw	r6,16(sp)
  80f030:	080fb980 	call	80fb98 <__pack_d>
  80f034:	dfc01217 	ldw	ra,72(sp)
  80f038:	dcc01117 	ldw	r19,68(sp)
  80f03c:	dc801017 	ldw	r18,64(sp)
  80f040:	dc400f17 	ldw	r17,60(sp)
  80f044:	dc000e17 	ldw	r16,56(sp)
  80f048:	dec01304 	addi	sp,sp,76
  80f04c:	f800283a 	ret
  80f050:	00803fc4 	movi	r2,255
  80f054:	7090703a 	and	r8,r14,r2
  80f058:	00802004 	movi	r2,128
  80f05c:	0007883a 	mov	r3,zero
  80f060:	0013883a 	mov	r9,zero
  80f064:	40800d26 	beq	r8,r2,80f09c <__divdf3+0x204>
  80f068:	dbc00815 	stw	r15,32(sp)
  80f06c:	db800715 	stw	r14,28(sp)
  80f070:	003fab06 	br	80ef20 <__divdf3+0x88>
  80f074:	343fc92e 	bgeu	r6,r16,80ef9c <__divdf3+0x104>
  80f078:	3185883a 	add	r2,r6,r6
  80f07c:	1189803a 	cmpltu	r4,r2,r6
  80f080:	39c7883a 	add	r3,r7,r7
  80f084:	20c9883a 	add	r4,r4,r3
  80f088:	297fffc4 	addi	r5,r5,-1
  80f08c:	100d883a 	mov	r6,r2
  80f090:	200f883a 	mov	r7,r4
  80f094:	d9400615 	stw	r5,24(sp)
  80f098:	003fc006 	br	80ef9c <__divdf3+0x104>
  80f09c:	483ff21e 	bne	r9,zero,80f068 <__divdf3+0x1d0>
  80f0a0:	01004004 	movi	r4,256
  80f0a4:	7104703a 	and	r2,r14,r4
  80f0a8:	10c4b03a 	or	r2,r2,r3
  80f0ac:	103fee1e 	bne	r2,zero,80f068 <__divdf3+0x1d0>
  80f0b0:	31c4b03a 	or	r2,r6,r7
  80f0b4:	103fec26 	beq	r2,zero,80f068 <__divdf3+0x1d0>
  80f0b8:	7205883a 	add	r2,r14,r8
  80f0bc:	1391803a 	cmpltu	r8,r2,r14
  80f0c0:	43d1883a 	add	r8,r8,r15
  80f0c4:	013fc004 	movi	r4,-256
  80f0c8:	111c703a 	and	r14,r2,r4
  80f0cc:	401f883a 	mov	r15,r8
  80f0d0:	003fe506 	br	80f068 <__divdf3+0x1d0>
  80f0d4:	8009883a 	mov	r4,r16
  80f0d8:	003f9206 	br	80ef24 <__divdf3+0x8c>
  80f0dc:	9809883a 	mov	r4,r19
  80f0e0:	d8000715 	stw	zero,28(sp)
  80f0e4:	d8000815 	stw	zero,32(sp)
  80f0e8:	d8000615 	stw	zero,24(sp)
  80f0ec:	003f8d06 	br	80ef24 <__divdf3+0x8c>

0080f0f0 <__eqdf2>:
  80f0f0:	deffef04 	addi	sp,sp,-68
  80f0f4:	dc400f15 	stw	r17,60(sp)
  80f0f8:	dc400404 	addi	r17,sp,16
  80f0fc:	2005883a 	mov	r2,r4
  80f100:	2807883a 	mov	r3,r5
  80f104:	dc000e15 	stw	r16,56(sp)
  80f108:	d809883a 	mov	r4,sp
  80f10c:	880b883a 	mov	r5,r17
  80f110:	dc000904 	addi	r16,sp,36
  80f114:	d8c00115 	stw	r3,4(sp)
  80f118:	d8800015 	stw	r2,0(sp)
  80f11c:	d9800215 	stw	r6,8(sp)
  80f120:	dfc01015 	stw	ra,64(sp)
  80f124:	d9c00315 	stw	r7,12(sp)
  80f128:	080feac0 	call	80feac <__unpack_d>
  80f12c:	d9000204 	addi	r4,sp,8
  80f130:	800b883a 	mov	r5,r16
  80f134:	080feac0 	call	80feac <__unpack_d>
  80f138:	d8800417 	ldw	r2,16(sp)
  80f13c:	00c00044 	movi	r3,1
  80f140:	180d883a 	mov	r6,r3
  80f144:	1880062e 	bgeu	r3,r2,80f160 <__eqdf2+0x70>
  80f148:	d8800917 	ldw	r2,36(sp)
  80f14c:	8809883a 	mov	r4,r17
  80f150:	800b883a 	mov	r5,r16
  80f154:	1880022e 	bgeu	r3,r2,80f160 <__eqdf2+0x70>
  80f158:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f15c:	100d883a 	mov	r6,r2
  80f160:	3005883a 	mov	r2,r6
  80f164:	dfc01017 	ldw	ra,64(sp)
  80f168:	dc400f17 	ldw	r17,60(sp)
  80f16c:	dc000e17 	ldw	r16,56(sp)
  80f170:	dec01104 	addi	sp,sp,68
  80f174:	f800283a 	ret

0080f178 <__nedf2>:
  80f178:	deffef04 	addi	sp,sp,-68
  80f17c:	dc400f15 	stw	r17,60(sp)
  80f180:	dc400404 	addi	r17,sp,16
  80f184:	2005883a 	mov	r2,r4
  80f188:	2807883a 	mov	r3,r5
  80f18c:	dc000e15 	stw	r16,56(sp)
  80f190:	d809883a 	mov	r4,sp
  80f194:	880b883a 	mov	r5,r17
  80f198:	dc000904 	addi	r16,sp,36
  80f19c:	d8c00115 	stw	r3,4(sp)
  80f1a0:	d8800015 	stw	r2,0(sp)
  80f1a4:	d9800215 	stw	r6,8(sp)
  80f1a8:	dfc01015 	stw	ra,64(sp)
  80f1ac:	d9c00315 	stw	r7,12(sp)
  80f1b0:	080feac0 	call	80feac <__unpack_d>
  80f1b4:	d9000204 	addi	r4,sp,8
  80f1b8:	800b883a 	mov	r5,r16
  80f1bc:	080feac0 	call	80feac <__unpack_d>
  80f1c0:	d8800417 	ldw	r2,16(sp)
  80f1c4:	00c00044 	movi	r3,1
  80f1c8:	180d883a 	mov	r6,r3
  80f1cc:	1880062e 	bgeu	r3,r2,80f1e8 <__nedf2+0x70>
  80f1d0:	d8800917 	ldw	r2,36(sp)
  80f1d4:	8809883a 	mov	r4,r17
  80f1d8:	800b883a 	mov	r5,r16
  80f1dc:	1880022e 	bgeu	r3,r2,80f1e8 <__nedf2+0x70>
  80f1e0:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f1e4:	100d883a 	mov	r6,r2
  80f1e8:	3005883a 	mov	r2,r6
  80f1ec:	dfc01017 	ldw	ra,64(sp)
  80f1f0:	dc400f17 	ldw	r17,60(sp)
  80f1f4:	dc000e17 	ldw	r16,56(sp)
  80f1f8:	dec01104 	addi	sp,sp,68
  80f1fc:	f800283a 	ret

0080f200 <__gtdf2>:
  80f200:	deffef04 	addi	sp,sp,-68
  80f204:	dc400f15 	stw	r17,60(sp)
  80f208:	dc400404 	addi	r17,sp,16
  80f20c:	2005883a 	mov	r2,r4
  80f210:	2807883a 	mov	r3,r5
  80f214:	dc000e15 	stw	r16,56(sp)
  80f218:	d809883a 	mov	r4,sp
  80f21c:	880b883a 	mov	r5,r17
  80f220:	dc000904 	addi	r16,sp,36
  80f224:	d8c00115 	stw	r3,4(sp)
  80f228:	d8800015 	stw	r2,0(sp)
  80f22c:	d9800215 	stw	r6,8(sp)
  80f230:	dfc01015 	stw	ra,64(sp)
  80f234:	d9c00315 	stw	r7,12(sp)
  80f238:	080feac0 	call	80feac <__unpack_d>
  80f23c:	d9000204 	addi	r4,sp,8
  80f240:	800b883a 	mov	r5,r16
  80f244:	080feac0 	call	80feac <__unpack_d>
  80f248:	d8800417 	ldw	r2,16(sp)
  80f24c:	00c00044 	movi	r3,1
  80f250:	01bfffc4 	movi	r6,-1
  80f254:	1880062e 	bgeu	r3,r2,80f270 <__gtdf2+0x70>
  80f258:	d8800917 	ldw	r2,36(sp)
  80f25c:	8809883a 	mov	r4,r17
  80f260:	800b883a 	mov	r5,r16
  80f264:	1880022e 	bgeu	r3,r2,80f270 <__gtdf2+0x70>
  80f268:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f26c:	100d883a 	mov	r6,r2
  80f270:	3005883a 	mov	r2,r6
  80f274:	dfc01017 	ldw	ra,64(sp)
  80f278:	dc400f17 	ldw	r17,60(sp)
  80f27c:	dc000e17 	ldw	r16,56(sp)
  80f280:	dec01104 	addi	sp,sp,68
  80f284:	f800283a 	ret

0080f288 <__gedf2>:
  80f288:	deffef04 	addi	sp,sp,-68
  80f28c:	dc400f15 	stw	r17,60(sp)
  80f290:	dc400404 	addi	r17,sp,16
  80f294:	2005883a 	mov	r2,r4
  80f298:	2807883a 	mov	r3,r5
  80f29c:	dc000e15 	stw	r16,56(sp)
  80f2a0:	d809883a 	mov	r4,sp
  80f2a4:	880b883a 	mov	r5,r17
  80f2a8:	dc000904 	addi	r16,sp,36
  80f2ac:	d8c00115 	stw	r3,4(sp)
  80f2b0:	d8800015 	stw	r2,0(sp)
  80f2b4:	d9800215 	stw	r6,8(sp)
  80f2b8:	dfc01015 	stw	ra,64(sp)
  80f2bc:	d9c00315 	stw	r7,12(sp)
  80f2c0:	080feac0 	call	80feac <__unpack_d>
  80f2c4:	d9000204 	addi	r4,sp,8
  80f2c8:	800b883a 	mov	r5,r16
  80f2cc:	080feac0 	call	80feac <__unpack_d>
  80f2d0:	d8800417 	ldw	r2,16(sp)
  80f2d4:	00c00044 	movi	r3,1
  80f2d8:	01bfffc4 	movi	r6,-1
  80f2dc:	1880062e 	bgeu	r3,r2,80f2f8 <__gedf2+0x70>
  80f2e0:	d8800917 	ldw	r2,36(sp)
  80f2e4:	8809883a 	mov	r4,r17
  80f2e8:	800b883a 	mov	r5,r16
  80f2ec:	1880022e 	bgeu	r3,r2,80f2f8 <__gedf2+0x70>
  80f2f0:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f2f4:	100d883a 	mov	r6,r2
  80f2f8:	3005883a 	mov	r2,r6
  80f2fc:	dfc01017 	ldw	ra,64(sp)
  80f300:	dc400f17 	ldw	r17,60(sp)
  80f304:	dc000e17 	ldw	r16,56(sp)
  80f308:	dec01104 	addi	sp,sp,68
  80f30c:	f800283a 	ret

0080f310 <__ltdf2>:
  80f310:	deffef04 	addi	sp,sp,-68
  80f314:	dc400f15 	stw	r17,60(sp)
  80f318:	dc400404 	addi	r17,sp,16
  80f31c:	2005883a 	mov	r2,r4
  80f320:	2807883a 	mov	r3,r5
  80f324:	dc000e15 	stw	r16,56(sp)
  80f328:	d809883a 	mov	r4,sp
  80f32c:	880b883a 	mov	r5,r17
  80f330:	dc000904 	addi	r16,sp,36
  80f334:	d8c00115 	stw	r3,4(sp)
  80f338:	d8800015 	stw	r2,0(sp)
  80f33c:	d9800215 	stw	r6,8(sp)
  80f340:	dfc01015 	stw	ra,64(sp)
  80f344:	d9c00315 	stw	r7,12(sp)
  80f348:	080feac0 	call	80feac <__unpack_d>
  80f34c:	d9000204 	addi	r4,sp,8
  80f350:	800b883a 	mov	r5,r16
  80f354:	080feac0 	call	80feac <__unpack_d>
  80f358:	d8800417 	ldw	r2,16(sp)
  80f35c:	00c00044 	movi	r3,1
  80f360:	180d883a 	mov	r6,r3
  80f364:	1880062e 	bgeu	r3,r2,80f380 <__ltdf2+0x70>
  80f368:	d8800917 	ldw	r2,36(sp)
  80f36c:	8809883a 	mov	r4,r17
  80f370:	800b883a 	mov	r5,r16
  80f374:	1880022e 	bgeu	r3,r2,80f380 <__ltdf2+0x70>
  80f378:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f37c:	100d883a 	mov	r6,r2
  80f380:	3005883a 	mov	r2,r6
  80f384:	dfc01017 	ldw	ra,64(sp)
  80f388:	dc400f17 	ldw	r17,60(sp)
  80f38c:	dc000e17 	ldw	r16,56(sp)
  80f390:	dec01104 	addi	sp,sp,68
  80f394:	f800283a 	ret

0080f398 <__ledf2>:
  80f398:	deffef04 	addi	sp,sp,-68
  80f39c:	dc400f15 	stw	r17,60(sp)
  80f3a0:	dc400404 	addi	r17,sp,16
  80f3a4:	2005883a 	mov	r2,r4
  80f3a8:	2807883a 	mov	r3,r5
  80f3ac:	dc000e15 	stw	r16,56(sp)
  80f3b0:	d809883a 	mov	r4,sp
  80f3b4:	880b883a 	mov	r5,r17
  80f3b8:	dc000904 	addi	r16,sp,36
  80f3bc:	d8c00115 	stw	r3,4(sp)
  80f3c0:	d8800015 	stw	r2,0(sp)
  80f3c4:	d9800215 	stw	r6,8(sp)
  80f3c8:	dfc01015 	stw	ra,64(sp)
  80f3cc:	d9c00315 	stw	r7,12(sp)
  80f3d0:	080feac0 	call	80feac <__unpack_d>
  80f3d4:	d9000204 	addi	r4,sp,8
  80f3d8:	800b883a 	mov	r5,r16
  80f3dc:	080feac0 	call	80feac <__unpack_d>
  80f3e0:	d8800417 	ldw	r2,16(sp)
  80f3e4:	00c00044 	movi	r3,1
  80f3e8:	180d883a 	mov	r6,r3
  80f3ec:	1880062e 	bgeu	r3,r2,80f408 <__ledf2+0x70>
  80f3f0:	d8800917 	ldw	r2,36(sp)
  80f3f4:	8809883a 	mov	r4,r17
  80f3f8:	800b883a 	mov	r5,r16
  80f3fc:	1880022e 	bgeu	r3,r2,80f408 <__ledf2+0x70>
  80f400:	080ffe40 	call	80ffe4 <__fpcmp_parts_d>
  80f404:	100d883a 	mov	r6,r2
  80f408:	3005883a 	mov	r2,r6
  80f40c:	dfc01017 	ldw	ra,64(sp)
  80f410:	dc400f17 	ldw	r17,60(sp)
  80f414:	dc000e17 	ldw	r16,56(sp)
  80f418:	dec01104 	addi	sp,sp,68
  80f41c:	f800283a 	ret

0080f420 <__floatsidf>:
  80f420:	2006d7fa 	srli	r3,r4,31
  80f424:	defff604 	addi	sp,sp,-40
  80f428:	008000c4 	movi	r2,3
  80f42c:	dfc00915 	stw	ra,36(sp)
  80f430:	dcc00815 	stw	r19,32(sp)
  80f434:	dc800715 	stw	r18,28(sp)
  80f438:	dc400615 	stw	r17,24(sp)
  80f43c:	dc000515 	stw	r16,20(sp)
  80f440:	d8800015 	stw	r2,0(sp)
  80f444:	d8c00115 	stw	r3,4(sp)
  80f448:	20000f1e 	bne	r4,zero,80f488 <__floatsidf+0x68>
  80f44c:	00800084 	movi	r2,2
  80f450:	d8800015 	stw	r2,0(sp)
  80f454:	d809883a 	mov	r4,sp
  80f458:	080fb980 	call	80fb98 <__pack_d>
  80f45c:	1009883a 	mov	r4,r2
  80f460:	180b883a 	mov	r5,r3
  80f464:	2005883a 	mov	r2,r4
  80f468:	2807883a 	mov	r3,r5
  80f46c:	dfc00917 	ldw	ra,36(sp)
  80f470:	dcc00817 	ldw	r19,32(sp)
  80f474:	dc800717 	ldw	r18,28(sp)
  80f478:	dc400617 	ldw	r17,24(sp)
  80f47c:	dc000517 	ldw	r16,20(sp)
  80f480:	dec00a04 	addi	sp,sp,40
  80f484:	f800283a 	ret
  80f488:	00800f04 	movi	r2,60
  80f48c:	1807003a 	cmpeq	r3,r3,zero
  80f490:	d8800215 	stw	r2,8(sp)
  80f494:	18001126 	beq	r3,zero,80f4dc <__floatsidf+0xbc>
  80f498:	0027883a 	mov	r19,zero
  80f49c:	2025883a 	mov	r18,r4
  80f4a0:	d9000315 	stw	r4,12(sp)
  80f4a4:	dcc00415 	stw	r19,16(sp)
  80f4a8:	080f97c0 	call	80f97c <__clzsi2>
  80f4ac:	11000744 	addi	r4,r2,29
  80f4b0:	013fe80e 	bge	zero,r4,80f454 <__floatsidf+0x34>
  80f4b4:	10bfff44 	addi	r2,r2,-3
  80f4b8:	10000c16 	blt	r2,zero,80f4ec <__floatsidf+0xcc>
  80f4bc:	90a2983a 	sll	r17,r18,r2
  80f4c0:	0021883a 	mov	r16,zero
  80f4c4:	d8800217 	ldw	r2,8(sp)
  80f4c8:	dc400415 	stw	r17,16(sp)
  80f4cc:	dc000315 	stw	r16,12(sp)
  80f4d0:	1105c83a 	sub	r2,r2,r4
  80f4d4:	d8800215 	stw	r2,8(sp)
  80f4d8:	003fde06 	br	80f454 <__floatsidf+0x34>
  80f4dc:	00a00034 	movhi	r2,32768
  80f4e0:	20800a26 	beq	r4,r2,80f50c <__floatsidf+0xec>
  80f4e4:	0109c83a 	sub	r4,zero,r4
  80f4e8:	003feb06 	br	80f498 <__floatsidf+0x78>
  80f4ec:	9006d07a 	srli	r3,r18,1
  80f4f0:	008007c4 	movi	r2,31
  80f4f4:	1105c83a 	sub	r2,r2,r4
  80f4f8:	1886d83a 	srl	r3,r3,r2
  80f4fc:	9922983a 	sll	r17,r19,r4
  80f500:	9120983a 	sll	r16,r18,r4
  80f504:	1c62b03a 	or	r17,r3,r17
  80f508:	003fee06 	br	80f4c4 <__floatsidf+0xa4>
  80f50c:	0009883a 	mov	r4,zero
  80f510:	01707834 	movhi	r5,49632
  80f514:	003fd306 	br	80f464 <__floatsidf+0x44>

0080f518 <__fixdfsi>:
  80f518:	defff804 	addi	sp,sp,-32
  80f51c:	2005883a 	mov	r2,r4
  80f520:	2807883a 	mov	r3,r5
  80f524:	d809883a 	mov	r4,sp
  80f528:	d9400204 	addi	r5,sp,8
  80f52c:	d8c00115 	stw	r3,4(sp)
  80f530:	d8800015 	stw	r2,0(sp)
  80f534:	dfc00715 	stw	ra,28(sp)
  80f538:	080feac0 	call	80feac <__unpack_d>
  80f53c:	d8c00217 	ldw	r3,8(sp)
  80f540:	00800084 	movi	r2,2
  80f544:	1880051e 	bne	r3,r2,80f55c <__fixdfsi+0x44>
  80f548:	0007883a 	mov	r3,zero
  80f54c:	1805883a 	mov	r2,r3
  80f550:	dfc00717 	ldw	ra,28(sp)
  80f554:	dec00804 	addi	sp,sp,32
  80f558:	f800283a 	ret
  80f55c:	00800044 	movi	r2,1
  80f560:	10fff92e 	bgeu	r2,r3,80f548 <__fixdfsi+0x30>
  80f564:	00800104 	movi	r2,4
  80f568:	18800426 	beq	r3,r2,80f57c <__fixdfsi+0x64>
  80f56c:	d8c00417 	ldw	r3,16(sp)
  80f570:	183ff516 	blt	r3,zero,80f548 <__fixdfsi+0x30>
  80f574:	00800784 	movi	r2,30
  80f578:	10c0080e 	bge	r2,r3,80f59c <__fixdfsi+0x84>
  80f57c:	d8800317 	ldw	r2,12(sp)
  80f580:	1000121e 	bne	r2,zero,80f5cc <__fixdfsi+0xb4>
  80f584:	00e00034 	movhi	r3,32768
  80f588:	18ffffc4 	addi	r3,r3,-1
  80f58c:	1805883a 	mov	r2,r3
  80f590:	dfc00717 	ldw	ra,28(sp)
  80f594:	dec00804 	addi	sp,sp,32
  80f598:	f800283a 	ret
  80f59c:	00800f04 	movi	r2,60
  80f5a0:	10d1c83a 	sub	r8,r2,r3
  80f5a4:	40bff804 	addi	r2,r8,-32
  80f5a8:	d9800517 	ldw	r6,20(sp)
  80f5ac:	d9c00617 	ldw	r7,24(sp)
  80f5b0:	10000816 	blt	r2,zero,80f5d4 <__fixdfsi+0xbc>
  80f5b4:	3888d83a 	srl	r4,r7,r2
  80f5b8:	d8800317 	ldw	r2,12(sp)
  80f5bc:	2007883a 	mov	r3,r4
  80f5c0:	103fe226 	beq	r2,zero,80f54c <__fixdfsi+0x34>
  80f5c4:	0107c83a 	sub	r3,zero,r4
  80f5c8:	003fe006 	br	80f54c <__fixdfsi+0x34>
  80f5cc:	00e00034 	movhi	r3,32768
  80f5d0:	003fde06 	br	80f54c <__fixdfsi+0x34>
  80f5d4:	39c7883a 	add	r3,r7,r7
  80f5d8:	008007c4 	movi	r2,31
  80f5dc:	1205c83a 	sub	r2,r2,r8
  80f5e0:	1886983a 	sll	r3,r3,r2
  80f5e4:	3208d83a 	srl	r4,r6,r8
  80f5e8:	1908b03a 	or	r4,r3,r4
  80f5ec:	003ff206 	br	80f5b8 <__fixdfsi+0xa0>

0080f5f0 <__truncdfsf2>:
  80f5f0:	defff804 	addi	sp,sp,-32
  80f5f4:	2005883a 	mov	r2,r4
  80f5f8:	2807883a 	mov	r3,r5
  80f5fc:	d809883a 	mov	r4,sp
  80f600:	d9400204 	addi	r5,sp,8
  80f604:	d8c00115 	stw	r3,4(sp)
  80f608:	d8800015 	stw	r2,0(sp)
  80f60c:	dfc00715 	stw	ra,28(sp)
  80f610:	080feac0 	call	80feac <__unpack_d>
  80f614:	d9c00517 	ldw	r7,20(sp)
  80f618:	da000617 	ldw	r8,24(sp)
  80f61c:	02d00034 	movhi	r11,16384
  80f620:	5affffc4 	addi	r11,r11,-1
  80f624:	3812d7ba 	srli	r9,r7,30
  80f628:	401a90ba 	slli	r13,r8,2
  80f62c:	3ac4703a 	and	r2,r7,r11
  80f630:	0007883a 	mov	r3,zero
  80f634:	6a52b03a 	or	r9,r13,r9
  80f638:	10c4b03a 	or	r2,r2,r3
  80f63c:	d9000217 	ldw	r4,8(sp)
  80f640:	d9400317 	ldw	r5,12(sp)
  80f644:	d9800417 	ldw	r6,16(sp)
  80f648:	480f883a 	mov	r7,r9
  80f64c:	10000126 	beq	r2,zero,80f654 <__truncdfsf2+0x64>
  80f650:	49c00054 	ori	r7,r9,1
  80f654:	080fb6c0 	call	80fb6c <__make_fp>
  80f658:	dfc00717 	ldw	ra,28(sp)
  80f65c:	dec00804 	addi	sp,sp,32
  80f660:	f800283a 	ret

0080f664 <__floatunsidf>:
  80f664:	defff204 	addi	sp,sp,-56
  80f668:	dfc00d15 	stw	ra,52(sp)
  80f66c:	ddc00c15 	stw	r23,48(sp)
  80f670:	dd800b15 	stw	r22,44(sp)
  80f674:	dd400a15 	stw	r21,40(sp)
  80f678:	dd000915 	stw	r20,36(sp)
  80f67c:	dcc00815 	stw	r19,32(sp)
  80f680:	dc800715 	stw	r18,28(sp)
  80f684:	dc400615 	stw	r17,24(sp)
  80f688:	dc000515 	stw	r16,20(sp)
  80f68c:	d8000115 	stw	zero,4(sp)
  80f690:	20000f1e 	bne	r4,zero,80f6d0 <__floatunsidf+0x6c>
  80f694:	00800084 	movi	r2,2
  80f698:	d8800015 	stw	r2,0(sp)
  80f69c:	d809883a 	mov	r4,sp
  80f6a0:	080fb980 	call	80fb98 <__pack_d>
  80f6a4:	dfc00d17 	ldw	ra,52(sp)
  80f6a8:	ddc00c17 	ldw	r23,48(sp)
  80f6ac:	dd800b17 	ldw	r22,44(sp)
  80f6b0:	dd400a17 	ldw	r21,40(sp)
  80f6b4:	dd000917 	ldw	r20,36(sp)
  80f6b8:	dcc00817 	ldw	r19,32(sp)
  80f6bc:	dc800717 	ldw	r18,28(sp)
  80f6c0:	dc400617 	ldw	r17,24(sp)
  80f6c4:	dc000517 	ldw	r16,20(sp)
  80f6c8:	dec00e04 	addi	sp,sp,56
  80f6cc:	f800283a 	ret
  80f6d0:	008000c4 	movi	r2,3
  80f6d4:	00c00f04 	movi	r3,60
  80f6d8:	002f883a 	mov	r23,zero
  80f6dc:	202d883a 	mov	r22,r4
  80f6e0:	d8800015 	stw	r2,0(sp)
  80f6e4:	d8c00215 	stw	r3,8(sp)
  80f6e8:	d9000315 	stw	r4,12(sp)
  80f6ec:	ddc00415 	stw	r23,16(sp)
  80f6f0:	080f97c0 	call	80f97c <__clzsi2>
  80f6f4:	12400744 	addi	r9,r2,29
  80f6f8:	48000b16 	blt	r9,zero,80f728 <__floatunsidf+0xc4>
  80f6fc:	483fe726 	beq	r9,zero,80f69c <__floatunsidf+0x38>
  80f700:	10bfff44 	addi	r2,r2,-3
  80f704:	10002e16 	blt	r2,zero,80f7c0 <__floatunsidf+0x15c>
  80f708:	b0a2983a 	sll	r17,r22,r2
  80f70c:	0021883a 	mov	r16,zero
  80f710:	d8800217 	ldw	r2,8(sp)
  80f714:	dc400415 	stw	r17,16(sp)
  80f718:	dc000315 	stw	r16,12(sp)
  80f71c:	1245c83a 	sub	r2,r2,r9
  80f720:	d8800215 	stw	r2,8(sp)
  80f724:	003fdd06 	br	80f69c <__floatunsidf+0x38>
  80f728:	0255c83a 	sub	r10,zero,r9
  80f72c:	51bff804 	addi	r6,r10,-32
  80f730:	30001b16 	blt	r6,zero,80f7a0 <__floatunsidf+0x13c>
  80f734:	b9a8d83a 	srl	r20,r23,r6
  80f738:	002b883a 	mov	r21,zero
  80f73c:	000f883a 	mov	r7,zero
  80f740:	01000044 	movi	r4,1
  80f744:	0011883a 	mov	r8,zero
  80f748:	30002516 	blt	r6,zero,80f7e0 <__floatunsidf+0x17c>
  80f74c:	21a6983a 	sll	r19,r4,r6
  80f750:	0025883a 	mov	r18,zero
  80f754:	00bfffc4 	movi	r2,-1
  80f758:	9089883a 	add	r4,r18,r2
  80f75c:	988b883a 	add	r5,r19,r2
  80f760:	248d803a 	cmpltu	r6,r4,r18
  80f764:	314b883a 	add	r5,r6,r5
  80f768:	b104703a 	and	r2,r22,r4
  80f76c:	b946703a 	and	r3,r23,r5
  80f770:	10c4b03a 	or	r2,r2,r3
  80f774:	10000226 	beq	r2,zero,80f780 <__floatunsidf+0x11c>
  80f778:	01c00044 	movi	r7,1
  80f77c:	0011883a 	mov	r8,zero
  80f780:	d9000217 	ldw	r4,8(sp)
  80f784:	a1c4b03a 	or	r2,r20,r7
  80f788:	aa06b03a 	or	r3,r21,r8
  80f78c:	2249c83a 	sub	r4,r4,r9
  80f790:	d8c00415 	stw	r3,16(sp)
  80f794:	d9000215 	stw	r4,8(sp)
  80f798:	d8800315 	stw	r2,12(sp)
  80f79c:	003fbf06 	br	80f69c <__floatunsidf+0x38>
  80f7a0:	bdc7883a 	add	r3,r23,r23
  80f7a4:	008007c4 	movi	r2,31
  80f7a8:	1285c83a 	sub	r2,r2,r10
  80f7ac:	1886983a 	sll	r3,r3,r2
  80f7b0:	b2a8d83a 	srl	r20,r22,r10
  80f7b4:	baaad83a 	srl	r21,r23,r10
  80f7b8:	1d28b03a 	or	r20,r3,r20
  80f7bc:	003fdf06 	br	80f73c <__floatunsidf+0xd8>
  80f7c0:	b006d07a 	srli	r3,r22,1
  80f7c4:	008007c4 	movi	r2,31
  80f7c8:	1245c83a 	sub	r2,r2,r9
  80f7cc:	1886d83a 	srl	r3,r3,r2
  80f7d0:	ba62983a 	sll	r17,r23,r9
  80f7d4:	b260983a 	sll	r16,r22,r9
  80f7d8:	1c62b03a 	or	r17,r3,r17
  80f7dc:	003fcc06 	br	80f710 <__floatunsidf+0xac>
  80f7e0:	2006d07a 	srli	r3,r4,1
  80f7e4:	008007c4 	movi	r2,31
  80f7e8:	1285c83a 	sub	r2,r2,r10
  80f7ec:	18a6d83a 	srl	r19,r3,r2
  80f7f0:	22a4983a 	sll	r18,r4,r10
  80f7f4:	003fd706 	br	80f754 <__floatunsidf+0xf0>

0080f7f8 <udivmodsi4>:
  80f7f8:	29001b2e 	bgeu	r5,r4,80f868 <udivmodsi4+0x70>
  80f7fc:	28001a16 	blt	r5,zero,80f868 <udivmodsi4+0x70>
  80f800:	00800044 	movi	r2,1
  80f804:	0007883a 	mov	r3,zero
  80f808:	01c007c4 	movi	r7,31
  80f80c:	00000306 	br	80f81c <udivmodsi4+0x24>
  80f810:	19c01326 	beq	r3,r7,80f860 <udivmodsi4+0x68>
  80f814:	18c00044 	addi	r3,r3,1
  80f818:	28000416 	blt	r5,zero,80f82c <udivmodsi4+0x34>
  80f81c:	294b883a 	add	r5,r5,r5
  80f820:	1085883a 	add	r2,r2,r2
  80f824:	293ffa36 	bltu	r5,r4,80f810 <udivmodsi4+0x18>
  80f828:	10000d26 	beq	r2,zero,80f860 <udivmodsi4+0x68>
  80f82c:	0007883a 	mov	r3,zero
  80f830:	21400236 	bltu	r4,r5,80f83c <udivmodsi4+0x44>
  80f834:	2149c83a 	sub	r4,r4,r5
  80f838:	1886b03a 	or	r3,r3,r2
  80f83c:	1004d07a 	srli	r2,r2,1
  80f840:	280ad07a 	srli	r5,r5,1
  80f844:	103ffa1e 	bne	r2,zero,80f830 <udivmodsi4+0x38>
  80f848:	30000226 	beq	r6,zero,80f854 <udivmodsi4+0x5c>
  80f84c:	2005883a 	mov	r2,r4
  80f850:	f800283a 	ret
  80f854:	1809883a 	mov	r4,r3
  80f858:	2005883a 	mov	r2,r4
  80f85c:	f800283a 	ret
  80f860:	0007883a 	mov	r3,zero
  80f864:	003ff806 	br	80f848 <udivmodsi4+0x50>
  80f868:	00800044 	movi	r2,1
  80f86c:	0007883a 	mov	r3,zero
  80f870:	003fef06 	br	80f830 <udivmodsi4+0x38>

0080f874 <__divsi3>:
  80f874:	defffe04 	addi	sp,sp,-8
  80f878:	dc000015 	stw	r16,0(sp)
  80f87c:	dfc00115 	stw	ra,4(sp)
  80f880:	0021883a 	mov	r16,zero
  80f884:	20000c16 	blt	r4,zero,80f8b8 <__divsi3+0x44>
  80f888:	000d883a 	mov	r6,zero
  80f88c:	28000e16 	blt	r5,zero,80f8c8 <__divsi3+0x54>
  80f890:	080f7f80 	call	80f7f8 <udivmodsi4>
  80f894:	1007883a 	mov	r3,r2
  80f898:	8005003a 	cmpeq	r2,r16,zero
  80f89c:	1000011e 	bne	r2,zero,80f8a4 <__divsi3+0x30>
  80f8a0:	00c7c83a 	sub	r3,zero,r3
  80f8a4:	1805883a 	mov	r2,r3
  80f8a8:	dfc00117 	ldw	ra,4(sp)
  80f8ac:	dc000017 	ldw	r16,0(sp)
  80f8b0:	dec00204 	addi	sp,sp,8
  80f8b4:	f800283a 	ret
  80f8b8:	0109c83a 	sub	r4,zero,r4
  80f8bc:	04000044 	movi	r16,1
  80f8c0:	000d883a 	mov	r6,zero
  80f8c4:	283ff20e 	bge	r5,zero,80f890 <__divsi3+0x1c>
  80f8c8:	014bc83a 	sub	r5,zero,r5
  80f8cc:	8021003a 	cmpeq	r16,r16,zero
  80f8d0:	003fef06 	br	80f890 <__divsi3+0x1c>

0080f8d4 <__modsi3>:
  80f8d4:	deffff04 	addi	sp,sp,-4
  80f8d8:	dfc00015 	stw	ra,0(sp)
  80f8dc:	01800044 	movi	r6,1
  80f8e0:	2807883a 	mov	r3,r5
  80f8e4:	20000416 	blt	r4,zero,80f8f8 <__modsi3+0x24>
  80f8e8:	28000c16 	blt	r5,zero,80f91c <__modsi3+0x48>
  80f8ec:	dfc00017 	ldw	ra,0(sp)
  80f8f0:	dec00104 	addi	sp,sp,4
  80f8f4:	080f7f81 	jmpi	80f7f8 <udivmodsi4>
  80f8f8:	0109c83a 	sub	r4,zero,r4
  80f8fc:	28000b16 	blt	r5,zero,80f92c <__modsi3+0x58>
  80f900:	180b883a 	mov	r5,r3
  80f904:	01800044 	movi	r6,1
  80f908:	080f7f80 	call	80f7f8 <udivmodsi4>
  80f90c:	0085c83a 	sub	r2,zero,r2
  80f910:	dfc00017 	ldw	ra,0(sp)
  80f914:	dec00104 	addi	sp,sp,4
  80f918:	f800283a 	ret
  80f91c:	014bc83a 	sub	r5,zero,r5
  80f920:	dfc00017 	ldw	ra,0(sp)
  80f924:	dec00104 	addi	sp,sp,4
  80f928:	080f7f81 	jmpi	80f7f8 <udivmodsi4>
  80f92c:	0147c83a 	sub	r3,zero,r5
  80f930:	003ff306 	br	80f900 <__modsi3+0x2c>

0080f934 <__udivsi3>:
  80f934:	000d883a 	mov	r6,zero
  80f938:	080f7f81 	jmpi	80f7f8 <udivmodsi4>

0080f93c <__umodsi3>:
  80f93c:	01800044 	movi	r6,1
  80f940:	080f7f81 	jmpi	80f7f8 <udivmodsi4>

0080f944 <__mulsi3>:
  80f944:	20000a26 	beq	r4,zero,80f970 <__mulsi3+0x2c>
  80f948:	0007883a 	mov	r3,zero
  80f94c:	2080004c 	andi	r2,r4,1
  80f950:	1005003a 	cmpeq	r2,r2,zero
  80f954:	2008d07a 	srli	r4,r4,1
  80f958:	1000011e 	bne	r2,zero,80f960 <__mulsi3+0x1c>
  80f95c:	1947883a 	add	r3,r3,r5
  80f960:	294b883a 	add	r5,r5,r5
  80f964:	203ff91e 	bne	r4,zero,80f94c <__mulsi3+0x8>
  80f968:	1805883a 	mov	r2,r3
  80f96c:	f800283a 	ret
  80f970:	0007883a 	mov	r3,zero
  80f974:	1805883a 	mov	r2,r3
  80f978:	f800283a 	ret

0080f97c <__clzsi2>:
  80f97c:	00bfffd4 	movui	r2,65535
  80f980:	11000e36 	bltu	r2,r4,80f9bc <__clzsi2+0x40>
  80f984:	00803fc4 	movi	r2,255
  80f988:	01400204 	movi	r5,8
  80f98c:	0007883a 	mov	r3,zero
  80f990:	11001036 	bltu	r2,r4,80f9d4 <__clzsi2+0x58>
  80f994:	000b883a 	mov	r5,zero
  80f998:	20c6d83a 	srl	r3,r4,r3
  80f99c:	008020b4 	movhi	r2,130
  80f9a0:	10b21504 	addi	r2,r2,-14252
  80f9a4:	1887883a 	add	r3,r3,r2
  80f9a8:	18800003 	ldbu	r2,0(r3)
  80f9ac:	00c00804 	movi	r3,32
  80f9b0:	2885883a 	add	r2,r5,r2
  80f9b4:	1885c83a 	sub	r2,r3,r2
  80f9b8:	f800283a 	ret
  80f9bc:	01400404 	movi	r5,16
  80f9c0:	00804034 	movhi	r2,256
  80f9c4:	10bfffc4 	addi	r2,r2,-1
  80f9c8:	2807883a 	mov	r3,r5
  80f9cc:	113ff22e 	bgeu	r2,r4,80f998 <__clzsi2+0x1c>
  80f9d0:	01400604 	movi	r5,24
  80f9d4:	2807883a 	mov	r3,r5
  80f9d8:	20c6d83a 	srl	r3,r4,r3
  80f9dc:	008020b4 	movhi	r2,130
  80f9e0:	10b21504 	addi	r2,r2,-14252
  80f9e4:	1887883a 	add	r3,r3,r2
  80f9e8:	18800003 	ldbu	r2,0(r3)
  80f9ec:	00c00804 	movi	r3,32
  80f9f0:	2885883a 	add	r2,r5,r2
  80f9f4:	1885c83a 	sub	r2,r3,r2
  80f9f8:	f800283a 	ret

0080f9fc <__unpack_f>:
  80f9fc:	21800017 	ldw	r6,0(r4)
  80fa00:	00c02034 	movhi	r3,128
  80fa04:	18ffffc4 	addi	r3,r3,-1
  80fa08:	3004d5fa 	srli	r2,r6,23
  80fa0c:	3008d7fa 	srli	r4,r6,31
  80fa10:	30ce703a 	and	r7,r6,r3
  80fa14:	10c03fcc 	andi	r3,r2,255
  80fa18:	29000115 	stw	r4,4(r5)
  80fa1c:	1800131e 	bne	r3,zero,80fa6c <__unpack_f+0x70>
  80fa20:	38000f26 	beq	r7,zero,80fa60 <__unpack_f+0x64>
  80fa24:	380691fa 	slli	r3,r7,7
  80fa28:	01bfe084 	movi	r6,-126
  80fa2c:	008000c4 	movi	r2,3
  80fa30:	01100034 	movhi	r4,16384
  80fa34:	213fffc4 	addi	r4,r4,-1
  80fa38:	28800015 	stw	r2,0(r5)
  80fa3c:	29800215 	stw	r6,8(r5)
  80fa40:	20c00536 	bltu	r4,r3,80fa58 <__unpack_f+0x5c>
  80fa44:	3005883a 	mov	r2,r6
  80fa48:	18c7883a 	add	r3,r3,r3
  80fa4c:	10bfffc4 	addi	r2,r2,-1
  80fa50:	20fffd2e 	bgeu	r4,r3,80fa48 <__unpack_f+0x4c>
  80fa54:	28800215 	stw	r2,8(r5)
  80fa58:	28c00315 	stw	r3,12(r5)
  80fa5c:	f800283a 	ret
  80fa60:	00800084 	movi	r2,2
  80fa64:	28800015 	stw	r2,0(r5)
  80fa68:	f800283a 	ret
  80fa6c:	00803fc4 	movi	r2,255
  80fa70:	18800826 	beq	r3,r2,80fa94 <__unpack_f+0x98>
  80fa74:	380491fa 	slli	r2,r7,7
  80fa78:	18ffe044 	addi	r3,r3,-127
  80fa7c:	28c00215 	stw	r3,8(r5)
  80fa80:	10900034 	orhi	r2,r2,16384
  80fa84:	28800315 	stw	r2,12(r5)
  80fa88:	008000c4 	movi	r2,3
  80fa8c:	28800015 	stw	r2,0(r5)
  80fa90:	f800283a 	ret
  80fa94:	3800031e 	bne	r7,zero,80faa4 <__unpack_f+0xa8>
  80fa98:	00800104 	movi	r2,4
  80fa9c:	28800015 	stw	r2,0(r5)
  80faa0:	f800283a 	ret
  80faa4:	3080042c 	andhi	r2,r6,16
  80faa8:	10000426 	beq	r2,zero,80fabc <__unpack_f+0xc0>
  80faac:	00800044 	movi	r2,1
  80fab0:	28800015 	stw	r2,0(r5)
  80fab4:	29c00315 	stw	r7,12(r5)
  80fab8:	f800283a 	ret
  80fabc:	28000015 	stw	zero,0(r5)
  80fac0:	003ffc06 	br	80fab4 <__unpack_f+0xb8>

0080fac4 <__fpcmp_parts_f>:
  80fac4:	21800017 	ldw	r6,0(r4)
  80fac8:	00c00044 	movi	r3,1
  80facc:	19800a2e 	bgeu	r3,r6,80faf8 <__fpcmp_parts_f+0x34>
  80fad0:	28800017 	ldw	r2,0(r5)
  80fad4:	1880082e 	bgeu	r3,r2,80faf8 <__fpcmp_parts_f+0x34>
  80fad8:	00c00104 	movi	r3,4
  80fadc:	30c01e26 	beq	r6,r3,80fb58 <__fpcmp_parts_f+0x94>
  80fae0:	10c01a26 	beq	r2,r3,80fb4c <__fpcmp_parts_f+0x88>
  80fae4:	00c00084 	movi	r3,2
  80fae8:	30c00526 	beq	r6,r3,80fb00 <__fpcmp_parts_f+0x3c>
  80faec:	10c0071e 	bne	r2,r3,80fb0c <__fpcmp_parts_f+0x48>
  80faf0:	20800117 	ldw	r2,4(r4)
  80faf4:	1000091e 	bne	r2,zero,80fb1c <__fpcmp_parts_f+0x58>
  80faf8:	00800044 	movi	r2,1
  80fafc:	f800283a 	ret
  80fb00:	10c0121e 	bne	r2,r3,80fb4c <__fpcmp_parts_f+0x88>
  80fb04:	0005883a 	mov	r2,zero
  80fb08:	f800283a 	ret
  80fb0c:	20c00117 	ldw	r3,4(r4)
  80fb10:	28800117 	ldw	r2,4(r5)
  80fb14:	18800326 	beq	r3,r2,80fb24 <__fpcmp_parts_f+0x60>
  80fb18:	183ff726 	beq	r3,zero,80faf8 <__fpcmp_parts_f+0x34>
  80fb1c:	00bfffc4 	movi	r2,-1
  80fb20:	f800283a 	ret
  80fb24:	21800217 	ldw	r6,8(r4)
  80fb28:	28800217 	ldw	r2,8(r5)
  80fb2c:	11bffa16 	blt	r2,r6,80fb18 <__fpcmp_parts_f+0x54>
  80fb30:	30800416 	blt	r6,r2,80fb44 <__fpcmp_parts_f+0x80>
  80fb34:	21000317 	ldw	r4,12(r4)
  80fb38:	29400317 	ldw	r5,12(r5)
  80fb3c:	293ff636 	bltu	r5,r4,80fb18 <__fpcmp_parts_f+0x54>
  80fb40:	217ff02e 	bgeu	r4,r5,80fb04 <__fpcmp_parts_f+0x40>
  80fb44:	183fec1e 	bne	r3,zero,80faf8 <__fpcmp_parts_f+0x34>
  80fb48:	003ff406 	br	80fb1c <__fpcmp_parts_f+0x58>
  80fb4c:	28800117 	ldw	r2,4(r5)
  80fb50:	103fe91e 	bne	r2,zero,80faf8 <__fpcmp_parts_f+0x34>
  80fb54:	003ff106 	br	80fb1c <__fpcmp_parts_f+0x58>
  80fb58:	11bfe51e 	bne	r2,r6,80faf0 <__fpcmp_parts_f+0x2c>
  80fb5c:	28c00117 	ldw	r3,4(r5)
  80fb60:	20800117 	ldw	r2,4(r4)
  80fb64:	1885c83a 	sub	r2,r3,r2
  80fb68:	f800283a 	ret

0080fb6c <__make_fp>:
  80fb6c:	defffb04 	addi	sp,sp,-20
  80fb70:	d9000015 	stw	r4,0(sp)
  80fb74:	d809883a 	mov	r4,sp
  80fb78:	dfc00415 	stw	ra,16(sp)
  80fb7c:	d9400115 	stw	r5,4(sp)
  80fb80:	d9800215 	stw	r6,8(sp)
  80fb84:	d9c00315 	stw	r7,12(sp)
  80fb88:	08100ac0 	call	8100ac <__pack_f>
  80fb8c:	dfc00417 	ldw	ra,16(sp)
  80fb90:	dec00504 	addi	sp,sp,20
  80fb94:	f800283a 	ret

0080fb98 <__pack_d>:
  80fb98:	20c00017 	ldw	r3,0(r4)
  80fb9c:	defffd04 	addi	sp,sp,-12
  80fba0:	dc000015 	stw	r16,0(sp)
  80fba4:	dc800215 	stw	r18,8(sp)
  80fba8:	dc400115 	stw	r17,4(sp)
  80fbac:	00800044 	movi	r2,1
  80fbb0:	22000317 	ldw	r8,12(r4)
  80fbb4:	001f883a 	mov	r15,zero
  80fbb8:	22400417 	ldw	r9,16(r4)
  80fbbc:	24000117 	ldw	r16,4(r4)
  80fbc0:	10c0552e 	bgeu	r2,r3,80fd18 <__pack_d+0x180>
  80fbc4:	00800104 	movi	r2,4
  80fbc8:	18804f26 	beq	r3,r2,80fd08 <__pack_d+0x170>
  80fbcc:	00800084 	movi	r2,2
  80fbd0:	18800226 	beq	r3,r2,80fbdc <__pack_d+0x44>
  80fbd4:	4244b03a 	or	r2,r8,r9
  80fbd8:	10001a1e 	bne	r2,zero,80fc44 <__pack_d+0xac>
  80fbdc:	000d883a 	mov	r6,zero
  80fbe0:	000f883a 	mov	r7,zero
  80fbe4:	0011883a 	mov	r8,zero
  80fbe8:	00800434 	movhi	r2,16
  80fbec:	10bfffc4 	addi	r2,r2,-1
  80fbf0:	301d883a 	mov	r14,r6
  80fbf4:	3884703a 	and	r2,r7,r2
  80fbf8:	400a953a 	slli	r5,r8,20
  80fbfc:	79bffc2c 	andhi	r6,r15,65520
  80fc00:	308cb03a 	or	r6,r6,r2
  80fc04:	00e00434 	movhi	r3,32784
  80fc08:	18ffffc4 	addi	r3,r3,-1
  80fc0c:	800497fa 	slli	r2,r16,31
  80fc10:	30c6703a 	and	r3,r6,r3
  80fc14:	1946b03a 	or	r3,r3,r5
  80fc18:	01600034 	movhi	r5,32768
  80fc1c:	297fffc4 	addi	r5,r5,-1
  80fc20:	194a703a 	and	r5,r3,r5
  80fc24:	288ab03a 	or	r5,r5,r2
  80fc28:	2807883a 	mov	r3,r5
  80fc2c:	7005883a 	mov	r2,r14
  80fc30:	dc800217 	ldw	r18,8(sp)
  80fc34:	dc400117 	ldw	r17,4(sp)
  80fc38:	dc000017 	ldw	r16,0(sp)
  80fc3c:	dec00304 	addi	sp,sp,12
  80fc40:	f800283a 	ret
  80fc44:	21000217 	ldw	r4,8(r4)
  80fc48:	00bf0084 	movi	r2,-1022
  80fc4c:	20803f16 	blt	r4,r2,80fd4c <__pack_d+0x1b4>
  80fc50:	0080ffc4 	movi	r2,1023
  80fc54:	11002c16 	blt	r2,r4,80fd08 <__pack_d+0x170>
  80fc58:	00803fc4 	movi	r2,255
  80fc5c:	408c703a 	and	r6,r8,r2
  80fc60:	00802004 	movi	r2,128
  80fc64:	0007883a 	mov	r3,zero
  80fc68:	000f883a 	mov	r7,zero
  80fc6c:	2280ffc4 	addi	r10,r4,1023
  80fc70:	30801e26 	beq	r6,r2,80fcec <__pack_d+0x154>
  80fc74:	00801fc4 	movi	r2,127
  80fc78:	4089883a 	add	r4,r8,r2
  80fc7c:	220d803a 	cmpltu	r6,r4,r8
  80fc80:	324d883a 	add	r6,r6,r9
  80fc84:	2011883a 	mov	r8,r4
  80fc88:	3013883a 	mov	r9,r6
  80fc8c:	00880034 	movhi	r2,8192
  80fc90:	10bfffc4 	addi	r2,r2,-1
  80fc94:	12400d36 	bltu	r2,r9,80fccc <__pack_d+0x134>
  80fc98:	4804963a 	slli	r2,r9,24
  80fc9c:	400cd23a 	srli	r6,r8,8
  80fca0:	480ed23a 	srli	r7,r9,8
  80fca4:	013fffc4 	movi	r4,-1
  80fca8:	118cb03a 	or	r6,r2,r6
  80fcac:	01400434 	movhi	r5,16
  80fcb0:	297fffc4 	addi	r5,r5,-1
  80fcb4:	3104703a 	and	r2,r6,r4
  80fcb8:	3946703a 	and	r3,r7,r5
  80fcbc:	5201ffcc 	andi	r8,r10,2047
  80fcc0:	100d883a 	mov	r6,r2
  80fcc4:	180f883a 	mov	r7,r3
  80fcc8:	003fc706 	br	80fbe8 <__pack_d+0x50>
  80fccc:	480897fa 	slli	r4,r9,31
  80fcd0:	4004d07a 	srli	r2,r8,1
  80fcd4:	4806d07a 	srli	r3,r9,1
  80fcd8:	52800044 	addi	r10,r10,1
  80fcdc:	2084b03a 	or	r2,r4,r2
  80fce0:	1011883a 	mov	r8,r2
  80fce4:	1813883a 	mov	r9,r3
  80fce8:	003feb06 	br	80fc98 <__pack_d+0x100>
  80fcec:	383fe11e 	bne	r7,zero,80fc74 <__pack_d+0xdc>
  80fcf0:	01004004 	movi	r4,256
  80fcf4:	4104703a 	and	r2,r8,r4
  80fcf8:	10c4b03a 	or	r2,r2,r3
  80fcfc:	103fe326 	beq	r2,zero,80fc8c <__pack_d+0xf4>
  80fd00:	3005883a 	mov	r2,r6
  80fd04:	003fdc06 	br	80fc78 <__pack_d+0xe0>
  80fd08:	000d883a 	mov	r6,zero
  80fd0c:	000f883a 	mov	r7,zero
  80fd10:	0201ffc4 	movi	r8,2047
  80fd14:	003fb406 	br	80fbe8 <__pack_d+0x50>
  80fd18:	0005883a 	mov	r2,zero
  80fd1c:	00c00234 	movhi	r3,8
  80fd20:	408cb03a 	or	r6,r8,r2
  80fd24:	48ceb03a 	or	r7,r9,r3
  80fd28:	013fffc4 	movi	r4,-1
  80fd2c:	01400434 	movhi	r5,16
  80fd30:	297fffc4 	addi	r5,r5,-1
  80fd34:	3104703a 	and	r2,r6,r4
  80fd38:	3946703a 	and	r3,r7,r5
  80fd3c:	100d883a 	mov	r6,r2
  80fd40:	180f883a 	mov	r7,r3
  80fd44:	0201ffc4 	movi	r8,2047
  80fd48:	003fa706 	br	80fbe8 <__pack_d+0x50>
  80fd4c:	1109c83a 	sub	r4,r2,r4
  80fd50:	00800e04 	movi	r2,56
  80fd54:	11004316 	blt	r2,r4,80fe64 <__pack_d+0x2cc>
  80fd58:	21fff804 	addi	r7,r4,-32
  80fd5c:	38004516 	blt	r7,zero,80fe74 <__pack_d+0x2dc>
  80fd60:	49d8d83a 	srl	r12,r9,r7
  80fd64:	001b883a 	mov	r13,zero
  80fd68:	0023883a 	mov	r17,zero
  80fd6c:	01400044 	movi	r5,1
  80fd70:	0025883a 	mov	r18,zero
  80fd74:	38004716 	blt	r7,zero,80fe94 <__pack_d+0x2fc>
  80fd78:	29d6983a 	sll	r11,r5,r7
  80fd7c:	0015883a 	mov	r10,zero
  80fd80:	00bfffc4 	movi	r2,-1
  80fd84:	5089883a 	add	r4,r10,r2
  80fd88:	588b883a 	add	r5,r11,r2
  80fd8c:	228d803a 	cmpltu	r6,r4,r10
  80fd90:	314b883a 	add	r5,r6,r5
  80fd94:	4104703a 	and	r2,r8,r4
  80fd98:	4946703a 	and	r3,r9,r5
  80fd9c:	10c4b03a 	or	r2,r2,r3
  80fda0:	10000226 	beq	r2,zero,80fdac <__pack_d+0x214>
  80fda4:	04400044 	movi	r17,1
  80fda8:	0025883a 	mov	r18,zero
  80fdac:	00803fc4 	movi	r2,255
  80fdb0:	644eb03a 	or	r7,r12,r17
  80fdb4:	3892703a 	and	r9,r7,r2
  80fdb8:	00802004 	movi	r2,128
  80fdbc:	6c90b03a 	or	r8,r13,r18
  80fdc0:	0015883a 	mov	r10,zero
  80fdc4:	48801626 	beq	r9,r2,80fe20 <__pack_d+0x288>
  80fdc8:	01001fc4 	movi	r4,127
  80fdcc:	3905883a 	add	r2,r7,r4
  80fdd0:	11cd803a 	cmpltu	r6,r2,r7
  80fdd4:	320d883a 	add	r6,r6,r8
  80fdd8:	100f883a 	mov	r7,r2
  80fddc:	00840034 	movhi	r2,4096
  80fde0:	10bfffc4 	addi	r2,r2,-1
  80fde4:	3011883a 	mov	r8,r6
  80fde8:	0007883a 	mov	r3,zero
  80fdec:	11801b36 	bltu	r2,r6,80fe5c <__pack_d+0x2c4>
  80fdf0:	4004963a 	slli	r2,r8,24
  80fdf4:	3808d23a 	srli	r4,r7,8
  80fdf8:	400ad23a 	srli	r5,r8,8
  80fdfc:	1813883a 	mov	r9,r3
  80fe00:	1108b03a 	or	r4,r2,r4
  80fe04:	00bfffc4 	movi	r2,-1
  80fe08:	00c00434 	movhi	r3,16
  80fe0c:	18ffffc4 	addi	r3,r3,-1
  80fe10:	208c703a 	and	r6,r4,r2
  80fe14:	28ce703a 	and	r7,r5,r3
  80fe18:	4a01ffcc 	andi	r8,r9,2047
  80fe1c:	003f7206 	br	80fbe8 <__pack_d+0x50>
  80fe20:	503fe91e 	bne	r10,zero,80fdc8 <__pack_d+0x230>
  80fe24:	01004004 	movi	r4,256
  80fe28:	3904703a 	and	r2,r7,r4
  80fe2c:	0007883a 	mov	r3,zero
  80fe30:	10c4b03a 	or	r2,r2,r3
  80fe34:	10000626 	beq	r2,zero,80fe50 <__pack_d+0x2b8>
  80fe38:	3a45883a 	add	r2,r7,r9
  80fe3c:	11cd803a 	cmpltu	r6,r2,r7
  80fe40:	320d883a 	add	r6,r6,r8
  80fe44:	100f883a 	mov	r7,r2
  80fe48:	3011883a 	mov	r8,r6
  80fe4c:	0007883a 	mov	r3,zero
  80fe50:	00840034 	movhi	r2,4096
  80fe54:	10bfffc4 	addi	r2,r2,-1
  80fe58:	123fe52e 	bgeu	r2,r8,80fdf0 <__pack_d+0x258>
  80fe5c:	00c00044 	movi	r3,1
  80fe60:	003fe306 	br	80fdf0 <__pack_d+0x258>
  80fe64:	0009883a 	mov	r4,zero
  80fe68:	0013883a 	mov	r9,zero
  80fe6c:	000b883a 	mov	r5,zero
  80fe70:	003fe406 	br	80fe04 <__pack_d+0x26c>
  80fe74:	4a47883a 	add	r3,r9,r9
  80fe78:	008007c4 	movi	r2,31
  80fe7c:	1105c83a 	sub	r2,r2,r4
  80fe80:	1886983a 	sll	r3,r3,r2
  80fe84:	4118d83a 	srl	r12,r8,r4
  80fe88:	491ad83a 	srl	r13,r9,r4
  80fe8c:	1b18b03a 	or	r12,r3,r12
  80fe90:	003fb506 	br	80fd68 <__pack_d+0x1d0>
  80fe94:	2806d07a 	srli	r3,r5,1
  80fe98:	008007c4 	movi	r2,31
  80fe9c:	1105c83a 	sub	r2,r2,r4
  80fea0:	1896d83a 	srl	r11,r3,r2
  80fea4:	2914983a 	sll	r10,r5,r4
  80fea8:	003fb506 	br	80fd80 <__pack_d+0x1e8>

0080feac <__unpack_d>:
  80feac:	20c00117 	ldw	r3,4(r4)
  80feb0:	22400017 	ldw	r9,0(r4)
  80feb4:	00800434 	movhi	r2,16
  80feb8:	10bfffc4 	addi	r2,r2,-1
  80febc:	1808d53a 	srli	r4,r3,20
  80fec0:	180cd7fa 	srli	r6,r3,31
  80fec4:	1894703a 	and	r10,r3,r2
  80fec8:	2201ffcc 	andi	r8,r4,2047
  80fecc:	281b883a 	mov	r13,r5
  80fed0:	4817883a 	mov	r11,r9
  80fed4:	29800115 	stw	r6,4(r5)
  80fed8:	5019883a 	mov	r12,r10
  80fedc:	40001e1e 	bne	r8,zero,80ff58 <__unpack_d+0xac>
  80fee0:	4a84b03a 	or	r2,r9,r10
  80fee4:	10001926 	beq	r2,zero,80ff4c <__unpack_d+0xa0>
  80fee8:	4804d63a 	srli	r2,r9,24
  80feec:	500c923a 	slli	r6,r10,8
  80fef0:	013f0084 	movi	r4,-1022
  80fef4:	00c40034 	movhi	r3,4096
  80fef8:	18ffffc4 	addi	r3,r3,-1
  80fefc:	118cb03a 	or	r6,r2,r6
  80ff00:	008000c4 	movi	r2,3
  80ff04:	480a923a 	slli	r5,r9,8
  80ff08:	68800015 	stw	r2,0(r13)
  80ff0c:	69000215 	stw	r4,8(r13)
  80ff10:	19800b36 	bltu	r3,r6,80ff40 <__unpack_d+0x94>
  80ff14:	200f883a 	mov	r7,r4
  80ff18:	1811883a 	mov	r8,r3
  80ff1c:	2945883a 	add	r2,r5,r5
  80ff20:	1149803a 	cmpltu	r4,r2,r5
  80ff24:	3187883a 	add	r3,r6,r6
  80ff28:	20c9883a 	add	r4,r4,r3
  80ff2c:	100b883a 	mov	r5,r2
  80ff30:	200d883a 	mov	r6,r4
  80ff34:	39ffffc4 	addi	r7,r7,-1
  80ff38:	413ff82e 	bgeu	r8,r4,80ff1c <__unpack_d+0x70>
  80ff3c:	69c00215 	stw	r7,8(r13)
  80ff40:	69800415 	stw	r6,16(r13)
  80ff44:	69400315 	stw	r5,12(r13)
  80ff48:	f800283a 	ret
  80ff4c:	00800084 	movi	r2,2
  80ff50:	28800015 	stw	r2,0(r5)
  80ff54:	f800283a 	ret
  80ff58:	0081ffc4 	movi	r2,2047
  80ff5c:	40800f26 	beq	r8,r2,80ff9c <__unpack_d+0xf0>
  80ff60:	480cd63a 	srli	r6,r9,24
  80ff64:	5006923a 	slli	r3,r10,8
  80ff68:	4804923a 	slli	r2,r9,8
  80ff6c:	0009883a 	mov	r4,zero
  80ff70:	30c6b03a 	or	r3,r6,r3
  80ff74:	01440034 	movhi	r5,4096
  80ff78:	110cb03a 	or	r6,r2,r4
  80ff7c:	423f0044 	addi	r8,r8,-1023
  80ff80:	194eb03a 	or	r7,r3,r5
  80ff84:	008000c4 	movi	r2,3
  80ff88:	69c00415 	stw	r7,16(r13)
  80ff8c:	6a000215 	stw	r8,8(r13)
  80ff90:	68800015 	stw	r2,0(r13)
  80ff94:	69800315 	stw	r6,12(r13)
  80ff98:	f800283a 	ret
  80ff9c:	4a84b03a 	or	r2,r9,r10
  80ffa0:	1000031e 	bne	r2,zero,80ffb0 <__unpack_d+0x104>
  80ffa4:	00800104 	movi	r2,4
  80ffa8:	28800015 	stw	r2,0(r5)
  80ffac:	f800283a 	ret
  80ffb0:	0009883a 	mov	r4,zero
  80ffb4:	01400234 	movhi	r5,8
  80ffb8:	4904703a 	and	r2,r9,r4
  80ffbc:	5146703a 	and	r3,r10,r5
  80ffc0:	10c4b03a 	or	r2,r2,r3
  80ffc4:	10000526 	beq	r2,zero,80ffdc <__unpack_d+0x130>
  80ffc8:	00800044 	movi	r2,1
  80ffcc:	68800015 	stw	r2,0(r13)
  80ffd0:	6b000415 	stw	r12,16(r13)
  80ffd4:	6ac00315 	stw	r11,12(r13)
  80ffd8:	f800283a 	ret
  80ffdc:	68000015 	stw	zero,0(r13)
  80ffe0:	003ffb06 	br	80ffd0 <__unpack_d+0x124>

0080ffe4 <__fpcmp_parts_d>:
  80ffe4:	21800017 	ldw	r6,0(r4)
  80ffe8:	00c00044 	movi	r3,1
  80ffec:	19800a2e 	bgeu	r3,r6,810018 <__fpcmp_parts_d+0x34>
  80fff0:	28800017 	ldw	r2,0(r5)
  80fff4:	1880082e 	bgeu	r3,r2,810018 <__fpcmp_parts_d+0x34>
  80fff8:	00c00104 	movi	r3,4
  80fffc:	30c02626 	beq	r6,r3,810098 <__fpcmp_parts_d+0xb4>
  810000:	10c02226 	beq	r2,r3,81008c <__fpcmp_parts_d+0xa8>
  810004:	00c00084 	movi	r3,2
  810008:	30c00526 	beq	r6,r3,810020 <__fpcmp_parts_d+0x3c>
  81000c:	10c0071e 	bne	r2,r3,81002c <__fpcmp_parts_d+0x48>
  810010:	20800117 	ldw	r2,4(r4)
  810014:	1000091e 	bne	r2,zero,81003c <__fpcmp_parts_d+0x58>
  810018:	00800044 	movi	r2,1
  81001c:	f800283a 	ret
  810020:	10c01a1e 	bne	r2,r3,81008c <__fpcmp_parts_d+0xa8>
  810024:	0005883a 	mov	r2,zero
  810028:	f800283a 	ret
  81002c:	22000117 	ldw	r8,4(r4)
  810030:	28800117 	ldw	r2,4(r5)
  810034:	40800326 	beq	r8,r2,810044 <__fpcmp_parts_d+0x60>
  810038:	403ff726 	beq	r8,zero,810018 <__fpcmp_parts_d+0x34>
  81003c:	00bfffc4 	movi	r2,-1
  810040:	f800283a 	ret
  810044:	20c00217 	ldw	r3,8(r4)
  810048:	28800217 	ldw	r2,8(r5)
  81004c:	10fffa16 	blt	r2,r3,810038 <__fpcmp_parts_d+0x54>
  810050:	18800916 	blt	r3,r2,810078 <__fpcmp_parts_d+0x94>
  810054:	21c00417 	ldw	r7,16(r4)
  810058:	28c00417 	ldw	r3,16(r5)
  81005c:	21800317 	ldw	r6,12(r4)
  810060:	28800317 	ldw	r2,12(r5)
  810064:	19fff436 	bltu	r3,r7,810038 <__fpcmp_parts_d+0x54>
  810068:	38c00526 	beq	r7,r3,810080 <__fpcmp_parts_d+0x9c>
  81006c:	38c00236 	bltu	r7,r3,810078 <__fpcmp_parts_d+0x94>
  810070:	19ffec1e 	bne	r3,r7,810024 <__fpcmp_parts_d+0x40>
  810074:	30bfeb2e 	bgeu	r6,r2,810024 <__fpcmp_parts_d+0x40>
  810078:	403fe71e 	bne	r8,zero,810018 <__fpcmp_parts_d+0x34>
  81007c:	003fef06 	br	81003c <__fpcmp_parts_d+0x58>
  810080:	11bffa2e 	bgeu	r2,r6,81006c <__fpcmp_parts_d+0x88>
  810084:	403fe426 	beq	r8,zero,810018 <__fpcmp_parts_d+0x34>
  810088:	003fec06 	br	81003c <__fpcmp_parts_d+0x58>
  81008c:	28800117 	ldw	r2,4(r5)
  810090:	103fe11e 	bne	r2,zero,810018 <__fpcmp_parts_d+0x34>
  810094:	003fe906 	br	81003c <__fpcmp_parts_d+0x58>
  810098:	11bfdd1e 	bne	r2,r6,810010 <__fpcmp_parts_d+0x2c>
  81009c:	28c00117 	ldw	r3,4(r5)
  8100a0:	20800117 	ldw	r2,4(r4)
  8100a4:	1885c83a 	sub	r2,r3,r2
  8100a8:	f800283a 	ret

008100ac <__pack_f>:
  8100ac:	20c00017 	ldw	r3,0(r4)
  8100b0:	01c00044 	movi	r7,1
  8100b4:	21800317 	ldw	r6,12(r4)
  8100b8:	21400117 	ldw	r5,4(r4)
  8100bc:	38c02d2e 	bgeu	r7,r3,810174 <__pack_f+0xc8>
  8100c0:	00800104 	movi	r2,4
  8100c4:	18802826 	beq	r3,r2,810168 <__pack_f+0xbc>
  8100c8:	00800084 	movi	r2,2
  8100cc:	18800126 	beq	r3,r2,8100d4 <__pack_f+0x28>
  8100d0:	3000101e 	bne	r6,zero,810114 <__pack_f+0x68>
  8100d4:	000d883a 	mov	r6,zero
  8100d8:	0007883a 	mov	r3,zero
  8100dc:	19003fcc 	andi	r4,r3,255
  8100e0:	200895fa 	slli	r4,r4,23
  8100e4:	00c02034 	movhi	r3,128
  8100e8:	18ffffc4 	addi	r3,r3,-1
  8100ec:	30c6703a 	and	r3,r6,r3
  8100f0:	10a0002c 	andhi	r2,r2,32768
  8100f4:	10c4b03a 	or	r2,r2,r3
  8100f8:	280a97fa 	slli	r5,r5,31
  8100fc:	1104b03a 	or	r2,r2,r4
  810100:	00e00034 	movhi	r3,32768
  810104:	18ffffc4 	addi	r3,r3,-1
  810108:	10c4703a 	and	r2,r2,r3
  81010c:	1144b03a 	or	r2,r2,r5
  810110:	f800283a 	ret
  810114:	21000217 	ldw	r4,8(r4)
  810118:	00bfe084 	movi	r2,-126
  81011c:	20801b16 	blt	r4,r2,81018c <__pack_f+0xe0>
  810120:	00801fc4 	movi	r2,127
  810124:	11001016 	blt	r2,r4,810168 <__pack_f+0xbc>
  810128:	308e703a 	and	r7,r6,r2
  81012c:	2087883a 	add	r3,r4,r2
  810130:	00801004 	movi	r2,64
  810134:	38800526 	beq	r7,r2,81014c <__pack_f+0xa0>
  810138:	31800fc4 	addi	r6,r6,63
  81013c:	30000716 	blt	r6,zero,81015c <__pack_f+0xb0>
  810140:	300490ba 	slli	r2,r6,2
  810144:	100cd27a 	srli	r6,r2,9
  810148:	003fe406 	br	8100dc <__pack_f+0x30>
  81014c:	3080200c 	andi	r2,r6,128
  810150:	103ffa26 	beq	r2,zero,81013c <__pack_f+0x90>
  810154:	31cd883a 	add	r6,r6,r7
  810158:	003ff806 	br	81013c <__pack_f+0x90>
  81015c:	300cd07a 	srli	r6,r6,1
  810160:	18c00044 	addi	r3,r3,1
  810164:	003ff606 	br	810140 <__pack_f+0x94>
  810168:	000d883a 	mov	r6,zero
  81016c:	00ffffc4 	movi	r3,-1
  810170:	003fda06 	br	8100dc <__pack_f+0x30>
  810174:	31800434 	orhi	r6,r6,16
  810178:	00802034 	movhi	r2,128
  81017c:	10bfffc4 	addi	r2,r2,-1
  810180:	308c703a 	and	r6,r6,r2
  810184:	00ffffc4 	movi	r3,-1
  810188:	003fd406 	br	8100dc <__pack_f+0x30>
  81018c:	1109c83a 	sub	r4,r2,r4
  810190:	00800644 	movi	r2,25
  810194:	11001216 	blt	r2,r4,8101e0 <__pack_f+0x134>
  810198:	3904983a 	sll	r2,r7,r4
  81019c:	3106d83a 	srl	r3,r6,r4
  8101a0:	10bfffc4 	addi	r2,r2,-1
  8101a4:	3084703a 	and	r2,r6,r2
  8101a8:	1004c03a 	cmpne	r2,r2,zero
  8101ac:	1886b03a 	or	r3,r3,r2
  8101b0:	19001fcc 	andi	r4,r3,127
  8101b4:	00801004 	movi	r2,64
  8101b8:	20800c26 	beq	r4,r2,8101ec <__pack_f+0x140>
  8101bc:	18c00fc4 	addi	r3,r3,63
  8101c0:	00900034 	movhi	r2,16384
  8101c4:	10bfffc4 	addi	r2,r2,-1
  8101c8:	180cd1fa 	srli	r6,r3,7
  8101cc:	10c7803a 	cmpltu	r3,r2,r3
  8101d0:	00802034 	movhi	r2,128
  8101d4:	10bfffc4 	addi	r2,r2,-1
  8101d8:	308c703a 	and	r6,r6,r2
  8101dc:	003fbf06 	br	8100dc <__pack_f+0x30>
  8101e0:	0007883a 	mov	r3,zero
  8101e4:	000d883a 	mov	r6,zero
  8101e8:	003ff906 	br	8101d0 <__pack_f+0x124>
  8101ec:	1880200c 	andi	r2,r3,128
  8101f0:	10000126 	beq	r2,zero,8101f8 <__pack_f+0x14c>
  8101f4:	1907883a 	add	r3,r3,r4
  8101f8:	180cd1fa 	srli	r6,r3,7
  8101fc:	00900034 	movhi	r2,16384
  810200:	10bfffc4 	addi	r2,r2,-1
  810204:	10c7803a 	cmpltu	r3,r2,r3
  810208:	003ff106 	br	8101d0 <__pack_f+0x124>

0081020c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81020c:	defff804 	addi	sp,sp,-32
  810210:	dfc00715 	stw	ra,28(sp)
  810214:	df000615 	stw	fp,24(sp)
  810218:	df000604 	addi	fp,sp,24
  81021c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810220:	e0bffc17 	ldw	r2,-16(fp)
  810224:	1004803a 	cmplt	r2,r2,zero
  810228:	1000091e 	bne	r2,zero,810250 <close+0x44>
  81022c:	e13ffc17 	ldw	r4,-16(fp)
  810230:	01400304 	movi	r5,12
  810234:	080f9440 	call	80f944 <__mulsi3>
  810238:	1007883a 	mov	r3,r2
  81023c:	008020b4 	movhi	r2,130
  810240:	10b4ce04 	addi	r2,r2,-11464
  810244:	1887883a 	add	r3,r3,r2
  810248:	e0ffff15 	stw	r3,-4(fp)
  81024c:	00000106 	br	810254 <close+0x48>
  810250:	e03fff15 	stw	zero,-4(fp)
  810254:	e0bfff17 	ldw	r2,-4(fp)
  810258:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  81025c:	e0bffb17 	ldw	r2,-20(fp)
  810260:	1005003a 	cmpeq	r2,r2,zero
  810264:	10001d1e 	bne	r2,zero,8102dc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810268:	e0bffb17 	ldw	r2,-20(fp)
  81026c:	10800017 	ldw	r2,0(r2)
  810270:	10800417 	ldw	r2,16(r2)
  810274:	1005003a 	cmpeq	r2,r2,zero
  810278:	1000071e 	bne	r2,zero,810298 <close+0x8c>
  81027c:	e0bffb17 	ldw	r2,-20(fp)
  810280:	10800017 	ldw	r2,0(r2)
  810284:	10800417 	ldw	r2,16(r2)
  810288:	e13ffb17 	ldw	r4,-20(fp)
  81028c:	103ee83a 	callr	r2
  810290:	e0bffe15 	stw	r2,-8(fp)
  810294:	00000106 	br	81029c <close+0x90>
  810298:	e03ffe15 	stw	zero,-8(fp)
  81029c:	e0bffe17 	ldw	r2,-8(fp)
  8102a0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8102a4:	e13ffc17 	ldw	r4,-16(fp)
  8102a8:	0810a800 	call	810a80 <alt_release_fd>
    if (rval < 0)
  8102ac:	e0bffa17 	ldw	r2,-24(fp)
  8102b0:	1004403a 	cmpge	r2,r2,zero
  8102b4:	1000071e 	bne	r2,zero,8102d4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  8102b8:	081030c0 	call	81030c <alt_get_errno>
  8102bc:	e0fffa17 	ldw	r3,-24(fp)
  8102c0:	00c7c83a 	sub	r3,zero,r3
  8102c4:	10c00015 	stw	r3,0(r2)
      return -1;
  8102c8:	00bfffc4 	movi	r2,-1
  8102cc:	e0bffd15 	stw	r2,-12(fp)
  8102d0:	00000806 	br	8102f4 <close+0xe8>
    }
    return 0;
  8102d4:	e03ffd15 	stw	zero,-12(fp)
  8102d8:	00000606 	br	8102f4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8102dc:	081030c0 	call	81030c <alt_get_errno>
  8102e0:	1007883a 	mov	r3,r2
  8102e4:	00801444 	movi	r2,81
  8102e8:	18800015 	stw	r2,0(r3)
    return -1;
  8102ec:	00bfffc4 	movi	r2,-1
  8102f0:	e0bffd15 	stw	r2,-12(fp)
  8102f4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8102f8:	e037883a 	mov	sp,fp
  8102fc:	dfc00117 	ldw	ra,4(sp)
  810300:	df000017 	ldw	fp,0(sp)
  810304:	dec00204 	addi	sp,sp,8
  810308:	f800283a 	ret

0081030c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81030c:	defffd04 	addi	sp,sp,-12
  810310:	dfc00215 	stw	ra,8(sp)
  810314:	df000115 	stw	fp,4(sp)
  810318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81031c:	008020b4 	movhi	r2,130
  810320:	10b96b04 	addi	r2,r2,-6740
  810324:	10800017 	ldw	r2,0(r2)
  810328:	1005003a 	cmpeq	r2,r2,zero
  81032c:	1000061e 	bne	r2,zero,810348 <alt_get_errno+0x3c>
  810330:	008020b4 	movhi	r2,130
  810334:	10b96b04 	addi	r2,r2,-6740
  810338:	10800017 	ldw	r2,0(r2)
  81033c:	103ee83a 	callr	r2
  810340:	e0bfff15 	stw	r2,-4(fp)
  810344:	00000306 	br	810354 <alt_get_errno+0x48>
  810348:	008020b4 	movhi	r2,130
  81034c:	10807204 	addi	r2,r2,456
  810350:	e0bfff15 	stw	r2,-4(fp)
  810354:	e0bfff17 	ldw	r2,-4(fp)
}
  810358:	e037883a 	mov	sp,fp
  81035c:	dfc00117 	ldw	ra,4(sp)
  810360:	df000017 	ldw	fp,0(sp)
  810364:	dec00204 	addi	sp,sp,8
  810368:	f800283a 	ret

0081036c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81036c:	defffc04 	addi	sp,sp,-16
  810370:	df000315 	stw	fp,12(sp)
  810374:	df000304 	addi	fp,sp,12
  810378:	e13ffd15 	stw	r4,-12(fp)
  81037c:	e17ffe15 	stw	r5,-8(fp)
  810380:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810384:	e0bfff17 	ldw	r2,-4(fp)
}
  810388:	e037883a 	mov	sp,fp
  81038c:	df000017 	ldw	fp,0(sp)
  810390:	dec00104 	addi	sp,sp,4
  810394:	f800283a 	ret

00810398 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810398:	defff904 	addi	sp,sp,-28
  81039c:	dfc00615 	stw	ra,24(sp)
  8103a0:	df000515 	stw	fp,20(sp)
  8103a4:	df000504 	addi	fp,sp,20
  8103a8:	e13ffc15 	stw	r4,-16(fp)
  8103ac:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8103b0:	e0bffc17 	ldw	r2,-16(fp)
  8103b4:	1004803a 	cmplt	r2,r2,zero
  8103b8:	1000091e 	bne	r2,zero,8103e0 <fstat+0x48>
  8103bc:	e13ffc17 	ldw	r4,-16(fp)
  8103c0:	01400304 	movi	r5,12
  8103c4:	080f9440 	call	80f944 <__mulsi3>
  8103c8:	1007883a 	mov	r3,r2
  8103cc:	008020b4 	movhi	r2,130
  8103d0:	10b4ce04 	addi	r2,r2,-11464
  8103d4:	1887883a 	add	r3,r3,r2
  8103d8:	e0ffff15 	stw	r3,-4(fp)
  8103dc:	00000106 	br	8103e4 <fstat+0x4c>
  8103e0:	e03fff15 	stw	zero,-4(fp)
  8103e4:	e0bfff17 	ldw	r2,-4(fp)
  8103e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8103ec:	e0bffb17 	ldw	r2,-20(fp)
  8103f0:	1005003a 	cmpeq	r2,r2,zero
  8103f4:	1000121e 	bne	r2,zero,810440 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8103f8:	e0bffb17 	ldw	r2,-20(fp)
  8103fc:	10800017 	ldw	r2,0(r2)
  810400:	10800817 	ldw	r2,32(r2)
  810404:	1005003a 	cmpeq	r2,r2,zero
  810408:	1000081e 	bne	r2,zero,81042c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  81040c:	e0bffb17 	ldw	r2,-20(fp)
  810410:	10800017 	ldw	r2,0(r2)
  810414:	10800817 	ldw	r2,32(r2)
  810418:	e13ffb17 	ldw	r4,-20(fp)
  81041c:	e17ffd17 	ldw	r5,-12(fp)
  810420:	103ee83a 	callr	r2
  810424:	e0bffe15 	stw	r2,-8(fp)
  810428:	00000b06 	br	810458 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81042c:	e0fffd17 	ldw	r3,-12(fp)
  810430:	00880004 	movi	r2,8192
  810434:	18800115 	stw	r2,4(r3)
      return 0;
  810438:	e03ffe15 	stw	zero,-8(fp)
  81043c:	00000606 	br	810458 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810440:	08104700 	call	810470 <alt_get_errno>
  810444:	1007883a 	mov	r3,r2
  810448:	00801444 	movi	r2,81
  81044c:	18800015 	stw	r2,0(r3)
    return -1;
  810450:	00bfffc4 	movi	r2,-1
  810454:	e0bffe15 	stw	r2,-8(fp)
  810458:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81045c:	e037883a 	mov	sp,fp
  810460:	dfc00117 	ldw	ra,4(sp)
  810464:	df000017 	ldw	fp,0(sp)
  810468:	dec00204 	addi	sp,sp,8
  81046c:	f800283a 	ret

00810470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810470:	defffd04 	addi	sp,sp,-12
  810474:	dfc00215 	stw	ra,8(sp)
  810478:	df000115 	stw	fp,4(sp)
  81047c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810480:	008020b4 	movhi	r2,130
  810484:	10b96b04 	addi	r2,r2,-6740
  810488:	10800017 	ldw	r2,0(r2)
  81048c:	1005003a 	cmpeq	r2,r2,zero
  810490:	1000061e 	bne	r2,zero,8104ac <alt_get_errno+0x3c>
  810494:	008020b4 	movhi	r2,130
  810498:	10b96b04 	addi	r2,r2,-6740
  81049c:	10800017 	ldw	r2,0(r2)
  8104a0:	103ee83a 	callr	r2
  8104a4:	e0bfff15 	stw	r2,-4(fp)
  8104a8:	00000306 	br	8104b8 <alt_get_errno+0x48>
  8104ac:	008020b4 	movhi	r2,130
  8104b0:	10807204 	addi	r2,r2,456
  8104b4:	e0bfff15 	stw	r2,-4(fp)
  8104b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8104bc:	e037883a 	mov	sp,fp
  8104c0:	dfc00117 	ldw	ra,4(sp)
  8104c4:	df000017 	ldw	fp,0(sp)
  8104c8:	dec00204 	addi	sp,sp,8
  8104cc:	f800283a 	ret

008104d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8104d0:	deffeb04 	addi	sp,sp,-84
  8104d4:	dfc01415 	stw	ra,80(sp)
  8104d8:	df001315 	stw	fp,76(sp)
  8104dc:	df001304 	addi	fp,sp,76
  8104e0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8104e4:	e0bffd17 	ldw	r2,-12(fp)
  8104e8:	1004803a 	cmplt	r2,r2,zero
  8104ec:	1000091e 	bne	r2,zero,810514 <isatty+0x44>
  8104f0:	e13ffd17 	ldw	r4,-12(fp)
  8104f4:	01400304 	movi	r5,12
  8104f8:	080f9440 	call	80f944 <__mulsi3>
  8104fc:	1007883a 	mov	r3,r2
  810500:	008020b4 	movhi	r2,130
  810504:	10b4ce04 	addi	r2,r2,-11464
  810508:	1887883a 	add	r3,r3,r2
  81050c:	e0ffff15 	stw	r3,-4(fp)
  810510:	00000106 	br	810518 <isatty+0x48>
  810514:	e03fff15 	stw	zero,-4(fp)
  810518:	e0bfff17 	ldw	r2,-4(fp)
  81051c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  810520:	e0bfed17 	ldw	r2,-76(fp)
  810524:	1005003a 	cmpeq	r2,r2,zero
  810528:	10000f1e 	bne	r2,zero,810568 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81052c:	e0bfed17 	ldw	r2,-76(fp)
  810530:	10800017 	ldw	r2,0(r2)
  810534:	10800817 	ldw	r2,32(r2)
  810538:	1004c03a 	cmpne	r2,r2,zero
  81053c:	1000031e 	bne	r2,zero,81054c <isatty+0x7c>
    {
      return 1;
  810540:	00800044 	movi	r2,1
  810544:	e0bffe15 	stw	r2,-8(fp)
  810548:	00000c06 	br	81057c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81054c:	e17fee04 	addi	r5,fp,-72
  810550:	e13ffd17 	ldw	r4,-12(fp)
  810554:	08103980 	call	810398 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810558:	e0bfef17 	ldw	r2,-68(fp)
  81055c:	10880020 	cmpeqi	r2,r2,8192
  810560:	e0bffe15 	stw	r2,-8(fp)
  810564:	00000506 	br	81057c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810568:	08105940 	call	810594 <alt_get_errno>
  81056c:	1007883a 	mov	r3,r2
  810570:	00801444 	movi	r2,81
  810574:	18800015 	stw	r2,0(r3)
    return 0;
  810578:	e03ffe15 	stw	zero,-8(fp)
  81057c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  810580:	e037883a 	mov	sp,fp
  810584:	dfc00117 	ldw	ra,4(sp)
  810588:	df000017 	ldw	fp,0(sp)
  81058c:	dec00204 	addi	sp,sp,8
  810590:	f800283a 	ret

00810594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810594:	defffd04 	addi	sp,sp,-12
  810598:	dfc00215 	stw	ra,8(sp)
  81059c:	df000115 	stw	fp,4(sp)
  8105a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8105a4:	008020b4 	movhi	r2,130
  8105a8:	10b96b04 	addi	r2,r2,-6740
  8105ac:	10800017 	ldw	r2,0(r2)
  8105b0:	1005003a 	cmpeq	r2,r2,zero
  8105b4:	1000061e 	bne	r2,zero,8105d0 <alt_get_errno+0x3c>
  8105b8:	008020b4 	movhi	r2,130
  8105bc:	10b96b04 	addi	r2,r2,-6740
  8105c0:	10800017 	ldw	r2,0(r2)
  8105c4:	103ee83a 	callr	r2
  8105c8:	e0bfff15 	stw	r2,-4(fp)
  8105cc:	00000306 	br	8105dc <alt_get_errno+0x48>
  8105d0:	008020b4 	movhi	r2,130
  8105d4:	10807204 	addi	r2,r2,456
  8105d8:	e0bfff15 	stw	r2,-4(fp)
  8105dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8105e0:	e037883a 	mov	sp,fp
  8105e4:	dfc00117 	ldw	ra,4(sp)
  8105e8:	df000017 	ldw	fp,0(sp)
  8105ec:	dec00204 	addi	sp,sp,8
  8105f0:	f800283a 	ret

008105f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8105f4:	defffe04 	addi	sp,sp,-8
  8105f8:	dfc00115 	stw	ra,4(sp)
  8105fc:	df000015 	stw	fp,0(sp)
  810600:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810604:	010020b4 	movhi	r4,130
  810608:	21398f04 	addi	r4,r4,-6596
  81060c:	014020b4 	movhi	r5,130
  810610:	2972b504 	addi	r5,r5,-13612
  810614:	018020b4 	movhi	r6,130
  810618:	31b98f04 	addi	r6,r6,-6596
  81061c:	08106740 	call	810674 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810620:	01002034 	movhi	r4,128
  810624:	21000004 	addi	r4,r4,0
  810628:	01404434 	movhi	r5,272
  81062c:	29500804 	addi	r5,r5,16416
  810630:	01804434 	movhi	r6,272
  810634:	31907004 	addi	r6,r6,16832
  810638:	08106740 	call	810674 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81063c:	010020b4 	movhi	r4,130
  810640:	21307a04 	addi	r4,r4,-15896
  810644:	014020b4 	movhi	r5,130
  810648:	29707a04 	addi	r5,r5,-15896
  81064c:	018020b4 	movhi	r6,130
  810650:	31b2b504 	addi	r6,r6,-13612
  810654:	08106740 	call	810674 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810658:	081ac600 	call	81ac60 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81065c:	081aeec0 	call	81aeec <alt_icache_flush_all>
}
  810660:	e037883a 	mov	sp,fp
  810664:	dfc00117 	ldw	ra,4(sp)
  810668:	df000017 	ldw	fp,0(sp)
  81066c:	dec00204 	addi	sp,sp,8
  810670:	f800283a 	ret

00810674 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810674:	defffc04 	addi	sp,sp,-16
  810678:	df000315 	stw	fp,12(sp)
  81067c:	df000304 	addi	fp,sp,12
  810680:	e13ffd15 	stw	r4,-12(fp)
  810684:	e17ffe15 	stw	r5,-8(fp)
  810688:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  81068c:	e0fffe17 	ldw	r3,-8(fp)
  810690:	e0bffd17 	ldw	r2,-12(fp)
  810694:	18800e26 	beq	r3,r2,8106d0 <alt_load_section+0x5c>
  {
    while( to != end )
  810698:	00000a06 	br	8106c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  81069c:	e0bffd17 	ldw	r2,-12(fp)
  8106a0:	10c00017 	ldw	r3,0(r2)
  8106a4:	e0bffe17 	ldw	r2,-8(fp)
  8106a8:	10c00015 	stw	r3,0(r2)
  8106ac:	e0bffe17 	ldw	r2,-8(fp)
  8106b0:	10800104 	addi	r2,r2,4
  8106b4:	e0bffe15 	stw	r2,-8(fp)
  8106b8:	e0bffd17 	ldw	r2,-12(fp)
  8106bc:	10800104 	addi	r2,r2,4
  8106c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8106c4:	e0fffe17 	ldw	r3,-8(fp)
  8106c8:	e0bfff17 	ldw	r2,-4(fp)
  8106cc:	18bff31e 	bne	r3,r2,81069c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8106d0:	e037883a 	mov	sp,fp
  8106d4:	df000017 	ldw	fp,0(sp)
  8106d8:	dec00104 	addi	sp,sp,4
  8106dc:	f800283a 	ret

008106e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8106e0:	defff804 	addi	sp,sp,-32
  8106e4:	dfc00715 	stw	ra,28(sp)
  8106e8:	df000615 	stw	fp,24(sp)
  8106ec:	df000604 	addi	fp,sp,24
  8106f0:	e13ffc15 	stw	r4,-16(fp)
  8106f4:	e17ffd15 	stw	r5,-12(fp)
  8106f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8106fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810700:	e0bffc17 	ldw	r2,-16(fp)
  810704:	1004803a 	cmplt	r2,r2,zero
  810708:	1000091e 	bne	r2,zero,810730 <lseek+0x50>
  81070c:	e13ffc17 	ldw	r4,-16(fp)
  810710:	01400304 	movi	r5,12
  810714:	080f9440 	call	80f944 <__mulsi3>
  810718:	1007883a 	mov	r3,r2
  81071c:	008020b4 	movhi	r2,130
  810720:	10b4ce04 	addi	r2,r2,-11464
  810724:	1887883a 	add	r3,r3,r2
  810728:	e0ffff15 	stw	r3,-4(fp)
  81072c:	00000106 	br	810734 <lseek+0x54>
  810730:	e03fff15 	stw	zero,-4(fp)
  810734:	e0bfff17 	ldw	r2,-4(fp)
  810738:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  81073c:	e0bffb17 	ldw	r2,-20(fp)
  810740:	1005003a 	cmpeq	r2,r2,zero
  810744:	1000111e 	bne	r2,zero,81078c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810748:	e0bffb17 	ldw	r2,-20(fp)
  81074c:	10800017 	ldw	r2,0(r2)
  810750:	10800717 	ldw	r2,28(r2)
  810754:	1005003a 	cmpeq	r2,r2,zero
  810758:	1000091e 	bne	r2,zero,810780 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81075c:	e0bffb17 	ldw	r2,-20(fp)
  810760:	10800017 	ldw	r2,0(r2)
  810764:	10800717 	ldw	r2,28(r2)
  810768:	e13ffb17 	ldw	r4,-20(fp)
  81076c:	e17ffd17 	ldw	r5,-12(fp)
  810770:	e1bffe17 	ldw	r6,-8(fp)
  810774:	103ee83a 	callr	r2
  810778:	e0bffa15 	stw	r2,-24(fp)
  81077c:	00000506 	br	810794 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810780:	00bfde84 	movi	r2,-134
  810784:	e0bffa15 	stw	r2,-24(fp)
  810788:	00000206 	br	810794 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  81078c:	00bfebc4 	movi	r2,-81
  810790:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  810794:	e0bffa17 	ldw	r2,-24(fp)
  810798:	1004403a 	cmpge	r2,r2,zero
  81079c:	1000071e 	bne	r2,zero,8107bc <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  8107a0:	08107d40 	call	8107d4 <alt_get_errno>
  8107a4:	1007883a 	mov	r3,r2
  8107a8:	e0bffa17 	ldw	r2,-24(fp)
  8107ac:	0085c83a 	sub	r2,zero,r2
  8107b0:	18800015 	stw	r2,0(r3)
    rc = -1;
  8107b4:	00bfffc4 	movi	r2,-1
  8107b8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8107bc:	e0bffa17 	ldw	r2,-24(fp)
}
  8107c0:	e037883a 	mov	sp,fp
  8107c4:	dfc00117 	ldw	ra,4(sp)
  8107c8:	df000017 	ldw	fp,0(sp)
  8107cc:	dec00204 	addi	sp,sp,8
  8107d0:	f800283a 	ret

008107d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8107d4:	defffd04 	addi	sp,sp,-12
  8107d8:	dfc00215 	stw	ra,8(sp)
  8107dc:	df000115 	stw	fp,4(sp)
  8107e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8107e4:	008020b4 	movhi	r2,130
  8107e8:	10b96b04 	addi	r2,r2,-6740
  8107ec:	10800017 	ldw	r2,0(r2)
  8107f0:	1005003a 	cmpeq	r2,r2,zero
  8107f4:	1000061e 	bne	r2,zero,810810 <alt_get_errno+0x3c>
  8107f8:	008020b4 	movhi	r2,130
  8107fc:	10b96b04 	addi	r2,r2,-6740
  810800:	10800017 	ldw	r2,0(r2)
  810804:	103ee83a 	callr	r2
  810808:	e0bfff15 	stw	r2,-4(fp)
  81080c:	00000306 	br	81081c <alt_get_errno+0x48>
  810810:	008020b4 	movhi	r2,130
  810814:	10807204 	addi	r2,r2,456
  810818:	e0bfff15 	stw	r2,-4(fp)
  81081c:	e0bfff17 	ldw	r2,-4(fp)
}
  810820:	e037883a 	mov	sp,fp
  810824:	dfc00117 	ldw	ra,4(sp)
  810828:	df000017 	ldw	fp,0(sp)
  81082c:	dec00204 	addi	sp,sp,8
  810830:	f800283a 	ret

00810834 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810834:	defffb04 	addi	sp,sp,-20
  810838:	dfc00415 	stw	ra,16(sp)
  81083c:	df000315 	stw	fp,12(sp)
  810840:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810844:	0009883a 	mov	r4,zero
  810848:	08193040 	call	819304 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  81084c:	08119400 	call	811940 <OSInit>
  810850:	01000044 	movi	r4,1
  810854:	08168080 	call	816808 <OSSemCreate>
  810858:	1007883a 	mov	r3,r2
  81085c:	008020b4 	movhi	r2,130
  810860:	10807b04 	addi	r2,r2,492
  810864:	10c00015 	stw	r3,0(r2)
  810868:	01000044 	movi	r4,1
  81086c:	08168080 	call	816808 <OSSemCreate>
  810870:	1007883a 	mov	r3,r2
  810874:	008020b4 	movhi	r2,130
  810878:	10807d04 	addi	r2,r2,500
  81087c:	10c00015 	stw	r3,0(r2)
  810880:	008020b4 	movhi	r2,130
  810884:	10807604 	addi	r2,r2,472
  810888:	e0bffd15 	stw	r2,-12(fp)
  81088c:	00800044 	movi	r2,1
  810890:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  810894:	e13ffe0b 	ldhu	r4,-8(fp)
  810898:	08168080 	call	816808 <OSSemCreate>
  81089c:	1007883a 	mov	r3,r2
  8108a0:	e0bffd17 	ldw	r2,-12(fp)
  8108a4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8108a8:	08193380 	call	819338 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8108ac:	010020b4 	movhi	r4,130
  8108b0:	21325804 	addi	r4,r4,-13984
  8108b4:	014020b4 	movhi	r5,130
  8108b8:	29725804 	addi	r5,r5,-13984
  8108bc:	018020b4 	movhi	r6,130
  8108c0:	31b25804 	addi	r6,r6,-13984
  8108c4:	081afe00 	call	81afe0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8108c8:	081ad900 	call	81ad90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8108cc:	010020b4 	movhi	r4,130
  8108d0:	212b7d04 	addi	r4,r4,-21004
  8108d4:	081bdd00 	call	81bdd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8108d8:	d1271817 	ldw	r4,-25504(gp)
  8108dc:	d1671917 	ldw	r5,-25500(gp)
  8108e0:	d1a71a17 	ldw	r6,-25496(gp)
  8108e4:	08005480 	call	800548 <main>
  8108e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8108ec:	01000044 	movi	r4,1
  8108f0:	081020c0 	call	81020c <close>
  exit (result);
  8108f4:	e13fff17 	ldw	r4,-4(fp)
  8108f8:	081bde40 	call	81bde4 <exit>

008108fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8108fc:	defff704 	addi	sp,sp,-36
  810900:	dfc00815 	stw	ra,32(sp)
  810904:	df000715 	stw	fp,28(sp)
  810908:	df000704 	addi	fp,sp,28
  81090c:	e13ffb15 	stw	r4,-20(fp)
  810910:	e17ffc15 	stw	r5,-16(fp)
  810914:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810918:	e0bffb17 	ldw	r2,-20(fp)
  81091c:	1004803a 	cmplt	r2,r2,zero
  810920:	1000091e 	bne	r2,zero,810948 <read+0x4c>
  810924:	e13ffb17 	ldw	r4,-20(fp)
  810928:	01400304 	movi	r5,12
  81092c:	080f9440 	call	80f944 <__mulsi3>
  810930:	1007883a 	mov	r3,r2
  810934:	008020b4 	movhi	r2,130
  810938:	10b4ce04 	addi	r2,r2,-11464
  81093c:	1887883a 	add	r3,r3,r2
  810940:	e0ffff15 	stw	r3,-4(fp)
  810944:	00000106 	br	81094c <read+0x50>
  810948:	e03fff15 	stw	zero,-4(fp)
  81094c:	e0bfff17 	ldw	r2,-4(fp)
  810950:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  810954:	e0bffa17 	ldw	r2,-24(fp)
  810958:	1005003a 	cmpeq	r2,r2,zero
  81095c:	1000241e 	bne	r2,zero,8109f0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810960:	e0bffa17 	ldw	r2,-24(fp)
  810964:	10800217 	ldw	r2,8(r2)
  810968:	108000cc 	andi	r2,r2,3
  81096c:	10800060 	cmpeqi	r2,r2,1
  810970:	10001a1e 	bne	r2,zero,8109dc <read+0xe0>
  810974:	e0bffa17 	ldw	r2,-24(fp)
  810978:	10800017 	ldw	r2,0(r2)
  81097c:	10800517 	ldw	r2,20(r2)
  810980:	1005003a 	cmpeq	r2,r2,zero
  810984:	1000151e 	bne	r2,zero,8109dc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810988:	e0bffa17 	ldw	r2,-24(fp)
  81098c:	10800017 	ldw	r2,0(r2)
  810990:	10800517 	ldw	r2,20(r2)
  810994:	e17ffc17 	ldw	r5,-16(fp)
  810998:	e1bffd17 	ldw	r6,-12(fp)
  81099c:	e13ffa17 	ldw	r4,-24(fp)
  8109a0:	103ee83a 	callr	r2
  8109a4:	e0bff915 	stw	r2,-28(fp)
  8109a8:	e0bff917 	ldw	r2,-28(fp)
  8109ac:	1004403a 	cmpge	r2,r2,zero
  8109b0:	1000071e 	bne	r2,zero,8109d0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  8109b4:	0810a200 	call	810a20 <alt_get_errno>
  8109b8:	e0fff917 	ldw	r3,-28(fp)
  8109bc:	00c7c83a 	sub	r3,zero,r3
  8109c0:	10c00015 	stw	r3,0(r2)
          return -1;
  8109c4:	00bfffc4 	movi	r2,-1
  8109c8:	e0bffe15 	stw	r2,-8(fp)
  8109cc:	00000e06 	br	810a08 <read+0x10c>
        }
        return rval;
  8109d0:	e0bff917 	ldw	r2,-28(fp)
  8109d4:	e0bffe15 	stw	r2,-8(fp)
  8109d8:	00000b06 	br	810a08 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8109dc:	0810a200 	call	810a20 <alt_get_errno>
  8109e0:	1007883a 	mov	r3,r2
  8109e4:	00800344 	movi	r2,13
  8109e8:	18800015 	stw	r2,0(r3)
  8109ec:	00000406 	br	810a00 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8109f0:	0810a200 	call	810a20 <alt_get_errno>
  8109f4:	1007883a 	mov	r3,r2
  8109f8:	00801444 	movi	r2,81
  8109fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810a00:	00bfffc4 	movi	r2,-1
  810a04:	e0bffe15 	stw	r2,-8(fp)
  810a08:	e0bffe17 	ldw	r2,-8(fp)
}
  810a0c:	e037883a 	mov	sp,fp
  810a10:	dfc00117 	ldw	ra,4(sp)
  810a14:	df000017 	ldw	fp,0(sp)
  810a18:	dec00204 	addi	sp,sp,8
  810a1c:	f800283a 	ret

00810a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810a20:	defffd04 	addi	sp,sp,-12
  810a24:	dfc00215 	stw	ra,8(sp)
  810a28:	df000115 	stw	fp,4(sp)
  810a2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810a30:	008020b4 	movhi	r2,130
  810a34:	10b96b04 	addi	r2,r2,-6740
  810a38:	10800017 	ldw	r2,0(r2)
  810a3c:	1005003a 	cmpeq	r2,r2,zero
  810a40:	1000061e 	bne	r2,zero,810a5c <alt_get_errno+0x3c>
  810a44:	008020b4 	movhi	r2,130
  810a48:	10b96b04 	addi	r2,r2,-6740
  810a4c:	10800017 	ldw	r2,0(r2)
  810a50:	103ee83a 	callr	r2
  810a54:	e0bfff15 	stw	r2,-4(fp)
  810a58:	00000306 	br	810a68 <alt_get_errno+0x48>
  810a5c:	008020b4 	movhi	r2,130
  810a60:	10807204 	addi	r2,r2,456
  810a64:	e0bfff15 	stw	r2,-4(fp)
  810a68:	e0bfff17 	ldw	r2,-4(fp)
}
  810a6c:	e037883a 	mov	sp,fp
  810a70:	dfc00117 	ldw	ra,4(sp)
  810a74:	df000017 	ldw	fp,0(sp)
  810a78:	dec00204 	addi	sp,sp,8
  810a7c:	f800283a 	ret

00810a80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  810a80:	defffc04 	addi	sp,sp,-16
  810a84:	dfc00315 	stw	ra,12(sp)
  810a88:	df000215 	stw	fp,8(sp)
  810a8c:	dc000115 	stw	r16,4(sp)
  810a90:	df000104 	addi	fp,sp,4
  810a94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810a98:	e0bfff17 	ldw	r2,-4(fp)
  810a9c:	108000d0 	cmplti	r2,r2,3
  810aa0:	10000f1e 	bne	r2,zero,810ae0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  810aa4:	e13fff17 	ldw	r4,-4(fp)
  810aa8:	040020b4 	movhi	r16,130
  810aac:	8434ce04 	addi	r16,r16,-11464
  810ab0:	01400304 	movi	r5,12
  810ab4:	080f9440 	call	80f944 <__mulsi3>
  810ab8:	1405883a 	add	r2,r2,r16
  810abc:	10800204 	addi	r2,r2,8
  810ac0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  810ac4:	e13fff17 	ldw	r4,-4(fp)
  810ac8:	040020b4 	movhi	r16,130
  810acc:	8434ce04 	addi	r16,r16,-11464
  810ad0:	01400304 	movi	r5,12
  810ad4:	080f9440 	call	80f944 <__mulsi3>
  810ad8:	1405883a 	add	r2,r2,r16
  810adc:	10000015 	stw	zero,0(r2)
  }
}
  810ae0:	e037883a 	mov	sp,fp
  810ae4:	dfc00217 	ldw	ra,8(sp)
  810ae8:	df000117 	ldw	fp,4(sp)
  810aec:	dc000017 	ldw	r16,0(sp)
  810af0:	dec00304 	addi	sp,sp,12
  810af4:	f800283a 	ret

00810af8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810af8:	defff804 	addi	sp,sp,-32
  810afc:	df000715 	stw	fp,28(sp)
  810b00:	df000704 	addi	fp,sp,28
  810b04:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b08:	0005303a 	rdctl	r2,status
  810b0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b10:	e0fffb17 	ldw	r3,-20(fp)
  810b14:	00bfff84 	movi	r2,-2
  810b18:	1884703a 	and	r2,r3,r2
  810b1c:	1001703a 	wrctl	status,r2
  
  return context;
  810b20:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810b24:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810b28:	d0a00d17 	ldw	r2,-32716(gp)
  810b2c:	10c000c4 	addi	r3,r2,3
  810b30:	00bfff04 	movi	r2,-4
  810b34:	1884703a 	and	r2,r3,r2
  810b38:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810b3c:	d0e00d17 	ldw	r3,-32716(gp)
  810b40:	e0bffe17 	ldw	r2,-8(fp)
  810b44:	1887883a 	add	r3,r3,r2
  810b48:	00804034 	movhi	r2,256
  810b4c:	10800004 	addi	r2,r2,0
  810b50:	10c0072e 	bgeu	r2,r3,810b70 <sbrk+0x78>
  810b54:	e0bffd17 	ldw	r2,-12(fp)
  810b58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b5c:	e0bffa17 	ldw	r2,-24(fp)
  810b60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  810b64:	00bfffc4 	movi	r2,-1
  810b68:	e0bfff15 	stw	r2,-4(fp)
  810b6c:	00000c06 	br	810ba0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  810b70:	d0a00d17 	ldw	r2,-32716(gp)
  810b74:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  810b78:	d0e00d17 	ldw	r3,-32716(gp)
  810b7c:	e0bffe17 	ldw	r2,-8(fp)
  810b80:	1885883a 	add	r2,r3,r2
  810b84:	d0a00d15 	stw	r2,-32716(gp)
  810b88:	e0bffd17 	ldw	r2,-12(fp)
  810b8c:	e0bff915 	stw	r2,-28(fp)
  810b90:	e0bff917 	ldw	r2,-28(fp)
  810b94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  810b98:	e0bffc17 	ldw	r2,-16(fp)
  810b9c:	e0bfff15 	stw	r2,-4(fp)
  810ba0:	e0bfff17 	ldw	r2,-4(fp)
} 
  810ba4:	e037883a 	mov	sp,fp
  810ba8:	df000017 	ldw	fp,0(sp)
  810bac:	dec00104 	addi	sp,sp,4
  810bb0:	f800283a 	ret

00810bb4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810bb4:	defff704 	addi	sp,sp,-36
  810bb8:	dfc00815 	stw	ra,32(sp)
  810bbc:	df000715 	stw	fp,28(sp)
  810bc0:	df000704 	addi	fp,sp,28
  810bc4:	e13ffb15 	stw	r4,-20(fp)
  810bc8:	e17ffc15 	stw	r5,-16(fp)
  810bcc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810bd0:	e0bffb17 	ldw	r2,-20(fp)
  810bd4:	1004803a 	cmplt	r2,r2,zero
  810bd8:	1000091e 	bne	r2,zero,810c00 <write+0x4c>
  810bdc:	e13ffb17 	ldw	r4,-20(fp)
  810be0:	01400304 	movi	r5,12
  810be4:	080f9440 	call	80f944 <__mulsi3>
  810be8:	1007883a 	mov	r3,r2
  810bec:	008020b4 	movhi	r2,130
  810bf0:	10b4ce04 	addi	r2,r2,-11464
  810bf4:	1887883a 	add	r3,r3,r2
  810bf8:	e0ffff15 	stw	r3,-4(fp)
  810bfc:	00000106 	br	810c04 <write+0x50>
  810c00:	e03fff15 	stw	zero,-4(fp)
  810c04:	e0bfff17 	ldw	r2,-4(fp)
  810c08:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  810c0c:	e0bffa17 	ldw	r2,-24(fp)
  810c10:	1005003a 	cmpeq	r2,r2,zero
  810c14:	1000241e 	bne	r2,zero,810ca8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810c18:	e0bffa17 	ldw	r2,-24(fp)
  810c1c:	10800217 	ldw	r2,8(r2)
  810c20:	108000cc 	andi	r2,r2,3
  810c24:	1005003a 	cmpeq	r2,r2,zero
  810c28:	10001a1e 	bne	r2,zero,810c94 <write+0xe0>
  810c2c:	e0bffa17 	ldw	r2,-24(fp)
  810c30:	10800017 	ldw	r2,0(r2)
  810c34:	10800617 	ldw	r2,24(r2)
  810c38:	1005003a 	cmpeq	r2,r2,zero
  810c3c:	1000151e 	bne	r2,zero,810c94 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  810c40:	e0bffa17 	ldw	r2,-24(fp)
  810c44:	10800017 	ldw	r2,0(r2)
  810c48:	10800617 	ldw	r2,24(r2)
  810c4c:	e17ffc17 	ldw	r5,-16(fp)
  810c50:	e1bffd17 	ldw	r6,-12(fp)
  810c54:	e13ffa17 	ldw	r4,-24(fp)
  810c58:	103ee83a 	callr	r2
  810c5c:	e0bff915 	stw	r2,-28(fp)
  810c60:	e0bff917 	ldw	r2,-28(fp)
  810c64:	1004403a 	cmpge	r2,r2,zero
  810c68:	1000071e 	bne	r2,zero,810c88 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  810c6c:	0810cd80 	call	810cd8 <alt_get_errno>
  810c70:	e0fff917 	ldw	r3,-28(fp)
  810c74:	00c7c83a 	sub	r3,zero,r3
  810c78:	10c00015 	stw	r3,0(r2)
        return -1;
  810c7c:	00bfffc4 	movi	r2,-1
  810c80:	e0bffe15 	stw	r2,-8(fp)
  810c84:	00000e06 	br	810cc0 <write+0x10c>
      }
      return rval;
  810c88:	e0bff917 	ldw	r2,-28(fp)
  810c8c:	e0bffe15 	stw	r2,-8(fp)
  810c90:	00000b06 	br	810cc0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810c94:	0810cd80 	call	810cd8 <alt_get_errno>
  810c98:	1007883a 	mov	r3,r2
  810c9c:	00800344 	movi	r2,13
  810ca0:	18800015 	stw	r2,0(r3)
  810ca4:	00000406 	br	810cb8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810ca8:	0810cd80 	call	810cd8 <alt_get_errno>
  810cac:	1007883a 	mov	r3,r2
  810cb0:	00801444 	movi	r2,81
  810cb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810cb8:	00bfffc4 	movi	r2,-1
  810cbc:	e0bffe15 	stw	r2,-8(fp)
  810cc0:	e0bffe17 	ldw	r2,-8(fp)
}
  810cc4:	e037883a 	mov	sp,fp
  810cc8:	dfc00117 	ldw	ra,4(sp)
  810ccc:	df000017 	ldw	fp,0(sp)
  810cd0:	dec00204 	addi	sp,sp,8
  810cd4:	f800283a 	ret

00810cd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810cd8:	defffd04 	addi	sp,sp,-12
  810cdc:	dfc00215 	stw	ra,8(sp)
  810ce0:	df000115 	stw	fp,4(sp)
  810ce4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810ce8:	008020b4 	movhi	r2,130
  810cec:	10b96b04 	addi	r2,r2,-6740
  810cf0:	10800017 	ldw	r2,0(r2)
  810cf4:	1005003a 	cmpeq	r2,r2,zero
  810cf8:	1000061e 	bne	r2,zero,810d14 <alt_get_errno+0x3c>
  810cfc:	008020b4 	movhi	r2,130
  810d00:	10b96b04 	addi	r2,r2,-6740
  810d04:	10800017 	ldw	r2,0(r2)
  810d08:	103ee83a 	callr	r2
  810d0c:	e0bfff15 	stw	r2,-4(fp)
  810d10:	00000306 	br	810d20 <alt_get_errno+0x48>
  810d14:	008020b4 	movhi	r2,130
  810d18:	10807204 	addi	r2,r2,456
  810d1c:	e0bfff15 	stw	r2,-4(fp)
  810d20:	e0bfff17 	ldw	r2,-4(fp)
}
  810d24:	e037883a 	mov	sp,fp
  810d28:	dfc00117 	ldw	ra,4(sp)
  810d2c:	df000017 	ldw	fp,0(sp)
  810d30:	dec00204 	addi	sp,sp,8
  810d34:	f800283a 	ret

00810d38 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  810d38:	deffdf04 	addi	sp,sp,-132
  810d3c:	dfc02015 	stw	ra,128(sp)
  810d40:	df001f15 	stw	fp,124(sp)
  810d44:	df001f04 	addi	fp,sp,124
  810d48:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  810d4c:	e17fe204 	addi	r5,fp,-120
  810d50:	01003fc4 	movi	r4,255
  810d54:	0818b900 	call	818b90 <OSTaskQuery>
  810d58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  810d5c:	e0bffe83 	ldbu	r2,-6(fp)
  810d60:	10803fcc 	andi	r2,r2,255
  810d64:	1004c03a 	cmpne	r2,r2,zero
  810d68:	1000191e 	bne	r2,zero,810dd0 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  810d6c:	e0bfee83 	ldbu	r2,-70(fp)
  810d70:	10803fcc 	andi	r2,r2,255
  810d74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  810d78:	d1271c17 	ldw	r4,-25488(gp)
  810d7c:	e17ffd04 	addi	r5,fp,-12
  810d80:	08170dc0 	call	8170dc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  810d84:	e0bffe43 	ldbu	r2,-7(fp)
  810d88:	10803fcc 	andi	r2,r2,255
  810d8c:	1005003a 	cmpeq	r2,r2,zero
  810d90:	1000071e 	bne	r2,zero,810db0 <__env_lock+0x78>
  810d94:	d0e00e17 	ldw	r3,-32712(gp)
  810d98:	e0bfe117 	ldw	r2,-124(fp)
  810d9c:	10c0041e 	bne	r2,r3,810db0 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  810da0:	d0a71b17 	ldw	r2,-25492(gp)
  810da4:	10800044 	addi	r2,r2,1
  810da8:	d0a71b15 	stw	r2,-25492(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  810dac:	00000806 	br	810dd0 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  810db0:	d1271c17 	ldw	r4,-25488(gp)
  810db4:	e1bffe84 	addi	r6,fp,-6
  810db8:	000b883a 	mov	r5,zero
  810dbc:	0816bbc0 	call	816bbc <OSSemPend>
    locks  = 1;
  810dc0:	00800044 	movi	r2,1
  810dc4:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
  810dc8:	e0bfe117 	ldw	r2,-124(fp)
  810dcc:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  810dd0:	e037883a 	mov	sp,fp
  810dd4:	dfc00117 	ldw	ra,4(sp)
  810dd8:	df000017 	ldw	fp,0(sp)
  810ddc:	dec00204 	addi	sp,sp,8
  810de0:	f800283a 	ret

00810de4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  810de4:	defffd04 	addi	sp,sp,-12
  810de8:	dfc00215 	stw	ra,8(sp)
  810dec:	df000115 	stw	fp,4(sp)
  810df0:	df000104 	addi	fp,sp,4
  810df4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  810df8:	d0a71b17 	ldw	r2,-25492(gp)
  810dfc:	1005003a 	cmpeq	r2,r2,zero
  810e00:	10000a1e 	bne	r2,zero,810e2c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  810e04:	d0a71b17 	ldw	r2,-25492(gp)
  810e08:	10bfffc4 	addi	r2,r2,-1
  810e0c:	d0a71b15 	stw	r2,-25492(gp)
  810e10:	d0a71b17 	ldw	r2,-25492(gp)
  810e14:	1004c03a 	cmpne	r2,r2,zero
  810e18:	1000041e 	bne	r2,zero,810e2c <__env_unlock+0x48>
  {
    lockid = -1;
  810e1c:	00bfffc4 	movi	r2,-1
  810e20:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  810e24:	d1271c17 	ldw	r4,-25488(gp)
  810e28:	0816fb40 	call	816fb4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  810e2c:	e037883a 	mov	sp,fp
  810e30:	dfc00117 	ldw	ra,4(sp)
  810e34:	df000017 	ldw	fp,0(sp)
  810e38:	dec00204 	addi	sp,sp,8
  810e3c:	f800283a 	ret

00810e40 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  810e40:	deffdb04 	addi	sp,sp,-148
  810e44:	dfc02415 	stw	ra,144(sp)
  810e48:	df002315 	stw	fp,140(sp)
  810e4c:	df002304 	addi	fp,sp,140
  810e50:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810e54:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  810e58:	008020b4 	movhi	r2,130
  810e5c:	10807e44 	addi	r2,r2,505
  810e60:	10800003 	ldbu	r2,0(r2)
  810e64:	10803fcc 	andi	r2,r2,255
  810e68:	10800058 	cmpnei	r2,r2,1
  810e6c:	1000311e 	bne	r2,zero,810f34 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  810e70:	e17fe204 	addi	r5,fp,-120
  810e74:	01003fc4 	movi	r4,255
  810e78:	0818b900 	call	818b90 <OSTaskQuery>
  810e7c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  810e80:	e0bffe83 	ldbu	r2,-6(fp)
  810e84:	10803fcc 	andi	r2,r2,255
  810e88:	1004c03a 	cmpne	r2,r2,zero
  810e8c:	1000291e 	bne	r2,zero,810f34 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  810e90:	e0bfee83 	ldbu	r2,-70(fp)
  810e94:	10803fcc 	andi	r2,r2,255
  810e98:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  810e9c:	d1271e17 	ldw	r4,-25480(gp)
  810ea0:	e17ffd04 	addi	r5,fp,-12
  810ea4:	08170dc0 	call	8170dc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ea8:	0005303a 	rdctl	r2,status
  810eac:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810eb0:	e0ffdf17 	ldw	r3,-132(fp)
  810eb4:	00bfff84 	movi	r2,-2
  810eb8:	1884703a 	and	r2,r3,r2
  810ebc:	1001703a 	wrctl	status,r2
  
  return context;
  810ec0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  810ec4:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  810ec8:	e0bffd0b 	ldhu	r2,-12(fp)
  810ecc:	10bfffcc 	andi	r2,r2,65535
  810ed0:	1004c03a 	cmpne	r2,r2,zero
  810ed4:	10000b1e 	bne	r2,zero,810f04 <__malloc_lock+0xc4>
  810ed8:	d0e00f17 	ldw	r3,-32708(gp)
  810edc:	e0bfe117 	ldw	r2,-124(fp)
  810ee0:	10c0081e 	bne	r2,r3,810f04 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  810ee4:	d0a71d17 	ldw	r2,-25484(gp)
  810ee8:	10800044 	addi	r2,r2,1
  810eec:	d0a71d15 	stw	r2,-25484(gp)
  810ef0:	e0bfe017 	ldw	r2,-128(fp)
  810ef4:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ef8:	e0bfde17 	ldw	r2,-136(fp)
  810efc:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  810f00:	00000c06 	br	810f34 <__malloc_lock+0xf4>
  810f04:	e0bfe017 	ldw	r2,-128(fp)
  810f08:	e0bfdd15 	stw	r2,-140(fp)
  810f0c:	e0bfdd17 	ldw	r2,-140(fp)
  810f10:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  810f14:	d1271e17 	ldw	r4,-25480(gp)
  810f18:	e1bffe84 	addi	r6,fp,-6
  810f1c:	000b883a 	mov	r5,zero
  810f20:	0816bbc0 	call	816bbc <OSSemPend>
    locks  = 1;
  810f24:	00800044 	movi	r2,1
  810f28:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
  810f2c:	e0bfe117 	ldw	r2,-124(fp)
  810f30:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  810f34:	e037883a 	mov	sp,fp
  810f38:	dfc00117 	ldw	ra,4(sp)
  810f3c:	df000017 	ldw	fp,0(sp)
  810f40:	dec00204 	addi	sp,sp,8
  810f44:	f800283a 	ret

00810f48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810f48:	defff804 	addi	sp,sp,-32
  810f4c:	dfc00715 	stw	ra,28(sp)
  810f50:	df000615 	stw	fp,24(sp)
  810f54:	df000604 	addi	fp,sp,24
  810f58:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810f5c:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  810f60:	008020b4 	movhi	r2,130
  810f64:	10807e44 	addi	r2,r2,505
  810f68:	10800003 	ldbu	r2,0(r2)
  810f6c:	10803fcc 	andi	r2,r2,255
  810f70:	10800058 	cmpnei	r2,r2,1
  810f74:	1000231e 	bne	r2,zero,811004 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f78:	0005303a 	rdctl	r2,status
  810f7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f80:	e0fffd17 	ldw	r3,-12(fp)
  810f84:	00bfff84 	movi	r2,-2
  810f88:	1884703a 	and	r2,r3,r2
  810f8c:	1001703a 	wrctl	status,r2
  
  return context;
  810f90:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  810f94:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  810f98:	d0a71d17 	ldw	r2,-25484(gp)
  810f9c:	1004c03a 	cmpne	r2,r2,zero
  810fa0:	1000051e 	bne	r2,zero,810fb8 <__malloc_unlock+0x70>
  810fa4:	e0bffe17 	ldw	r2,-8(fp)
  810fa8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810fac:	e0bffc17 	ldw	r2,-16(fp)
  810fb0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  810fb4:	00001306 	br	811004 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  810fb8:	d0a71d17 	ldw	r2,-25484(gp)
  810fbc:	10bfffc4 	addi	r2,r2,-1
  810fc0:	d0a71d15 	stw	r2,-25484(gp)
  810fc4:	d0a71d17 	ldw	r2,-25484(gp)
  810fc8:	1004c03a 	cmpne	r2,r2,zero
  810fcc:	1000091e 	bne	r2,zero,810ff4 <__malloc_unlock+0xac>
  {
    lockid = -1;
  810fd0:	00bfffc4 	movi	r2,-1
  810fd4:	d0a00f15 	stw	r2,-32708(gp)
  810fd8:	e0bffe17 	ldw	r2,-8(fp)
  810fdc:	e0bffb15 	stw	r2,-20(fp)
  810fe0:	e0bffb17 	ldw	r2,-20(fp)
  810fe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  810fe8:	d1271e17 	ldw	r4,-25480(gp)
  810fec:	0816fb40 	call	816fb4 <OSSemPost>
  810ff0:	00000406 	br	811004 <__malloc_unlock+0xbc>
  810ff4:	e0bffe17 	ldw	r2,-8(fp)
  810ff8:	e0bffa15 	stw	r2,-24(fp)
  810ffc:	e0bffa17 	ldw	r2,-24(fp)
  811000:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  811004:	e037883a 	mov	sp,fp
  811008:	dfc00117 	ldw	ra,4(sp)
  81100c:	df000017 	ldw	fp,0(sp)
  811010:	dec00204 	addi	sp,sp,8
  811014:	f800283a 	ret

00811018 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  811018:	defff604 	addi	sp,sp,-40
  81101c:	dfc00915 	stw	ra,36(sp)
  811020:	df000815 	stw	fp,32(sp)
  811024:	df000804 	addi	fp,sp,32
  811028:	e13ffc15 	stw	r4,-16(fp)
  81102c:	e17ffd15 	stw	r5,-12(fp)
  811030:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811034:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811038:	e0bffe17 	ldw	r2,-8(fp)
  81103c:	1004c03a 	cmpne	r2,r2,zero
  811040:	1000021e 	bne	r2,zero,81104c <OSEventNameGet+0x34>
        return (0);
  811044:	e03fff15 	stw	zero,-4(fp)
  811048:	00003906 	br	811130 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  81104c:	e0bffc17 	ldw	r2,-16(fp)
  811050:	1004c03a 	cmpne	r2,r2,zero
  811054:	1000051e 	bne	r2,zero,81106c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  811058:	e0fffe17 	ldw	r3,-8(fp)
  81105c:	00800104 	movi	r2,4
  811060:	18800005 	stb	r2,0(r3)
        return (0);
  811064:	e03fff15 	stw	zero,-4(fp)
  811068:	00003106 	br	811130 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81106c:	e0bffd17 	ldw	r2,-12(fp)
  811070:	1004c03a 	cmpne	r2,r2,zero
  811074:	1000051e 	bne	r2,zero,81108c <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  811078:	e0fffe17 	ldw	r3,-8(fp)
  81107c:	00800304 	movi	r2,12
  811080:	18800005 	stb	r2,0(r3)
        return (0);
  811084:	e03fff15 	stw	zero,-4(fp)
  811088:	00002906 	br	811130 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81108c:	d0a72d03 	ldbu	r2,-25420(gp)
  811090:	10803fcc 	andi	r2,r2,255
  811094:	1005003a 	cmpeq	r2,r2,zero
  811098:	1000051e 	bne	r2,zero,8110b0 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  81109c:	e0fffe17 	ldw	r3,-8(fp)
  8110a0:	00800444 	movi	r2,17
  8110a4:	18800005 	stb	r2,0(r3)
        return (0);
  8110a8:	e03fff15 	stw	zero,-4(fp)
  8110ac:	00002006 	br	811130 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  8110b0:	e0bffc17 	ldw	r2,-16(fp)
  8110b4:	10800003 	ldbu	r2,0(r2)
  8110b8:	10803fcc 	andi	r2,r2,255
  8110bc:	10bfffc4 	addi	r2,r2,-1
  8110c0:	10800128 	cmpgeui	r2,r2,4
  8110c4:	1000161e 	bne	r2,zero,811120 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8110c8:	0005303a 	rdctl	r2,status
  8110cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110d0:	e0fff917 	ldw	r3,-28(fp)
  8110d4:	00bfff84 	movi	r2,-2
  8110d8:	1884703a 	and	r2,r3,r2
  8110dc:	1001703a 	wrctl	status,r2
  
  return context;
  8110e0:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  8110e4:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  8110e8:	e0bffc17 	ldw	r2,-16(fp)
  8110ec:	11400384 	addi	r5,r2,14
  8110f0:	e13ffd17 	ldw	r4,-12(fp)
  8110f4:	0812b9c0 	call	812b9c <OS_StrCopy>
  8110f8:	e0bffb05 	stb	r2,-20(fp)
  8110fc:	e0bffa17 	ldw	r2,-24(fp)
  811100:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811104:	e0bff817 	ldw	r2,-32(fp)
  811108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81110c:	e0bffe17 	ldw	r2,-8(fp)
  811110:	10000005 	stb	zero,0(r2)
    return (len);
  811114:	e0bffb03 	ldbu	r2,-20(fp)
  811118:	e0bfff15 	stw	r2,-4(fp)
  81111c:	00000406 	br	811130 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  811120:	e0fffe17 	ldw	r3,-8(fp)
  811124:	00800044 	movi	r2,1
  811128:	18800005 	stb	r2,0(r3)
             return (0);
  81112c:	e03fff15 	stw	zero,-4(fp)
  811130:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  811134:	e037883a 	mov	sp,fp
  811138:	dfc00117 	ldw	ra,4(sp)
  81113c:	df000017 	ldw	fp,0(sp)
  811140:	dec00204 	addi	sp,sp,8
  811144:	f800283a 	ret

00811148 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  811148:	defff604 	addi	sp,sp,-40
  81114c:	dfc00915 	stw	ra,36(sp)
  811150:	df000815 	stw	fp,32(sp)
  811154:	df000804 	addi	fp,sp,32
  811158:	e13ffd15 	stw	r4,-12(fp)
  81115c:	e17ffe15 	stw	r5,-8(fp)
  811160:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811164:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811168:	e0bfff17 	ldw	r2,-4(fp)
  81116c:	1005003a 	cmpeq	r2,r2,zero
  811170:	1000411e 	bne	r2,zero,811278 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  811174:	e0bffd17 	ldw	r2,-12(fp)
  811178:	1004c03a 	cmpne	r2,r2,zero
  81117c:	1000041e 	bne	r2,zero,811190 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  811180:	e0ffff17 	ldw	r3,-4(fp)
  811184:	00800104 	movi	r2,4
  811188:	18800005 	stb	r2,0(r3)
        return;
  81118c:	00003a06 	br	811278 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811190:	e0bffe17 	ldw	r2,-8(fp)
  811194:	1004c03a 	cmpne	r2,r2,zero
  811198:	1000041e 	bne	r2,zero,8111ac <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81119c:	e0ffff17 	ldw	r3,-4(fp)
  8111a0:	00800304 	movi	r2,12
  8111a4:	18800005 	stb	r2,0(r3)
        return;
  8111a8:	00003306 	br	811278 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8111ac:	d0a72d03 	ldbu	r2,-25420(gp)
  8111b0:	10803fcc 	andi	r2,r2,255
  8111b4:	1005003a 	cmpeq	r2,r2,zero
  8111b8:	1000041e 	bne	r2,zero,8111cc <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  8111bc:	e0ffff17 	ldw	r3,-4(fp)
  8111c0:	00800484 	movi	r2,18
  8111c4:	18800005 	stb	r2,0(r3)
        return;
  8111c8:	00002b06 	br	811278 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  8111cc:	e0bffd17 	ldw	r2,-12(fp)
  8111d0:	10800003 	ldbu	r2,0(r2)
  8111d4:	10803fcc 	andi	r2,r2,255
  8111d8:	10bfffc4 	addi	r2,r2,-1
  8111dc:	10800128 	cmpgeui	r2,r2,4
  8111e0:	10000f1e 	bne	r2,zero,811220 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8111e4:	0005303a 	rdctl	r2,status
  8111e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8111ec:	e0fffa17 	ldw	r3,-24(fp)
  8111f0:	00bfff84 	movi	r2,-2
  8111f4:	1884703a 	and	r2,r3,r2
  8111f8:	1001703a 	wrctl	status,r2
  
  return context;
  8111fc:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  811200:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  811204:	e13ffe17 	ldw	r4,-8(fp)
  811208:	0812c1c0 	call	812c1c <OS_StrLen>
  81120c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  811210:	e0bffc03 	ldbu	r2,-16(fp)
  811214:	10800828 	cmpgeui	r2,r2,32
  811218:	1000051e 	bne	r2,zero,811230 <OSEventNameSet+0xe8>
  81121c:	00000c06 	br	811250 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  811220:	e0ffff17 	ldw	r3,-4(fp)
  811224:	00800044 	movi	r2,1
  811228:	18800005 	stb	r2,0(r3)
             return;
  81122c:	00001206 	br	811278 <OSEventNameSet+0x130>
  811230:	e0bffb17 	ldw	r2,-20(fp)
  811234:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811238:	e0bff917 	ldw	r2,-28(fp)
  81123c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  811240:	e0ffff17 	ldw	r3,-4(fp)
  811244:	008002c4 	movi	r2,11
  811248:	18800005 	stb	r2,0(r3)
        return;
  81124c:	00000a06 	br	811278 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  811250:	e0bffd17 	ldw	r2,-12(fp)
  811254:	11000384 	addi	r4,r2,14
  811258:	e17ffe17 	ldw	r5,-8(fp)
  81125c:	0812b9c0 	call	812b9c <OS_StrCopy>
  811260:	e0bffb17 	ldw	r2,-20(fp)
  811264:	e0bff815 	stw	r2,-32(fp)
  811268:	e0bff817 	ldw	r2,-32(fp)
  81126c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811270:	e0bfff17 	ldw	r2,-4(fp)
  811274:	10000005 	stb	zero,0(r2)
}
  811278:	e037883a 	mov	sp,fp
  81127c:	dfc00117 	ldw	ra,4(sp)
  811280:	df000017 	ldw	fp,0(sp)
  811284:	dec00204 	addi	sp,sp,8
  811288:	f800283a 	ret

0081128c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  81128c:	deffe704 	addi	sp,sp,-100
  811290:	dfc01815 	stw	ra,96(sp)
  811294:	df001715 	stw	fp,92(sp)
  811298:	df001704 	addi	fp,sp,92
  81129c:	e13ff615 	stw	r4,-40(fp)
  8112a0:	e17ff715 	stw	r5,-36(fp)
  8112a4:	e1bff815 	stw	r6,-32(fp)
  8112a8:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  8112ac:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  8112b0:	e0800217 	ldw	r2,8(fp)
  8112b4:	1004c03a 	cmpne	r2,r2,zero
  8112b8:	1000021e 	bne	r2,zero,8112c4 <OSEventPendMulti+0x38>
        return (0);
  8112bc:	e03fff15 	stw	zero,-4(fp)
  8112c0:	00019906 	br	811928 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  8112c4:	e0bff617 	ldw	r2,-40(fp)
  8112c8:	1004c03a 	cmpne	r2,r2,zero
  8112cc:	1000051e 	bne	r2,zero,8112e4 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  8112d0:	e0c00217 	ldw	r3,8(fp)
  8112d4:	00800104 	movi	r2,4
  8112d8:	18800005 	stb	r2,0(r3)
        return (0);
  8112dc:	e03fff15 	stw	zero,-4(fp)
  8112e0:	00019106 	br	811928 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  8112e4:	e0bff717 	ldw	r2,-36(fp)
  8112e8:	1004c03a 	cmpne	r2,r2,zero
  8112ec:	1000051e 	bne	r2,zero,811304 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  8112f0:	e0c00217 	ldw	r3,8(fp)
  8112f4:	00800104 	movi	r2,4
  8112f8:	18800005 	stb	r2,0(r3)
        return (0);
  8112fc:	e03fff15 	stw	zero,-4(fp)
  811300:	00018906 	br	811928 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  811304:	e0bff817 	ldw	r2,-32(fp)
  811308:	1004c03a 	cmpne	r2,r2,zero
  81130c:	1000051e 	bne	r2,zero,811324 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  811310:	e0c00217 	ldw	r3,8(fp)
  811314:	00800104 	movi	r2,4
  811318:	18800005 	stb	r2,0(r3)
        return (0);
  81131c:	e03fff15 	stw	zero,-4(fp)
  811320:	00018106 	br	811928 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  811324:	e0bff717 	ldw	r2,-36(fp)
  811328:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  81132c:	e0bff617 	ldw	r2,-40(fp)
  811330:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  811334:	e0bff517 	ldw	r2,-44(fp)
  811338:	10800017 	ldw	r2,0(r2)
  81133c:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  811340:	00001806 	br	8113a4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  811344:	e0bff417 	ldw	r2,-48(fp)
  811348:	10800003 	ldbu	r2,0(r2)
  81134c:	10803fcc 	andi	r2,r2,255
  811350:	e0bffe15 	stw	r2,-8(fp)
  811354:	e0fffe17 	ldw	r3,-8(fp)
  811358:	188000a0 	cmpeqi	r2,r3,2
  81135c:	10000b1e 	bne	r2,zero,81138c <OSEventPendMulti+0x100>
  811360:	e0fffe17 	ldw	r3,-8(fp)
  811364:	188000e0 	cmpeqi	r2,r3,3
  811368:	1000081e 	bne	r2,zero,81138c <OSEventPendMulti+0x100>
  81136c:	e0fffe17 	ldw	r3,-8(fp)
  811370:	18800060 	cmpeqi	r2,r3,1
  811374:	1000051e 	bne	r2,zero,81138c <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  811378:	e0c00217 	ldw	r3,8(fp)
  81137c:	00800044 	movi	r2,1
  811380:	18800005 	stb	r2,0(r3)
                 return (0);
  811384:	e03fff15 	stw	zero,-4(fp)
  811388:	00016706 	br	811928 <OSEventPendMulti+0x69c>
        }
        pevents++;
  81138c:	e0bff517 	ldw	r2,-44(fp)
  811390:	10800104 	addi	r2,r2,4
  811394:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  811398:	e0bff517 	ldw	r2,-44(fp)
  81139c:	10800017 	ldw	r2,0(r2)
  8113a0:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  8113a4:	e0bff417 	ldw	r2,-48(fp)
  8113a8:	1004c03a 	cmpne	r2,r2,zero
  8113ac:	103fe51e 	bne	r2,zero,811344 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  8113b0:	d0a72d03 	ldbu	r2,-25420(gp)
  8113b4:	10803fcc 	andi	r2,r2,255
  8113b8:	1005003a 	cmpeq	r2,r2,zero
  8113bc:	1000051e 	bne	r2,zero,8113d4 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  8113c0:	e0c00217 	ldw	r3,8(fp)
  8113c4:	00800084 	movi	r2,2
  8113c8:	18800005 	stb	r2,0(r3)
        return (0);
  8113cc:	e03fff15 	stw	zero,-4(fp)
  8113d0:	00015506 	br	811928 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  8113d4:	d0a71f03 	ldbu	r2,-25476(gp)
  8113d8:	10803fcc 	andi	r2,r2,255
  8113dc:	1005003a 	cmpeq	r2,r2,zero
  8113e0:	1000051e 	bne	r2,zero,8113f8 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  8113e4:	e0c00217 	ldw	r3,8(fp)
  8113e8:	00800344 	movi	r2,13
  8113ec:	18800005 	stb	r2,0(r3)
        return (0);
  8113f0:	e03fff15 	stw	zero,-4(fp)
  8113f4:	00014c06 	br	811928 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113f8:	0005303a 	rdctl	r2,status
  8113fc:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811400:	e0ffef17 	ldw	r3,-68(fp)
  811404:	00bfff84 	movi	r2,-2
  811408:	1884703a 	and	r2,r3,r2
  81140c:	1001703a 	wrctl	status,r2
  
  return context;
  811410:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  811414:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  811418:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  81141c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  811420:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  811424:	e0bff617 	ldw	r2,-40(fp)
  811428:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  81142c:	e0bff517 	ldw	r2,-44(fp)
  811430:	10800017 	ldw	r2,0(r2)
  811434:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  811438:	00008f06 	br	811678 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  81143c:	e0bff417 	ldw	r2,-48(fp)
  811440:	10800003 	ldbu	r2,0(r2)
  811444:	10803fcc 	andi	r2,r2,255
  811448:	e0bffd15 	stw	r2,-12(fp)
  81144c:	e0fffd17 	ldw	r3,-12(fp)
  811450:	188000a0 	cmpeqi	r2,r3,2
  811454:	1000441e 	bne	r2,zero,811568 <OSEventPendMulti+0x2dc>
  811458:	e0fffd17 	ldw	r3,-12(fp)
  81145c:	188000e0 	cmpeqi	r2,r3,3
  811460:	1000041e 	bne	r2,zero,811474 <OSEventPendMulti+0x1e8>
  811464:	e0fffd17 	ldw	r3,-12(fp)
  811468:	18800060 	cmpeqi	r2,r3,1
  81146c:	1000211e 	bne	r2,zero,8114f4 <OSEventPendMulti+0x268>
  811470:	00006f06 	br	811630 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  811474:	e0bff417 	ldw	r2,-48(fp)
  811478:	1080020b 	ldhu	r2,8(r2)
  81147c:	10bfffcc 	andi	r2,r2,65535
  811480:	1005003a 	cmpeq	r2,r2,zero
  811484:	1000171e 	bne	r2,zero,8114e4 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  811488:	e0bff417 	ldw	r2,-48(fp)
  81148c:	1080020b 	ldhu	r2,8(r2)
  811490:	10bfffc4 	addi	r2,r2,-1
  811494:	1007883a 	mov	r3,r2
  811498:	e0bff417 	ldw	r2,-48(fp)
  81149c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  8114a0:	e0fff717 	ldw	r3,-36(fp)
  8114a4:	e0bff417 	ldw	r2,-48(fp)
  8114a8:	18800015 	stw	r2,0(r3)
  8114ac:	e0bff717 	ldw	r2,-36(fp)
  8114b0:	10800104 	addi	r2,r2,4
  8114b4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  8114b8:	00800044 	movi	r2,1
  8114bc:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  8114c0:	e0bff817 	ldw	r2,-32(fp)
  8114c4:	10000015 	stw	zero,0(r2)
  8114c8:	e0bff817 	ldw	r2,-32(fp)
  8114cc:	10800104 	addi	r2,r2,4
  8114d0:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  8114d4:	e0bff18b 	ldhu	r2,-58(fp)
  8114d8:	10800044 	addi	r2,r2,1
  8114dc:	e0bff18d 	sth	r2,-58(fp)
  8114e0:	00005f06 	br	811660 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  8114e4:	e0bff103 	ldbu	r2,-60(fp)
  8114e8:	10800054 	ori	r2,r2,1
  8114ec:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8114f0:	00005b06 	br	811660 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  8114f4:	e0bff417 	ldw	r2,-48(fp)
  8114f8:	10800117 	ldw	r2,4(r2)
  8114fc:	1005003a 	cmpeq	r2,r2,zero
  811500:	1000151e 	bne	r2,zero,811558 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  811504:	e0bff417 	ldw	r2,-48(fp)
  811508:	10c00117 	ldw	r3,4(r2)
  81150c:	e0bff817 	ldw	r2,-32(fp)
  811510:	10c00015 	stw	r3,0(r2)
  811514:	e0bff817 	ldw	r2,-32(fp)
  811518:	10800104 	addi	r2,r2,4
  81151c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  811520:	e0bff417 	ldw	r2,-48(fp)
  811524:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  811528:	e0fff717 	ldw	r3,-36(fp)
  81152c:	e0bff417 	ldw	r2,-48(fp)
  811530:	18800015 	stw	r2,0(r3)
  811534:	e0bff717 	ldw	r2,-36(fp)
  811538:	10800104 	addi	r2,r2,4
  81153c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  811540:	00800044 	movi	r2,1
  811544:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  811548:	e0bff18b 	ldhu	r2,-58(fp)
  81154c:	10800044 	addi	r2,r2,1
  811550:	e0bff18d 	sth	r2,-58(fp)
  811554:	00004206 	br	811660 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  811558:	e0bff103 	ldbu	r2,-60(fp)
  81155c:	10800094 	ori	r2,r2,2
  811560:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  811564:	00003e06 	br	811660 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  811568:	e0bff417 	ldw	r2,-48(fp)
  81156c:	10800117 	ldw	r2,4(r2)
  811570:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  811574:	e0bff317 	ldw	r2,-52(fp)
  811578:	1080058b 	ldhu	r2,22(r2)
  81157c:	10bfffcc 	andi	r2,r2,65535
  811580:	1005003a 	cmpeq	r2,r2,zero
  811584:	1000261e 	bne	r2,zero,811620 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  811588:	e0bff317 	ldw	r2,-52(fp)
  81158c:	11000417 	ldw	r4,16(r2)
  811590:	20c00017 	ldw	r3,0(r4)
  811594:	e0bff817 	ldw	r2,-32(fp)
  811598:	10c00015 	stw	r3,0(r2)
  81159c:	e0bff817 	ldw	r2,-32(fp)
  8115a0:	10800104 	addi	r2,r2,4
  8115a4:	e0bff815 	stw	r2,-32(fp)
  8115a8:	20c00104 	addi	r3,r4,4
  8115ac:	e0bff317 	ldw	r2,-52(fp)
  8115b0:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  8115b4:	e0bff317 	ldw	r2,-52(fp)
  8115b8:	10c00417 	ldw	r3,16(r2)
  8115bc:	e0bff317 	ldw	r2,-52(fp)
  8115c0:	10800217 	ldw	r2,8(r2)
  8115c4:	1880041e 	bne	r3,r2,8115d8 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  8115c8:	e0bff317 	ldw	r2,-52(fp)
  8115cc:	10c00117 	ldw	r3,4(r2)
  8115d0:	e0bff317 	ldw	r2,-52(fp)
  8115d4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  8115d8:	e0bff317 	ldw	r2,-52(fp)
  8115dc:	1080058b 	ldhu	r2,22(r2)
  8115e0:	10bfffc4 	addi	r2,r2,-1
  8115e4:	1007883a 	mov	r3,r2
  8115e8:	e0bff317 	ldw	r2,-52(fp)
  8115ec:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  8115f0:	e0fff717 	ldw	r3,-36(fp)
  8115f4:	e0bff417 	ldw	r2,-48(fp)
  8115f8:	18800015 	stw	r2,0(r3)
  8115fc:	e0bff717 	ldw	r2,-36(fp)
  811600:	10800104 	addi	r2,r2,4
  811604:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  811608:	00800044 	movi	r2,1
  81160c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  811610:	e0bff18b 	ldhu	r2,-58(fp)
  811614:	10800044 	addi	r2,r2,1
  811618:	e0bff18d 	sth	r2,-58(fp)
  81161c:	00001006 	br	811660 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  811620:	e0bff103 	ldbu	r2,-60(fp)
  811624:	10800114 	ori	r2,r2,4
  811628:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  81162c:	00000c06 	br	811660 <OSEventPendMulti+0x3d4>
  811630:	e0bff017 	ldw	r2,-64(fp)
  811634:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811638:	e0bfee17 	ldw	r2,-72(fp)
  81163c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  811640:	e0bff717 	ldw	r2,-36(fp)
  811644:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  811648:	e0c00217 	ldw	r3,8(fp)
  81164c:	00800044 	movi	r2,1
  811650:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  811654:	e0bff18b 	ldhu	r2,-58(fp)
  811658:	e0bfff15 	stw	r2,-4(fp)
  81165c:	0000b206 	br	811928 <OSEventPendMulti+0x69c>
        }
        pevents++;
  811660:	e0bff517 	ldw	r2,-44(fp)
  811664:	10800104 	addi	r2,r2,4
  811668:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  81166c:	e0bff517 	ldw	r2,-44(fp)
  811670:	10800017 	ldw	r2,0(r2)
  811674:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  811678:	e0bff417 	ldw	r2,-48(fp)
  81167c:	1004c03a 	cmpne	r2,r2,zero
  811680:	103f6e1e 	bne	r2,zero,81143c <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  811684:	e0bff203 	ldbu	r2,-56(fp)
  811688:	10800058 	cmpnei	r2,r2,1
  81168c:	10000b1e 	bne	r2,zero,8116bc <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  811690:	e0bff717 	ldw	r2,-36(fp)
  811694:	10000015 	stw	zero,0(r2)
  811698:	e0bff017 	ldw	r2,-64(fp)
  81169c:	e0bfed15 	stw	r2,-76(fp)
  8116a0:	e0bfed17 	ldw	r2,-76(fp)
  8116a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  8116a8:	e0800217 	ldw	r2,8(fp)
  8116ac:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  8116b0:	e0fff18b 	ldhu	r3,-58(fp)
  8116b4:	e0ffff15 	stw	r3,-4(fp)
  8116b8:	00009b06 	br	811928 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  8116bc:	d1272e17 	ldw	r4,-25416(gp)
  8116c0:	d0a72e17 	ldw	r2,-25416(gp)
  8116c4:	10c00c03 	ldbu	r3,48(r2)
  8116c8:	e0bff103 	ldbu	r2,-60(fp)
  8116cc:	1884b03a 	or	r2,r3,r2
  8116d0:	1007883a 	mov	r3,r2
  8116d4:	00bfe004 	movi	r2,-128
  8116d8:	1884b03a 	or	r2,r3,r2
  8116dc:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8116e0:	d0a72e17 	ldw	r2,-25416(gp)
  8116e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  8116e8:	d0e72e17 	ldw	r3,-25416(gp)
  8116ec:	e0bff90b 	ldhu	r2,-28(fp)
  8116f0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  8116f4:	e13ff617 	ldw	r4,-40(fp)
  8116f8:	08122bc0 	call	8122bc <OS_EventTaskWaitMulti>
  8116fc:	e0bff017 	ldw	r2,-64(fp)
  811700:	e0bfec15 	stw	r2,-80(fp)
  811704:	e0bfec17 	ldw	r2,-80(fp)
  811708:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  81170c:	0812a580 	call	812a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811710:	0005303a 	rdctl	r2,status
  811714:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811718:	e0ffeb17 	ldw	r3,-84(fp)
  81171c:	00bfff84 	movi	r2,-2
  811720:	1884703a 	and	r2,r3,r2
  811724:	1001703a 	wrctl	status,r2
  
  return context;
  811728:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  81172c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  811730:	d0a72e17 	ldw	r2,-25416(gp)
  811734:	10800c43 	ldbu	r2,49(r2)
  811738:	10803fcc 	andi	r2,r2,255
  81173c:	e0bffc15 	stw	r2,-16(fp)
  811740:	e0fffc17 	ldw	r3,-16(fp)
  811744:	1805003a 	cmpeq	r2,r3,zero
  811748:	1000041e 	bne	r2,zero,81175c <OSEventPendMulti+0x4d0>
  81174c:	e0fffc17 	ldw	r3,-16(fp)
  811750:	188000a0 	cmpeqi	r2,r3,2
  811754:	1000011e 	bne	r2,zero,81175c <OSEventPendMulti+0x4d0>
  811758:	00001906 	br	8117c0 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  81175c:	d0a72e17 	ldw	r2,-25416(gp)
  811760:	10800717 	ldw	r2,28(r2)
  811764:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  811768:	e0bff417 	ldw	r2,-48(fp)
  81176c:	1005003a 	cmpeq	r2,r2,zero
  811770:	10000c1e 	bne	r2,zero,8117a4 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  811774:	e0fff717 	ldw	r3,-36(fp)
  811778:	e0bff417 	ldw	r2,-48(fp)
  81177c:	18800015 	stw	r2,0(r3)
  811780:	e0bff717 	ldw	r2,-36(fp)
  811784:	10800104 	addi	r2,r2,4
  811788:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  81178c:	e0bff717 	ldw	r2,-36(fp)
  811790:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  811794:	e0bff18b 	ldhu	r2,-58(fp)
  811798:	10800044 	addi	r2,r2,1
  81179c:	e0bff18d 	sth	r2,-58(fp)
  8117a0:	00000a06 	br	8117cc <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  8117a4:	d0a72e17 	ldw	r2,-25416(gp)
  8117a8:	00c00044 	movi	r3,1
  8117ac:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8117b0:	d1272e17 	ldw	r4,-25416(gp)
  8117b4:	e17ff617 	ldw	r5,-40(fp)
  8117b8:	08124c80 	call	8124c8 <OS_EventTaskRemoveMulti>
             }
			 break;
  8117bc:	00000306 	br	8117cc <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8117c0:	d1272e17 	ldw	r4,-25416(gp)
  8117c4:	e17ff617 	ldw	r5,-40(fp)
  8117c8:	08124c80 	call	8124c8 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  8117cc:	d0a72e17 	ldw	r2,-25416(gp)
  8117d0:	10800c43 	ldbu	r2,49(r2)
  8117d4:	10803fcc 	andi	r2,r2,255
  8117d8:	e0bffb15 	stw	r2,-20(fp)
  8117dc:	e0fffb17 	ldw	r3,-20(fp)
  8117e0:	1805003a 	cmpeq	r2,r3,zero
  8117e4:	1000041e 	bne	r2,zero,8117f8 <OSEventPendMulti+0x56c>
  8117e8:	e0fffb17 	ldw	r3,-20(fp)
  8117ec:	188000a0 	cmpeqi	r2,r3,2
  8117f0:	10002c1e 	bne	r2,zero,8118a4 <OSEventPendMulti+0x618>
  8117f4:	00003406 	br	8118c8 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  8117f8:	e0bff417 	ldw	r2,-48(fp)
  8117fc:	10800003 	ldbu	r2,0(r2)
  811800:	10803fcc 	andi	r2,r2,255
  811804:	e0bffa15 	stw	r2,-24(fp)
  811808:	e0fffa17 	ldw	r3,-24(fp)
  81180c:	18800050 	cmplti	r2,r3,1
  811810:	1000151e 	bne	r2,zero,811868 <OSEventPendMulti+0x5dc>
  811814:	e0fffa17 	ldw	r3,-24(fp)
  811818:	188000d0 	cmplti	r2,r3,3
  81181c:	10000a1e 	bne	r2,zero,811848 <OSEventPendMulti+0x5bc>
  811820:	e0fffa17 	ldw	r3,-24(fp)
  811824:	188000e0 	cmpeqi	r2,r3,3
  811828:	1000011e 	bne	r2,zero,811830 <OSEventPendMulti+0x5a4>
  81182c:	00000e06 	br	811868 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  811830:	e0bff817 	ldw	r2,-32(fp)
  811834:	10000015 	stw	zero,0(r2)
  811838:	e0bff817 	ldw	r2,-32(fp)
  81183c:	10800104 	addi	r2,r2,4
  811840:	e0bff815 	stw	r2,-32(fp)
                      break;
  811844:	00001406 	br	811898 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  811848:	d0a72e17 	ldw	r2,-25416(gp)
  81184c:	10c00917 	ldw	r3,36(r2)
  811850:	e0bff817 	ldw	r2,-32(fp)
  811854:	10c00015 	stw	r3,0(r2)
  811858:	e0bff817 	ldw	r2,-32(fp)
  81185c:	10800104 	addi	r2,r2,4
  811860:	e0bff815 	stw	r2,-32(fp)
                      break;
  811864:	00000c06 	br	811898 <OSEventPendMulti+0x60c>
  811868:	e0bff017 	ldw	r2,-64(fp)
  81186c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811870:	e0bfea17 	ldw	r2,-88(fp)
  811874:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  811878:	e0bff717 	ldw	r2,-36(fp)
  81187c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  811880:	e0c00217 	ldw	r3,8(fp)
  811884:	00800044 	movi	r2,1
  811888:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  81188c:	e0bff18b 	ldhu	r2,-58(fp)
  811890:	e0bfff15 	stw	r2,-4(fp)
  811894:	00002406 	br	811928 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  811898:	e0800217 	ldw	r2,8(fp)
  81189c:	10000005 	stb	zero,0(r2)
             break;
  8118a0:	00001106 	br	8118e8 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  8118a4:	e0bff817 	ldw	r2,-32(fp)
  8118a8:	10000015 	stw	zero,0(r2)
  8118ac:	e0bff817 	ldw	r2,-32(fp)
  8118b0:	10800104 	addi	r2,r2,4
  8118b4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  8118b8:	e0c00217 	ldw	r3,8(fp)
  8118bc:	00800384 	movi	r2,14
  8118c0:	18800005 	stb	r2,0(r3)
             break;
  8118c4:	00000806 	br	8118e8 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  8118c8:	e0bff817 	ldw	r2,-32(fp)
  8118cc:	10000015 	stw	zero,0(r2)
  8118d0:	e0bff817 	ldw	r2,-32(fp)
  8118d4:	10800104 	addi	r2,r2,4
  8118d8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  8118dc:	e0c00217 	ldw	r3,8(fp)
  8118e0:	00800284 	movi	r2,10
  8118e4:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  8118e8:	d0a72e17 	ldw	r2,-25416(gp)
  8118ec:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  8118f0:	d0a72e17 	ldw	r2,-25416(gp)
  8118f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  8118f8:	d0a72e17 	ldw	r2,-25416(gp)
  8118fc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  811900:	d0a72e17 	ldw	r2,-25416(gp)
  811904:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  811908:	d0a72e17 	ldw	r2,-25416(gp)
  81190c:	10000915 	stw	zero,36(r2)
  811910:	e0bff017 	ldw	r2,-64(fp)
  811914:	e0bfe915 	stw	r2,-92(fp)
  811918:	e0bfe917 	ldw	r2,-92(fp)
  81191c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  811920:	e0fff18b 	ldhu	r3,-58(fp)
  811924:	e0ffff15 	stw	r3,-4(fp)
  811928:	e0bfff17 	ldw	r2,-4(fp)
}
  81192c:	e037883a 	mov	sp,fp
  811930:	dfc00117 	ldw	ra,4(sp)
  811934:	df000017 	ldw	fp,0(sp)
  811938:	dec00204 	addi	sp,sp,8
  81193c:	f800283a 	ret

00811940 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  811940:	defffe04 	addi	sp,sp,-8
  811944:	dfc00115 	stw	ra,4(sp)
  811948:	df000015 	stw	fp,0(sp)
  81194c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  811950:	081bb380 	call	81bb38 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  811954:	08127100 	call	812710 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  811958:	08127540 	call	812754 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  81195c:	08128b80 	call	8128b8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  811960:	08126340 	call	812634 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  811964:	08149680 	call	814968 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  811968:	08153400 	call	815340 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  81196c:	081669c0 	call	81669c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  811970:	08127c00 	call	8127c0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  811974:	081283c0 	call	81283c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  811978:	081bb540 	call	81bb54 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  81197c:	08131400 	call	813140 <OSDebugInit>
#endif
}
  811980:	e037883a 	mov	sp,fp
  811984:	dfc00117 	ldw	ra,4(sp)
  811988:	df000017 	ldw	fp,0(sp)
  81198c:	dec00204 	addi	sp,sp,8
  811990:	f800283a 	ret

00811994 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  811994:	defffc04 	addi	sp,sp,-16
  811998:	df000315 	stw	fp,12(sp)
  81199c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8119a0:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  8119a4:	d0a71f43 	ldbu	r2,-25475(gp)
  8119a8:	10803fcc 	andi	r2,r2,255
  8119ac:	10800058 	cmpnei	r2,r2,1
  8119b0:	1000131e 	bne	r2,zero,811a00 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119b4:	0005303a 	rdctl	r2,status
  8119b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119bc:	e0fffe17 	ldw	r3,-8(fp)
  8119c0:	00bfff84 	movi	r2,-2
  8119c4:	1884703a 	and	r2,r3,r2
  8119c8:	1001703a 	wrctl	status,r2
  
  return context;
  8119cc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  8119d0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  8119d4:	d0a72d03 	ldbu	r2,-25420(gp)
  8119d8:	10803fcc 	andi	r2,r2,255
  8119dc:	10803fe0 	cmpeqi	r2,r2,255
  8119e0:	1000031e 	bne	r2,zero,8119f0 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  8119e4:	d0a72d03 	ldbu	r2,-25420(gp)
  8119e8:	10800044 	addi	r2,r2,1
  8119ec:	d0a72d05 	stb	r2,-25420(gp)
  8119f0:	e0bfff17 	ldw	r2,-4(fp)
  8119f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119f8:	e0bffd17 	ldw	r2,-12(fp)
  8119fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  811a00:	e037883a 	mov	sp,fp
  811a04:	df000017 	ldw	fp,0(sp)
  811a08:	dec00104 	addi	sp,sp,4
  811a0c:	f800283a 	ret

00811a10 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  811a10:	defffb04 	addi	sp,sp,-20
  811a14:	dfc00415 	stw	ra,16(sp)
  811a18:	df000315 	stw	fp,12(sp)
  811a1c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811a20:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  811a24:	d0a71f43 	ldbu	r2,-25475(gp)
  811a28:	10803fcc 	andi	r2,r2,255
  811a2c:	10800058 	cmpnei	r2,r2,1
  811a30:	1000321e 	bne	r2,zero,811afc <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811a34:	0005303a 	rdctl	r2,status
  811a38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a3c:	e0fffe17 	ldw	r3,-8(fp)
  811a40:	00bfff84 	movi	r2,-2
  811a44:	1884703a 	and	r2,r3,r2
  811a48:	1001703a 	wrctl	status,r2
  
  return context;
  811a4c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811a50:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  811a54:	d0a72d03 	ldbu	r2,-25420(gp)
  811a58:	10803fcc 	andi	r2,r2,255
  811a5c:	1005003a 	cmpeq	r2,r2,zero
  811a60:	1000031e 	bne	r2,zero,811a70 <OSIntExit+0x60>
            OSIntNesting--;
  811a64:	d0a72d03 	ldbu	r2,-25420(gp)
  811a68:	10bfffc4 	addi	r2,r2,-1
  811a6c:	d0a72d05 	stb	r2,-25420(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  811a70:	d0a72d03 	ldbu	r2,-25420(gp)
  811a74:	10803fcc 	andi	r2,r2,255
  811a78:	1004c03a 	cmpne	r2,r2,zero
  811a7c:	10001b1e 	bne	r2,zero,811aec <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  811a80:	d0a71f03 	ldbu	r2,-25476(gp)
  811a84:	10803fcc 	andi	r2,r2,255
  811a88:	1004c03a 	cmpne	r2,r2,zero
  811a8c:	1000171e 	bne	r2,zero,811aec <OSIntExit+0xdc>
                OS_SchedNew();
  811a90:	0812b2c0 	call	812b2c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  811a94:	d0a72103 	ldbu	r2,-25468(gp)
  811a98:	d0e72143 	ldbu	r3,-25467(gp)
  811a9c:	11003fcc 	andi	r4,r2,255
  811aa0:	18803fcc 	andi	r2,r3,255
  811aa4:	20801126 	beq	r4,r2,811aec <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  811aa8:	d0a72103 	ldbu	r2,-25468(gp)
  811aac:	10803fcc 	andi	r2,r2,255
  811ab0:	00c020f4 	movhi	r3,131
  811ab4:	18e56304 	addi	r3,r3,-27252
  811ab8:	1085883a 	add	r2,r2,r2
  811abc:	1085883a 	add	r2,r2,r2
  811ac0:	10c5883a 	add	r2,r2,r3
  811ac4:	10800017 	ldw	r2,0(r2)
  811ac8:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  811acc:	d0e72917 	ldw	r3,-25436(gp)
  811ad0:	18800e17 	ldw	r2,56(r3)
  811ad4:	10800044 	addi	r2,r2,1
  811ad8:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  811adc:	d0a72417 	ldw	r2,-25456(gp)
  811ae0:	10800044 	addi	r2,r2,1
  811ae4:	d0a72415 	stw	r2,-25456(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  811ae8:	081b6c40 	call	81b6c4 <OSCtxSw>
  811aec:	e0bfff17 	ldw	r2,-4(fp)
  811af0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811af4:	e0bffd17 	ldw	r2,-12(fp)
  811af8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  811afc:	e037883a 	mov	sp,fp
  811b00:	dfc00117 	ldw	ra,4(sp)
  811b04:	df000017 	ldw	fp,0(sp)
  811b08:	dec00204 	addi	sp,sp,8
  811b0c:	f800283a 	ret

00811b10 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  811b10:	defffc04 	addi	sp,sp,-16
  811b14:	df000315 	stw	fp,12(sp)
  811b18:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811b1c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  811b20:	d0a71f43 	ldbu	r2,-25475(gp)
  811b24:	10803fcc 	andi	r2,r2,255
  811b28:	10800058 	cmpnei	r2,r2,1
  811b2c:	1000171e 	bne	r2,zero,811b8c <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b30:	0005303a 	rdctl	r2,status
  811b34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b38:	e0fffe17 	ldw	r3,-8(fp)
  811b3c:	00bfff84 	movi	r2,-2
  811b40:	1884703a 	and	r2,r3,r2
  811b44:	1001703a 	wrctl	status,r2
  
  return context;
  811b48:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811b4c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  811b50:	d0a72d03 	ldbu	r2,-25420(gp)
  811b54:	10803fcc 	andi	r2,r2,255
  811b58:	1004c03a 	cmpne	r2,r2,zero
  811b5c:	1000071e 	bne	r2,zero,811b7c <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  811b60:	d0a71f03 	ldbu	r2,-25476(gp)
  811b64:	10803fcc 	andi	r2,r2,255
  811b68:	10803fe0 	cmpeqi	r2,r2,255
  811b6c:	1000031e 	bne	r2,zero,811b7c <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  811b70:	d0a71f03 	ldbu	r2,-25476(gp)
  811b74:	10800044 	addi	r2,r2,1
  811b78:	d0a71f05 	stb	r2,-25476(gp)
  811b7c:	e0bfff17 	ldw	r2,-4(fp)
  811b80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b84:	e0bffd17 	ldw	r2,-12(fp)
  811b88:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  811b8c:	e037883a 	mov	sp,fp
  811b90:	df000017 	ldw	fp,0(sp)
  811b94:	dec00104 	addi	sp,sp,4
  811b98:	f800283a 	ret

00811b9c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  811b9c:	defff804 	addi	sp,sp,-32
  811ba0:	dfc00715 	stw	ra,28(sp)
  811ba4:	df000615 	stw	fp,24(sp)
  811ba8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811bac:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  811bb0:	d0a71f43 	ldbu	r2,-25475(gp)
  811bb4:	10803fcc 	andi	r2,r2,255
  811bb8:	10800058 	cmpnei	r2,r2,1
  811bbc:	10002b1e 	bne	r2,zero,811c6c <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811bc0:	0005303a 	rdctl	r2,status
  811bc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811bc8:	e0fffe17 	ldw	r3,-8(fp)
  811bcc:	00bfff84 	movi	r2,-2
  811bd0:	1884703a 	and	r2,r3,r2
  811bd4:	1001703a 	wrctl	status,r2
  
  return context;
  811bd8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  811bdc:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  811be0:	d0a71f03 	ldbu	r2,-25476(gp)
  811be4:	10803fcc 	andi	r2,r2,255
  811be8:	1005003a 	cmpeq	r2,r2,zero
  811bec:	10001b1e 	bne	r2,zero,811c5c <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  811bf0:	d0a71f03 	ldbu	r2,-25476(gp)
  811bf4:	10bfffc4 	addi	r2,r2,-1
  811bf8:	d0a71f05 	stb	r2,-25476(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  811bfc:	d0a71f03 	ldbu	r2,-25476(gp)
  811c00:	10803fcc 	andi	r2,r2,255
  811c04:	1004c03a 	cmpne	r2,r2,zero
  811c08:	10000f1e 	bne	r2,zero,811c48 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  811c0c:	d0a72d03 	ldbu	r2,-25420(gp)
  811c10:	10803fcc 	andi	r2,r2,255
  811c14:	1004c03a 	cmpne	r2,r2,zero
  811c18:	1000061e 	bne	r2,zero,811c34 <OSSchedUnlock+0x98>
  811c1c:	e0bfff17 	ldw	r2,-4(fp)
  811c20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811c24:	e0bffd17 	ldw	r2,-12(fp)
  811c28:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  811c2c:	0812a580 	call	812a58 <OS_Sched>
  811c30:	00000e06 	br	811c6c <OSSchedUnlock+0xd0>
  811c34:	e0bfff17 	ldw	r2,-4(fp)
  811c38:	e0bffc15 	stw	r2,-16(fp)
  811c3c:	e0bffc17 	ldw	r2,-16(fp)
  811c40:	1001703a 	wrctl	status,r2
  811c44:	00000906 	br	811c6c <OSSchedUnlock+0xd0>
  811c48:	e0bfff17 	ldw	r2,-4(fp)
  811c4c:	e0bffb15 	stw	r2,-20(fp)
  811c50:	e0bffb17 	ldw	r2,-20(fp)
  811c54:	1001703a 	wrctl	status,r2
  811c58:	00000406 	br	811c6c <OSSchedUnlock+0xd0>
  811c5c:	e0bfff17 	ldw	r2,-4(fp)
  811c60:	e0bffa15 	stw	r2,-24(fp)
  811c64:	e0bffa17 	ldw	r2,-24(fp)
  811c68:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  811c6c:	e037883a 	mov	sp,fp
  811c70:	dfc00117 	ldw	ra,4(sp)
  811c74:	df000017 	ldw	fp,0(sp)
  811c78:	dec00204 	addi	sp,sp,8
  811c7c:	f800283a 	ret

00811c80 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  811c80:	defffe04 	addi	sp,sp,-8
  811c84:	dfc00115 	stw	ra,4(sp)
  811c88:	df000015 	stw	fp,0(sp)
  811c8c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  811c90:	d0a71f43 	ldbu	r2,-25475(gp)
  811c94:	10803fcc 	andi	r2,r2,255
  811c98:	1004c03a 	cmpne	r2,r2,zero
  811c9c:	10000f1e 	bne	r2,zero,811cdc <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  811ca0:	0812b2c0 	call	812b2c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  811ca4:	d0a72103 	ldbu	r2,-25468(gp)
  811ca8:	d0a72145 	stb	r2,-25467(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  811cac:	d0a72103 	ldbu	r2,-25468(gp)
  811cb0:	10803fcc 	andi	r2,r2,255
  811cb4:	00c020f4 	movhi	r3,131
  811cb8:	18e56304 	addi	r3,r3,-27252
  811cbc:	1085883a 	add	r2,r2,r2
  811cc0:	1085883a 	add	r2,r2,r2
  811cc4:	10c5883a 	add	r2,r2,r3
  811cc8:	10800017 	ldw	r2,0(r2)
  811ccc:	d0a72915 	stw	r2,-25436(gp)
        OSTCBCur      = OSTCBHighRdy;
  811cd0:	d0a72917 	ldw	r2,-25436(gp)
  811cd4:	d0a72e15 	stw	r2,-25416(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  811cd8:	081b7500 	call	81b750 <OSStartHighRdy>
    }
}
  811cdc:	e037883a 	mov	sp,fp
  811ce0:	dfc00117 	ldw	ra,4(sp)
  811ce4:	df000017 	ldw	fp,0(sp)
  811ce8:	dec00204 	addi	sp,sp,8
  811cec:	f800283a 	ret

00811cf0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  811cf0:	defff904 	addi	sp,sp,-28
  811cf4:	dfc00615 	stw	ra,24(sp)
  811cf8:	df000515 	stw	fp,20(sp)
  811cfc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811d00:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  811d04:	01000084 	movi	r4,2
  811d08:	0818d500 	call	818d50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d0c:	0005303a 	rdctl	r2,status
  811d10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d14:	e0fffe17 	ldw	r3,-8(fp)
  811d18:	00bfff84 	movi	r2,-2
  811d1c:	1884703a 	and	r2,r3,r2
  811d20:	1001703a 	wrctl	status,r2
  
  return context;
  811d24:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  811d28:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  811d2c:	d0272015 	stw	zero,-25472(gp)
  811d30:	e0bfff17 	ldw	r2,-4(fp)
  811d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d38:	e0bffd17 	ldw	r2,-12(fp)
  811d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  811d40:	01001904 	movi	r4,100
  811d44:	0818d500 	call	818d50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d48:	0005303a 	rdctl	r2,status
  811d4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d50:	e0fffc17 	ldw	r3,-16(fp)
  811d54:	00bfff84 	movi	r2,-2
  811d58:	1884703a 	and	r2,r3,r2
  811d5c:	1001703a 	wrctl	status,r2
  
  return context;
  811d60:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  811d64:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  811d68:	d0a72017 	ldw	r2,-25472(gp)
  811d6c:	d0a72515 	stw	r2,-25452(gp)
    OSStatRdy    = OS_TRUE;
  811d70:	00800044 	movi	r2,1
  811d74:	d0a73105 	stb	r2,-25404(gp)
  811d78:	e0bfff17 	ldw	r2,-4(fp)
  811d7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d80:	e0bffb17 	ldw	r2,-20(fp)
  811d84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  811d88:	e037883a 	mov	sp,fp
  811d8c:	dfc00117 	ldw	ra,4(sp)
  811d90:	df000017 	ldw	fp,0(sp)
  811d94:	dec00204 	addi	sp,sp,8
  811d98:	f800283a 	ret

00811d9c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  811d9c:	defff604 	addi	sp,sp,-40
  811da0:	dfc00915 	stw	ra,36(sp)
  811da4:	df000815 	stw	fp,32(sp)
  811da8:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  811dac:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  811db0:	081bb1c0 	call	81bb1c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811db4:	0005303a 	rdctl	r2,status
  811db8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811dbc:	e0fffb17 	ldw	r3,-20(fp)
  811dc0:	00bfff84 	movi	r2,-2
  811dc4:	1884703a 	and	r2,r3,r2
  811dc8:	1001703a 	wrctl	status,r2
  
  return context;
  811dcc:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  811dd0:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  811dd4:	d0a72f17 	ldw	r2,-25412(gp)
  811dd8:	10800044 	addi	r2,r2,1
  811ddc:	d0a72f15 	stw	r2,-25412(gp)
  811de0:	e0bffc17 	ldw	r2,-16(fp)
  811de4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811de8:	e0bffa17 	ldw	r2,-24(fp)
  811dec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  811df0:	d0a71f43 	ldbu	r2,-25475(gp)
  811df4:	10803fcc 	andi	r2,r2,255
  811df8:	10800058 	cmpnei	r2,r2,1
  811dfc:	1000721e 	bne	r2,zero,811fc8 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  811e00:	d0a72303 	ldbu	r2,-25460(gp)
  811e04:	10803fcc 	andi	r2,r2,255
  811e08:	e0bfff15 	stw	r2,-4(fp)
  811e0c:	e0ffff17 	ldw	r3,-4(fp)
  811e10:	18800060 	cmpeqi	r2,r3,1
  811e14:	10000a1e 	bne	r2,zero,811e40 <OSTimeTick+0xa4>
  811e18:	e0ffff17 	ldw	r3,-4(fp)
  811e1c:	188000a0 	cmpeqi	r2,r3,2
  811e20:	1000091e 	bne	r2,zero,811e48 <OSTimeTick+0xac>
  811e24:	e0ffff17 	ldw	r3,-4(fp)
  811e28:	1805003a 	cmpeq	r2,r3,zero
  811e2c:	1000011e 	bne	r2,zero,811e34 <OSTimeTick+0x98>
  811e30:	00000a06 	br	811e5c <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  811e34:	00800044 	movi	r2,1
  811e38:	e0bffd05 	stb	r2,-12(fp)
                 break;
  811e3c:	00000a06 	br	811e68 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  811e40:	e03ffd05 	stb	zero,-12(fp)
                 break;
  811e44:	00000806 	br	811e68 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  811e48:	00800044 	movi	r2,1
  811e4c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  811e50:	00800044 	movi	r2,1
  811e54:	d0a72305 	stb	r2,-25460(gp)
                 break;
  811e58:	00000306 	br	811e68 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  811e5c:	00800044 	movi	r2,1
  811e60:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  811e64:	d0272305 	stb	zero,-25460(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  811e68:	e0bffd03 	ldbu	r2,-12(fp)
  811e6c:	1005003a 	cmpeq	r2,r2,zero
  811e70:	1000551e 	bne	r2,zero,811fc8 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  811e74:	d0a72217 	ldw	r2,-25464(gp)
  811e78:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  811e7c:	00004d06 	br	811fb4 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e80:	0005303a 	rdctl	r2,status
  811e84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e88:	e0fff917 	ldw	r3,-28(fp)
  811e8c:	00bfff84 	movi	r2,-2
  811e90:	1884703a 	and	r2,r3,r2
  811e94:	1001703a 	wrctl	status,r2
  
  return context;
  811e98:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  811e9c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  811ea0:	e0bffe17 	ldw	r2,-8(fp)
  811ea4:	10800b8b 	ldhu	r2,46(r2)
  811ea8:	10bfffcc 	andi	r2,r2,65535
  811eac:	1005003a 	cmpeq	r2,r2,zero
  811eb0:	1000391e 	bne	r2,zero,811f98 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  811eb4:	e0bffe17 	ldw	r2,-8(fp)
  811eb8:	10800b8b 	ldhu	r2,46(r2)
  811ebc:	10bfffc4 	addi	r2,r2,-1
  811ec0:	1007883a 	mov	r3,r2
  811ec4:	e0bffe17 	ldw	r2,-8(fp)
  811ec8:	10c00b8d 	sth	r3,46(r2)
  811ecc:	e0bffe17 	ldw	r2,-8(fp)
  811ed0:	10800b8b 	ldhu	r2,46(r2)
  811ed4:	10bfffcc 	andi	r2,r2,65535
  811ed8:	1004c03a 	cmpne	r2,r2,zero
  811edc:	10002e1e 	bne	r2,zero,811f98 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  811ee0:	e0bffe17 	ldw	r2,-8(fp)
  811ee4:	10800c03 	ldbu	r2,48(r2)
  811ee8:	10803fcc 	andi	r2,r2,255
  811eec:	10800dcc 	andi	r2,r2,55
  811ef0:	1005003a 	cmpeq	r2,r2,zero
  811ef4:	10000b1e 	bne	r2,zero,811f24 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  811ef8:	e0bffe17 	ldw	r2,-8(fp)
  811efc:	10c00c03 	ldbu	r3,48(r2)
  811f00:	00bff204 	movi	r2,-56
  811f04:	1884703a 	and	r2,r3,r2
  811f08:	1007883a 	mov	r3,r2
  811f0c:	e0bffe17 	ldw	r2,-8(fp)
  811f10:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  811f14:	e0fffe17 	ldw	r3,-8(fp)
  811f18:	00800044 	movi	r2,1
  811f1c:	18800c45 	stb	r2,49(r3)
  811f20:	00000206 	br	811f2c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  811f24:	e0bffe17 	ldw	r2,-8(fp)
  811f28:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  811f2c:	e0bffe17 	ldw	r2,-8(fp)
  811f30:	10800c03 	ldbu	r2,48(r2)
  811f34:	10803fcc 	andi	r2,r2,255
  811f38:	1080020c 	andi	r2,r2,8
  811f3c:	1004c03a 	cmpne	r2,r2,zero
  811f40:	1000151e 	bne	r2,zero,811f98 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  811f44:	e0bffe17 	ldw	r2,-8(fp)
  811f48:	10c00d83 	ldbu	r3,54(r2)
  811f4c:	d0a72b03 	ldbu	r2,-25428(gp)
  811f50:	1884b03a 	or	r2,r3,r2
  811f54:	d0a72b05 	stb	r2,-25428(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  811f58:	e0bffe17 	ldw	r2,-8(fp)
  811f5c:	10800d03 	ldbu	r2,52(r2)
  811f60:	11003fcc 	andi	r4,r2,255
  811f64:	e0bffe17 	ldw	r2,-8(fp)
  811f68:	10800d03 	ldbu	r2,52(r2)
  811f6c:	10c03fcc 	andi	r3,r2,255
  811f70:	d0a72b44 	addi	r2,gp,-25427
  811f74:	1885883a 	add	r2,r3,r2
  811f78:	10c00003 	ldbu	r3,0(r2)
  811f7c:	e0bffe17 	ldw	r2,-8(fp)
  811f80:	10800d43 	ldbu	r2,53(r2)
  811f84:	1884b03a 	or	r2,r3,r2
  811f88:	1007883a 	mov	r3,r2
  811f8c:	d0a72b44 	addi	r2,gp,-25427
  811f90:	2085883a 	add	r2,r4,r2
  811f94:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  811f98:	e0bffe17 	ldw	r2,-8(fp)
  811f9c:	10800517 	ldw	r2,20(r2)
  811fa0:	e0bffe15 	stw	r2,-8(fp)
  811fa4:	e0bffc17 	ldw	r2,-16(fp)
  811fa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fac:	e0bff817 	ldw	r2,-32(fp)
  811fb0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  811fb4:	e0bffe17 	ldw	r2,-8(fp)
  811fb8:	10800c83 	ldbu	r2,50(r2)
  811fbc:	10803fcc 	andi	r2,r2,255
  811fc0:	10800518 	cmpnei	r2,r2,20
  811fc4:	103fae1e 	bne	r2,zero,811e80 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  811fc8:	e037883a 	mov	sp,fp
  811fcc:	dfc00117 	ldw	ra,4(sp)
  811fd0:	df000017 	ldw	fp,0(sp)
  811fd4:	dec00204 	addi	sp,sp,8
  811fd8:	f800283a 	ret

00811fdc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  811fdc:	deffff04 	addi	sp,sp,-4
  811fe0:	df000015 	stw	fp,0(sp)
  811fe4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  811fe8:	00804784 	movi	r2,286
}
  811fec:	e037883a 	mov	sp,fp
  811ff0:	df000017 	ldw	fp,0(sp)
  811ff4:	dec00104 	addi	sp,sp,4
  811ff8:	f800283a 	ret

00811ffc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  811ffc:	deffff04 	addi	sp,sp,-4
  812000:	df000015 	stw	fp,0(sp)
  812004:	d839883a 	mov	fp,sp
}
  812008:	e037883a 	mov	sp,fp
  81200c:	df000017 	ldw	fp,0(sp)
  812010:	dec00104 	addi	sp,sp,4
  812014:	f800283a 	ret

00812018 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  812018:	defff804 	addi	sp,sp,-32
  81201c:	dfc00715 	stw	ra,28(sp)
  812020:	df000615 	stw	fp,24(sp)
  812024:	df000604 	addi	fp,sp,24
  812028:	e13ffc15 	stw	r4,-16(fp)
  81202c:	e17ffd15 	stw	r5,-12(fp)
  812030:	e1bffe05 	stb	r6,-8(fp)
  812034:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  812038:	e0bffc17 	ldw	r2,-16(fp)
  81203c:	10800283 	ldbu	r2,10(r2)
  812040:	10c03fcc 	andi	r3,r2,255
  812044:	008020b4 	movhi	r2,130
  812048:	10b25d04 	addi	r2,r2,-13964
  81204c:	10c5883a 	add	r2,r2,r3
  812050:	10800003 	ldbu	r2,0(r2)
  812054:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  812058:	e0fffa83 	ldbu	r3,-22(fp)
  81205c:	e0bffc17 	ldw	r2,-16(fp)
  812060:	1885883a 	add	r2,r3,r2
  812064:	10800204 	addi	r2,r2,8
  812068:	108000c3 	ldbu	r2,3(r2)
  81206c:	10c03fcc 	andi	r3,r2,255
  812070:	008020b4 	movhi	r2,130
  812074:	10b25d04 	addi	r2,r2,-13964
  812078:	10c5883a 	add	r2,r2,r3
  81207c:	10800003 	ldbu	r2,0(r2)
  812080:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  812084:	e0bffa83 	ldbu	r2,-22(fp)
  812088:	100490fa 	slli	r2,r2,3
  81208c:	1007883a 	mov	r3,r2
  812090:	e0bffa43 	ldbu	r2,-23(fp)
  812094:	1885883a 	add	r2,r3,r2
  812098:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  81209c:	e0bffa03 	ldbu	r2,-24(fp)
  8120a0:	00c020f4 	movhi	r3,131
  8120a4:	18e56304 	addi	r3,r3,-27252
  8120a8:	1085883a 	add	r2,r2,r2
  8120ac:	1085883a 	add	r2,r2,r2
  8120b0:	10c5883a 	add	r2,r2,r3
  8120b4:	10800017 	ldw	r2,0(r2)
  8120b8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  8120bc:	e0bffb17 	ldw	r2,-20(fp)
  8120c0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  8120c4:	e0fffb17 	ldw	r3,-20(fp)
  8120c8:	e0bffd17 	ldw	r2,-12(fp)
  8120cc:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  8120d0:	e0bffb17 	ldw	r2,-20(fp)
  8120d4:	10800c03 	ldbu	r2,48(r2)
  8120d8:	1007883a 	mov	r3,r2
  8120dc:	e0bffe03 	ldbu	r2,-8(fp)
  8120e0:	0084303a 	nor	r2,zero,r2
  8120e4:	1884703a 	and	r2,r3,r2
  8120e8:	1007883a 	mov	r3,r2
  8120ec:	e0bffb17 	ldw	r2,-20(fp)
  8120f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  8120f4:	e0fffb17 	ldw	r3,-20(fp)
  8120f8:	e0bfff03 	ldbu	r2,-4(fp)
  8120fc:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  812100:	e0bffb17 	ldw	r2,-20(fp)
  812104:	10800c03 	ldbu	r2,48(r2)
  812108:	10803fcc 	andi	r2,r2,255
  81210c:	1080020c 	andi	r2,r2,8
  812110:	1004c03a 	cmpne	r2,r2,zero
  812114:	1000111e 	bne	r2,zero,81215c <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  812118:	e0bffb17 	ldw	r2,-20(fp)
  81211c:	10c00d83 	ldbu	r3,54(r2)
  812120:	d0a72b03 	ldbu	r2,-25428(gp)
  812124:	1884b03a 	or	r2,r3,r2
  812128:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  81212c:	e13ffa83 	ldbu	r4,-22(fp)
  812130:	e0fffa83 	ldbu	r3,-22(fp)
  812134:	d0a72b44 	addi	r2,gp,-25427
  812138:	1885883a 	add	r2,r3,r2
  81213c:	10c00003 	ldbu	r3,0(r2)
  812140:	e0bffb17 	ldw	r2,-20(fp)
  812144:	10800d43 	ldbu	r2,53(r2)
  812148:	1884b03a 	or	r2,r3,r2
  81214c:	1007883a 	mov	r3,r2
  812150:	d0a72b44 	addi	r2,gp,-25427
  812154:	2085883a 	add	r2,r4,r2
  812158:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  81215c:	e13ffb17 	ldw	r4,-20(fp)
  812160:	e17ffc17 	ldw	r5,-16(fp)
  812164:	08124100 	call	812410 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  812168:	e0bffb17 	ldw	r2,-20(fp)
  81216c:	10800817 	ldw	r2,32(r2)
  812170:	1005003a 	cmpeq	r2,r2,zero
  812174:	1000071e 	bne	r2,zero,812194 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  812178:	e0bffb17 	ldw	r2,-20(fp)
  81217c:	11400817 	ldw	r5,32(r2)
  812180:	e13ffb17 	ldw	r4,-20(fp)
  812184:	08124c80 	call	8124c8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  812188:	e0fffb17 	ldw	r3,-20(fp)
  81218c:	e0bffc17 	ldw	r2,-16(fp)
  812190:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  812194:	e0bffa03 	ldbu	r2,-24(fp)
}
  812198:	e037883a 	mov	sp,fp
  81219c:	dfc00117 	ldw	ra,4(sp)
  8121a0:	df000017 	ldw	fp,0(sp)
  8121a4:	dec00204 	addi	sp,sp,8
  8121a8:	f800283a 	ret

008121ac <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  8121ac:	defffd04 	addi	sp,sp,-12
  8121b0:	df000215 	stw	fp,8(sp)
  8121b4:	df000204 	addi	fp,sp,8
  8121b8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  8121bc:	d0e72e17 	ldw	r3,-25416(gp)
  8121c0:	e0bfff17 	ldw	r2,-4(fp)
  8121c4:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  8121c8:	d0a72e17 	ldw	r2,-25416(gp)
  8121cc:	10800d03 	ldbu	r2,52(r2)
  8121d0:	11003fcc 	andi	r4,r2,255
  8121d4:	d0a72e17 	ldw	r2,-25416(gp)
  8121d8:	10800d03 	ldbu	r2,52(r2)
  8121dc:	10c03fcc 	andi	r3,r2,255
  8121e0:	e0bfff17 	ldw	r2,-4(fp)
  8121e4:	1885883a 	add	r2,r3,r2
  8121e8:	10800204 	addi	r2,r2,8
  8121ec:	10c000c3 	ldbu	r3,3(r2)
  8121f0:	d0a72e17 	ldw	r2,-25416(gp)
  8121f4:	10800d43 	ldbu	r2,53(r2)
  8121f8:	1884b03a 	or	r2,r3,r2
  8121fc:	1007883a 	mov	r3,r2
  812200:	e0bfff17 	ldw	r2,-4(fp)
  812204:	2085883a 	add	r2,r4,r2
  812208:	10800204 	addi	r2,r2,8
  81220c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  812210:	e0bfff17 	ldw	r2,-4(fp)
  812214:	10c00283 	ldbu	r3,10(r2)
  812218:	d0a72e17 	ldw	r2,-25416(gp)
  81221c:	10800d83 	ldbu	r2,54(r2)
  812220:	1884b03a 	or	r2,r3,r2
  812224:	1007883a 	mov	r3,r2
  812228:	e0bfff17 	ldw	r2,-4(fp)
  81222c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  812230:	d0a72e17 	ldw	r2,-25416(gp)
  812234:	10800d03 	ldbu	r2,52(r2)
  812238:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  81223c:	e13ffe03 	ldbu	r4,-8(fp)
  812240:	e0fffe03 	ldbu	r3,-8(fp)
  812244:	d0a72b44 	addi	r2,gp,-25427
  812248:	1885883a 	add	r2,r3,r2
  81224c:	10800003 	ldbu	r2,0(r2)
  812250:	1007883a 	mov	r3,r2
  812254:	d0a72e17 	ldw	r2,-25416(gp)
  812258:	10800d43 	ldbu	r2,53(r2)
  81225c:	0084303a 	nor	r2,zero,r2
  812260:	1884703a 	and	r2,r3,r2
  812264:	1007883a 	mov	r3,r2
  812268:	d0a72b44 	addi	r2,gp,-25427
  81226c:	2085883a 	add	r2,r4,r2
  812270:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  812274:	e0fffe03 	ldbu	r3,-8(fp)
  812278:	d0a72b44 	addi	r2,gp,-25427
  81227c:	1885883a 	add	r2,r3,r2
  812280:	10800003 	ldbu	r2,0(r2)
  812284:	10803fcc 	andi	r2,r2,255
  812288:	1004c03a 	cmpne	r2,r2,zero
  81228c:	1000071e 	bne	r2,zero,8122ac <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  812290:	d0a72e17 	ldw	r2,-25416(gp)
  812294:	10800d83 	ldbu	r2,54(r2)
  812298:	0084303a 	nor	r2,zero,r2
  81229c:	1007883a 	mov	r3,r2
  8122a0:	d0a72b03 	ldbu	r2,-25428(gp)
  8122a4:	1884703a 	and	r2,r3,r2
  8122a8:	d0a72b05 	stb	r2,-25428(gp)
    }
}
  8122ac:	e037883a 	mov	sp,fp
  8122b0:	df000017 	ldw	fp,0(sp)
  8122b4:	dec00104 	addi	sp,sp,4
  8122b8:	f800283a 	ret

008122bc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  8122bc:	defffb04 	addi	sp,sp,-20
  8122c0:	df000415 	stw	fp,16(sp)
  8122c4:	df000404 	addi	fp,sp,16
  8122c8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  8122cc:	d0a72e17 	ldw	r2,-25416(gp)
  8122d0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  8122d4:	d0e72e17 	ldw	r3,-25416(gp)
  8122d8:	e0bfff17 	ldw	r2,-4(fp)
  8122dc:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  8122e0:	e0bfff17 	ldw	r2,-4(fp)
  8122e4:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  8122e8:	e0bffe17 	ldw	r2,-8(fp)
  8122ec:	10800017 	ldw	r2,0(r2)
  8122f0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8122f4:	00002006 	br	812378 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  8122f8:	d0a72e17 	ldw	r2,-25416(gp)
  8122fc:	10800d03 	ldbu	r2,52(r2)
  812300:	11003fcc 	andi	r4,r2,255
  812304:	d0a72e17 	ldw	r2,-25416(gp)
  812308:	10800d03 	ldbu	r2,52(r2)
  81230c:	10c03fcc 	andi	r3,r2,255
  812310:	e0bffd17 	ldw	r2,-12(fp)
  812314:	1885883a 	add	r2,r3,r2
  812318:	10800204 	addi	r2,r2,8
  81231c:	10c000c3 	ldbu	r3,3(r2)
  812320:	d0a72e17 	ldw	r2,-25416(gp)
  812324:	10800d43 	ldbu	r2,53(r2)
  812328:	1884b03a 	or	r2,r3,r2
  81232c:	1007883a 	mov	r3,r2
  812330:	e0bffd17 	ldw	r2,-12(fp)
  812334:	2085883a 	add	r2,r4,r2
  812338:	10800204 	addi	r2,r2,8
  81233c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  812340:	e0bffd17 	ldw	r2,-12(fp)
  812344:	10c00283 	ldbu	r3,10(r2)
  812348:	d0a72e17 	ldw	r2,-25416(gp)
  81234c:	10800d83 	ldbu	r2,54(r2)
  812350:	1884b03a 	or	r2,r3,r2
  812354:	1007883a 	mov	r3,r2
  812358:	e0bffd17 	ldw	r2,-12(fp)
  81235c:	10c00285 	stb	r3,10(r2)
        pevents++;
  812360:	e0bffe17 	ldw	r2,-8(fp)
  812364:	10800104 	addi	r2,r2,4
  812368:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  81236c:	e0bffe17 	ldw	r2,-8(fp)
  812370:	10800017 	ldw	r2,0(r2)
  812374:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  812378:	e0bffd17 	ldw	r2,-12(fp)
  81237c:	1004c03a 	cmpne	r2,r2,zero
  812380:	103fdd1e 	bne	r2,zero,8122f8 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  812384:	d0a72e17 	ldw	r2,-25416(gp)
  812388:	10800d03 	ldbu	r2,52(r2)
  81238c:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  812390:	e13ffc03 	ldbu	r4,-16(fp)
  812394:	e0fffc03 	ldbu	r3,-16(fp)
  812398:	d0a72b44 	addi	r2,gp,-25427
  81239c:	1885883a 	add	r2,r3,r2
  8123a0:	10800003 	ldbu	r2,0(r2)
  8123a4:	1007883a 	mov	r3,r2
  8123a8:	d0a72e17 	ldw	r2,-25416(gp)
  8123ac:	10800d43 	ldbu	r2,53(r2)
  8123b0:	0084303a 	nor	r2,zero,r2
  8123b4:	1884703a 	and	r2,r3,r2
  8123b8:	1007883a 	mov	r3,r2
  8123bc:	d0a72b44 	addi	r2,gp,-25427
  8123c0:	2085883a 	add	r2,r4,r2
  8123c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8123c8:	e0fffc03 	ldbu	r3,-16(fp)
  8123cc:	d0a72b44 	addi	r2,gp,-25427
  8123d0:	1885883a 	add	r2,r3,r2
  8123d4:	10800003 	ldbu	r2,0(r2)
  8123d8:	10803fcc 	andi	r2,r2,255
  8123dc:	1004c03a 	cmpne	r2,r2,zero
  8123e0:	1000071e 	bne	r2,zero,812400 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  8123e4:	d0a72e17 	ldw	r2,-25416(gp)
  8123e8:	10800d83 	ldbu	r2,54(r2)
  8123ec:	0084303a 	nor	r2,zero,r2
  8123f0:	1007883a 	mov	r3,r2
  8123f4:	d0a72b03 	ldbu	r2,-25428(gp)
  8123f8:	1884703a 	and	r2,r3,r2
  8123fc:	d0a72b05 	stb	r2,-25428(gp)
    }
}
  812400:	e037883a 	mov	sp,fp
  812404:	df000017 	ldw	fp,0(sp)
  812408:	dec00104 	addi	sp,sp,4
  81240c:	f800283a 	ret

00812410 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  812410:	defffc04 	addi	sp,sp,-16
  812414:	df000315 	stw	fp,12(sp)
  812418:	df000304 	addi	fp,sp,12
  81241c:	e13ffe15 	stw	r4,-8(fp)
  812420:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  812424:	e0bffe17 	ldw	r2,-8(fp)
  812428:	10800d03 	ldbu	r2,52(r2)
  81242c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  812430:	e13ffd03 	ldbu	r4,-12(fp)
  812434:	e0fffd03 	ldbu	r3,-12(fp)
  812438:	e0bfff17 	ldw	r2,-4(fp)
  81243c:	1885883a 	add	r2,r3,r2
  812440:	10800204 	addi	r2,r2,8
  812444:	108000c3 	ldbu	r2,3(r2)
  812448:	1007883a 	mov	r3,r2
  81244c:	e0bffe17 	ldw	r2,-8(fp)
  812450:	10800d43 	ldbu	r2,53(r2)
  812454:	0084303a 	nor	r2,zero,r2
  812458:	1884703a 	and	r2,r3,r2
  81245c:	1007883a 	mov	r3,r2
  812460:	e0bfff17 	ldw	r2,-4(fp)
  812464:	2085883a 	add	r2,r4,r2
  812468:	10800204 	addi	r2,r2,8
  81246c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  812470:	e0fffd03 	ldbu	r3,-12(fp)
  812474:	e0bfff17 	ldw	r2,-4(fp)
  812478:	1885883a 	add	r2,r3,r2
  81247c:	10800204 	addi	r2,r2,8
  812480:	108000c3 	ldbu	r2,3(r2)
  812484:	10803fcc 	andi	r2,r2,255
  812488:	1004c03a 	cmpne	r2,r2,zero
  81248c:	10000a1e 	bne	r2,zero,8124b8 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  812490:	e0bfff17 	ldw	r2,-4(fp)
  812494:	10800283 	ldbu	r2,10(r2)
  812498:	1007883a 	mov	r3,r2
  81249c:	e0bffe17 	ldw	r2,-8(fp)
  8124a0:	10800d83 	ldbu	r2,54(r2)
  8124a4:	0084303a 	nor	r2,zero,r2
  8124a8:	1884703a 	and	r2,r3,r2
  8124ac:	1007883a 	mov	r3,r2
  8124b0:	e0bfff17 	ldw	r2,-4(fp)
  8124b4:	10c00285 	stb	r3,10(r2)
    }
}
  8124b8:	e037883a 	mov	sp,fp
  8124bc:	df000017 	ldw	fp,0(sp)
  8124c0:	dec00104 	addi	sp,sp,4
  8124c4:	f800283a 	ret

008124c8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  8124c8:	defffa04 	addi	sp,sp,-24
  8124cc:	df000515 	stw	fp,20(sp)
  8124d0:	df000504 	addi	fp,sp,20
  8124d4:	e13ffe15 	stw	r4,-8(fp)
  8124d8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  8124dc:	e0bffe17 	ldw	r2,-8(fp)
  8124e0:	10800d03 	ldbu	r2,52(r2)
  8124e4:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  8124e8:	e0bffe17 	ldw	r2,-8(fp)
  8124ec:	10800d83 	ldbu	r2,54(r2)
  8124f0:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  8124f4:	e0bffe17 	ldw	r2,-8(fp)
  8124f8:	10800d43 	ldbu	r2,53(r2)
  8124fc:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  812500:	e0bfff17 	ldw	r2,-4(fp)
  812504:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  812508:	e0bffd17 	ldw	r2,-12(fp)
  81250c:	10800017 	ldw	r2,0(r2)
  812510:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  812514:	00002606 	br	8125b0 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  812518:	e13ffb83 	ldbu	r4,-18(fp)
  81251c:	e0fffb83 	ldbu	r3,-18(fp)
  812520:	e0bffc17 	ldw	r2,-16(fp)
  812524:	1885883a 	add	r2,r3,r2
  812528:	10800204 	addi	r2,r2,8
  81252c:	108000c3 	ldbu	r2,3(r2)
  812530:	1007883a 	mov	r3,r2
  812534:	e0bffb03 	ldbu	r2,-20(fp)
  812538:	0084303a 	nor	r2,zero,r2
  81253c:	1884703a 	and	r2,r3,r2
  812540:	1007883a 	mov	r3,r2
  812544:	e0bffc17 	ldw	r2,-16(fp)
  812548:	2085883a 	add	r2,r4,r2
  81254c:	10800204 	addi	r2,r2,8
  812550:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  812554:	e0fffb83 	ldbu	r3,-18(fp)
  812558:	e0bffc17 	ldw	r2,-16(fp)
  81255c:	1885883a 	add	r2,r3,r2
  812560:	10800204 	addi	r2,r2,8
  812564:	108000c3 	ldbu	r2,3(r2)
  812568:	10803fcc 	andi	r2,r2,255
  81256c:	1004c03a 	cmpne	r2,r2,zero
  812570:	1000091e 	bne	r2,zero,812598 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  812574:	e0bffc17 	ldw	r2,-16(fp)
  812578:	10800283 	ldbu	r2,10(r2)
  81257c:	1007883a 	mov	r3,r2
  812580:	e0bffb43 	ldbu	r2,-19(fp)
  812584:	0084303a 	nor	r2,zero,r2
  812588:	1884703a 	and	r2,r3,r2
  81258c:	1007883a 	mov	r3,r2
  812590:	e0bffc17 	ldw	r2,-16(fp)
  812594:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  812598:	e0bffd17 	ldw	r2,-12(fp)
  81259c:	10800104 	addi	r2,r2,4
  8125a0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  8125a4:	e0bffd17 	ldw	r2,-12(fp)
  8125a8:	10800017 	ldw	r2,0(r2)
  8125ac:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8125b0:	e0bffc17 	ldw	r2,-16(fp)
  8125b4:	1004c03a 	cmpne	r2,r2,zero
  8125b8:	103fd71e 	bne	r2,zero,812518 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  8125bc:	e037883a 	mov	sp,fp
  8125c0:	df000017 	ldw	fp,0(sp)
  8125c4:	dec00104 	addi	sp,sp,4
  8125c8:	f800283a 	ret

008125cc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  8125cc:	defffc04 	addi	sp,sp,-16
  8125d0:	df000315 	stw	fp,12(sp)
  8125d4:	df000304 	addi	fp,sp,12
  8125d8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  8125dc:	e0bfff17 	ldw	r2,-4(fp)
  8125e0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  8125e4:	e0bfff17 	ldw	r2,-4(fp)
  8125e8:	108002c4 	addi	r2,r2,11
  8125ec:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8125f0:	e03ffd05 	stb	zero,-12(fp)
  8125f4:	00000806 	br	812618 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  8125f8:	e0bffe17 	ldw	r2,-8(fp)
  8125fc:	10000005 	stb	zero,0(r2)
  812600:	e0bffe17 	ldw	r2,-8(fp)
  812604:	10800044 	addi	r2,r2,1
  812608:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81260c:	e0bffd03 	ldbu	r2,-12(fp)
  812610:	10800044 	addi	r2,r2,1
  812614:	e0bffd05 	stb	r2,-12(fp)
  812618:	e0bffd03 	ldbu	r2,-12(fp)
  81261c:	108000f0 	cmpltui	r2,r2,3
  812620:	103ff51e 	bne	r2,zero,8125f8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  812624:	e037883a 	mov	sp,fp
  812628:	df000017 	ldw	fp,0(sp)
  81262c:	dec00104 	addi	sp,sp,4
  812630:	f800283a 	ret

00812634 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  812634:	defffb04 	addi	sp,sp,-20
  812638:	dfc00415 	stw	ra,16(sp)
  81263c:	df000315 	stw	fp,12(sp)
  812640:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  812644:	010020f4 	movhi	r4,131
  812648:	21214f04 	addi	r4,r4,-31428
  81264c:	0142d004 	movi	r5,2880
  812650:	08129980 	call	812998 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  812654:	008020f4 	movhi	r2,131
  812658:	10a14f04 	addi	r2,r2,-31428
  81265c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  812660:	008020f4 	movhi	r2,131
  812664:	10a15b04 	addi	r2,r2,-31380
  812668:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  81266c:	e03fff0d 	sth	zero,-4(fp)
  812670:	00001306 	br	8126c0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812674:	e0bffe17 	ldw	r2,-8(fp)
  812678:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  81267c:	e0fffe17 	ldw	r3,-8(fp)
  812680:	e0bffd17 	ldw	r2,-12(fp)
  812684:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  812688:	e0fffe17 	ldw	r3,-8(fp)
  81268c:	00800fc4 	movi	r2,63
  812690:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  812694:	e0bffe17 	ldw	r2,-8(fp)
  812698:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  81269c:	e0bffe17 	ldw	r2,-8(fp)
  8126a0:	10800c04 	addi	r2,r2,48
  8126a4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  8126a8:	e0bffd17 	ldw	r2,-12(fp)
  8126ac:	10800c04 	addi	r2,r2,48
  8126b0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8126b4:	e0bfff0b 	ldhu	r2,-4(fp)
  8126b8:	10800044 	addi	r2,r2,1
  8126bc:	e0bfff0d 	sth	r2,-4(fp)
  8126c0:	e0bfff0b 	ldhu	r2,-4(fp)
  8126c4:	10800ef0 	cmpltui	r2,r2,59
  8126c8:	103fea1e 	bne	r2,zero,812674 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  8126cc:	e0bffe17 	ldw	r2,-8(fp)
  8126d0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  8126d4:	e0bffe17 	ldw	r2,-8(fp)
  8126d8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  8126dc:	e0fffe17 	ldw	r3,-8(fp)
  8126e0:	00800fc4 	movi	r2,63
  8126e4:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  8126e8:	e0bffe17 	ldw	r2,-8(fp)
  8126ec:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  8126f0:	008020f4 	movhi	r2,131
  8126f4:	10a14f04 	addi	r2,r2,-31428
  8126f8:	d0a72c15 	stw	r2,-25424(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  8126fc:	e037883a 	mov	sp,fp
  812700:	dfc00117 	ldw	ra,4(sp)
  812704:	df000017 	ldw	fp,0(sp)
  812708:	dec00204 	addi	sp,sp,8
  81270c:	f800283a 	ret

00812710 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  812710:	deffff04 	addi	sp,sp,-4
  812714:	df000015 	stw	fp,0(sp)
  812718:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  81271c:	d0272f15 	stw	zero,-25412(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  812720:	d0272d05 	stb	zero,-25420(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  812724:	d0271f05 	stb	zero,-25476(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  812728:	d0272745 	stb	zero,-25443(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  81272c:	d0271f45 	stb	zero,-25475(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  812730:	d0272415 	stw	zero,-25456(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  812734:	d0272015 	stw	zero,-25472(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  812738:	d0273215 	stw	zero,-25400(gp)
    OSIdleCtrMax  = 0L;
  81273c:	d0272515 	stw	zero,-25452(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  812740:	d0273105 	stb	zero,-25404(gp)
#endif
}
  812744:	e037883a 	mov	sp,fp
  812748:	df000017 	ldw	fp,0(sp)
  81274c:	dec00104 	addi	sp,sp,4
  812750:	f800283a 	ret

00812754 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  812754:	defffd04 	addi	sp,sp,-12
  812758:	df000215 	stw	fp,8(sp)
  81275c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  812760:	d0272b05 	stb	zero,-25428(gp)
    prdytbl       = &OSRdyTbl[0];
  812764:	d0a72b44 	addi	r2,gp,-25427
  812768:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  81276c:	e03fff05 	stb	zero,-4(fp)
  812770:	00000806 	br	812794 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  812774:	e0bffe17 	ldw	r2,-8(fp)
  812778:	10000005 	stb	zero,0(r2)
  81277c:	e0bffe17 	ldw	r2,-8(fp)
  812780:	10800044 	addi	r2,r2,1
  812784:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  812788:	e0bfff03 	ldbu	r2,-4(fp)
  81278c:	10800044 	addi	r2,r2,1
  812790:	e0bfff05 	stb	r2,-4(fp)
  812794:	e0bfff03 	ldbu	r2,-4(fp)
  812798:	108000f0 	cmpltui	r2,r2,3
  81279c:	103ff51e 	bne	r2,zero,812774 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  8127a0:	d0272145 	stb	zero,-25467(gp)
    OSPrioHighRdy = 0;
  8127a4:	d0272105 	stb	zero,-25468(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  8127a8:	d0272915 	stw	zero,-25436(gp)
    OSTCBCur      = (OS_TCB *)0;
  8127ac:	d0272e15 	stw	zero,-25416(gp)
}
  8127b0:	e037883a 	mov	sp,fp
  8127b4:	df000017 	ldw	fp,0(sp)
  8127b8:	dec00104 	addi	sp,sp,4
  8127bc:	f800283a 	ret

008127c0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  8127c0:	defff804 	addi	sp,sp,-32
  8127c4:	dfc00715 	stw	ra,28(sp)
  8127c8:	df000615 	stw	fp,24(sp)
  8127cc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  8127d0:	018020f4 	movhi	r6,131
  8127d4:	31a14e04 	addi	r6,r6,-31432
  8127d8:	00bfffd4 	movui	r2,65535
  8127dc:	d8800015 	stw	r2,0(sp)
  8127e0:	008020b4 	movhi	r2,130
  8127e4:	109f4f04 	addi	r2,r2,32060
  8127e8:	d8800115 	stw	r2,4(sp)
  8127ec:	00808004 	movi	r2,512
  8127f0:	d8800215 	stw	r2,8(sp)
  8127f4:	d8000315 	stw	zero,12(sp)
  8127f8:	008000c4 	movi	r2,3
  8127fc:	d8800415 	stw	r2,16(sp)
  812800:	01002074 	movhi	r4,129
  812804:	210b1d04 	addi	r4,r4,11380
  812808:	000b883a 	mov	r5,zero
  81280c:	01c00504 	movi	r7,20
  812810:	0817a580 	call	817a58 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  812814:	014020b4 	movhi	r5,130
  812818:	29729d04 	addi	r5,r5,-13708
  81281c:	01000504 	movi	r4,20
  812820:	e1bfff04 	addi	r6,fp,-4
  812824:	081838c0 	call	81838c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  812828:	e037883a 	mov	sp,fp
  81282c:	dfc00117 	ldw	ra,4(sp)
  812830:	df000017 	ldw	fp,0(sp)
  812834:	dec00204 	addi	sp,sp,8
  812838:	f800283a 	ret

0081283c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  81283c:	defff804 	addi	sp,sp,-32
  812840:	dfc00715 	stw	ra,28(sp)
  812844:	df000615 	stw	fp,24(sp)
  812848:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  81284c:	018020b4 	movhi	r6,130
  812850:	319ed604 	addi	r6,r6,31576
  812854:	00bfff94 	movui	r2,65534
  812858:	d8800015 	stw	r2,0(sp)
  81285c:	008020b4 	movhi	r2,130
  812860:	109cd704 	addi	r2,r2,29532
  812864:	d8800115 	stw	r2,4(sp)
  812868:	00808004 	movi	r2,512
  81286c:	d8800215 	stw	r2,8(sp)
  812870:	d8000315 	stw	zero,12(sp)
  812874:	008000c4 	movi	r2,3
  812878:	d8800415 	stw	r2,16(sp)
  81287c:	01002074 	movhi	r4,129
  812880:	210b3404 	addi	r4,r4,11472
  812884:	000b883a 	mov	r5,zero
  812888:	01c004c4 	movi	r7,19
  81288c:	0817a580 	call	817a58 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  812890:	014020b4 	movhi	r5,130
  812894:	2972a104 	addi	r5,r5,-13692
  812898:	010004c4 	movi	r4,19
  81289c:	e1bfff04 	addi	r6,fp,-4
  8128a0:	081838c0 	call	81838c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  8128a4:	e037883a 	mov	sp,fp
  8128a8:	dfc00117 	ldw	ra,4(sp)
  8128ac:	df000017 	ldw	fp,0(sp)
  8128b0:	dec00204 	addi	sp,sp,8
  8128b4:	f800283a 	ret

008128b8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  8128b8:	defffb04 	addi	sp,sp,-20
  8128bc:	dfc00415 	stw	ra,16(sp)
  8128c0:	df000315 	stw	fp,12(sp)
  8128c4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8128c8:	010020f4 	movhi	r4,131
  8128cc:	21241f04 	addi	r4,r4,-28548
  8128d0:	01414404 	movi	r5,1296
  8128d4:	08129980 	call	812998 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  8128d8:	010020f4 	movhi	r4,131
  8128dc:	21256304 	addi	r4,r4,-27252
  8128e0:	01401504 	movi	r5,84
  8128e4:	08129980 	call	812998 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  8128e8:	008020f4 	movhi	r2,131
  8128ec:	10a41f04 	addi	r2,r2,-28548
  8128f0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  8128f4:	008020f4 	movhi	r2,131
  8128f8:	10a43a04 	addi	r2,r2,-28440
  8128fc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  812900:	e03fff05 	stb	zero,-4(fp)
  812904:	00001106 	br	81294c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  812908:	e0fffe17 	ldw	r3,-8(fp)
  81290c:	e0bffd17 	ldw	r2,-12(fp)
  812910:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  812914:	e0fffe17 	ldw	r3,-8(fp)
  812918:	00800fc4 	movi	r2,63
  81291c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  812920:	e0bffe17 	ldw	r2,-8(fp)
  812924:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  812928:	e0bffe17 	ldw	r2,-8(fp)
  81292c:	10801b04 	addi	r2,r2,108
  812930:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  812934:	e0bffd17 	ldw	r2,-12(fp)
  812938:	10801b04 	addi	r2,r2,108
  81293c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  812940:	e0bfff03 	ldbu	r2,-4(fp)
  812944:	10800044 	addi	r2,r2,1
  812948:	e0bfff05 	stb	r2,-4(fp)
  81294c:	e0bfff03 	ldbu	r2,-4(fp)
  812950:	108002f0 	cmpltui	r2,r2,11
  812954:	103fec1e 	bne	r2,zero,812908 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  812958:	e0bffe17 	ldw	r2,-8(fp)
  81295c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  812960:	e0fffe17 	ldw	r3,-8(fp)
  812964:	00800fc4 	movi	r2,63
  812968:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  81296c:	e0bffe17 	ldw	r2,-8(fp)
  812970:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  812974:	d0272215 	stw	zero,-25464(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  812978:	008020f4 	movhi	r2,131
  81297c:	10a41f04 	addi	r2,r2,-28548
  812980:	d0a72615 	stw	r2,-25448(gp)
}
  812984:	e037883a 	mov	sp,fp
  812988:	dfc00117 	ldw	ra,4(sp)
  81298c:	df000017 	ldw	fp,0(sp)
  812990:	dec00204 	addi	sp,sp,8
  812994:	f800283a 	ret

00812998 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  812998:	defffd04 	addi	sp,sp,-12
  81299c:	df000215 	stw	fp,8(sp)
  8129a0:	df000204 	addi	fp,sp,8
  8129a4:	e13ffe15 	stw	r4,-8(fp)
  8129a8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  8129ac:	00000806 	br	8129d0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  8129b0:	e0bffe17 	ldw	r2,-8(fp)
  8129b4:	10000005 	stb	zero,0(r2)
  8129b8:	e0bffe17 	ldw	r2,-8(fp)
  8129bc:	10800044 	addi	r2,r2,1
  8129c0:	e0bffe15 	stw	r2,-8(fp)
        size--;
  8129c4:	e0bfff0b 	ldhu	r2,-4(fp)
  8129c8:	10bfffc4 	addi	r2,r2,-1
  8129cc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  8129d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8129d4:	1004c03a 	cmpne	r2,r2,zero
  8129d8:	103ff51e 	bne	r2,zero,8129b0 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  8129dc:	e037883a 	mov	sp,fp
  8129e0:	df000017 	ldw	fp,0(sp)
  8129e4:	dec00104 	addi	sp,sp,4
  8129e8:	f800283a 	ret

008129ec <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  8129ec:	defffc04 	addi	sp,sp,-16
  8129f0:	df000315 	stw	fp,12(sp)
  8129f4:	df000304 	addi	fp,sp,12
  8129f8:	e13ffd15 	stw	r4,-12(fp)
  8129fc:	e17ffe15 	stw	r5,-8(fp)
  812a00:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  812a04:	00000d06 	br	812a3c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  812a08:	e0bffe17 	ldw	r2,-8(fp)
  812a0c:	10c00003 	ldbu	r3,0(r2)
  812a10:	e0bffd17 	ldw	r2,-12(fp)
  812a14:	10c00005 	stb	r3,0(r2)
  812a18:	e0bffd17 	ldw	r2,-12(fp)
  812a1c:	10800044 	addi	r2,r2,1
  812a20:	e0bffd15 	stw	r2,-12(fp)
  812a24:	e0bffe17 	ldw	r2,-8(fp)
  812a28:	10800044 	addi	r2,r2,1
  812a2c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  812a30:	e0bfff0b 	ldhu	r2,-4(fp)
  812a34:	10bfffc4 	addi	r2,r2,-1
  812a38:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  812a3c:	e0bfff0b 	ldhu	r2,-4(fp)
  812a40:	1004c03a 	cmpne	r2,r2,zero
  812a44:	103ff01e 	bne	r2,zero,812a08 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  812a48:	e037883a 	mov	sp,fp
  812a4c:	df000017 	ldw	fp,0(sp)
  812a50:	dec00104 	addi	sp,sp,4
  812a54:	f800283a 	ret

00812a58 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  812a58:	defffb04 	addi	sp,sp,-20
  812a5c:	dfc00415 	stw	ra,16(sp)
  812a60:	df000315 	stw	fp,12(sp)
  812a64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812a68:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a6c:	0005303a 	rdctl	r2,status
  812a70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a74:	e0fffe17 	ldw	r3,-8(fp)
  812a78:	00bfff84 	movi	r2,-2
  812a7c:	1884703a 	and	r2,r3,r2
  812a80:	1001703a 	wrctl	status,r2
  
  return context;
  812a84:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  812a88:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  812a8c:	d0a72d03 	ldbu	r2,-25420(gp)
  812a90:	10803fcc 	andi	r2,r2,255
  812a94:	1004c03a 	cmpne	r2,r2,zero
  812a98:	10001b1e 	bne	r2,zero,812b08 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  812a9c:	d0a71f03 	ldbu	r2,-25476(gp)
  812aa0:	10803fcc 	andi	r2,r2,255
  812aa4:	1004c03a 	cmpne	r2,r2,zero
  812aa8:	1000171e 	bne	r2,zero,812b08 <OS_Sched+0xb0>
            OS_SchedNew();
  812aac:	0812b2c0 	call	812b2c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  812ab0:	d0a72103 	ldbu	r2,-25468(gp)
  812ab4:	d0e72143 	ldbu	r3,-25467(gp)
  812ab8:	11003fcc 	andi	r4,r2,255
  812abc:	18803fcc 	andi	r2,r3,255
  812ac0:	20801126 	beq	r4,r2,812b08 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  812ac4:	d0a72103 	ldbu	r2,-25468(gp)
  812ac8:	10803fcc 	andi	r2,r2,255
  812acc:	00c020f4 	movhi	r3,131
  812ad0:	18e56304 	addi	r3,r3,-27252
  812ad4:	1085883a 	add	r2,r2,r2
  812ad8:	1085883a 	add	r2,r2,r2
  812adc:	10c5883a 	add	r2,r2,r3
  812ae0:	10800017 	ldw	r2,0(r2)
  812ae4:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  812ae8:	d0e72917 	ldw	r3,-25436(gp)
  812aec:	18800e17 	ldw	r2,56(r3)
  812af0:	10800044 	addi	r2,r2,1
  812af4:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  812af8:	d0a72417 	ldw	r2,-25456(gp)
  812afc:	10800044 	addi	r2,r2,1
  812b00:	d0a72415 	stw	r2,-25456(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  812b04:	081b6c40 	call	81b6c4 <OSCtxSw>
  812b08:	e0bfff17 	ldw	r2,-4(fp)
  812b0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b10:	e0bffd17 	ldw	r2,-12(fp)
  812b14:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  812b18:	e037883a 	mov	sp,fp
  812b1c:	dfc00117 	ldw	ra,4(sp)
  812b20:	df000017 	ldw	fp,0(sp)
  812b24:	dec00204 	addi	sp,sp,8
  812b28:	f800283a 	ret

00812b2c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  812b2c:	defffe04 	addi	sp,sp,-8
  812b30:	df000115 	stw	fp,4(sp)
  812b34:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  812b38:	d0a72b03 	ldbu	r2,-25428(gp)
  812b3c:	10c03fcc 	andi	r3,r2,255
  812b40:	008020b4 	movhi	r2,130
  812b44:	10b25d04 	addi	r2,r2,-13964
  812b48:	10c5883a 	add	r2,r2,r3
  812b4c:	10800003 	ldbu	r2,0(r2)
  812b50:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  812b54:	e0bfff03 	ldbu	r2,-4(fp)
  812b58:	100490fa 	slli	r2,r2,3
  812b5c:	1009883a 	mov	r4,r2
  812b60:	e0ffff03 	ldbu	r3,-4(fp)
  812b64:	d0a72b44 	addi	r2,gp,-25427
  812b68:	1885883a 	add	r2,r3,r2
  812b6c:	10800003 	ldbu	r2,0(r2)
  812b70:	10c03fcc 	andi	r3,r2,255
  812b74:	008020b4 	movhi	r2,130
  812b78:	10b25d04 	addi	r2,r2,-13964
  812b7c:	10c5883a 	add	r2,r2,r3
  812b80:	10800003 	ldbu	r2,0(r2)
  812b84:	2085883a 	add	r2,r4,r2
  812b88:	d0a72105 	stb	r2,-25468(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  812b8c:	e037883a 	mov	sp,fp
  812b90:	df000017 	ldw	fp,0(sp)
  812b94:	dec00104 	addi	sp,sp,4
  812b98:	f800283a 	ret

00812b9c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  812b9c:	defffc04 	addi	sp,sp,-16
  812ba0:	df000315 	stw	fp,12(sp)
  812ba4:	df000304 	addi	fp,sp,12
  812ba8:	e13ffe15 	stw	r4,-8(fp)
  812bac:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  812bb0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  812bb4:	00000d06 	br	812bec <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  812bb8:	e0bfff17 	ldw	r2,-4(fp)
  812bbc:	10c00003 	ldbu	r3,0(r2)
  812bc0:	e0bffe17 	ldw	r2,-8(fp)
  812bc4:	10c00005 	stb	r3,0(r2)
  812bc8:	e0bffe17 	ldw	r2,-8(fp)
  812bcc:	10800044 	addi	r2,r2,1
  812bd0:	e0bffe15 	stw	r2,-8(fp)
  812bd4:	e0bfff17 	ldw	r2,-4(fp)
  812bd8:	10800044 	addi	r2,r2,1
  812bdc:	e0bfff15 	stw	r2,-4(fp)
        len++;
  812be0:	e0bffd03 	ldbu	r2,-12(fp)
  812be4:	10800044 	addi	r2,r2,1
  812be8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  812bec:	e0bfff17 	ldw	r2,-4(fp)
  812bf0:	10800003 	ldbu	r2,0(r2)
  812bf4:	10803fcc 	andi	r2,r2,255
  812bf8:	1004c03a 	cmpne	r2,r2,zero
  812bfc:	103fee1e 	bne	r2,zero,812bb8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  812c00:	e0bffe17 	ldw	r2,-8(fp)
  812c04:	10000005 	stb	zero,0(r2)
    return (len);
  812c08:	e0bffd03 	ldbu	r2,-12(fp)
}
  812c0c:	e037883a 	mov	sp,fp
  812c10:	df000017 	ldw	fp,0(sp)
  812c14:	dec00104 	addi	sp,sp,4
  812c18:	f800283a 	ret

00812c1c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  812c1c:	defffd04 	addi	sp,sp,-12
  812c20:	df000215 	stw	fp,8(sp)
  812c24:	df000204 	addi	fp,sp,8
  812c28:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  812c2c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  812c30:	00000606 	br	812c4c <OS_StrLen+0x30>
        psrc++;
  812c34:	e0bfff17 	ldw	r2,-4(fp)
  812c38:	10800044 	addi	r2,r2,1
  812c3c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  812c40:	e0bffe03 	ldbu	r2,-8(fp)
  812c44:	10800044 	addi	r2,r2,1
  812c48:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  812c4c:	e0bfff17 	ldw	r2,-4(fp)
  812c50:	10800003 	ldbu	r2,0(r2)
  812c54:	10803fcc 	andi	r2,r2,255
  812c58:	1004c03a 	cmpne	r2,r2,zero
  812c5c:	103ff51e 	bne	r2,zero,812c34 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  812c60:	e0bffe03 	ldbu	r2,-8(fp)
}
  812c64:	e037883a 	mov	sp,fp
  812c68:	df000017 	ldw	fp,0(sp)
  812c6c:	dec00104 	addi	sp,sp,4
  812c70:	f800283a 	ret

00812c74 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  812c74:	defffa04 	addi	sp,sp,-24
  812c78:	dfc00515 	stw	ra,20(sp)
  812c7c:	df000415 	stw	fp,16(sp)
  812c80:	df000404 	addi	fp,sp,16
  812c84:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812c88:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c8c:	0005303a 	rdctl	r2,status
  812c90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c94:	e0fffd17 	ldw	r3,-12(fp)
  812c98:	00bfff84 	movi	r2,-2
  812c9c:	1884703a 	and	r2,r3,r2
  812ca0:	1001703a 	wrctl	status,r2
  
  return context;
  812ca4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  812ca8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  812cac:	d0a72017 	ldw	r2,-25472(gp)
  812cb0:	10800044 	addi	r2,r2,1
  812cb4:	d0a72015 	stw	r2,-25472(gp)
  812cb8:	e0bffe17 	ldw	r2,-8(fp)
  812cbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cc0:	e0bffc17 	ldw	r2,-16(fp)
  812cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  812cc8:	081bb700 	call	81bb70 <OSTaskIdleHook>
    }
  812ccc:	003fef06 	br	812c8c <OS_TaskIdle+0x18>

00812cd0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  812cd0:	defffa04 	addi	sp,sp,-24
  812cd4:	dfc00515 	stw	ra,20(sp)
  812cd8:	df000415 	stw	fp,16(sp)
  812cdc:	df000404 	addi	fp,sp,16
  812ce0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812ce4:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812ce8:	00000206 	br	812cf4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  812cec:	01003204 	movi	r4,200
  812cf0:	0818d500 	call	818d50 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  812cf4:	d0a73103 	ldbu	r2,-25404(gp)
  812cf8:	10803fcc 	andi	r2,r2,255
  812cfc:	1005003a 	cmpeq	r2,r2,zero
  812d00:	103ffa1e 	bne	r2,zero,812cec <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  812d04:	d1272517 	ldw	r4,-25452(gp)
  812d08:	01401904 	movi	r5,100
  812d0c:	080f9340 	call	80f934 <__udivsi3>
  812d10:	d0a72515 	stw	r2,-25452(gp)
    if (OSIdleCtrMax == 0L) {
  812d14:	d0a72517 	ldw	r2,-25452(gp)
  812d18:	1004c03a 	cmpne	r2,r2,zero
  812d1c:	1000031e 	bne	r2,zero,812d2c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  812d20:	d0272705 	stb	zero,-25444(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  812d24:	01003fc4 	movi	r4,255
  812d28:	08189640 	call	818964 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d2c:	0005303a 	rdctl	r2,status
  812d30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d34:	e0fffd17 	ldw	r3,-12(fp)
  812d38:	00bfff84 	movi	r2,-2
  812d3c:	1884703a 	and	r2,r3,r2
  812d40:	1001703a 	wrctl	status,r2
  
  return context;
  812d44:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  812d48:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  812d4c:	d0a72017 	ldw	r2,-25472(gp)
  812d50:	d0a73215 	stw	r2,-25400(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  812d54:	d0272015 	stw	zero,-25472(gp)
  812d58:	e0bffe17 	ldw	r2,-8(fp)
  812d5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d60:	e0bffc17 	ldw	r2,-16(fp)
  812d64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  812d68:	d1273217 	ldw	r4,-25400(gp)
  812d6c:	d1672517 	ldw	r5,-25452(gp)
  812d70:	080f9340 	call	80f934 <__udivsi3>
  812d74:	1007883a 	mov	r3,r2
  812d78:	00801904 	movi	r2,100
  812d7c:	10c5c83a 	sub	r2,r2,r3
  812d80:	d0a72705 	stb	r2,-25444(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  812d84:	081bb000 	call	81bb00 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  812d88:	0812d980 	call	812d98 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  812d8c:	01001904 	movi	r4,100
  812d90:	0818d500 	call	818d50 <OSTimeDly>
    }
  812d94:	003fe506 	br	812d2c <OS_TaskStat+0x5c>

00812d98 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  812d98:	defffa04 	addi	sp,sp,-24
  812d9c:	dfc00515 	stw	ra,20(sp)
  812da0:	df000415 	stw	fp,16(sp)
  812da4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  812da8:	e03ffc05 	stb	zero,-16(fp)
  812dac:	00002406 	br	812e40 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  812db0:	e13ffc03 	ldbu	r4,-16(fp)
  812db4:	e17ffe04 	addi	r5,fp,-8
  812db8:	08187680 	call	818768 <OSTaskStkChk>
  812dbc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  812dc0:	e0bffc43 	ldbu	r2,-15(fp)
  812dc4:	1004c03a 	cmpne	r2,r2,zero
  812dc8:	10001a1e 	bne	r2,zero,812e34 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  812dcc:	e0bffc03 	ldbu	r2,-16(fp)
  812dd0:	00c020f4 	movhi	r3,131
  812dd4:	18e56304 	addi	r3,r3,-27252
  812dd8:	1085883a 	add	r2,r2,r2
  812ddc:	1085883a 	add	r2,r2,r2
  812de0:	10c5883a 	add	r2,r2,r3
  812de4:	10800017 	ldw	r2,0(r2)
  812de8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  812dec:	e0bffd17 	ldw	r2,-12(fp)
  812df0:	1005003a 	cmpeq	r2,r2,zero
  812df4:	10000f1e 	bne	r2,zero,812e34 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  812df8:	e0bffd17 	ldw	r2,-12(fp)
  812dfc:	10800060 	cmpeqi	r2,r2,1
  812e00:	10000c1e 	bne	r2,zero,812e34 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  812e04:	e0bffd17 	ldw	r2,-12(fp)
  812e08:	10c00217 	ldw	r3,8(r2)
  812e0c:	e0bffd17 	ldw	r2,-12(fp)
  812e10:	10800317 	ldw	r2,12(r2)
  812e14:	1085883a 	add	r2,r2,r2
  812e18:	1085883a 	add	r2,r2,r2
  812e1c:	1887883a 	add	r3,r3,r2
  812e20:	e0bffd17 	ldw	r2,-12(fp)
  812e24:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  812e28:	e0ffff17 	ldw	r3,-4(fp)
  812e2c:	e0bffd17 	ldw	r2,-12(fp)
  812e30:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  812e34:	e0bffc03 	ldbu	r2,-16(fp)
  812e38:	10800044 	addi	r2,r2,1
  812e3c:	e0bffc05 	stb	r2,-16(fp)
  812e40:	e0bffc03 	ldbu	r2,-16(fp)
  812e44:	10800570 	cmpltui	r2,r2,21
  812e48:	103fd91e 	bne	r2,zero,812db0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  812e4c:	e037883a 	mov	sp,fp
  812e50:	dfc00117 	ldw	ra,4(sp)
  812e54:	df000017 	ldw	fp,0(sp)
  812e58:	dec00204 	addi	sp,sp,8
  812e5c:	f800283a 	ret

00812e60 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  812e60:	defff104 	addi	sp,sp,-60
  812e64:	dfc00e15 	stw	ra,56(sp)
  812e68:	df000d15 	stw	fp,52(sp)
  812e6c:	df000d04 	addi	fp,sp,52
  812e70:	e17ffb15 	stw	r5,-20(fp)
  812e74:	e1bffc15 	stw	r6,-16(fp)
  812e78:	e0800417 	ldw	r2,16(fp)
  812e7c:	e13ffa05 	stb	r4,-24(fp)
  812e80:	e1fffd0d 	sth	r7,-12(fp)
  812e84:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812e88:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e8c:	0005303a 	rdctl	r2,status
  812e90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e94:	e0fff717 	ldw	r3,-36(fp)
  812e98:	00bfff84 	movi	r2,-2
  812e9c:	1884703a 	and	r2,r3,r2
  812ea0:	1001703a 	wrctl	status,r2
  
  return context;
  812ea4:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  812ea8:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  812eac:	d0a72617 	ldw	r2,-25448(gp)
  812eb0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  812eb4:	e0bff917 	ldw	r2,-28(fp)
  812eb8:	1005003a 	cmpeq	r2,r2,zero
  812ebc:	1000941e 	bne	r2,zero,813110 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  812ec0:	e0bff917 	ldw	r2,-28(fp)
  812ec4:	10800517 	ldw	r2,20(r2)
  812ec8:	d0a72615 	stw	r2,-25448(gp)
  812ecc:	e0bff817 	ldw	r2,-32(fp)
  812ed0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ed4:	e0bff617 	ldw	r2,-40(fp)
  812ed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  812edc:	e0fff917 	ldw	r3,-28(fp)
  812ee0:	e0bffb17 	ldw	r2,-20(fp)
  812ee4:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  812ee8:	e0fff917 	ldw	r3,-28(fp)
  812eec:	e0bffa03 	ldbu	r2,-24(fp)
  812ef0:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  812ef4:	e0bff917 	ldw	r2,-28(fp)
  812ef8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  812efc:	e0bff917 	ldw	r2,-28(fp)
  812f00:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  812f04:	e0bff917 	ldw	r2,-28(fp)
  812f08:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  812f0c:	e0fff917 	ldw	r3,-28(fp)
  812f10:	e0800317 	ldw	r2,12(fp)
  812f14:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  812f18:	e0fff917 	ldw	r3,-28(fp)
  812f1c:	e0800217 	ldw	r2,8(fp)
  812f20:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  812f24:	e0fff917 	ldw	r3,-28(fp)
  812f28:	e0bffc17 	ldw	r2,-16(fp)
  812f2c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  812f30:	e0fff917 	ldw	r3,-28(fp)
  812f34:	e0bffe0b 	ldhu	r2,-8(fp)
  812f38:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  812f3c:	e0fff917 	ldw	r3,-28(fp)
  812f40:	e0bffd0b 	ldhu	r2,-12(fp)
  812f44:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  812f48:	e0bff917 	ldw	r2,-28(fp)
  812f4c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  812f50:	e0bffa03 	ldbu	r2,-24(fp)
  812f54:	1004d0fa 	srli	r2,r2,3
  812f58:	1007883a 	mov	r3,r2
  812f5c:	e0bff917 	ldw	r2,-28(fp)
  812f60:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  812f64:	e0bffa03 	ldbu	r2,-24(fp)
  812f68:	108001cc 	andi	r2,r2,7
  812f6c:	1007883a 	mov	r3,r2
  812f70:	e0bff917 	ldw	r2,-28(fp)
  812f74:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  812f78:	e0bff917 	ldw	r2,-28(fp)
  812f7c:	10800d03 	ldbu	r2,52(r2)
  812f80:	10c03fcc 	andi	r3,r2,255
  812f84:	00800044 	movi	r2,1
  812f88:	10c4983a 	sll	r2,r2,r3
  812f8c:	1007883a 	mov	r3,r2
  812f90:	e0bff917 	ldw	r2,-28(fp)
  812f94:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  812f98:	e0bff917 	ldw	r2,-28(fp)
  812f9c:	10800cc3 	ldbu	r2,51(r2)
  812fa0:	10c03fcc 	andi	r3,r2,255
  812fa4:	00800044 	movi	r2,1
  812fa8:	10c4983a 	sll	r2,r2,r3
  812fac:	1007883a 	mov	r3,r2
  812fb0:	e0bff917 	ldw	r2,-28(fp)
  812fb4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  812fb8:	e0bff917 	ldw	r2,-28(fp)
  812fbc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  812fc0:	e0bff917 	ldw	r2,-28(fp)
  812fc4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  812fc8:	e0bff917 	ldw	r2,-28(fp)
  812fcc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  812fd0:	e0bff917 	ldw	r2,-28(fp)
  812fd4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  812fd8:	e0bff917 	ldw	r2,-28(fp)
  812fdc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  812fe0:	e0bff917 	ldw	r2,-28(fp)
  812fe4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  812fe8:	e0bff917 	ldw	r2,-28(fp)
  812fec:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  812ff0:	e0bff917 	ldw	r2,-28(fp)
  812ff4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  812ff8:	e0bff917 	ldw	r2,-28(fp)
  812ffc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  813000:	e0fff917 	ldw	r3,-28(fp)
  813004:	00800fc4 	movi	r2,63
  813008:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  81300c:	e0bff917 	ldw	r2,-28(fp)
  813010:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  813014:	e13ff917 	ldw	r4,-28(fp)
  813018:	081bb8c0 	call	81bb8c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  81301c:	e13ff917 	ldw	r4,-28(fp)
  813020:	081baa40 	call	81baa4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813024:	0005303a 	rdctl	r2,status
  813028:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81302c:	e0fff517 	ldw	r3,-44(fp)
  813030:	00bfff84 	movi	r2,-2
  813034:	1884703a 	and	r2,r3,r2
  813038:	1001703a 	wrctl	status,r2
  
  return context;
  81303c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  813040:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  813044:	e0bffa03 	ldbu	r2,-24(fp)
  813048:	00c020f4 	movhi	r3,131
  81304c:	18e56304 	addi	r3,r3,-27252
  813050:	1085883a 	add	r2,r2,r2
  813054:	1085883a 	add	r2,r2,r2
  813058:	10c7883a 	add	r3,r2,r3
  81305c:	e0bff917 	ldw	r2,-28(fp)
  813060:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  813064:	d0e72217 	ldw	r3,-25464(gp)
  813068:	e0bff917 	ldw	r2,-28(fp)
  81306c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  813070:	e0bff917 	ldw	r2,-28(fp)
  813074:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  813078:	d0a72217 	ldw	r2,-25464(gp)
  81307c:	1005003a 	cmpeq	r2,r2,zero
  813080:	1000031e 	bne	r2,zero,813090 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  813084:	d0e72217 	ldw	r3,-25464(gp)
  813088:	e0bff917 	ldw	r2,-28(fp)
  81308c:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  813090:	e0bff917 	ldw	r2,-28(fp)
  813094:	d0a72215 	stw	r2,-25464(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  813098:	e0bff917 	ldw	r2,-28(fp)
  81309c:	10c00d83 	ldbu	r3,54(r2)
  8130a0:	d0a72b03 	ldbu	r2,-25428(gp)
  8130a4:	1884b03a 	or	r2,r3,r2
  8130a8:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8130ac:	e0bff917 	ldw	r2,-28(fp)
  8130b0:	10800d03 	ldbu	r2,52(r2)
  8130b4:	11003fcc 	andi	r4,r2,255
  8130b8:	e0bff917 	ldw	r2,-28(fp)
  8130bc:	10800d03 	ldbu	r2,52(r2)
  8130c0:	10c03fcc 	andi	r3,r2,255
  8130c4:	d0a72b44 	addi	r2,gp,-25427
  8130c8:	1885883a 	add	r2,r3,r2
  8130cc:	10c00003 	ldbu	r3,0(r2)
  8130d0:	e0bff917 	ldw	r2,-28(fp)
  8130d4:	10800d43 	ldbu	r2,53(r2)
  8130d8:	1884b03a 	or	r2,r3,r2
  8130dc:	1007883a 	mov	r3,r2
  8130e0:	d0a72b44 	addi	r2,gp,-25427
  8130e4:	2085883a 	add	r2,r4,r2
  8130e8:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  8130ec:	d0a72743 	ldbu	r2,-25443(gp)
  8130f0:	10800044 	addi	r2,r2,1
  8130f4:	d0a72745 	stb	r2,-25443(gp)
  8130f8:	e0bff817 	ldw	r2,-32(fp)
  8130fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813100:	e0bff417 	ldw	r2,-48(fp)
  813104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  813108:	e03fff15 	stw	zero,-4(fp)
  81310c:	00000606 	br	813128 <OS_TCBInit+0x2c8>
  813110:	e0bff817 	ldw	r2,-32(fp)
  813114:	e0bff315 	stw	r2,-52(fp)
  813118:	e0bff317 	ldw	r2,-52(fp)
  81311c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  813120:	00801084 	movi	r2,66
  813124:	e0bfff15 	stw	r2,-4(fp)
  813128:	e0bfff17 	ldw	r2,-4(fp)
}
  81312c:	e037883a 	mov	sp,fp
  813130:	dfc00117 	ldw	ra,4(sp)
  813134:	df000017 	ldw	fp,0(sp)
  813138:	dec00204 	addi	sp,sp,8
  81313c:	f800283a 	ret

00813140 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  813140:	defffe04 	addi	sp,sp,-8
  813144:	df000115 	stw	fp,4(sp)
  813148:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  81314c:	d0a01004 	addi	r2,gp,-32704
  813150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  813154:	d0a01104 	addi	r2,gp,-32700
  813158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  81315c:	d0a01284 	addi	r2,gp,-32694
  813160:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  813164:	d0a01304 	addi	r2,gp,-32692
  813168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  81316c:	d0a01204 	addi	r2,gp,-32696
  813170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  813174:	d0a01384 	addi	r2,gp,-32690
  813178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  81317c:	d0a01404 	addi	r2,gp,-32688
  813180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  813184:	d0a01484 	addi	r2,gp,-32686
  813188:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  81318c:	d0a01504 	addi	r2,gp,-32684
  813190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  813194:	d0a01584 	addi	r2,gp,-32682
  813198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  81319c:	d0a01604 	addi	r2,gp,-32680
  8131a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  8131a4:	d0a01684 	addi	r2,gp,-32678
  8131a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  8131ac:	d0a01704 	addi	r2,gp,-32676
  8131b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  8131b4:	d0a01784 	addi	r2,gp,-32674
  8131b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  8131bc:	d0a01804 	addi	r2,gp,-32672
  8131c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  8131c4:	d0a01884 	addi	r2,gp,-32670
  8131c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  8131cc:	d0a01904 	addi	r2,gp,-32668
  8131d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  8131d4:	d0a01984 	addi	r2,gp,-32666
  8131d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  8131dc:	d0a01a04 	addi	r2,gp,-32664
  8131e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  8131e4:	d0a01a84 	addi	r2,gp,-32662
  8131e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  8131ec:	d0a01b04 	addi	r2,gp,-32660
  8131f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  8131f4:	d0a01b84 	addi	r2,gp,-32658
  8131f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  8131fc:	d0a01c04 	addi	r2,gp,-32656
  813200:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  813204:	d0a01c84 	addi	r2,gp,-32654
  813208:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  81320c:	d0a01d04 	addi	r2,gp,-32652
  813210:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  813214:	d0a01d84 	addi	r2,gp,-32650
  813218:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  81321c:	d0a01e04 	addi	r2,gp,-32648
  813220:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  813224:	d0a01e84 	addi	r2,gp,-32646
  813228:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  81322c:	d0a01f04 	addi	r2,gp,-32644
  813230:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  813234:	d0a01f84 	addi	r2,gp,-32642
  813238:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  81323c:	d0a02004 	addi	r2,gp,-32640
  813240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  813244:	d0a02084 	addi	r2,gp,-32638
  813248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  81324c:	d0a02104 	addi	r2,gp,-32636
  813250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  813254:	d0a02184 	addi	r2,gp,-32634
  813258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  81325c:	d0a02204 	addi	r2,gp,-32632
  813260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  813264:	d0a02284 	addi	r2,gp,-32630
  813268:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  81326c:	d0a02304 	addi	r2,gp,-32628
  813270:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  813274:	d0a02384 	addi	r2,gp,-32626
  813278:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  81327c:	d0a02404 	addi	r2,gp,-32624
  813280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  813284:	d0a02484 	addi	r2,gp,-32622
  813288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  81328c:	d0a02504 	addi	r2,gp,-32620
  813290:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  813294:	d0a02584 	addi	r2,gp,-32618
  813298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  81329c:	d0a02604 	addi	r2,gp,-32616
  8132a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  8132a4:	d0a02684 	addi	r2,gp,-32614
  8132a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  8132ac:	d0a02704 	addi	r2,gp,-32612
  8132b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  8132b4:	d0a02c04 	addi	r2,gp,-32592
  8132b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  8132bc:	e037883a 	mov	sp,fp
  8132c0:	df000017 	ldw	fp,0(sp)
  8132c4:	dec00104 	addi	sp,sp,4
  8132c8:	f800283a 	ret

008132cc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  8132cc:	defff104 	addi	sp,sp,-60
  8132d0:	df000e15 	stw	fp,56(sp)
  8132d4:	df000e04 	addi	fp,sp,56
  8132d8:	e13ffa15 	stw	r4,-24(fp)
  8132dc:	e1fffd15 	stw	r7,-12(fp)
  8132e0:	e17ffb0d 	sth	r5,-20(fp)
  8132e4:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8132e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8132ec:	e0bffd17 	ldw	r2,-12(fp)
  8132f0:	1004c03a 	cmpne	r2,r2,zero
  8132f4:	1000021e 	bne	r2,zero,813300 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  8132f8:	e03fff15 	stw	zero,-4(fp)
  8132fc:	0000bb06 	br	8135ec <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813300:	e0bffa17 	ldw	r2,-24(fp)
  813304:	1004c03a 	cmpne	r2,r2,zero
  813308:	1000051e 	bne	r2,zero,813320 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81330c:	e0fffd17 	ldw	r3,-12(fp)
  813310:	00801b84 	movi	r2,110
  813314:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813318:	e03fff15 	stw	zero,-4(fp)
  81331c:	0000b306 	br	8135ec <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  813320:	e0bffa17 	ldw	r2,-24(fp)
  813324:	10800003 	ldbu	r2,0(r2)
  813328:	10803fcc 	andi	r2,r2,255
  81332c:	10800160 	cmpeqi	r2,r2,5
  813330:	1000051e 	bne	r2,zero,813348 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  813334:	e0fffd17 	ldw	r3,-12(fp)
  813338:	00800044 	movi	r2,1
  81333c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813340:	e03fff15 	stw	zero,-4(fp)
  813344:	0000a906 	br	8135ec <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  813348:	e0fffc03 	ldbu	r3,-16(fp)
  81334c:	00bfe004 	movi	r2,-128
  813350:	1884703a 	and	r2,r3,r2
  813354:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  813358:	e0bff943 	ldbu	r2,-27(fp)
  81335c:	1005003a 	cmpeq	r2,r2,zero
  813360:	1000061e 	bne	r2,zero,81337c <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  813364:	e0bffc03 	ldbu	r2,-16(fp)
  813368:	10801fcc 	andi	r2,r2,127
  81336c:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  813370:	00800044 	movi	r2,1
  813374:	e0bff905 	stb	r2,-28(fp)
  813378:	00000106 	br	813380 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  81337c:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  813380:	e0bffd17 	ldw	r2,-12(fp)
  813384:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813388:	0005303a 	rdctl	r2,status
  81338c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813390:	e0fff717 	ldw	r3,-36(fp)
  813394:	00bfff84 	movi	r2,-2
  813398:	1884703a 	and	r2,r3,r2
  81339c:	1001703a 	wrctl	status,r2
  
  return context;
  8133a0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8133a4:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  8133a8:	e0bffc03 	ldbu	r2,-16(fp)
  8133ac:	e0bffe15 	stw	r2,-8(fp)
  8133b0:	e0fffe17 	ldw	r3,-8(fp)
  8133b4:	18800060 	cmpeqi	r2,r3,1
  8133b8:	1000651e 	bne	r2,zero,813550 <OSFlagAccept+0x284>
  8133bc:	e0fffe17 	ldw	r3,-8(fp)
  8133c0:	18800088 	cmpgei	r2,r3,2
  8133c4:	1000041e 	bne	r2,zero,8133d8 <OSFlagAccept+0x10c>
  8133c8:	e0fffe17 	ldw	r3,-8(fp)
  8133cc:	1805003a 	cmpeq	r2,r3,zero
  8133d0:	1000421e 	bne	r2,zero,8134dc <OSFlagAccept+0x210>
  8133d4:	00007b06 	br	8135c4 <OSFlagAccept+0x2f8>
  8133d8:	e0fffe17 	ldw	r3,-8(fp)
  8133dc:	188000a0 	cmpeqi	r2,r3,2
  8133e0:	1000041e 	bne	r2,zero,8133f4 <OSFlagAccept+0x128>
  8133e4:	e0fffe17 	ldw	r3,-8(fp)
  8133e8:	188000e0 	cmpeqi	r2,r3,3
  8133ec:	10001e1e 	bne	r2,zero,813468 <OSFlagAccept+0x19c>
  8133f0:	00007406 	br	8135c4 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8133f4:	e0bffa17 	ldw	r2,-24(fp)
  8133f8:	10c0020b 	ldhu	r3,8(r2)
  8133fc:	e0bffb0b 	ldhu	r2,-20(fp)
  813400:	1884703a 	and	r2,r3,r2
  813404:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813408:	e0fff98b 	ldhu	r3,-26(fp)
  81340c:	e0bffb0b 	ldhu	r2,-20(fp)
  813410:	18800d1e 	bne	r3,r2,813448 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813414:	e0bff903 	ldbu	r2,-28(fp)
  813418:	10800058 	cmpnei	r2,r2,1
  81341c:	10000d1e 	bne	r2,zero,813454 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  813420:	e0bffa17 	ldw	r2,-24(fp)
  813424:	1080020b 	ldhu	r2,8(r2)
  813428:	1007883a 	mov	r3,r2
  81342c:	e0bff98b 	ldhu	r2,-26(fp)
  813430:	0084303a 	nor	r2,zero,r2
  813434:	1884703a 	and	r2,r3,r2
  813438:	1007883a 	mov	r3,r2
  81343c:	e0bffa17 	ldw	r2,-24(fp)
  813440:	10c0020d 	sth	r3,8(r2)
  813444:	00000306 	br	813454 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  813448:	e0fffd17 	ldw	r3,-12(fp)
  81344c:	00801c04 	movi	r2,112
  813450:	18800005 	stb	r2,0(r3)
  813454:	e0bff817 	ldw	r2,-32(fp)
  813458:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81345c:	e0bff617 	ldw	r2,-40(fp)
  813460:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  813464:	00005f06 	br	8135e4 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  813468:	e0bffa17 	ldw	r2,-24(fp)
  81346c:	10c0020b 	ldhu	r3,8(r2)
  813470:	e0bffb0b 	ldhu	r2,-20(fp)
  813474:	1884703a 	and	r2,r3,r2
  813478:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81347c:	e0bff98b 	ldhu	r2,-26(fp)
  813480:	1005003a 	cmpeq	r2,r2,zero
  813484:	10000d1e 	bne	r2,zero,8134bc <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813488:	e0bff903 	ldbu	r2,-28(fp)
  81348c:	10800058 	cmpnei	r2,r2,1
  813490:	10000d1e 	bne	r2,zero,8134c8 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  813494:	e0bffa17 	ldw	r2,-24(fp)
  813498:	1080020b 	ldhu	r2,8(r2)
  81349c:	1007883a 	mov	r3,r2
  8134a0:	e0bff98b 	ldhu	r2,-26(fp)
  8134a4:	0084303a 	nor	r2,zero,r2
  8134a8:	1884703a 	and	r2,r3,r2
  8134ac:	1007883a 	mov	r3,r2
  8134b0:	e0bffa17 	ldw	r2,-24(fp)
  8134b4:	10c0020d 	sth	r3,8(r2)
  8134b8:	00000306 	br	8134c8 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8134bc:	e0fffd17 	ldw	r3,-12(fp)
  8134c0:	00801c04 	movi	r2,112
  8134c4:	18800005 	stb	r2,0(r3)
  8134c8:	e0bff817 	ldw	r2,-32(fp)
  8134cc:	e0bff515 	stw	r2,-44(fp)
  8134d0:	e0bff517 	ldw	r2,-44(fp)
  8134d4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8134d8:	00004206 	br	8135e4 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8134dc:	e0bffa17 	ldw	r2,-24(fp)
  8134e0:	1080020b 	ldhu	r2,8(r2)
  8134e4:	0084303a 	nor	r2,zero,r2
  8134e8:	1007883a 	mov	r3,r2
  8134ec:	e0bffb0b 	ldhu	r2,-20(fp)
  8134f0:	1884703a 	and	r2,r3,r2
  8134f4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8134f8:	e0fff98b 	ldhu	r3,-26(fp)
  8134fc:	e0bffb0b 	ldhu	r2,-20(fp)
  813500:	18800b1e 	bne	r3,r2,813530 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813504:	e0bff903 	ldbu	r2,-28(fp)
  813508:	10800058 	cmpnei	r2,r2,1
  81350c:	10000b1e 	bne	r2,zero,81353c <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  813510:	e0bffa17 	ldw	r2,-24(fp)
  813514:	10c0020b 	ldhu	r3,8(r2)
  813518:	e0bff98b 	ldhu	r2,-26(fp)
  81351c:	1884b03a 	or	r2,r3,r2
  813520:	1007883a 	mov	r3,r2
  813524:	e0bffa17 	ldw	r2,-24(fp)
  813528:	10c0020d 	sth	r3,8(r2)
  81352c:	00000306 	br	81353c <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  813530:	e0fffd17 	ldw	r3,-12(fp)
  813534:	00801c04 	movi	r2,112
  813538:	18800005 	stb	r2,0(r3)
  81353c:	e0bff817 	ldw	r2,-32(fp)
  813540:	e0bff415 	stw	r2,-48(fp)
  813544:	e0bff417 	ldw	r2,-48(fp)
  813548:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  81354c:	00002506 	br	8135e4 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  813550:	e0bffa17 	ldw	r2,-24(fp)
  813554:	1080020b 	ldhu	r2,8(r2)
  813558:	0084303a 	nor	r2,zero,r2
  81355c:	1007883a 	mov	r3,r2
  813560:	e0bffb0b 	ldhu	r2,-20(fp)
  813564:	1884703a 	and	r2,r3,r2
  813568:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  81356c:	e0bff98b 	ldhu	r2,-26(fp)
  813570:	1005003a 	cmpeq	r2,r2,zero
  813574:	10000b1e 	bne	r2,zero,8135a4 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813578:	e0bff903 	ldbu	r2,-28(fp)
  81357c:	10800058 	cmpnei	r2,r2,1
  813580:	10000b1e 	bne	r2,zero,8135b0 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  813584:	e0bffa17 	ldw	r2,-24(fp)
  813588:	10c0020b 	ldhu	r3,8(r2)
  81358c:	e0bff98b 	ldhu	r2,-26(fp)
  813590:	1884b03a 	or	r2,r3,r2
  813594:	1007883a 	mov	r3,r2
  813598:	e0bffa17 	ldw	r2,-24(fp)
  81359c:	10c0020d 	sth	r3,8(r2)
  8135a0:	00000306 	br	8135b0 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8135a4:	e0fffd17 	ldw	r3,-12(fp)
  8135a8:	00801c04 	movi	r2,112
  8135ac:	18800005 	stb	r2,0(r3)
  8135b0:	e0bff817 	ldw	r2,-32(fp)
  8135b4:	e0bff315 	stw	r2,-52(fp)
  8135b8:	e0bff317 	ldw	r2,-52(fp)
  8135bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8135c0:	00000806 	br	8135e4 <OSFlagAccept+0x318>
  8135c4:	e0bff817 	ldw	r2,-32(fp)
  8135c8:	e0bff215 	stw	r2,-56(fp)
  8135cc:	e0bff217 	ldw	r2,-56(fp)
  8135d0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8135d4:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  8135d8:	e0fffd17 	ldw	r3,-12(fp)
  8135dc:	00801bc4 	movi	r2,111
  8135e0:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  8135e4:	e0bff98b 	ldhu	r2,-26(fp)
  8135e8:	e0bfff15 	stw	r2,-4(fp)
  8135ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8135f0:	e037883a 	mov	sp,fp
  8135f4:	df000017 	ldw	fp,0(sp)
  8135f8:	dec00104 	addi	sp,sp,4
  8135fc:	f800283a 	ret

00813600 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  813600:	defff704 	addi	sp,sp,-36
  813604:	df000815 	stw	fp,32(sp)
  813608:	df000804 	addi	fp,sp,32
  81360c:	e17ffe15 	stw	r5,-8(fp)
  813610:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  813614:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  813618:	e0bffe17 	ldw	r2,-8(fp)
  81361c:	1004c03a 	cmpne	r2,r2,zero
  813620:	1000021e 	bne	r2,zero,81362c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  813624:	e03fff15 	stw	zero,-4(fp)
  813628:	00003f06 	br	813728 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  81362c:	008020b4 	movhi	r2,130
  813630:	10808c04 	addi	r2,r2,560
  813634:	10800003 	ldbu	r2,0(r2)
  813638:	10803fcc 	andi	r2,r2,255
  81363c:	1005003a 	cmpeq	r2,r2,zero
  813640:	1000051e 	bne	r2,zero,813658 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  813644:	e0fffe17 	ldw	r3,-8(fp)
  813648:	00800404 	movi	r2,16
  81364c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  813650:	e03fff15 	stw	zero,-4(fp)
  813654:	00003406 	br	813728 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813658:	0005303a 	rdctl	r2,status
  81365c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813660:	e0fffa17 	ldw	r3,-24(fp)
  813664:	00bfff84 	movi	r2,-2
  813668:	1884703a 	and	r2,r3,r2
  81366c:	1001703a 	wrctl	status,r2
  
  return context;
  813670:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813674:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  813678:	008020b4 	movhi	r2,130
  81367c:	10808f04 	addi	r2,r2,572
  813680:	10800017 	ldw	r2,0(r2)
  813684:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  813688:	e0bffc17 	ldw	r2,-16(fp)
  81368c:	1005003a 	cmpeq	r2,r2,zero
  813690:	10001c1e 	bne	r2,zero,813704 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  813694:	008020b4 	movhi	r2,130
  813698:	10808f04 	addi	r2,r2,572
  81369c:	10800017 	ldw	r2,0(r2)
  8136a0:	10800117 	ldw	r2,4(r2)
  8136a4:	1007883a 	mov	r3,r2
  8136a8:	008020b4 	movhi	r2,130
  8136ac:	10808f04 	addi	r2,r2,572
  8136b0:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  8136b4:	e0fffc17 	ldw	r3,-16(fp)
  8136b8:	00800144 	movi	r2,5
  8136bc:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  8136c0:	e0fffc17 	ldw	r3,-16(fp)
  8136c4:	e0bffd0b 	ldhu	r2,-12(fp)
  8136c8:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  8136cc:	e0bffc17 	ldw	r2,-16(fp)
  8136d0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  8136d4:	e0fffc17 	ldw	r3,-16(fp)
  8136d8:	00800fc4 	movi	r2,63
  8136dc:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8136e0:	e0bffc17 	ldw	r2,-16(fp)
  8136e4:	100002c5 	stb	zero,11(r2)
  8136e8:	e0bffb17 	ldw	r2,-20(fp)
  8136ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136f0:	e0bff917 	ldw	r2,-28(fp)
  8136f4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  8136f8:	e0bffe17 	ldw	r2,-8(fp)
  8136fc:	10000005 	stb	zero,0(r2)
  813700:	00000706 	br	813720 <OSFlagCreate+0x120>
  813704:	e0bffb17 	ldw	r2,-20(fp)
  813708:	e0bff815 	stw	r2,-32(fp)
  81370c:	e0bff817 	ldw	r2,-32(fp)
  813710:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  813714:	e0fffe17 	ldw	r3,-8(fp)
  813718:	00801c84 	movi	r2,114
  81371c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  813720:	e0bffc17 	ldw	r2,-16(fp)
  813724:	e0bfff15 	stw	r2,-4(fp)
  813728:	e0bfff17 	ldw	r2,-4(fp)
}
  81372c:	e037883a 	mov	sp,fp
  813730:	df000017 	ldw	fp,0(sp)
  813734:	dec00104 	addi	sp,sp,4
  813738:	f800283a 	ret

0081373c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  81373c:	defff004 	addi	sp,sp,-64
  813740:	dfc00f15 	stw	ra,60(sp)
  813744:	df000e15 	stw	fp,56(sp)
  813748:	df000e04 	addi	fp,sp,56
  81374c:	e13ffb15 	stw	r4,-20(fp)
  813750:	e1bffd15 	stw	r6,-12(fp)
  813754:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813758:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81375c:	e0bffd17 	ldw	r2,-12(fp)
  813760:	1004c03a 	cmpne	r2,r2,zero
  813764:	1000031e 	bne	r2,zero,813774 <OSFlagDel+0x38>
        return (pgrp);
  813768:	e0bffb17 	ldw	r2,-20(fp)
  81376c:	e0bfff15 	stw	r2,-4(fp)
  813770:	00009606 	br	8139cc <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813774:	e0bffb17 	ldw	r2,-20(fp)
  813778:	1004c03a 	cmpne	r2,r2,zero
  81377c:	1000061e 	bne	r2,zero,813798 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813780:	e0fffd17 	ldw	r3,-12(fp)
  813784:	00801b84 	movi	r2,110
  813788:	18800005 	stb	r2,0(r3)
        return (pgrp);
  81378c:	e0fffb17 	ldw	r3,-20(fp)
  813790:	e0ffff15 	stw	r3,-4(fp)
  813794:	00008d06 	br	8139cc <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813798:	008020b4 	movhi	r2,130
  81379c:	10808c04 	addi	r2,r2,560
  8137a0:	10800003 	ldbu	r2,0(r2)
  8137a4:	10803fcc 	andi	r2,r2,255
  8137a8:	1005003a 	cmpeq	r2,r2,zero
  8137ac:	1000061e 	bne	r2,zero,8137c8 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8137b0:	e0fffd17 	ldw	r3,-12(fp)
  8137b4:	008003c4 	movi	r2,15
  8137b8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  8137bc:	e0bffb17 	ldw	r2,-20(fp)
  8137c0:	e0bfff15 	stw	r2,-4(fp)
  8137c4:	00008106 	br	8139cc <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  8137c8:	e0bffb17 	ldw	r2,-20(fp)
  8137cc:	10800003 	ldbu	r2,0(r2)
  8137d0:	10803fcc 	andi	r2,r2,255
  8137d4:	10800160 	cmpeqi	r2,r2,5
  8137d8:	1000061e 	bne	r2,zero,8137f4 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  8137dc:	e0fffd17 	ldw	r3,-12(fp)
  8137e0:	00800044 	movi	r2,1
  8137e4:	18800005 	stb	r2,0(r3)
        return (pgrp);
  8137e8:	e0fffb17 	ldw	r3,-20(fp)
  8137ec:	e0ffff15 	stw	r3,-4(fp)
  8137f0:	00007606 	br	8139cc <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137f4:	0005303a 	rdctl	r2,status
  8137f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137fc:	e0fff617 	ldw	r3,-40(fp)
  813800:	00bfff84 	movi	r2,-2
  813804:	1884703a 	and	r2,r3,r2
  813808:	1001703a 	wrctl	status,r2
  
  return context;
  81380c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  813810:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  813814:	e0bffb17 	ldw	r2,-20(fp)
  813818:	10800117 	ldw	r2,4(r2)
  81381c:	1005003a 	cmpeq	r2,r2,zero
  813820:	1000031e 	bne	r2,zero,813830 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  813824:	00800044 	movi	r2,1
  813828:	e0bffa05 	stb	r2,-24(fp)
  81382c:	00000106 	br	813834 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  813830:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  813834:	e0bffc03 	ldbu	r2,-16(fp)
  813838:	e0bffe15 	stw	r2,-8(fp)
  81383c:	e0fffe17 	ldw	r3,-8(fp)
  813840:	1805003a 	cmpeq	r2,r3,zero
  813844:	1000041e 	bne	r2,zero,813858 <OSFlagDel+0x11c>
  813848:	e0fffe17 	ldw	r3,-8(fp)
  81384c:	18800060 	cmpeqi	r2,r3,1
  813850:	1000281e 	bne	r2,zero,8138f4 <OSFlagDel+0x1b8>
  813854:	00005206 	br	8139a0 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  813858:	e0bffa03 	ldbu	r2,-24(fp)
  81385c:	1004c03a 	cmpne	r2,r2,zero
  813860:	10001a1e 	bne	r2,zero,8138cc <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  813864:	e0fffb17 	ldw	r3,-20(fp)
  813868:	00800fc4 	movi	r2,63
  81386c:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  813870:	e0bffb17 	ldw	r2,-20(fp)
  813874:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  813878:	e0bffb17 	ldw	r2,-20(fp)
  81387c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  813880:	008020b4 	movhi	r2,130
  813884:	10808f04 	addi	r2,r2,572
  813888:	10c00017 	ldw	r3,0(r2)
  81388c:	e0bffb17 	ldw	r2,-20(fp)
  813890:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  813894:	e0bffb17 	ldw	r2,-20(fp)
  813898:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  81389c:	00c020b4 	movhi	r3,130
  8138a0:	18c08f04 	addi	r3,r3,572
  8138a4:	e0bffb17 	ldw	r2,-20(fp)
  8138a8:	18800015 	stw	r2,0(r3)
  8138ac:	e0bff717 	ldw	r2,-36(fp)
  8138b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8138b4:	e0bff517 	ldw	r2,-44(fp)
  8138b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  8138bc:	e0bffd17 	ldw	r2,-12(fp)
  8138c0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  8138c4:	e03ff815 	stw	zero,-32(fp)
  8138c8:	00003e06 	br	8139c4 <OSFlagDel+0x288>
  8138cc:	e0bff717 	ldw	r2,-36(fp)
  8138d0:	e0bff415 	stw	r2,-48(fp)
  8138d4:	e0bff417 	ldw	r2,-48(fp)
  8138d8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  8138dc:	e0fffd17 	ldw	r3,-12(fp)
  8138e0:	00801244 	movi	r2,73
  8138e4:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  8138e8:	e0bffb17 	ldw	r2,-20(fp)
  8138ec:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  8138f0:	00003406 	br	8139c4 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8138f4:	e0bffb17 	ldw	r2,-20(fp)
  8138f8:	10800117 	ldw	r2,4(r2)
  8138fc:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  813900:	00000606 	br	81391c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  813904:	e13ff917 	ldw	r4,-28(fp)
  813908:	000b883a 	mov	r5,zero
  81390c:	0814a4c0 	call	814a4c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  813910:	e0bff917 	ldw	r2,-28(fp)
  813914:	10800017 	ldw	r2,0(r2)
  813918:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  81391c:	e0bff917 	ldw	r2,-28(fp)
  813920:	1004c03a 	cmpne	r2,r2,zero
  813924:	103ff71e 	bne	r2,zero,813904 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  813928:	e0fffb17 	ldw	r3,-20(fp)
  81392c:	00800fc4 	movi	r2,63
  813930:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  813934:	e0bffb17 	ldw	r2,-20(fp)
  813938:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  81393c:	e0bffb17 	ldw	r2,-20(fp)
  813940:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  813944:	008020b4 	movhi	r2,130
  813948:	10808f04 	addi	r2,r2,572
  81394c:	10c00017 	ldw	r3,0(r2)
  813950:	e0bffb17 	ldw	r2,-20(fp)
  813954:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  813958:	e0bffb17 	ldw	r2,-20(fp)
  81395c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  813960:	00c020b4 	movhi	r3,130
  813964:	18c08f04 	addi	r3,r3,572
  813968:	e0bffb17 	ldw	r2,-20(fp)
  81396c:	18800015 	stw	r2,0(r3)
  813970:	e0bff717 	ldw	r2,-36(fp)
  813974:	e0bff315 	stw	r2,-52(fp)
  813978:	e0bff317 	ldw	r2,-52(fp)
  81397c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  813980:	e0bffa03 	ldbu	r2,-24(fp)
  813984:	10800058 	cmpnei	r2,r2,1
  813988:	1000011e 	bne	r2,zero,813990 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81398c:	0812a580 	call	812a58 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  813990:	e0bffd17 	ldw	r2,-12(fp)
  813994:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  813998:	e03ff815 	stw	zero,-32(fp)
             break;
  81399c:	00000906 	br	8139c4 <OSFlagDel+0x288>
  8139a0:	e0bff717 	ldw	r2,-36(fp)
  8139a4:	e0bff215 	stw	r2,-56(fp)
  8139a8:	e0bff217 	ldw	r2,-56(fp)
  8139ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  8139b0:	e0fffd17 	ldw	r3,-12(fp)
  8139b4:	008001c4 	movi	r2,7
  8139b8:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  8139bc:	e0bffb17 	ldw	r2,-20(fp)
  8139c0:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  8139c4:	e0bff817 	ldw	r2,-32(fp)
  8139c8:	e0bfff15 	stw	r2,-4(fp)
  8139cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8139d0:	e037883a 	mov	sp,fp
  8139d4:	dfc00117 	ldw	ra,4(sp)
  8139d8:	df000017 	ldw	fp,0(sp)
  8139dc:	dec00204 	addi	sp,sp,8
  8139e0:	f800283a 	ret

008139e4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8139e4:	defff504 	addi	sp,sp,-44
  8139e8:	dfc00a15 	stw	ra,40(sp)
  8139ec:	df000915 	stw	fp,36(sp)
  8139f0:	df000904 	addi	fp,sp,36
  8139f4:	e13ffc15 	stw	r4,-16(fp)
  8139f8:	e17ffd15 	stw	r5,-12(fp)
  8139fc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813a00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813a04:	e0bffe17 	ldw	r2,-8(fp)
  813a08:	1004c03a 	cmpne	r2,r2,zero
  813a0c:	1000021e 	bne	r2,zero,813a18 <OSFlagNameGet+0x34>
        return (0);
  813a10:	e03fff15 	stw	zero,-4(fp)
  813a14:	00003e06 	br	813b10 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  813a18:	e0bffc17 	ldw	r2,-16(fp)
  813a1c:	1004c03a 	cmpne	r2,r2,zero
  813a20:	1000051e 	bne	r2,zero,813a38 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813a24:	e0fffe17 	ldw	r3,-8(fp)
  813a28:	00801b84 	movi	r2,110
  813a2c:	18800005 	stb	r2,0(r3)
        return (0);
  813a30:	e03fff15 	stw	zero,-4(fp)
  813a34:	00003606 	br	813b10 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  813a38:	e0bffd17 	ldw	r2,-12(fp)
  813a3c:	1004c03a 	cmpne	r2,r2,zero
  813a40:	1000051e 	bne	r2,zero,813a58 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  813a44:	e0fffe17 	ldw	r3,-8(fp)
  813a48:	00800304 	movi	r2,12
  813a4c:	18800005 	stb	r2,0(r3)
        return (0);
  813a50:	e03fff15 	stw	zero,-4(fp)
  813a54:	00002e06 	br	813b10 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813a58:	008020b4 	movhi	r2,130
  813a5c:	10808c04 	addi	r2,r2,560
  813a60:	10800003 	ldbu	r2,0(r2)
  813a64:	10803fcc 	andi	r2,r2,255
  813a68:	1005003a 	cmpeq	r2,r2,zero
  813a6c:	1000051e 	bne	r2,zero,813a84 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  813a70:	e0fffe17 	ldw	r3,-8(fp)
  813a74:	00800444 	movi	r2,17
  813a78:	18800005 	stb	r2,0(r3)
        return (0);
  813a7c:	e03fff15 	stw	zero,-4(fp)
  813a80:	00002306 	br	813b10 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a84:	0005303a 	rdctl	r2,status
  813a88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a8c:	e0fff917 	ldw	r3,-28(fp)
  813a90:	00bfff84 	movi	r2,-2
  813a94:	1884703a 	and	r2,r3,r2
  813a98:	1001703a 	wrctl	status,r2
  
  return context;
  813a9c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  813aa0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813aa4:	e0bffc17 	ldw	r2,-16(fp)
  813aa8:	10800003 	ldbu	r2,0(r2)
  813aac:	10803fcc 	andi	r2,r2,255
  813ab0:	10800160 	cmpeqi	r2,r2,5
  813ab4:	1000091e 	bne	r2,zero,813adc <OSFlagNameGet+0xf8>
  813ab8:	e0bffa17 	ldw	r2,-24(fp)
  813abc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ac0:	e0bff817 	ldw	r2,-32(fp)
  813ac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813ac8:	e0fffe17 	ldw	r3,-8(fp)
  813acc:	00800044 	movi	r2,1
  813ad0:	18800005 	stb	r2,0(r3)
        return (0);
  813ad4:	e03fff15 	stw	zero,-4(fp)
  813ad8:	00000d06 	br	813b10 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  813adc:	e0bffc17 	ldw	r2,-16(fp)
  813ae0:	11400284 	addi	r5,r2,10
  813ae4:	e13ffd17 	ldw	r4,-12(fp)
  813ae8:	0812b9c0 	call	812b9c <OS_StrCopy>
  813aec:	e0bffb05 	stb	r2,-20(fp)
  813af0:	e0bffa17 	ldw	r2,-24(fp)
  813af4:	e0bff715 	stw	r2,-36(fp)
  813af8:	e0bff717 	ldw	r2,-36(fp)
  813afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813b00:	e0bffe17 	ldw	r2,-8(fp)
  813b04:	10000005 	stb	zero,0(r2)
    return (len);
  813b08:	e0bffb03 	ldbu	r2,-20(fp)
  813b0c:	e0bfff15 	stw	r2,-4(fp)
  813b10:	e0bfff17 	ldw	r2,-4(fp)
}
  813b14:	e037883a 	mov	sp,fp
  813b18:	dfc00117 	ldw	ra,4(sp)
  813b1c:	df000017 	ldw	fp,0(sp)
  813b20:	dec00204 	addi	sp,sp,8
  813b24:	f800283a 	ret

00813b28 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  813b28:	defff504 	addi	sp,sp,-44
  813b2c:	dfc00a15 	stw	ra,40(sp)
  813b30:	df000915 	stw	fp,36(sp)
  813b34:	df000904 	addi	fp,sp,36
  813b38:	e13ffd15 	stw	r4,-12(fp)
  813b3c:	e17ffe15 	stw	r5,-8(fp)
  813b40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813b44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  813b48:	e0bfff17 	ldw	r2,-4(fp)
  813b4c:	1005003a 	cmpeq	r2,r2,zero
  813b50:	1000451e 	bne	r2,zero,813c68 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  813b54:	e0bffd17 	ldw	r2,-12(fp)
  813b58:	1004c03a 	cmpne	r2,r2,zero
  813b5c:	1000041e 	bne	r2,zero,813b70 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813b60:	e0ffff17 	ldw	r3,-4(fp)
  813b64:	00801b84 	movi	r2,110
  813b68:	18800005 	stb	r2,0(r3)
        return;
  813b6c:	00003e06 	br	813c68 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  813b70:	e0bffe17 	ldw	r2,-8(fp)
  813b74:	1004c03a 	cmpne	r2,r2,zero
  813b78:	1000041e 	bne	r2,zero,813b8c <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  813b7c:	e0ffff17 	ldw	r3,-4(fp)
  813b80:	00800304 	movi	r2,12
  813b84:	18800005 	stb	r2,0(r3)
        return;
  813b88:	00003706 	br	813c68 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813b8c:	008020b4 	movhi	r2,130
  813b90:	10808c04 	addi	r2,r2,560
  813b94:	10800003 	ldbu	r2,0(r2)
  813b98:	10803fcc 	andi	r2,r2,255
  813b9c:	1005003a 	cmpeq	r2,r2,zero
  813ba0:	1000041e 	bne	r2,zero,813bb4 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  813ba4:	e0ffff17 	ldw	r3,-4(fp)
  813ba8:	00800484 	movi	r2,18
  813bac:	18800005 	stb	r2,0(r3)
        return;
  813bb0:	00002d06 	br	813c68 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813bb4:	0005303a 	rdctl	r2,status
  813bb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bbc:	e0fffa17 	ldw	r3,-24(fp)
  813bc0:	00bfff84 	movi	r2,-2
  813bc4:	1884703a 	and	r2,r3,r2
  813bc8:	1001703a 	wrctl	status,r2
  
  return context;
  813bcc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813bd0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  813bd4:	e0bffd17 	ldw	r2,-12(fp)
  813bd8:	10800003 	ldbu	r2,0(r2)
  813bdc:	10803fcc 	andi	r2,r2,255
  813be0:	10800160 	cmpeqi	r2,r2,5
  813be4:	1000081e 	bne	r2,zero,813c08 <OSFlagNameSet+0xe0>
  813be8:	e0bffb17 	ldw	r2,-20(fp)
  813bec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813bf0:	e0bff917 	ldw	r2,-28(fp)
  813bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  813bf8:	e0ffff17 	ldw	r3,-4(fp)
  813bfc:	00800044 	movi	r2,1
  813c00:	18800005 	stb	r2,0(r3)
        return;
  813c04:	00001806 	br	813c68 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  813c08:	e13ffe17 	ldw	r4,-8(fp)
  813c0c:	0812c1c0 	call	812c1c <OS_StrLen>
  813c10:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  813c14:	e0bffc03 	ldbu	r2,-16(fp)
  813c18:	10800830 	cmpltui	r2,r2,32
  813c1c:	1000081e 	bne	r2,zero,813c40 <OSFlagNameSet+0x118>
  813c20:	e0bffb17 	ldw	r2,-20(fp)
  813c24:	e0bff815 	stw	r2,-32(fp)
  813c28:	e0bff817 	ldw	r2,-32(fp)
  813c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  813c30:	e0ffff17 	ldw	r3,-4(fp)
  813c34:	00801cc4 	movi	r2,115
  813c38:	18800005 	stb	r2,0(r3)
        return;
  813c3c:	00000a06 	br	813c68 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  813c40:	e0bffd17 	ldw	r2,-12(fp)
  813c44:	11000284 	addi	r4,r2,10
  813c48:	e17ffe17 	ldw	r5,-8(fp)
  813c4c:	0812b9c0 	call	812b9c <OS_StrCopy>
  813c50:	e0bffb17 	ldw	r2,-20(fp)
  813c54:	e0bff715 	stw	r2,-36(fp)
  813c58:	e0bff717 	ldw	r2,-36(fp)
  813c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813c60:	e0bfff17 	ldw	r2,-4(fp)
  813c64:	10000005 	stb	zero,0(r2)
    return;
}
  813c68:	e037883a 	mov	sp,fp
  813c6c:	dfc00117 	ldw	ra,4(sp)
  813c70:	df000017 	ldw	fp,0(sp)
  813c74:	dec00204 	addi	sp,sp,8
  813c78:	f800283a 	ret

00813c7c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  813c7c:	deffe004 	addi	sp,sp,-128
  813c80:	dfc01f15 	stw	ra,124(sp)
  813c84:	df001e15 	stw	fp,120(sp)
  813c88:	df001e04 	addi	fp,sp,120
  813c8c:	e13ff915 	stw	r4,-28(fp)
  813c90:	e17ffa0d 	sth	r5,-24(fp)
  813c94:	e1bffb05 	stb	r6,-20(fp)
  813c98:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  813c9c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  813ca0:	e0800217 	ldw	r2,8(fp)
  813ca4:	1004c03a 	cmpne	r2,r2,zero
  813ca8:	1000021e 	bne	r2,zero,813cb4 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  813cac:	e03fff15 	stw	zero,-4(fp)
  813cb0:	00017d06 	br	8142a8 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  813cb4:	e0bff917 	ldw	r2,-28(fp)
  813cb8:	1004c03a 	cmpne	r2,r2,zero
  813cbc:	1000051e 	bne	r2,zero,813cd4 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  813cc0:	e0c00217 	ldw	r3,8(fp)
  813cc4:	00801b84 	movi	r2,110
  813cc8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813ccc:	e03fff15 	stw	zero,-4(fp)
  813cd0:	00017506 	br	8142a8 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  813cd4:	008020b4 	movhi	r2,130
  813cd8:	10808c04 	addi	r2,r2,560
  813cdc:	10800003 	ldbu	r2,0(r2)
  813ce0:	10803fcc 	andi	r2,r2,255
  813ce4:	1005003a 	cmpeq	r2,r2,zero
  813ce8:	1000051e 	bne	r2,zero,813d00 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  813cec:	e0c00217 	ldw	r3,8(fp)
  813cf0:	00800084 	movi	r2,2
  813cf4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813cf8:	e03fff15 	stw	zero,-4(fp)
  813cfc:	00016a06 	br	8142a8 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  813d00:	008020b4 	movhi	r2,130
  813d04:	10807e04 	addi	r2,r2,504
  813d08:	10800003 	ldbu	r2,0(r2)
  813d0c:	10803fcc 	andi	r2,r2,255
  813d10:	1005003a 	cmpeq	r2,r2,zero
  813d14:	1000051e 	bne	r2,zero,813d2c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  813d18:	e0c00217 	ldw	r3,8(fp)
  813d1c:	00800344 	movi	r2,13
  813d20:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813d24:	e03fff15 	stw	zero,-4(fp)
  813d28:	00015f06 	br	8142a8 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  813d2c:	e0bff917 	ldw	r2,-28(fp)
  813d30:	10800003 	ldbu	r2,0(r2)
  813d34:	10803fcc 	andi	r2,r2,255
  813d38:	10800160 	cmpeqi	r2,r2,5
  813d3c:	1000051e 	bne	r2,zero,813d54 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  813d40:	e0c00217 	ldw	r3,8(fp)
  813d44:	00800044 	movi	r2,1
  813d48:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  813d4c:	e03fff15 	stw	zero,-4(fp)
  813d50:	00015506 	br	8142a8 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  813d54:	e0fffb03 	ldbu	r3,-20(fp)
  813d58:	00bfe004 	movi	r2,-128
  813d5c:	1884703a 	and	r2,r3,r2
  813d60:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  813d64:	e0bff283 	ldbu	r2,-54(fp)
  813d68:	1005003a 	cmpeq	r2,r2,zero
  813d6c:	1000071e 	bne	r2,zero,813d8c <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  813d70:	00c01fc4 	movi	r3,127
  813d74:	e0bffb03 	ldbu	r2,-20(fp)
  813d78:	10c4703a 	and	r2,r2,r3
  813d7c:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  813d80:	00800044 	movi	r2,1
  813d84:	e0bff205 	stb	r2,-56(fp)
  813d88:	00000106 	br	813d90 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  813d8c:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d90:	0005303a 	rdctl	r2,status
  813d94:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d98:	e0fff017 	ldw	r3,-64(fp)
  813d9c:	00bfff84 	movi	r2,-2
  813da0:	1884703a 	and	r2,r3,r2
  813da4:	1001703a 	wrctl	status,r2
  
  return context;
  813da8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  813dac:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  813db0:	e0bffb03 	ldbu	r2,-20(fp)
  813db4:	e0bffe15 	stw	r2,-8(fp)
  813db8:	e0fffe17 	ldw	r3,-8(fp)
  813dbc:	18800060 	cmpeqi	r2,r3,1
  813dc0:	1000981e 	bne	r2,zero,814024 <OSFlagPend+0x3a8>
  813dc4:	e0fffe17 	ldw	r3,-8(fp)
  813dc8:	18800088 	cmpgei	r2,r3,2
  813dcc:	1000041e 	bne	r2,zero,813de0 <OSFlagPend+0x164>
  813dd0:	e0fffe17 	ldw	r3,-8(fp)
  813dd4:	1805003a 	cmpeq	r2,r3,zero
  813dd8:	1000641e 	bne	r2,zero,813f6c <OSFlagPend+0x2f0>
  813ddc:	0000bf06 	br	8140dc <OSFlagPend+0x460>
  813de0:	e0fffe17 	ldw	r3,-8(fp)
  813de4:	188000a0 	cmpeqi	r2,r3,2
  813de8:	1000041e 	bne	r2,zero,813dfc <OSFlagPend+0x180>
  813dec:	e0fffe17 	ldw	r3,-8(fp)
  813df0:	188000e0 	cmpeqi	r2,r3,3
  813df4:	10002f1e 	bne	r2,zero,813eb4 <OSFlagPend+0x238>
  813df8:	0000b806 	br	8140dc <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  813dfc:	e0bff917 	ldw	r2,-28(fp)
  813e00:	10c0020b 	ldhu	r3,8(r2)
  813e04:	e0bffa0b 	ldhu	r2,-24(fp)
  813e08:	1884703a 	and	r2,r3,r2
  813e0c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813e10:	e0fff30b 	ldhu	r3,-52(fp)
  813e14:	e0bffa0b 	ldhu	r2,-24(fp)
  813e18:	18801a1e 	bne	r3,r2,813e84 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813e1c:	e0bff203 	ldbu	r2,-56(fp)
  813e20:	10800058 	cmpnei	r2,r2,1
  813e24:	1000091e 	bne	r2,zero,813e4c <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  813e28:	e0bff917 	ldw	r2,-28(fp)
  813e2c:	1080020b 	ldhu	r2,8(r2)
  813e30:	1007883a 	mov	r3,r2
  813e34:	e0bff30b 	ldhu	r2,-52(fp)
  813e38:	0084303a 	nor	r2,zero,r2
  813e3c:	1884703a 	and	r2,r3,r2
  813e40:	1007883a 	mov	r3,r2
  813e44:	e0bff917 	ldw	r2,-28(fp)
  813e48:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813e4c:	008020b4 	movhi	r2,130
  813e50:	10808d04 	addi	r2,r2,564
  813e54:	10c00017 	ldw	r3,0(r2)
  813e58:	e0bff30b 	ldhu	r2,-52(fp)
  813e5c:	18800b0d 	sth	r2,44(r3)
  813e60:	e0bff117 	ldw	r2,-60(fp)
  813e64:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813e68:	e0bfef17 	ldw	r2,-68(fp)
  813e6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813e70:	e0800217 	ldw	r2,8(fp)
  813e74:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813e78:	e0bff30b 	ldhu	r2,-52(fp)
  813e7c:	e0bfff15 	stw	r2,-4(fp)
  813e80:	00010906 	br	8142a8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813e84:	e1bffa0b 	ldhu	r6,-24(fp)
  813e88:	e1fffb03 	ldbu	r7,-20(fp)
  813e8c:	e0bffc0b 	ldhu	r2,-16(fp)
  813e90:	e17ff404 	addi	r5,fp,-48
  813e94:	d8800015 	stw	r2,0(sp)
  813e98:	e13ff917 	ldw	r4,-28(fp)
  813e9c:	08147a40 	call	8147a4 <OS_FlagBlock>
  813ea0:	e0bff117 	ldw	r2,-60(fp)
  813ea4:	e0bfee15 	stw	r2,-72(fp)
  813ea8:	e0bfee17 	ldw	r2,-72(fp)
  813eac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813eb0:	00009506 	br	814108 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  813eb4:	e0bff917 	ldw	r2,-28(fp)
  813eb8:	10c0020b 	ldhu	r3,8(r2)
  813ebc:	e0bffa0b 	ldhu	r2,-24(fp)
  813ec0:	1884703a 	and	r2,r3,r2
  813ec4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  813ec8:	e0bff30b 	ldhu	r2,-52(fp)
  813ecc:	1005003a 	cmpeq	r2,r2,zero
  813ed0:	10001a1e 	bne	r2,zero,813f3c <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813ed4:	e0bff203 	ldbu	r2,-56(fp)
  813ed8:	10800058 	cmpnei	r2,r2,1
  813edc:	1000091e 	bne	r2,zero,813f04 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  813ee0:	e0bff917 	ldw	r2,-28(fp)
  813ee4:	1080020b 	ldhu	r2,8(r2)
  813ee8:	1007883a 	mov	r3,r2
  813eec:	e0bff30b 	ldhu	r2,-52(fp)
  813ef0:	0084303a 	nor	r2,zero,r2
  813ef4:	1884703a 	and	r2,r3,r2
  813ef8:	1007883a 	mov	r3,r2
  813efc:	e0bff917 	ldw	r2,-28(fp)
  813f00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813f04:	008020b4 	movhi	r2,130
  813f08:	10808d04 	addi	r2,r2,564
  813f0c:	10c00017 	ldw	r3,0(r2)
  813f10:	e0bff30b 	ldhu	r2,-52(fp)
  813f14:	18800b0d 	sth	r2,44(r3)
  813f18:	e0bff117 	ldw	r2,-60(fp)
  813f1c:	e0bfed15 	stw	r2,-76(fp)
  813f20:	e0bfed17 	ldw	r2,-76(fp)
  813f24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813f28:	e0800217 	ldw	r2,8(fp)
  813f2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813f30:	e0fff30b 	ldhu	r3,-52(fp)
  813f34:	e0ffff15 	stw	r3,-4(fp)
  813f38:	0000db06 	br	8142a8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813f3c:	e1bffa0b 	ldhu	r6,-24(fp)
  813f40:	e1fffb03 	ldbu	r7,-20(fp)
  813f44:	e0bffc0b 	ldhu	r2,-16(fp)
  813f48:	e17ff404 	addi	r5,fp,-48
  813f4c:	d8800015 	stw	r2,0(sp)
  813f50:	e13ff917 	ldw	r4,-28(fp)
  813f54:	08147a40 	call	8147a4 <OS_FlagBlock>
  813f58:	e0bff117 	ldw	r2,-60(fp)
  813f5c:	e0bfec15 	stw	r2,-80(fp)
  813f60:	e0bfec17 	ldw	r2,-80(fp)
  813f64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  813f68:	00006706 	br	814108 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  813f6c:	e0bff917 	ldw	r2,-28(fp)
  813f70:	1080020b 	ldhu	r2,8(r2)
  813f74:	0084303a 	nor	r2,zero,r2
  813f78:	1007883a 	mov	r3,r2
  813f7c:	e0bffa0b 	ldhu	r2,-24(fp)
  813f80:	1884703a 	and	r2,r3,r2
  813f84:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  813f88:	e0fff30b 	ldhu	r3,-52(fp)
  813f8c:	e0bffa0b 	ldhu	r2,-24(fp)
  813f90:	1880181e 	bne	r3,r2,813ff4 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  813f94:	e0bff203 	ldbu	r2,-56(fp)
  813f98:	10800058 	cmpnei	r2,r2,1
  813f9c:	1000071e 	bne	r2,zero,813fbc <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  813fa0:	e0bff917 	ldw	r2,-28(fp)
  813fa4:	10c0020b 	ldhu	r3,8(r2)
  813fa8:	e0bff30b 	ldhu	r2,-52(fp)
  813fac:	1884b03a 	or	r2,r3,r2
  813fb0:	1007883a 	mov	r3,r2
  813fb4:	e0bff917 	ldw	r2,-28(fp)
  813fb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  813fbc:	008020b4 	movhi	r2,130
  813fc0:	10808d04 	addi	r2,r2,564
  813fc4:	10c00017 	ldw	r3,0(r2)
  813fc8:	e0bff30b 	ldhu	r2,-52(fp)
  813fcc:	18800b0d 	sth	r2,44(r3)
  813fd0:	e0bff117 	ldw	r2,-60(fp)
  813fd4:	e0bfeb15 	stw	r2,-84(fp)
  813fd8:	e0bfeb17 	ldw	r2,-84(fp)
  813fdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  813fe0:	e0800217 	ldw	r2,8(fp)
  813fe4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  813fe8:	e0bff30b 	ldhu	r2,-52(fp)
  813fec:	e0bfff15 	stw	r2,-4(fp)
  813ff0:	0000ad06 	br	8142a8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  813ff4:	e1bffa0b 	ldhu	r6,-24(fp)
  813ff8:	e1fffb03 	ldbu	r7,-20(fp)
  813ffc:	e0bffc0b 	ldhu	r2,-16(fp)
  814000:	e17ff404 	addi	r5,fp,-48
  814004:	d8800015 	stw	r2,0(sp)
  814008:	e13ff917 	ldw	r4,-28(fp)
  81400c:	08147a40 	call	8147a4 <OS_FlagBlock>
  814010:	e0bff117 	ldw	r2,-60(fp)
  814014:	e0bfea15 	stw	r2,-88(fp)
  814018:	e0bfea17 	ldw	r2,-88(fp)
  81401c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  814020:	00003906 	br	814108 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  814024:	e0bff917 	ldw	r2,-28(fp)
  814028:	1080020b 	ldhu	r2,8(r2)
  81402c:	0084303a 	nor	r2,zero,r2
  814030:	1007883a 	mov	r3,r2
  814034:	e0bffa0b 	ldhu	r2,-24(fp)
  814038:	1884703a 	and	r2,r3,r2
  81403c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  814040:	e0bff30b 	ldhu	r2,-52(fp)
  814044:	1005003a 	cmpeq	r2,r2,zero
  814048:	1000181e 	bne	r2,zero,8140ac <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81404c:	e0bff203 	ldbu	r2,-56(fp)
  814050:	10800058 	cmpnei	r2,r2,1
  814054:	1000071e 	bne	r2,zero,814074 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  814058:	e0bff917 	ldw	r2,-28(fp)
  81405c:	10c0020b 	ldhu	r3,8(r2)
  814060:	e0bff30b 	ldhu	r2,-52(fp)
  814064:	1884b03a 	or	r2,r3,r2
  814068:	1007883a 	mov	r3,r2
  81406c:	e0bff917 	ldw	r2,-28(fp)
  814070:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  814074:	008020b4 	movhi	r2,130
  814078:	10808d04 	addi	r2,r2,564
  81407c:	10c00017 	ldw	r3,0(r2)
  814080:	e0bff30b 	ldhu	r2,-52(fp)
  814084:	18800b0d 	sth	r2,44(r3)
  814088:	e0bff117 	ldw	r2,-60(fp)
  81408c:	e0bfe915 	stw	r2,-92(fp)
  814090:	e0bfe917 	ldw	r2,-92(fp)
  814094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  814098:	e0800217 	ldw	r2,8(fp)
  81409c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8140a0:	e0fff30b 	ldhu	r3,-52(fp)
  8140a4:	e0ffff15 	stw	r3,-4(fp)
  8140a8:	00007f06 	br	8142a8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8140ac:	e1bffa0b 	ldhu	r6,-24(fp)
  8140b0:	e1fffb03 	ldbu	r7,-20(fp)
  8140b4:	e0bffc0b 	ldhu	r2,-16(fp)
  8140b8:	e17ff404 	addi	r5,fp,-48
  8140bc:	d8800015 	stw	r2,0(sp)
  8140c0:	e13ff917 	ldw	r4,-28(fp)
  8140c4:	08147a40 	call	8147a4 <OS_FlagBlock>
  8140c8:	e0bff117 	ldw	r2,-60(fp)
  8140cc:	e0bfe815 	stw	r2,-96(fp)
  8140d0:	e0bfe817 	ldw	r2,-96(fp)
  8140d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8140d8:	00000b06 	br	814108 <OSFlagPend+0x48c>
  8140dc:	e0bff117 	ldw	r2,-60(fp)
  8140e0:	e0bfe715 	stw	r2,-100(fp)
  8140e4:	e0bfe717 	ldw	r2,-100(fp)
  8140e8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8140ec:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8140f0:	e0c00217 	ldw	r3,8(fp)
  8140f4:	00801bc4 	movi	r2,111
  8140f8:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  8140fc:	e0bff30b 	ldhu	r2,-52(fp)
  814100:	e0bfff15 	stw	r2,-4(fp)
  814104:	00006806 	br	8142a8 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  814108:	0812a580 	call	812a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81410c:	0005303a 	rdctl	r2,status
  814110:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814114:	e0ffe617 	ldw	r3,-104(fp)
  814118:	00bfff84 	movi	r2,-2
  81411c:	1884703a 	and	r2,r3,r2
  814120:	1001703a 	wrctl	status,r2
  
  return context;
  814124:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  814128:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  81412c:	008020b4 	movhi	r2,130
  814130:	10808d04 	addi	r2,r2,564
  814134:	10800017 	ldw	r2,0(r2)
  814138:	10800c43 	ldbu	r2,49(r2)
  81413c:	10803fcc 	andi	r2,r2,255
  814140:	1005003a 	cmpeq	r2,r2,zero
  814144:	1000221e 	bne	r2,zero,8141d0 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  814148:	008020b4 	movhi	r2,130
  81414c:	10808d04 	addi	r2,r2,564
  814150:	10800017 	ldw	r2,0(r2)
  814154:	10800c43 	ldbu	r2,49(r2)
  814158:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81415c:	008020b4 	movhi	r2,130
  814160:	10808d04 	addi	r2,r2,564
  814164:	10800017 	ldw	r2,0(r2)
  814168:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  81416c:	e13ff404 	addi	r4,fp,-48
  814170:	0814b5c0 	call	814b5c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  814174:	008020b4 	movhi	r2,130
  814178:	10808d04 	addi	r2,r2,564
  81417c:	10800017 	ldw	r2,0(r2)
  814180:	10000c05 	stb	zero,48(r2)
  814184:	e0bff117 	ldw	r2,-60(fp)
  814188:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81418c:	e0bfe517 	ldw	r2,-108(fp)
  814190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  814194:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  814198:	e0bff243 	ldbu	r2,-55(fp)
  81419c:	108000a0 	cmpeqi	r2,r2,2
  8141a0:	1000011e 	bne	r2,zero,8141a8 <OSFlagPend+0x52c>
  8141a4:	00000406 	br	8141b8 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  8141a8:	e0c00217 	ldw	r3,8(fp)
  8141ac:	00800384 	movi	r2,14
  8141b0:	18800005 	stb	r2,0(r3)
                 break;
  8141b4:	00000306 	br	8141c4 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  8141b8:	e0c00217 	ldw	r3,8(fp)
  8141bc:	00800284 	movi	r2,10
  8141c0:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  8141c4:	e0fff30b 	ldhu	r3,-52(fp)
  8141c8:	e0ffff15 	stw	r3,-4(fp)
  8141cc:	00003606 	br	8142a8 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8141d0:	008020b4 	movhi	r2,130
  8141d4:	10808d04 	addi	r2,r2,564
  8141d8:	10800017 	ldw	r2,0(r2)
  8141dc:	10800b0b 	ldhu	r2,44(r2)
  8141e0:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8141e4:	e0bff203 	ldbu	r2,-56(fp)
  8141e8:	10800058 	cmpnei	r2,r2,1
  8141ec:	1000261e 	bne	r2,zero,814288 <OSFlagPend+0x60c>
        switch (wait_type) {
  8141f0:	e0bffb03 	ldbu	r2,-20(fp)
  8141f4:	e0bffd15 	stw	r2,-12(fp)
  8141f8:	e0fffd17 	ldw	r3,-12(fp)
  8141fc:	1804803a 	cmplt	r2,r3,zero
  814200:	1000181e 	bne	r2,zero,814264 <OSFlagPend+0x5e8>
  814204:	e0fffd17 	ldw	r3,-12(fp)
  814208:	18800090 	cmplti	r2,r3,2
  81420c:	10000d1e 	bne	r2,zero,814244 <OSFlagPend+0x5c8>
  814210:	e0fffd17 	ldw	r3,-12(fp)
  814214:	18800108 	cmpgei	r2,r3,4
  814218:	1000121e 	bne	r2,zero,814264 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  81421c:	e0bff917 	ldw	r2,-28(fp)
  814220:	1080020b 	ldhu	r2,8(r2)
  814224:	1007883a 	mov	r3,r2
  814228:	e0bff30b 	ldhu	r2,-52(fp)
  81422c:	0084303a 	nor	r2,zero,r2
  814230:	1884703a 	and	r2,r3,r2
  814234:	1007883a 	mov	r3,r2
  814238:	e0bff917 	ldw	r2,-28(fp)
  81423c:	10c0020d 	sth	r3,8(r2)
                 break;
  814240:	00001106 	br	814288 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  814244:	e0bff917 	ldw	r2,-28(fp)
  814248:	10c0020b 	ldhu	r3,8(r2)
  81424c:	e0bff30b 	ldhu	r2,-52(fp)
  814250:	1884b03a 	or	r2,r3,r2
  814254:	1007883a 	mov	r3,r2
  814258:	e0bff917 	ldw	r2,-28(fp)
  81425c:	10c0020d 	sth	r3,8(r2)
                 break;
  814260:	00000906 	br	814288 <OSFlagPend+0x60c>
  814264:	e0bff117 	ldw	r2,-60(fp)
  814268:	e0bfe415 	stw	r2,-112(fp)
  81426c:	e0bfe417 	ldw	r2,-112(fp)
  814270:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  814274:	e0c00217 	ldw	r3,8(fp)
  814278:	00801bc4 	movi	r2,111
  81427c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  814280:	e03fff15 	stw	zero,-4(fp)
  814284:	00000806 	br	8142a8 <OSFlagPend+0x62c>
  814288:	e0bff117 	ldw	r2,-60(fp)
  81428c:	e0bfe315 	stw	r2,-116(fp)
  814290:	e0bfe317 	ldw	r2,-116(fp)
  814294:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  814298:	e0800217 	ldw	r2,8(fp)
  81429c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  8142a0:	e0bff30b 	ldhu	r2,-52(fp)
  8142a4:	e0bfff15 	stw	r2,-4(fp)
  8142a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8142ac:	e037883a 	mov	sp,fp
  8142b0:	dfc00117 	ldw	ra,4(sp)
  8142b4:	df000017 	ldw	fp,0(sp)
  8142b8:	dec00204 	addi	sp,sp,8
  8142bc:	f800283a 	ret

008142c0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  8142c0:	defffb04 	addi	sp,sp,-20
  8142c4:	df000415 	stw	fp,16(sp)
  8142c8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8142cc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142d0:	0005303a 	rdctl	r2,status
  8142d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142d8:	e0fffd17 	ldw	r3,-12(fp)
  8142dc:	00bfff84 	movi	r2,-2
  8142e0:	1884703a 	and	r2,r3,r2
  8142e4:	1001703a 	wrctl	status,r2
  
  return context;
  8142e8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8142ec:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8142f0:	008020b4 	movhi	r2,130
  8142f4:	10808d04 	addi	r2,r2,564
  8142f8:	10800017 	ldw	r2,0(r2)
  8142fc:	10800b0b 	ldhu	r2,44(r2)
  814300:	e0bfff0d 	sth	r2,-4(fp)
  814304:	e0bffe17 	ldw	r2,-8(fp)
  814308:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81430c:	e0bffc17 	ldw	r2,-16(fp)
  814310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  814314:	e0bfff0b 	ldhu	r2,-4(fp)
}
  814318:	e037883a 	mov	sp,fp
  81431c:	df000017 	ldw	fp,0(sp)
  814320:	dec00104 	addi	sp,sp,4
  814324:	f800283a 	ret

00814328 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  814328:	deffed04 	addi	sp,sp,-76
  81432c:	dfc01215 	stw	ra,72(sp)
  814330:	df001115 	stw	fp,68(sp)
  814334:	df001104 	addi	fp,sp,68
  814338:	e13ff915 	stw	r4,-28(fp)
  81433c:	e1fffc15 	stw	r7,-16(fp)
  814340:	e17ffa0d 	sth	r5,-24(fp)
  814344:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  814348:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81434c:	e0bffc17 	ldw	r2,-16(fp)
  814350:	1004c03a 	cmpne	r2,r2,zero
  814354:	1000021e 	bne	r2,zero,814360 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  814358:	e03fff15 	stw	zero,-4(fp)
  81435c:	0000d606 	br	8146b8 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  814360:	e0bff917 	ldw	r2,-28(fp)
  814364:	1004c03a 	cmpne	r2,r2,zero
  814368:	1000051e 	bne	r2,zero,814380 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81436c:	e0fffc17 	ldw	r3,-16(fp)
  814370:	00801b84 	movi	r2,110
  814374:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  814378:	e03fff15 	stw	zero,-4(fp)
  81437c:	0000ce06 	br	8146b8 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  814380:	e0bff917 	ldw	r2,-28(fp)
  814384:	10800003 	ldbu	r2,0(r2)
  814388:	10803fcc 	andi	r2,r2,255
  81438c:	10800160 	cmpeqi	r2,r2,5
  814390:	1000051e 	bne	r2,zero,8143a8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  814394:	e0fffc17 	ldw	r3,-16(fp)
  814398:	00800044 	movi	r2,1
  81439c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8143a0:	e03fff15 	stw	zero,-4(fp)
  8143a4:	0000c406 	br	8146b8 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8143a8:	0005303a 	rdctl	r2,status
  8143ac:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8143b0:	e0fff417 	ldw	r3,-48(fp)
  8143b4:	00bfff84 	movi	r2,-2
  8143b8:	1884703a 	and	r2,r3,r2
  8143bc:	1001703a 	wrctl	status,r2
  
  return context;
  8143c0:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8143c4:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  8143c8:	e0bffb03 	ldbu	r2,-20(fp)
  8143cc:	e0bffe15 	stw	r2,-8(fp)
  8143d0:	e0fffe17 	ldw	r3,-8(fp)
  8143d4:	1805003a 	cmpeq	r2,r3,zero
  8143d8:	1000041e 	bne	r2,zero,8143ec <OSFlagPost+0xc4>
  8143dc:	e0fffe17 	ldw	r3,-8(fp)
  8143e0:	18800060 	cmpeqi	r2,r3,1
  8143e4:	10000b1e 	bne	r2,zero,814414 <OSFlagPost+0xec>
  8143e8:	00001206 	br	814434 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8143ec:	e0bff917 	ldw	r2,-28(fp)
  8143f0:	1080020b 	ldhu	r2,8(r2)
  8143f4:	1007883a 	mov	r3,r2
  8143f8:	e0bffa0b 	ldhu	r2,-24(fp)
  8143fc:	0084303a 	nor	r2,zero,r2
  814400:	1884703a 	and	r2,r3,r2
  814404:	1007883a 	mov	r3,r2
  814408:	e0bff917 	ldw	r2,-28(fp)
  81440c:	10c0020d 	sth	r3,8(r2)
             break;
  814410:	00001106 	br	814458 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  814414:	e0bff917 	ldw	r2,-28(fp)
  814418:	10c0020b 	ldhu	r3,8(r2)
  81441c:	e0bffa0b 	ldhu	r2,-24(fp)
  814420:	1884b03a 	or	r2,r3,r2
  814424:	1007883a 	mov	r3,r2
  814428:	e0bff917 	ldw	r2,-28(fp)
  81442c:	10c0020d 	sth	r3,8(r2)
             break;
  814430:	00000906 	br	814458 <OSFlagPost+0x130>
  814434:	e0bff517 	ldw	r2,-44(fp)
  814438:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81443c:	e0bff317 	ldw	r2,-52(fp)
  814440:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  814444:	e0fffc17 	ldw	r3,-16(fp)
  814448:	00801c44 	movi	r2,113
  81444c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  814450:	e03fff15 	stw	zero,-4(fp)
  814454:	00009806 	br	8146b8 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  814458:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  81445c:	e0bff917 	ldw	r2,-28(fp)
  814460:	10800117 	ldw	r2,4(r2)
  814464:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  814468:	00007506 	br	814640 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  81446c:	e0bff817 	ldw	r2,-32(fp)
  814470:	10800483 	ldbu	r2,18(r2)
  814474:	10803fcc 	andi	r2,r2,255
  814478:	e0bffd15 	stw	r2,-12(fp)
  81447c:	e0fffd17 	ldw	r3,-12(fp)
  814480:	18800060 	cmpeqi	r2,r3,1
  814484:	10004d1e 	bne	r2,zero,8145bc <OSFlagPost+0x294>
  814488:	e0fffd17 	ldw	r3,-12(fp)
  81448c:	18800088 	cmpgei	r2,r3,2
  814490:	1000041e 	bne	r2,zero,8144a4 <OSFlagPost+0x17c>
  814494:	e0fffd17 	ldw	r3,-12(fp)
  814498:	1805003a 	cmpeq	r2,r3,zero
  81449c:	1000301e 	bne	r2,zero,814560 <OSFlagPost+0x238>
  8144a0:	00005b06 	br	814610 <OSFlagPost+0x2e8>
  8144a4:	e0fffd17 	ldw	r3,-12(fp)
  8144a8:	188000a0 	cmpeqi	r2,r3,2
  8144ac:	1000041e 	bne	r2,zero,8144c0 <OSFlagPost+0x198>
  8144b0:	e0fffd17 	ldw	r3,-12(fp)
  8144b4:	188000e0 	cmpeqi	r2,r3,3
  8144b8:	1000161e 	bne	r2,zero,814514 <OSFlagPost+0x1ec>
  8144bc:	00005406 	br	814610 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8144c0:	e0bff917 	ldw	r2,-28(fp)
  8144c4:	10c0020b 	ldhu	r3,8(r2)
  8144c8:	e0bff817 	ldw	r2,-32(fp)
  8144cc:	1080040b 	ldhu	r2,16(r2)
  8144d0:	1884703a 	and	r2,r3,r2
  8144d4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8144d8:	e0bff817 	ldw	r2,-32(fp)
  8144dc:	1080040b 	ldhu	r2,16(r2)
  8144e0:	10ffffcc 	andi	r3,r2,65535
  8144e4:	e0bff68b 	ldhu	r2,-38(fp)
  8144e8:	1880521e 	bne	r3,r2,814634 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8144ec:	e17ff68b 	ldhu	r5,-38(fp)
  8144f0:	e13ff817 	ldw	r4,-32(fp)
  8144f4:	0814a4c0 	call	814a4c <OS_FlagTaskRdy>
  8144f8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8144fc:	e0bff603 	ldbu	r2,-40(fp)
  814500:	10800058 	cmpnei	r2,r2,1
  814504:	10004b1e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814508:	00800044 	movi	r2,1
  81450c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  814510:	00004806 	br	814634 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  814514:	e0bff917 	ldw	r2,-28(fp)
  814518:	10c0020b 	ldhu	r3,8(r2)
  81451c:	e0bff817 	ldw	r2,-32(fp)
  814520:	1080040b 	ldhu	r2,16(r2)
  814524:	1884703a 	and	r2,r3,r2
  814528:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  81452c:	e0bff68b 	ldhu	r2,-38(fp)
  814530:	1005003a 	cmpeq	r2,r2,zero
  814534:	10003f1e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  814538:	e17ff68b 	ldhu	r5,-38(fp)
  81453c:	e13ff817 	ldw	r4,-32(fp)
  814540:	0814a4c0 	call	814a4c <OS_FlagTaskRdy>
  814544:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  814548:	e0bff603 	ldbu	r2,-40(fp)
  81454c:	10800058 	cmpnei	r2,r2,1
  814550:	1000381e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814554:	00800044 	movi	r2,1
  814558:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81455c:	00003506 	br	814634 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  814560:	e0bff917 	ldw	r2,-28(fp)
  814564:	1080020b 	ldhu	r2,8(r2)
  814568:	0084303a 	nor	r2,zero,r2
  81456c:	1007883a 	mov	r3,r2
  814570:	e0bff817 	ldw	r2,-32(fp)
  814574:	1080040b 	ldhu	r2,16(r2)
  814578:	1884703a 	and	r2,r3,r2
  81457c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  814580:	e0bff817 	ldw	r2,-32(fp)
  814584:	1080040b 	ldhu	r2,16(r2)
  814588:	10ffffcc 	andi	r3,r2,65535
  81458c:	e0bff68b 	ldhu	r2,-38(fp)
  814590:	1880281e 	bne	r3,r2,814634 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  814594:	e17ff68b 	ldhu	r5,-38(fp)
  814598:	e13ff817 	ldw	r4,-32(fp)
  81459c:	0814a4c0 	call	814a4c <OS_FlagTaskRdy>
  8145a0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8145a4:	e0bff603 	ldbu	r2,-40(fp)
  8145a8:	10800058 	cmpnei	r2,r2,1
  8145ac:	1000211e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8145b0:	00800044 	movi	r2,1
  8145b4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8145b8:	00001e06 	br	814634 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8145bc:	e0bff917 	ldw	r2,-28(fp)
  8145c0:	1080020b 	ldhu	r2,8(r2)
  8145c4:	0084303a 	nor	r2,zero,r2
  8145c8:	1007883a 	mov	r3,r2
  8145cc:	e0bff817 	ldw	r2,-32(fp)
  8145d0:	1080040b 	ldhu	r2,16(r2)
  8145d4:	1884703a 	and	r2,r3,r2
  8145d8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8145dc:	e0bff68b 	ldhu	r2,-38(fp)
  8145e0:	1005003a 	cmpeq	r2,r2,zero
  8145e4:	1000131e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8145e8:	e17ff68b 	ldhu	r5,-38(fp)
  8145ec:	e13ff817 	ldw	r4,-32(fp)
  8145f0:	0814a4c0 	call	814a4c <OS_FlagTaskRdy>
  8145f4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8145f8:	e0bff603 	ldbu	r2,-40(fp)
  8145fc:	10800058 	cmpnei	r2,r2,1
  814600:	10000c1e 	bne	r2,zero,814634 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  814604:	00800044 	movi	r2,1
  814608:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81460c:	00000906 	br	814634 <OSFlagPost+0x30c>
  814610:	e0bff517 	ldw	r2,-44(fp)
  814614:	e0bff215 	stw	r2,-56(fp)
  814618:	e0bff217 	ldw	r2,-56(fp)
  81461c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  814620:	e0fffc17 	ldw	r3,-16(fp)
  814624:	00801bc4 	movi	r2,111
  814628:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81462c:	e03fff15 	stw	zero,-4(fp)
  814630:	00002106 	br	8146b8 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  814634:	e0bff817 	ldw	r2,-32(fp)
  814638:	10800017 	ldw	r2,0(r2)
  81463c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  814640:	e0bff817 	ldw	r2,-32(fp)
  814644:	1004c03a 	cmpne	r2,r2,zero
  814648:	103f881e 	bne	r2,zero,81446c <OSFlagPost+0x144>
  81464c:	e0bff517 	ldw	r2,-44(fp)
  814650:	e0bff115 	stw	r2,-60(fp)
  814654:	e0bff117 	ldw	r2,-60(fp)
  814658:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  81465c:	e0bff783 	ldbu	r2,-34(fp)
  814660:	10800058 	cmpnei	r2,r2,1
  814664:	1000011e 	bne	r2,zero,81466c <OSFlagPost+0x344>
        OS_Sched();
  814668:	0812a580 	call	812a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81466c:	0005303a 	rdctl	r2,status
  814670:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814674:	e0fff017 	ldw	r3,-64(fp)
  814678:	00bfff84 	movi	r2,-2
  81467c:	1884703a 	and	r2,r3,r2
  814680:	1001703a 	wrctl	status,r2
  
  return context;
  814684:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  814688:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  81468c:	e0bff917 	ldw	r2,-28(fp)
  814690:	1080020b 	ldhu	r2,8(r2)
  814694:	e0bff70d 	sth	r2,-36(fp)
  814698:	e0bff517 	ldw	r2,-44(fp)
  81469c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146a0:	e0bfef17 	ldw	r2,-68(fp)
  8146a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  8146a8:	e0bffc17 	ldw	r2,-16(fp)
  8146ac:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  8146b0:	e0bff70b 	ldhu	r2,-36(fp)
  8146b4:	e0bfff15 	stw	r2,-4(fp)
  8146b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8146bc:	e037883a 	mov	sp,fp
  8146c0:	dfc00117 	ldw	ra,4(sp)
  8146c4:	df000017 	ldw	fp,0(sp)
  8146c8:	dec00204 	addi	sp,sp,8
  8146cc:	f800283a 	ret

008146d0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  8146d0:	defff804 	addi	sp,sp,-32
  8146d4:	df000715 	stw	fp,28(sp)
  8146d8:	df000704 	addi	fp,sp,28
  8146dc:	e13ffd15 	stw	r4,-12(fp)
  8146e0:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  8146e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  8146e8:	e0bffe17 	ldw	r2,-8(fp)
  8146ec:	1004c03a 	cmpne	r2,r2,zero
  8146f0:	1000021e 	bne	r2,zero,8146fc <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  8146f4:	e03fff15 	stw	zero,-4(fp)
  8146f8:	00002506 	br	814790 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  8146fc:	e0bffd17 	ldw	r2,-12(fp)
  814700:	1004c03a 	cmpne	r2,r2,zero
  814704:	1000051e 	bne	r2,zero,81471c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  814708:	e0fffe17 	ldw	r3,-8(fp)
  81470c:	00801b84 	movi	r2,110
  814710:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  814714:	e03fff15 	stw	zero,-4(fp)
  814718:	00001d06 	br	814790 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  81471c:	e0bffd17 	ldw	r2,-12(fp)
  814720:	10800003 	ldbu	r2,0(r2)
  814724:	10803fcc 	andi	r2,r2,255
  814728:	10800160 	cmpeqi	r2,r2,5
  81472c:	1000051e 	bne	r2,zero,814744 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  814730:	e0fffe17 	ldw	r3,-8(fp)
  814734:	00800044 	movi	r2,1
  814738:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81473c:	e03fff15 	stw	zero,-4(fp)
  814740:	00001306 	br	814790 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814744:	0005303a 	rdctl	r2,status
  814748:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81474c:	e0fffa17 	ldw	r3,-24(fp)
  814750:	00bfff84 	movi	r2,-2
  814754:	1884703a 	and	r2,r3,r2
  814758:	1001703a 	wrctl	status,r2
  
  return context;
  81475c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  814760:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  814764:	e0bffd17 	ldw	r2,-12(fp)
  814768:	1080020b 	ldhu	r2,8(r2)
  81476c:	e0bffc0d 	sth	r2,-16(fp)
  814770:	e0bffb17 	ldw	r2,-20(fp)
  814774:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814778:	e0bff917 	ldw	r2,-28(fp)
  81477c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814780:	e0bffe17 	ldw	r2,-8(fp)
  814784:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  814788:	e0bffc0b 	ldhu	r2,-16(fp)
  81478c:	e0bfff15 	stw	r2,-4(fp)
  814790:	e0bfff17 	ldw	r2,-4(fp)
}
  814794:	e037883a 	mov	sp,fp
  814798:	df000017 	ldw	fp,0(sp)
  81479c:	dec00104 	addi	sp,sp,4
  8147a0:	f800283a 	ret

008147a4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  8147a4:	defff804 	addi	sp,sp,-32
  8147a8:	df000715 	stw	fp,28(sp)
  8147ac:	df000704 	addi	fp,sp,28
  8147b0:	e13ffb15 	stw	r4,-20(fp)
  8147b4:	e17ffc15 	stw	r5,-16(fp)
  8147b8:	e0800117 	ldw	r2,4(fp)
  8147bc:	e1bffd0d 	sth	r6,-12(fp)
  8147c0:	e1fffe05 	stb	r7,-8(fp)
  8147c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8147c8:	008020b4 	movhi	r2,130
  8147cc:	10808d04 	addi	r2,r2,564
  8147d0:	10c00017 	ldw	r3,0(r2)
  8147d4:	008020b4 	movhi	r2,130
  8147d8:	10808d04 	addi	r2,r2,564
  8147dc:	10800017 	ldw	r2,0(r2)
  8147e0:	10800c03 	ldbu	r2,48(r2)
  8147e4:	10800814 	ori	r2,r2,32
  8147e8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8147ec:	008020b4 	movhi	r2,130
  8147f0:	10808d04 	addi	r2,r2,564
  8147f4:	10800017 	ldw	r2,0(r2)
  8147f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8147fc:	008020b4 	movhi	r2,130
  814800:	10808d04 	addi	r2,r2,564
  814804:	10c00017 	ldw	r3,0(r2)
  814808:	e0bfff0b 	ldhu	r2,-4(fp)
  81480c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  814810:	008020b4 	movhi	r2,130
  814814:	10808d04 	addi	r2,r2,564
  814818:	10c00017 	ldw	r3,0(r2)
  81481c:	e0bffc17 	ldw	r2,-16(fp)
  814820:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  814824:	e0fffc17 	ldw	r3,-16(fp)
  814828:	e0bffd0b 	ldhu	r2,-12(fp)
  81482c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  814830:	e0fffc17 	ldw	r3,-16(fp)
  814834:	e0bffe03 	ldbu	r2,-8(fp)
  814838:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  81483c:	008020b4 	movhi	r2,130
  814840:	10808d04 	addi	r2,r2,564
  814844:	10c00017 	ldw	r3,0(r2)
  814848:	e0bffc17 	ldw	r2,-16(fp)
  81484c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  814850:	e0bffb17 	ldw	r2,-20(fp)
  814854:	10c00117 	ldw	r3,4(r2)
  814858:	e0bffc17 	ldw	r2,-16(fp)
  81485c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  814860:	e0bffc17 	ldw	r2,-16(fp)
  814864:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  814868:	e0fffc17 	ldw	r3,-16(fp)
  81486c:	e0bffb17 	ldw	r2,-20(fp)
  814870:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  814874:	e0bffb17 	ldw	r2,-20(fp)
  814878:	10800117 	ldw	r2,4(r2)
  81487c:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  814880:	e0bffa17 	ldw	r2,-24(fp)
  814884:	1005003a 	cmpeq	r2,r2,zero
  814888:	1000031e 	bne	r2,zero,814898 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  81488c:	e0fffa17 	ldw	r3,-24(fp)
  814890:	e0bffc17 	ldw	r2,-16(fp)
  814894:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  814898:	e0fffb17 	ldw	r3,-20(fp)
  81489c:	e0bffc17 	ldw	r2,-16(fp)
  8148a0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  8148a4:	008020b4 	movhi	r2,130
  8148a8:	10808d04 	addi	r2,r2,564
  8148ac:	10800017 	ldw	r2,0(r2)
  8148b0:	10800d03 	ldbu	r2,52(r2)
  8148b4:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8148b8:	e13ff903 	ldbu	r4,-28(fp)
  8148bc:	e0fff903 	ldbu	r3,-28(fp)
  8148c0:	008020b4 	movhi	r2,130
  8148c4:	10808a44 	addi	r2,r2,553
  8148c8:	10c5883a 	add	r2,r2,r3
  8148cc:	10800003 	ldbu	r2,0(r2)
  8148d0:	1007883a 	mov	r3,r2
  8148d4:	008020b4 	movhi	r2,130
  8148d8:	10808d04 	addi	r2,r2,564
  8148dc:	10800017 	ldw	r2,0(r2)
  8148e0:	10800d43 	ldbu	r2,53(r2)
  8148e4:	0084303a 	nor	r2,zero,r2
  8148e8:	1884703a 	and	r2,r3,r2
  8148ec:	1007883a 	mov	r3,r2
  8148f0:	008020b4 	movhi	r2,130
  8148f4:	10808a44 	addi	r2,r2,553
  8148f8:	1105883a 	add	r2,r2,r4
  8148fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  814900:	e0fff903 	ldbu	r3,-28(fp)
  814904:	008020b4 	movhi	r2,130
  814908:	10808a44 	addi	r2,r2,553
  81490c:	10c5883a 	add	r2,r2,r3
  814910:	10800003 	ldbu	r2,0(r2)
  814914:	10803fcc 	andi	r2,r2,255
  814918:	1004c03a 	cmpne	r2,r2,zero
  81491c:	10000e1e 	bne	r2,zero,814958 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  814920:	008020b4 	movhi	r2,130
  814924:	10808d04 	addi	r2,r2,564
  814928:	10800017 	ldw	r2,0(r2)
  81492c:	10800d83 	ldbu	r2,54(r2)
  814930:	0084303a 	nor	r2,zero,r2
  814934:	1007883a 	mov	r3,r2
  814938:	008020b4 	movhi	r2,130
  81493c:	10808a04 	addi	r2,r2,552
  814940:	10800003 	ldbu	r2,0(r2)
  814944:	1884703a 	and	r2,r3,r2
  814948:	1007883a 	mov	r3,r2
  81494c:	008020b4 	movhi	r2,130
  814950:	10808a04 	addi	r2,r2,552
  814954:	10c00005 	stb	r3,0(r2)
    }
}
  814958:	e037883a 	mov	sp,fp
  81495c:	df000017 	ldw	fp,0(sp)
  814960:	dec00104 	addi	sp,sp,4
  814964:	f800283a 	ret

00814968 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  814968:	defffb04 	addi	sp,sp,-20
  81496c:	dfc00415 	stw	ra,16(sp)
  814970:	df000315 	stw	fp,12(sp)
  814974:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  814978:	010020b4 	movhi	r4,130
  81497c:	2118ef04 	addi	r4,r4,25532
  814980:	0140dc04 	movi	r5,880
  814984:	08129980 	call	812998 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  814988:	008020b4 	movhi	r2,130
  81498c:	1098ef04 	addi	r2,r2,25532
  814990:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  814994:	008020b4 	movhi	r2,130
  814998:	1098fa04 	addi	r2,r2,25576
  81499c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8149a0:	e03fff0d 	sth	zero,-4(fp)
  8149a4:	00001306 	br	8149f4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8149a8:	e0bffe17 	ldw	r2,-8(fp)
  8149ac:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  8149b0:	e0fffe17 	ldw	r3,-8(fp)
  8149b4:	e0bffd17 	ldw	r2,-12(fp)
  8149b8:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  8149bc:	e0fffe17 	ldw	r3,-8(fp)
  8149c0:	00800fc4 	movi	r2,63
  8149c4:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8149c8:	e0bffe17 	ldw	r2,-8(fp)
  8149cc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  8149d0:	e0bffe17 	ldw	r2,-8(fp)
  8149d4:	10800b04 	addi	r2,r2,44
  8149d8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  8149dc:	e0bffd17 	ldw	r2,-12(fp)
  8149e0:	10800b04 	addi	r2,r2,44
  8149e4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8149e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8149ec:	10800044 	addi	r2,r2,1
  8149f0:	e0bfff0d 	sth	r2,-4(fp)
  8149f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8149f8:	108004f0 	cmpltui	r2,r2,19
  8149fc:	103fea1e 	bne	r2,zero,8149a8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  814a00:	e0bffe17 	ldw	r2,-8(fp)
  814a04:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  814a08:	e0bffe17 	ldw	r2,-8(fp)
  814a0c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  814a10:	e0fffe17 	ldw	r3,-8(fp)
  814a14:	00800fc4 	movi	r2,63
  814a18:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  814a1c:	e0bffe17 	ldw	r2,-8(fp)
  814a20:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  814a24:	00c020b4 	movhi	r3,130
  814a28:	18c08f04 	addi	r3,r3,572
  814a2c:	008020b4 	movhi	r2,130
  814a30:	1098ef04 	addi	r2,r2,25532
  814a34:	18800015 	stw	r2,0(r3)
#endif
}
  814a38:	e037883a 	mov	sp,fp
  814a3c:	dfc00117 	ldw	ra,4(sp)
  814a40:	df000017 	ldw	fp,0(sp)
  814a44:	dec00204 	addi	sp,sp,8
  814a48:	f800283a 	ret

00814a4c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  814a4c:	defffa04 	addi	sp,sp,-24
  814a50:	dfc00515 	stw	ra,20(sp)
  814a54:	df000415 	stw	fp,16(sp)
  814a58:	df000404 	addi	fp,sp,16
  814a5c:	e13ffe15 	stw	r4,-8(fp)
  814a60:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  814a64:	e0bffe17 	ldw	r2,-8(fp)
  814a68:	10800217 	ldw	r2,8(r2)
  814a6c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  814a70:	e0bffd17 	ldw	r2,-12(fp)
  814a74:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  814a78:	e0fffd17 	ldw	r3,-12(fp)
  814a7c:	e0bfff0b 	ldhu	r2,-4(fp)
  814a80:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  814a84:	e0bffd17 	ldw	r2,-12(fp)
  814a88:	10c00c03 	ldbu	r3,48(r2)
  814a8c:	00bff7c4 	movi	r2,-33
  814a90:	1884703a 	and	r2,r3,r2
  814a94:	1007883a 	mov	r3,r2
  814a98:	e0bffd17 	ldw	r2,-12(fp)
  814a9c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  814aa0:	e0bffd17 	ldw	r2,-12(fp)
  814aa4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  814aa8:	e0bffd17 	ldw	r2,-12(fp)
  814aac:	10800c03 	ldbu	r2,48(r2)
  814ab0:	10803fcc 	andi	r2,r2,255
  814ab4:	1004c03a 	cmpne	r2,r2,zero
  814ab8:	10001f1e 	bne	r2,zero,814b38 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  814abc:	e0bffd17 	ldw	r2,-12(fp)
  814ac0:	10c00d83 	ldbu	r3,54(r2)
  814ac4:	008020b4 	movhi	r2,130
  814ac8:	10808a04 	addi	r2,r2,552
  814acc:	10800003 	ldbu	r2,0(r2)
  814ad0:	1884b03a 	or	r2,r3,r2
  814ad4:	1007883a 	mov	r3,r2
  814ad8:	008020b4 	movhi	r2,130
  814adc:	10808a04 	addi	r2,r2,552
  814ae0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814ae4:	e0bffd17 	ldw	r2,-12(fp)
  814ae8:	10800d03 	ldbu	r2,52(r2)
  814aec:	11003fcc 	andi	r4,r2,255
  814af0:	e0bffd17 	ldw	r2,-12(fp)
  814af4:	10800d03 	ldbu	r2,52(r2)
  814af8:	10c03fcc 	andi	r3,r2,255
  814afc:	008020b4 	movhi	r2,130
  814b00:	10808a44 	addi	r2,r2,553
  814b04:	10c5883a 	add	r2,r2,r3
  814b08:	10c00003 	ldbu	r3,0(r2)
  814b0c:	e0bffd17 	ldw	r2,-12(fp)
  814b10:	10800d43 	ldbu	r2,53(r2)
  814b14:	1884b03a 	or	r2,r3,r2
  814b18:	1007883a 	mov	r3,r2
  814b1c:	008020b4 	movhi	r2,130
  814b20:	10808a44 	addi	r2,r2,553
  814b24:	1105883a 	add	r2,r2,r4
  814b28:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  814b2c:	00800044 	movi	r2,1
  814b30:	e0bffc05 	stb	r2,-16(fp)
  814b34:	00000106 	br	814b3c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  814b38:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  814b3c:	e13ffe17 	ldw	r4,-8(fp)
  814b40:	0814b5c0 	call	814b5c <OS_FlagUnlink>
    return (sched);
  814b44:	e0bffc03 	ldbu	r2,-16(fp)
}
  814b48:	e037883a 	mov	sp,fp
  814b4c:	dfc00117 	ldw	ra,4(sp)
  814b50:	df000017 	ldw	fp,0(sp)
  814b54:	dec00204 	addi	sp,sp,8
  814b58:	f800283a 	ret

00814b5c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  814b5c:	defffa04 	addi	sp,sp,-24
  814b60:	df000515 	stw	fp,20(sp)
  814b64:	df000504 	addi	fp,sp,20
  814b68:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  814b6c:	e0bfff17 	ldw	r2,-4(fp)
  814b70:	10800117 	ldw	r2,4(r2)
  814b74:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  814b78:	e0bfff17 	ldw	r2,-4(fp)
  814b7c:	10800017 	ldw	r2,0(r2)
  814b80:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  814b84:	e0bffc17 	ldw	r2,-16(fp)
  814b88:	1004c03a 	cmpne	r2,r2,zero
  814b8c:	10000c1e 	bne	r2,zero,814bc0 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  814b90:	e0bfff17 	ldw	r2,-4(fp)
  814b94:	10800317 	ldw	r2,12(r2)
  814b98:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  814b9c:	e0fffd17 	ldw	r3,-12(fp)
  814ba0:	e0bffb17 	ldw	r2,-20(fp)
  814ba4:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  814ba8:	e0bffb17 	ldw	r2,-20(fp)
  814bac:	1005003a 	cmpeq	r2,r2,zero
  814bb0:	10000c1e 	bne	r2,zero,814be4 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  814bb4:	e0bffb17 	ldw	r2,-20(fp)
  814bb8:	10000115 	stw	zero,4(r2)
  814bbc:	00000906 	br	814be4 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  814bc0:	e0fffc17 	ldw	r3,-16(fp)
  814bc4:	e0bffb17 	ldw	r2,-20(fp)
  814bc8:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  814bcc:	e0bffb17 	ldw	r2,-20(fp)
  814bd0:	1005003a 	cmpeq	r2,r2,zero
  814bd4:	1000031e 	bne	r2,zero,814be4 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  814bd8:	e0fffb17 	ldw	r3,-20(fp)
  814bdc:	e0bffc17 	ldw	r2,-16(fp)
  814be0:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  814be4:	e0bfff17 	ldw	r2,-4(fp)
  814be8:	10800217 	ldw	r2,8(r2)
  814bec:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  814bf0:	e0bffe17 	ldw	r2,-8(fp)
  814bf4:	10000a15 	stw	zero,40(r2)
#endif
}
  814bf8:	e037883a 	mov	sp,fp
  814bfc:	df000017 	ldw	fp,0(sp)
  814c00:	dec00104 	addi	sp,sp,4
  814c04:	f800283a 	ret

00814c08 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  814c08:	defff304 	addi	sp,sp,-52
  814c0c:	df000c15 	stw	fp,48(sp)
  814c10:	df000c04 	addi	fp,sp,48
  814c14:	e13ffb15 	stw	r4,-20(fp)
  814c18:	e17ffc15 	stw	r5,-16(fp)
  814c1c:	e1bffd15 	stw	r6,-12(fp)
  814c20:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814c24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814c28:	e0bffe17 	ldw	r2,-8(fp)
  814c2c:	1004c03a 	cmpne	r2,r2,zero
  814c30:	1000021e 	bne	r2,zero,814c3c <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  814c34:	e03fff15 	stw	zero,-4(fp)
  814c38:	00007506 	br	814e10 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  814c3c:	e0bffb17 	ldw	r2,-20(fp)
  814c40:	1004c03a 	cmpne	r2,r2,zero
  814c44:	1000051e 	bne	r2,zero,814c5c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  814c48:	e0fffe17 	ldw	r3,-8(fp)
  814c4c:	00801884 	movi	r2,98
  814c50:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814c54:	e03fff15 	stw	zero,-4(fp)
  814c58:	00006d06 	br	814e10 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  814c5c:	e0bffb17 	ldw	r2,-20(fp)
  814c60:	108000cc 	andi	r2,r2,3
  814c64:	1005003a 	cmpeq	r2,r2,zero
  814c68:	1000051e 	bne	r2,zero,814c80 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  814c6c:	e0fffe17 	ldw	r3,-8(fp)
  814c70:	00801884 	movi	r2,98
  814c74:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814c78:	e03fff15 	stw	zero,-4(fp)
  814c7c:	00006406 	br	814e10 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  814c80:	e0bffc17 	ldw	r2,-16(fp)
  814c84:	108000a8 	cmpgeui	r2,r2,2
  814c88:	1000051e 	bne	r2,zero,814ca0 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  814c8c:	e0fffe17 	ldw	r3,-8(fp)
  814c90:	008016c4 	movi	r2,91
  814c94:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814c98:	e03fff15 	stw	zero,-4(fp)
  814c9c:	00005c06 	br	814e10 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  814ca0:	e0bffd17 	ldw	r2,-12(fp)
  814ca4:	10800128 	cmpgeui	r2,r2,4
  814ca8:	1000051e 	bne	r2,zero,814cc0 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  814cac:	e0fffe17 	ldw	r3,-8(fp)
  814cb0:	00801704 	movi	r2,92
  814cb4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814cb8:	e03fff15 	stw	zero,-4(fp)
  814cbc:	00005406 	br	814e10 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814cc0:	0005303a 	rdctl	r2,status
  814cc4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814cc8:	e0fff517 	ldw	r3,-44(fp)
  814ccc:	00bfff84 	movi	r2,-2
  814cd0:	1884703a 	and	r2,r3,r2
  814cd4:	1001703a 	wrctl	status,r2
  
  return context;
  814cd8:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814cdc:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  814ce0:	008020b4 	movhi	r2,130
  814ce4:	10808704 	addi	r2,r2,540
  814ce8:	10800017 	ldw	r2,0(r2)
  814cec:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  814cf0:	008020b4 	movhi	r2,130
  814cf4:	10808704 	addi	r2,r2,540
  814cf8:	10800017 	ldw	r2,0(r2)
  814cfc:	1005003a 	cmpeq	r2,r2,zero
  814d00:	1000081e 	bne	r2,zero,814d24 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  814d04:	008020b4 	movhi	r2,130
  814d08:	10808704 	addi	r2,r2,540
  814d0c:	10800017 	ldw	r2,0(r2)
  814d10:	10800117 	ldw	r2,4(r2)
  814d14:	1007883a 	mov	r3,r2
  814d18:	008020b4 	movhi	r2,130
  814d1c:	10808704 	addi	r2,r2,540
  814d20:	10c00015 	stw	r3,0(r2)
  814d24:	e0bff617 	ldw	r2,-40(fp)
  814d28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814d2c:	e0bff417 	ldw	r2,-48(fp)
  814d30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  814d34:	e0bffa17 	ldw	r2,-24(fp)
  814d38:	1004c03a 	cmpne	r2,r2,zero
  814d3c:	1000051e 	bne	r2,zero,814d54 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  814d40:	e0fffe17 	ldw	r3,-8(fp)
  814d44:	00801684 	movi	r2,90
  814d48:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  814d4c:	e03fff15 	stw	zero,-4(fp)
  814d50:	00002f06 	br	814e10 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  814d54:	e0bffb17 	ldw	r2,-20(fp)
  814d58:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  814d5c:	e0bffb17 	ldw	r2,-20(fp)
  814d60:	1007883a 	mov	r3,r2
  814d64:	e0bffd17 	ldw	r2,-12(fp)
  814d68:	1885883a 	add	r2,r3,r2
  814d6c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  814d70:	e03ff715 	stw	zero,-36(fp)
  814d74:	00000d06 	br	814dac <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  814d78:	e0fff817 	ldw	r3,-32(fp)
  814d7c:	e0bff917 	ldw	r2,-28(fp)
  814d80:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  814d84:	e0bff917 	ldw	r2,-28(fp)
  814d88:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  814d8c:	e0bff917 	ldw	r2,-28(fp)
  814d90:	1007883a 	mov	r3,r2
  814d94:	e0bffd17 	ldw	r2,-12(fp)
  814d98:	1885883a 	add	r2,r3,r2
  814d9c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  814da0:	e0bff717 	ldw	r2,-36(fp)
  814da4:	10800044 	addi	r2,r2,1
  814da8:	e0bff715 	stw	r2,-36(fp)
  814dac:	e0bffc17 	ldw	r2,-16(fp)
  814db0:	10ffffc4 	addi	r3,r2,-1
  814db4:	e0bff717 	ldw	r2,-36(fp)
  814db8:	10ffef36 	bltu	r2,r3,814d78 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  814dbc:	e0bff817 	ldw	r2,-32(fp)
  814dc0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  814dc4:	e0fffa17 	ldw	r3,-24(fp)
  814dc8:	e0bffb17 	ldw	r2,-20(fp)
  814dcc:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  814dd0:	e0fffa17 	ldw	r3,-24(fp)
  814dd4:	e0bffb17 	ldw	r2,-20(fp)
  814dd8:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  814ddc:	e0fffa17 	ldw	r3,-24(fp)
  814de0:	e0bffc17 	ldw	r2,-16(fp)
  814de4:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  814de8:	e0fffa17 	ldw	r3,-24(fp)
  814dec:	e0bffc17 	ldw	r2,-16(fp)
  814df0:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  814df4:	e0fffa17 	ldw	r3,-24(fp)
  814df8:	e0bffd17 	ldw	r2,-12(fp)
  814dfc:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  814e00:	e0bffe17 	ldw	r2,-8(fp)
  814e04:	10000005 	stb	zero,0(r2)
    return (pmem);
  814e08:	e0bffa17 	ldw	r2,-24(fp)
  814e0c:	e0bfff15 	stw	r2,-4(fp)
  814e10:	e0bfff17 	ldw	r2,-4(fp)
}
  814e14:	e037883a 	mov	sp,fp
  814e18:	df000017 	ldw	fp,0(sp)
  814e1c:	dec00104 	addi	sp,sp,4
  814e20:	f800283a 	ret

00814e24 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  814e24:	defff704 	addi	sp,sp,-36
  814e28:	df000815 	stw	fp,32(sp)
  814e2c:	df000804 	addi	fp,sp,32
  814e30:	e13ffd15 	stw	r4,-12(fp)
  814e34:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814e38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  814e3c:	e0bffe17 	ldw	r2,-8(fp)
  814e40:	1004c03a 	cmpne	r2,r2,zero
  814e44:	1000021e 	bne	r2,zero,814e50 <OSMemGet+0x2c>
        return ((void *)0);
  814e48:	e03fff15 	stw	zero,-4(fp)
  814e4c:	00003106 	br	814f14 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  814e50:	e0bffd17 	ldw	r2,-12(fp)
  814e54:	1004c03a 	cmpne	r2,r2,zero
  814e58:	1000051e 	bne	r2,zero,814e70 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  814e5c:	e0fffe17 	ldw	r3,-8(fp)
  814e60:	00801804 	movi	r2,96
  814e64:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  814e68:	e03fff15 	stw	zero,-4(fp)
  814e6c:	00002906 	br	814f14 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814e70:	0005303a 	rdctl	r2,status
  814e74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814e78:	e0fffa17 	ldw	r3,-24(fp)
  814e7c:	00bfff84 	movi	r2,-2
  814e80:	1884703a 	and	r2,r3,r2
  814e84:	1001703a 	wrctl	status,r2
  
  return context;
  814e88:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814e8c:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  814e90:	e0bffd17 	ldw	r2,-12(fp)
  814e94:	10800417 	ldw	r2,16(r2)
  814e98:	1005003a 	cmpeq	r2,r2,zero
  814e9c:	1000151e 	bne	r2,zero,814ef4 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  814ea0:	e0bffd17 	ldw	r2,-12(fp)
  814ea4:	10800117 	ldw	r2,4(r2)
  814ea8:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  814eac:	e0bffc17 	ldw	r2,-16(fp)
  814eb0:	10c00017 	ldw	r3,0(r2)
  814eb4:	e0bffd17 	ldw	r2,-12(fp)
  814eb8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  814ebc:	e0bffd17 	ldw	r2,-12(fp)
  814ec0:	10800417 	ldw	r2,16(r2)
  814ec4:	10ffffc4 	addi	r3,r2,-1
  814ec8:	e0bffd17 	ldw	r2,-12(fp)
  814ecc:	10c00415 	stw	r3,16(r2)
  814ed0:	e0bffb17 	ldw	r2,-20(fp)
  814ed4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814ed8:	e0bff917 	ldw	r2,-28(fp)
  814edc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  814ee0:	e0bffe17 	ldw	r2,-8(fp)
  814ee4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  814ee8:	e0bffc17 	ldw	r2,-16(fp)
  814eec:	e0bfff15 	stw	r2,-4(fp)
  814ef0:	00000806 	br	814f14 <OSMemGet+0xf0>
  814ef4:	e0bffb17 	ldw	r2,-20(fp)
  814ef8:	e0bff815 	stw	r2,-32(fp)
  814efc:	e0bff817 	ldw	r2,-32(fp)
  814f00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  814f04:	e0fffe17 	ldw	r3,-8(fp)
  814f08:	00801744 	movi	r2,93
  814f0c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  814f10:	e03fff15 	stw	zero,-4(fp)
  814f14:	e0bfff17 	ldw	r2,-4(fp)
}
  814f18:	e037883a 	mov	sp,fp
  814f1c:	df000017 	ldw	fp,0(sp)
  814f20:	dec00104 	addi	sp,sp,4
  814f24:	f800283a 	ret

00814f28 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  814f28:	defff604 	addi	sp,sp,-40
  814f2c:	dfc00915 	stw	ra,36(sp)
  814f30:	df000815 	stw	fp,32(sp)
  814f34:	df000804 	addi	fp,sp,32
  814f38:	e13ffc15 	stw	r4,-16(fp)
  814f3c:	e17ffd15 	stw	r5,-12(fp)
  814f40:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814f44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  814f48:	e0bffe17 	ldw	r2,-8(fp)
  814f4c:	1004c03a 	cmpne	r2,r2,zero
  814f50:	1000021e 	bne	r2,zero,814f5c <OSMemNameGet+0x34>
        return (0);
  814f54:	e03fff15 	stw	zero,-4(fp)
  814f58:	00003006 	br	81501c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  814f5c:	e0bffc17 	ldw	r2,-16(fp)
  814f60:	1004c03a 	cmpne	r2,r2,zero
  814f64:	1000051e 	bne	r2,zero,814f7c <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  814f68:	e0fffe17 	ldw	r3,-8(fp)
  814f6c:	00801804 	movi	r2,96
  814f70:	18800005 	stb	r2,0(r3)
        return (0);
  814f74:	e03fff15 	stw	zero,-4(fp)
  814f78:	00002806 	br	81501c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  814f7c:	e0bffd17 	ldw	r2,-12(fp)
  814f80:	1004c03a 	cmpne	r2,r2,zero
  814f84:	1000051e 	bne	r2,zero,814f9c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  814f88:	e0fffe17 	ldw	r3,-8(fp)
  814f8c:	00800304 	movi	r2,12
  814f90:	18800005 	stb	r2,0(r3)
        return (0);
  814f94:	e03fff15 	stw	zero,-4(fp)
  814f98:	00002006 	br	81501c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  814f9c:	008020b4 	movhi	r2,130
  814fa0:	10808c04 	addi	r2,r2,560
  814fa4:	10800003 	ldbu	r2,0(r2)
  814fa8:	10803fcc 	andi	r2,r2,255
  814fac:	1005003a 	cmpeq	r2,r2,zero
  814fb0:	1000051e 	bne	r2,zero,814fc8 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  814fb4:	e0fffe17 	ldw	r3,-8(fp)
  814fb8:	00800444 	movi	r2,17
  814fbc:	18800005 	stb	r2,0(r3)
        return (0);
  814fc0:	e03fff15 	stw	zero,-4(fp)
  814fc4:	00001506 	br	81501c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814fc8:	0005303a 	rdctl	r2,status
  814fcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814fd0:	e0fff917 	ldw	r3,-28(fp)
  814fd4:	00bfff84 	movi	r2,-2
  814fd8:	1884703a 	and	r2,r3,r2
  814fdc:	1001703a 	wrctl	status,r2
  
  return context;
  814fe0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814fe4:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  814fe8:	e0bffc17 	ldw	r2,-16(fp)
  814fec:	11400504 	addi	r5,r2,20
  814ff0:	e13ffd17 	ldw	r4,-12(fp)
  814ff4:	0812b9c0 	call	812b9c <OS_StrCopy>
  814ff8:	e0bffb05 	stb	r2,-20(fp)
  814ffc:	e0bffa17 	ldw	r2,-24(fp)
  815000:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815004:	e0bff817 	ldw	r2,-32(fp)
  815008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81500c:	e0bffe17 	ldw	r2,-8(fp)
  815010:	10000005 	stb	zero,0(r2)
    return (len);
  815014:	e0bffb03 	ldbu	r2,-20(fp)
  815018:	e0bfff15 	stw	r2,-4(fp)
  81501c:	e0bfff17 	ldw	r2,-4(fp)
}
  815020:	e037883a 	mov	sp,fp
  815024:	dfc00117 	ldw	ra,4(sp)
  815028:	df000017 	ldw	fp,0(sp)
  81502c:	dec00204 	addi	sp,sp,8
  815030:	f800283a 	ret

00815034 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  815034:	defff604 	addi	sp,sp,-40
  815038:	dfc00915 	stw	ra,36(sp)
  81503c:	df000815 	stw	fp,32(sp)
  815040:	df000804 	addi	fp,sp,32
  815044:	e13ffd15 	stw	r4,-12(fp)
  815048:	e17ffe15 	stw	r5,-8(fp)
  81504c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815050:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  815054:	e0bfff17 	ldw	r2,-4(fp)
  815058:	1005003a 	cmpeq	r2,r2,zero
  81505c:	1000381e 	bne	r2,zero,815140 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  815060:	e0bffd17 	ldw	r2,-12(fp)
  815064:	1004c03a 	cmpne	r2,r2,zero
  815068:	1000041e 	bne	r2,zero,81507c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81506c:	e0ffff17 	ldw	r3,-4(fp)
  815070:	00801804 	movi	r2,96
  815074:	18800005 	stb	r2,0(r3)
        return;
  815078:	00003106 	br	815140 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81507c:	e0bffe17 	ldw	r2,-8(fp)
  815080:	1004c03a 	cmpne	r2,r2,zero
  815084:	1000041e 	bne	r2,zero,815098 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  815088:	e0ffff17 	ldw	r3,-4(fp)
  81508c:	00800304 	movi	r2,12
  815090:	18800005 	stb	r2,0(r3)
        return;
  815094:	00002a06 	br	815140 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815098:	008020b4 	movhi	r2,130
  81509c:	10808c04 	addi	r2,r2,560
  8150a0:	10800003 	ldbu	r2,0(r2)
  8150a4:	10803fcc 	andi	r2,r2,255
  8150a8:	1005003a 	cmpeq	r2,r2,zero
  8150ac:	1000041e 	bne	r2,zero,8150c0 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  8150b0:	e0ffff17 	ldw	r3,-4(fp)
  8150b4:	00800484 	movi	r2,18
  8150b8:	18800005 	stb	r2,0(r3)
        return;
  8150bc:	00002006 	br	815140 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8150c0:	0005303a 	rdctl	r2,status
  8150c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8150c8:	e0fffa17 	ldw	r3,-24(fp)
  8150cc:	00bfff84 	movi	r2,-2
  8150d0:	1884703a 	and	r2,r3,r2
  8150d4:	1001703a 	wrctl	status,r2
  
  return context;
  8150d8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8150dc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8150e0:	e13ffe17 	ldw	r4,-8(fp)
  8150e4:	0812c1c0 	call	812c1c <OS_StrLen>
  8150e8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  8150ec:	e0bffc03 	ldbu	r2,-16(fp)
  8150f0:	10800830 	cmpltui	r2,r2,32
  8150f4:	1000081e 	bne	r2,zero,815118 <OSMemNameSet+0xe4>
  8150f8:	e0bffb17 	ldw	r2,-20(fp)
  8150fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815100:	e0bff917 	ldw	r2,-28(fp)
  815104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  815108:	e0ffff17 	ldw	r3,-4(fp)
  81510c:	008018c4 	movi	r2,99
  815110:	18800005 	stb	r2,0(r3)
        return;
  815114:	00000a06 	br	815140 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  815118:	e0bffd17 	ldw	r2,-12(fp)
  81511c:	11000504 	addi	r4,r2,20
  815120:	e17ffe17 	ldw	r5,-8(fp)
  815124:	0812b9c0 	call	812b9c <OS_StrCopy>
  815128:	e0bffb17 	ldw	r2,-20(fp)
  81512c:	e0bff815 	stw	r2,-32(fp)
  815130:	e0bff817 	ldw	r2,-32(fp)
  815134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815138:	e0bfff17 	ldw	r2,-4(fp)
  81513c:	10000005 	stb	zero,0(r2)
}
  815140:	e037883a 	mov	sp,fp
  815144:	dfc00117 	ldw	ra,4(sp)
  815148:	df000017 	ldw	fp,0(sp)
  81514c:	dec00204 	addi	sp,sp,8
  815150:	f800283a 	ret

00815154 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  815154:	defff804 	addi	sp,sp,-32
  815158:	df000715 	stw	fp,28(sp)
  81515c:	df000704 	addi	fp,sp,28
  815160:	e13ffd15 	stw	r4,-12(fp)
  815164:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815168:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81516c:	e0bffd17 	ldw	r2,-12(fp)
  815170:	1004c03a 	cmpne	r2,r2,zero
  815174:	1000031e 	bne	r2,zero,815184 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  815178:	00801804 	movi	r2,96
  81517c:	e0bfff15 	stw	r2,-4(fp)
  815180:	00002b06 	br	815230 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  815184:	e0bffe17 	ldw	r2,-8(fp)
  815188:	1004c03a 	cmpne	r2,r2,zero
  81518c:	1000031e 	bne	r2,zero,81519c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  815190:	008017c4 	movi	r2,95
  815194:	e0bfff15 	stw	r2,-4(fp)
  815198:	00002506 	br	815230 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81519c:	0005303a 	rdctl	r2,status
  8151a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8151a4:	e0fffb17 	ldw	r3,-20(fp)
  8151a8:	00bfff84 	movi	r2,-2
  8151ac:	1884703a 	and	r2,r3,r2
  8151b0:	1001703a 	wrctl	status,r2
  
  return context;
  8151b4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8151b8:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  8151bc:	e0bffd17 	ldw	r2,-12(fp)
  8151c0:	10c00417 	ldw	r3,16(r2)
  8151c4:	e0bffd17 	ldw	r2,-12(fp)
  8151c8:	10800317 	ldw	r2,12(r2)
  8151cc:	18800736 	bltu	r3,r2,8151ec <OSMemPut+0x98>
  8151d0:	e0bffc17 	ldw	r2,-16(fp)
  8151d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8151d8:	e0bffa17 	ldw	r2,-24(fp)
  8151dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  8151e0:	00801784 	movi	r2,94
  8151e4:	e0bfff15 	stw	r2,-4(fp)
  8151e8:	00001106 	br	815230 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  8151ec:	e0fffe17 	ldw	r3,-8(fp)
  8151f0:	e0bffd17 	ldw	r2,-12(fp)
  8151f4:	10800117 	ldw	r2,4(r2)
  8151f8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  8151fc:	e0fffd17 	ldw	r3,-12(fp)
  815200:	e0bffe17 	ldw	r2,-8(fp)
  815204:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  815208:	e0bffd17 	ldw	r2,-12(fp)
  81520c:	10800417 	ldw	r2,16(r2)
  815210:	10c00044 	addi	r3,r2,1
  815214:	e0bffd17 	ldw	r2,-12(fp)
  815218:	10c00415 	stw	r3,16(r2)
  81521c:	e0bffc17 	ldw	r2,-16(fp)
  815220:	e0bff915 	stw	r2,-28(fp)
  815224:	e0bff917 	ldw	r2,-28(fp)
  815228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81522c:	e03fff15 	stw	zero,-4(fp)
  815230:	e0bfff17 	ldw	r2,-4(fp)
}
  815234:	e037883a 	mov	sp,fp
  815238:	df000017 	ldw	fp,0(sp)
  81523c:	dec00104 	addi	sp,sp,4
  815240:	f800283a 	ret

00815244 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  815244:	defff904 	addi	sp,sp,-28
  815248:	df000615 	stw	fp,24(sp)
  81524c:	df000604 	addi	fp,sp,24
  815250:	e13ffd15 	stw	r4,-12(fp)
  815254:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815258:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81525c:	e0bffd17 	ldw	r2,-12(fp)
  815260:	1004c03a 	cmpne	r2,r2,zero
  815264:	1000031e 	bne	r2,zero,815274 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  815268:	00801804 	movi	r2,96
  81526c:	e0bfff15 	stw	r2,-4(fp)
  815270:	00002e06 	br	81532c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  815274:	e0bffe17 	ldw	r2,-8(fp)
  815278:	1004c03a 	cmpne	r2,r2,zero
  81527c:	1000031e 	bne	r2,zero,81528c <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  815280:	00801844 	movi	r2,97
  815284:	e0bfff15 	stw	r2,-4(fp)
  815288:	00002806 	br	81532c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81528c:	0005303a 	rdctl	r2,status
  815290:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815294:	e0fffb17 	ldw	r3,-20(fp)
  815298:	00bfff84 	movi	r2,-2
  81529c:	1884703a 	and	r2,r3,r2
  8152a0:	1001703a 	wrctl	status,r2
  
  return context;
  8152a4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8152a8:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  8152ac:	e0bffd17 	ldw	r2,-12(fp)
  8152b0:	10c00017 	ldw	r3,0(r2)
  8152b4:	e0bffe17 	ldw	r2,-8(fp)
  8152b8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  8152bc:	e0bffd17 	ldw	r2,-12(fp)
  8152c0:	10c00117 	ldw	r3,4(r2)
  8152c4:	e0bffe17 	ldw	r2,-8(fp)
  8152c8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8152cc:	e0bffd17 	ldw	r2,-12(fp)
  8152d0:	10c00217 	ldw	r3,8(r2)
  8152d4:	e0bffe17 	ldw	r2,-8(fp)
  8152d8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  8152dc:	e0bffd17 	ldw	r2,-12(fp)
  8152e0:	10c00317 	ldw	r3,12(r2)
  8152e4:	e0bffe17 	ldw	r2,-8(fp)
  8152e8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  8152ec:	e0bffd17 	ldw	r2,-12(fp)
  8152f0:	10c00417 	ldw	r3,16(r2)
  8152f4:	e0bffe17 	ldw	r2,-8(fp)
  8152f8:	10c00415 	stw	r3,16(r2)
  8152fc:	e0bffc17 	ldw	r2,-16(fp)
  815300:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815304:	e0bffa17 	ldw	r2,-24(fp)
  815308:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81530c:	e0bffe17 	ldw	r2,-8(fp)
  815310:	10c00317 	ldw	r3,12(r2)
  815314:	e0bffe17 	ldw	r2,-8(fp)
  815318:	10800417 	ldw	r2,16(r2)
  81531c:	1887c83a 	sub	r3,r3,r2
  815320:	e0bffe17 	ldw	r2,-8(fp)
  815324:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  815328:	e03fff15 	stw	zero,-4(fp)
  81532c:	e0bfff17 	ldw	r2,-4(fp)
}
  815330:	e037883a 	mov	sp,fp
  815334:	df000017 	ldw	fp,0(sp)
  815338:	dec00104 	addi	sp,sp,4
  81533c:	f800283a 	ret

00815340 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  815340:	defffc04 	addi	sp,sp,-16
  815344:	dfc00315 	stw	ra,12(sp)
  815348:	df000215 	stw	fp,8(sp)
  81534c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  815350:	010020b4 	movhi	r4,130
  815354:	2119cb04 	addi	r4,r4,26412
  815358:	01430c04 	movi	r5,3120
  81535c:	08129980 	call	812998 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  815360:	008020b4 	movhi	r2,130
  815364:	1099cb04 	addi	r2,r2,26412
  815368:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81536c:	e03ffe0d 	sth	zero,-8(fp)
  815370:	00001406 	br	8153c4 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  815374:	e13ffe0b 	ldhu	r4,-8(fp)
  815378:	01400d04 	movi	r5,52
  81537c:	080f9440 	call	80f944 <__mulsi3>
  815380:	1007883a 	mov	r3,r2
  815384:	008020b4 	movhi	r2,130
  815388:	1099d804 	addi	r2,r2,26464
  81538c:	1887883a 	add	r3,r3,r2
  815390:	e0bfff17 	ldw	r2,-4(fp)
  815394:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  815398:	e0ffff17 	ldw	r3,-4(fp)
  81539c:	00800fc4 	movi	r2,63
  8153a0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  8153a4:	e0bfff17 	ldw	r2,-4(fp)
  8153a8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  8153ac:	e0bfff17 	ldw	r2,-4(fp)
  8153b0:	10800d04 	addi	r2,r2,52
  8153b4:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  8153b8:	e0bffe0b 	ldhu	r2,-8(fp)
  8153bc:	10800044 	addi	r2,r2,1
  8153c0:	e0bffe0d 	sth	r2,-8(fp)
  8153c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8153c8:	10800ef0 	cmpltui	r2,r2,59
  8153cc:	103fe91e 	bne	r2,zero,815374 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  8153d0:	e0bfff17 	ldw	r2,-4(fp)
  8153d4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  8153d8:	e0ffff17 	ldw	r3,-4(fp)
  8153dc:	00800fc4 	movi	r2,63
  8153e0:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8153e4:	e0bfff17 	ldw	r2,-4(fp)
  8153e8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8153ec:	00c020b4 	movhi	r3,130
  8153f0:	18c08704 	addi	r3,r3,540
  8153f4:	008020b4 	movhi	r2,130
  8153f8:	1099cb04 	addi	r2,r2,26412
  8153fc:	18800015 	stw	r2,0(r3)
#endif
}
  815400:	e037883a 	mov	sp,fp
  815404:	dfc00117 	ldw	ra,4(sp)
  815408:	df000017 	ldw	fp,0(sp)
  81540c:	dec00204 	addi	sp,sp,8
  815410:	f800283a 	ret

00815414 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  815414:	defff704 	addi	sp,sp,-36
  815418:	df000815 	stw	fp,32(sp)
  81541c:	df000804 	addi	fp,sp,32
  815420:	e13ffd15 	stw	r4,-12(fp)
  815424:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815428:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81542c:	e0bffe17 	ldw	r2,-8(fp)
  815430:	1004c03a 	cmpne	r2,r2,zero
  815434:	1000021e 	bne	r2,zero,815440 <OSQAccept+0x2c>
        return ((void *)0);
  815438:	e03fff15 	stw	zero,-4(fp)
  81543c:	00004506 	br	815554 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  815440:	e0bffd17 	ldw	r2,-12(fp)
  815444:	1004c03a 	cmpne	r2,r2,zero
  815448:	1000051e 	bne	r2,zero,815460 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  81544c:	e0fffe17 	ldw	r3,-8(fp)
  815450:	00800104 	movi	r2,4
  815454:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815458:	e03fff15 	stw	zero,-4(fp)
  81545c:	00003d06 	br	815554 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  815460:	e0bffd17 	ldw	r2,-12(fp)
  815464:	10800003 	ldbu	r2,0(r2)
  815468:	10803fcc 	andi	r2,r2,255
  81546c:	108000a0 	cmpeqi	r2,r2,2
  815470:	1000051e 	bne	r2,zero,815488 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  815474:	e0fffe17 	ldw	r3,-8(fp)
  815478:	00800044 	movi	r2,1
  81547c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815480:	e03fff15 	stw	zero,-4(fp)
  815484:	00003306 	br	815554 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815488:	0005303a 	rdctl	r2,status
  81548c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815490:	e0fff917 	ldw	r3,-28(fp)
  815494:	00bfff84 	movi	r2,-2
  815498:	1884703a 	and	r2,r3,r2
  81549c:	1001703a 	wrctl	status,r2
  
  return context;
  8154a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8154a4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8154a8:	e0bffd17 	ldw	r2,-12(fp)
  8154ac:	10800117 	ldw	r2,4(r2)
  8154b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8154b4:	e0bffb17 	ldw	r2,-20(fp)
  8154b8:	1080058b 	ldhu	r2,22(r2)
  8154bc:	10bfffcc 	andi	r2,r2,65535
  8154c0:	1005003a 	cmpeq	r2,r2,zero
  8154c4:	1000191e 	bne	r2,zero,81552c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  8154c8:	e0bffb17 	ldw	r2,-20(fp)
  8154cc:	10c00417 	ldw	r3,16(r2)
  8154d0:	18800017 	ldw	r2,0(r3)
  8154d4:	e0bffc15 	stw	r2,-16(fp)
  8154d8:	18c00104 	addi	r3,r3,4
  8154dc:	e0bffb17 	ldw	r2,-20(fp)
  8154e0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8154e4:	e0bffb17 	ldw	r2,-20(fp)
  8154e8:	1080058b 	ldhu	r2,22(r2)
  8154ec:	10bfffc4 	addi	r2,r2,-1
  8154f0:	1007883a 	mov	r3,r2
  8154f4:	e0bffb17 	ldw	r2,-20(fp)
  8154f8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8154fc:	e0bffb17 	ldw	r2,-20(fp)
  815500:	10c00417 	ldw	r3,16(r2)
  815504:	e0bffb17 	ldw	r2,-20(fp)
  815508:	10800217 	ldw	r2,8(r2)
  81550c:	1880041e 	bne	r3,r2,815520 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  815510:	e0bffb17 	ldw	r2,-20(fp)
  815514:	10c00117 	ldw	r3,4(r2)
  815518:	e0bffb17 	ldw	r2,-20(fp)
  81551c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  815520:	e0bffe17 	ldw	r2,-8(fp)
  815524:	10000005 	stb	zero,0(r2)
  815528:	00000406 	br	81553c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  81552c:	e0fffe17 	ldw	r3,-8(fp)
  815530:	008007c4 	movi	r2,31
  815534:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  815538:	e03ffc15 	stw	zero,-16(fp)
  81553c:	e0bffa17 	ldw	r2,-24(fp)
  815540:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815544:	e0bff817 	ldw	r2,-32(fp)
  815548:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  81554c:	e0bffc17 	ldw	r2,-16(fp)
  815550:	e0bfff15 	stw	r2,-4(fp)
  815554:	e0bfff17 	ldw	r2,-4(fp)
}
  815558:	e037883a 	mov	sp,fp
  81555c:	df000017 	ldw	fp,0(sp)
  815560:	dec00104 	addi	sp,sp,4
  815564:	f800283a 	ret

00815568 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  815568:	defff304 	addi	sp,sp,-52
  81556c:	dfc00c15 	stw	ra,48(sp)
  815570:	df000b15 	stw	fp,44(sp)
  815574:	df000b04 	addi	fp,sp,44
  815578:	e13ffd15 	stw	r4,-12(fp)
  81557c:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815580:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  815584:	008020b4 	movhi	r2,130
  815588:	10808c04 	addi	r2,r2,560
  81558c:	10800003 	ldbu	r2,0(r2)
  815590:	10803fcc 	andi	r2,r2,255
  815594:	1005003a 	cmpeq	r2,r2,zero
  815598:	1000021e 	bne	r2,zero,8155a4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81559c:	e03fff15 	stw	zero,-4(fp)
  8155a0:	00007006 	br	815764 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8155a4:	0005303a 	rdctl	r2,status
  8155a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8155ac:	e0fff917 	ldw	r3,-28(fp)
  8155b0:	00bfff84 	movi	r2,-2
  8155b4:	1884703a 	and	r2,r3,r2
  8155b8:	1001703a 	wrctl	status,r2
  
  return context;
  8155bc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8155c0:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  8155c4:	008020b4 	movhi	r2,130
  8155c8:	10808b04 	addi	r2,r2,556
  8155cc:	10800017 	ldw	r2,0(r2)
  8155d0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  8155d4:	008020b4 	movhi	r2,130
  8155d8:	10808b04 	addi	r2,r2,556
  8155dc:	10800017 	ldw	r2,0(r2)
  8155e0:	1005003a 	cmpeq	r2,r2,zero
  8155e4:	1000081e 	bne	r2,zero,815608 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8155e8:	008020b4 	movhi	r2,130
  8155ec:	10808b04 	addi	r2,r2,556
  8155f0:	10800017 	ldw	r2,0(r2)
  8155f4:	10800117 	ldw	r2,4(r2)
  8155f8:	1007883a 	mov	r3,r2
  8155fc:	008020b4 	movhi	r2,130
  815600:	10808b04 	addi	r2,r2,556
  815604:	10c00015 	stw	r3,0(r2)
  815608:	e0bffa17 	ldw	r2,-24(fp)
  81560c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815610:	e0bff817 	ldw	r2,-32(fp)
  815614:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  815618:	e0bffc17 	ldw	r2,-16(fp)
  81561c:	1005003a 	cmpeq	r2,r2,zero
  815620:	10004e1e 	bne	r2,zero,81575c <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815624:	0005303a 	rdctl	r2,status
  815628:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81562c:	e0fff717 	ldw	r3,-36(fp)
  815630:	00bfff84 	movi	r2,-2
  815634:	1884703a 	and	r2,r3,r2
  815638:	1001703a 	wrctl	status,r2
  
  return context;
  81563c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  815640:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  815644:	008020b4 	movhi	r2,130
  815648:	10808904 	addi	r2,r2,548
  81564c:	10800017 	ldw	r2,0(r2)
  815650:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  815654:	e0bffb17 	ldw	r2,-20(fp)
  815658:	1005003a 	cmpeq	r2,r2,zero
  81565c:	1000311e 	bne	r2,zero,815724 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  815660:	008020b4 	movhi	r2,130
  815664:	10808904 	addi	r2,r2,548
  815668:	10800017 	ldw	r2,0(r2)
  81566c:	10c00017 	ldw	r3,0(r2)
  815670:	008020b4 	movhi	r2,130
  815674:	10808904 	addi	r2,r2,548
  815678:	10c00015 	stw	r3,0(r2)
  81567c:	e0bffa17 	ldw	r2,-24(fp)
  815680:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815684:	e0bff617 	ldw	r2,-40(fp)
  815688:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  81568c:	e0fffb17 	ldw	r3,-20(fp)
  815690:	e0bffd17 	ldw	r2,-12(fp)
  815694:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  815698:	e0bffe0b 	ldhu	r2,-8(fp)
  81569c:	1085883a 	add	r2,r2,r2
  8156a0:	1085883a 	add	r2,r2,r2
  8156a4:	1007883a 	mov	r3,r2
  8156a8:	e0bffd17 	ldw	r2,-12(fp)
  8156ac:	1887883a 	add	r3,r3,r2
  8156b0:	e0bffb17 	ldw	r2,-20(fp)
  8156b4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  8156b8:	e0fffb17 	ldw	r3,-20(fp)
  8156bc:	e0bffd17 	ldw	r2,-12(fp)
  8156c0:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  8156c4:	e0fffb17 	ldw	r3,-20(fp)
  8156c8:	e0bffd17 	ldw	r2,-12(fp)
  8156cc:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  8156d0:	e0fffb17 	ldw	r3,-20(fp)
  8156d4:	e0bffe0b 	ldhu	r2,-8(fp)
  8156d8:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  8156dc:	e0bffb17 	ldw	r2,-20(fp)
  8156e0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  8156e4:	e0fffc17 	ldw	r3,-16(fp)
  8156e8:	00800084 	movi	r2,2
  8156ec:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  8156f0:	e0bffc17 	ldw	r2,-16(fp)
  8156f4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  8156f8:	e0fffc17 	ldw	r3,-16(fp)
  8156fc:	e0bffb17 	ldw	r2,-20(fp)
  815700:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  815704:	e0fffc17 	ldw	r3,-16(fp)
  815708:	00800fc4 	movi	r2,63
  81570c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  815710:	e0bffc17 	ldw	r2,-16(fp)
  815714:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  815718:	e13ffc17 	ldw	r4,-16(fp)
  81571c:	08125cc0 	call	8125cc <OS_EventWaitListInit>
  815720:	00000e06 	br	81575c <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  815724:	008020b4 	movhi	r2,130
  815728:	10808b04 	addi	r2,r2,556
  81572c:	10c00017 	ldw	r3,0(r2)
  815730:	e0bffc17 	ldw	r2,-16(fp)
  815734:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  815738:	00c020b4 	movhi	r3,130
  81573c:	18c08b04 	addi	r3,r3,556
  815740:	e0bffc17 	ldw	r2,-16(fp)
  815744:	18800015 	stw	r2,0(r3)
  815748:	e0bffa17 	ldw	r2,-24(fp)
  81574c:	e0bff515 	stw	r2,-44(fp)
  815750:	e0bff517 	ldw	r2,-44(fp)
  815754:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  815758:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  81575c:	e0bffc17 	ldw	r2,-16(fp)
  815760:	e0bfff15 	stw	r2,-4(fp)
  815764:	e0bfff17 	ldw	r2,-4(fp)
}
  815768:	e037883a 	mov	sp,fp
  81576c:	dfc00117 	ldw	ra,4(sp)
  815770:	df000017 	ldw	fp,0(sp)
  815774:	dec00204 	addi	sp,sp,8
  815778:	f800283a 	ret

0081577c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81577c:	defff004 	addi	sp,sp,-64
  815780:	dfc00f15 	stw	ra,60(sp)
  815784:	df000e15 	stw	fp,56(sp)
  815788:	df000e04 	addi	fp,sp,56
  81578c:	e13ffb15 	stw	r4,-20(fp)
  815790:	e1bffd15 	stw	r6,-12(fp)
  815794:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  815798:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81579c:	e0bffd17 	ldw	r2,-12(fp)
  8157a0:	1004c03a 	cmpne	r2,r2,zero
  8157a4:	1000031e 	bne	r2,zero,8157b4 <OSQDel+0x38>
        return (pevent);
  8157a8:	e0bffb17 	ldw	r2,-20(fp)
  8157ac:	e0bfff15 	stw	r2,-4(fp)
  8157b0:	0000ac06 	br	815a64 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8157b4:	e0bffb17 	ldw	r2,-20(fp)
  8157b8:	1004c03a 	cmpne	r2,r2,zero
  8157bc:	1000061e 	bne	r2,zero,8157d8 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  8157c0:	e0fffd17 	ldw	r3,-12(fp)
  8157c4:	00800104 	movi	r2,4
  8157c8:	18800005 	stb	r2,0(r3)
        return (pevent);
  8157cc:	e0fffb17 	ldw	r3,-20(fp)
  8157d0:	e0ffff15 	stw	r3,-4(fp)
  8157d4:	0000a306 	br	815a64 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8157d8:	e0bffb17 	ldw	r2,-20(fp)
  8157dc:	10800003 	ldbu	r2,0(r2)
  8157e0:	10803fcc 	andi	r2,r2,255
  8157e4:	108000a0 	cmpeqi	r2,r2,2
  8157e8:	1000061e 	bne	r2,zero,815804 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8157ec:	e0fffd17 	ldw	r3,-12(fp)
  8157f0:	00800044 	movi	r2,1
  8157f4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8157f8:	e0bffb17 	ldw	r2,-20(fp)
  8157fc:	e0bfff15 	stw	r2,-4(fp)
  815800:	00009806 	br	815a64 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  815804:	008020b4 	movhi	r2,130
  815808:	10808c04 	addi	r2,r2,560
  81580c:	10800003 	ldbu	r2,0(r2)
  815810:	10803fcc 	andi	r2,r2,255
  815814:	1005003a 	cmpeq	r2,r2,zero
  815818:	1000061e 	bne	r2,zero,815834 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81581c:	e0fffd17 	ldw	r3,-12(fp)
  815820:	008003c4 	movi	r2,15
  815824:	18800005 	stb	r2,0(r3)
        return (pevent);
  815828:	e0fffb17 	ldw	r3,-20(fp)
  81582c:	e0ffff15 	stw	r3,-4(fp)
  815830:	00008c06 	br	815a64 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815834:	0005303a 	rdctl	r2,status
  815838:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81583c:	e0fff617 	ldw	r3,-40(fp)
  815840:	00bfff84 	movi	r2,-2
  815844:	1884703a 	and	r2,r3,r2
  815848:	1001703a 	wrctl	status,r2
  
  return context;
  81584c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  815850:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  815854:	e0bffb17 	ldw	r2,-20(fp)
  815858:	10800283 	ldbu	r2,10(r2)
  81585c:	10803fcc 	andi	r2,r2,255
  815860:	1005003a 	cmpeq	r2,r2,zero
  815864:	1000031e 	bne	r2,zero,815874 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  815868:	00800044 	movi	r2,1
  81586c:	e0bffa05 	stb	r2,-24(fp)
  815870:	00000106 	br	815878 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  815874:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  815878:	e0bffc03 	ldbu	r2,-16(fp)
  81587c:	e0bffe15 	stw	r2,-8(fp)
  815880:	e0fffe17 	ldw	r3,-8(fp)
  815884:	1805003a 	cmpeq	r2,r3,zero
  815888:	1000041e 	bne	r2,zero,81589c <OSQDel+0x120>
  81588c:	e0fffe17 	ldw	r3,-8(fp)
  815890:	18800060 	cmpeqi	r2,r3,1
  815894:	1000391e 	bne	r2,zero,81597c <OSQDel+0x200>
  815898:	00006706 	br	815a38 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  81589c:	e0bffa03 	ldbu	r2,-24(fp)
  8158a0:	1004c03a 	cmpne	r2,r2,zero
  8158a4:	1000261e 	bne	r2,zero,815940 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8158a8:	e0fffb17 	ldw	r3,-20(fp)
  8158ac:	00800fc4 	movi	r2,63
  8158b0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8158b4:	e0bffb17 	ldw	r2,-20(fp)
  8158b8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8158bc:	e0bffb17 	ldw	r2,-20(fp)
  8158c0:	10800117 	ldw	r2,4(r2)
  8158c4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8158c8:	008020b4 	movhi	r2,130
  8158cc:	10808904 	addi	r2,r2,548
  8158d0:	10c00017 	ldw	r3,0(r2)
  8158d4:	e0bff817 	ldw	r2,-32(fp)
  8158d8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8158dc:	00c020b4 	movhi	r3,130
  8158e0:	18c08904 	addi	r3,r3,548
  8158e4:	e0bff817 	ldw	r2,-32(fp)
  8158e8:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8158ec:	e0bffb17 	ldw	r2,-20(fp)
  8158f0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  8158f4:	008020b4 	movhi	r2,130
  8158f8:	10808b04 	addi	r2,r2,556
  8158fc:	10c00017 	ldw	r3,0(r2)
  815900:	e0bffb17 	ldw	r2,-20(fp)
  815904:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  815908:	e0bffb17 	ldw	r2,-20(fp)
  81590c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  815910:	00c020b4 	movhi	r3,130
  815914:	18c08b04 	addi	r3,r3,556
  815918:	e0bffb17 	ldw	r2,-20(fp)
  81591c:	18800015 	stw	r2,0(r3)
  815920:	e0bff717 	ldw	r2,-36(fp)
  815924:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815928:	e0bff517 	ldw	r2,-44(fp)
  81592c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  815930:	e0bffd17 	ldw	r2,-12(fp)
  815934:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  815938:	e03ff915 	stw	zero,-28(fp)
  81593c:	00004706 	br	815a5c <OSQDel+0x2e0>
  815940:	e0bff717 	ldw	r2,-36(fp)
  815944:	e0bff415 	stw	r2,-48(fp)
  815948:	e0bff417 	ldw	r2,-48(fp)
  81594c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  815950:	e0fffd17 	ldw	r3,-12(fp)
  815954:	00801244 	movi	r2,73
  815958:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81595c:	e0bffb17 	ldw	r2,-20(fp)
  815960:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  815964:	00003d06 	br	815a5c <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  815968:	e13ffb17 	ldw	r4,-20(fp)
  81596c:	000b883a 	mov	r5,zero
  815970:	01800104 	movi	r6,4
  815974:	000f883a 	mov	r7,zero
  815978:	08120180 	call	812018 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  81597c:	e0bffb17 	ldw	r2,-20(fp)
  815980:	10800283 	ldbu	r2,10(r2)
  815984:	10803fcc 	andi	r2,r2,255
  815988:	1004c03a 	cmpne	r2,r2,zero
  81598c:	103ff61e 	bne	r2,zero,815968 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  815990:	e0fffb17 	ldw	r3,-20(fp)
  815994:	00800fc4 	movi	r2,63
  815998:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81599c:	e0bffb17 	ldw	r2,-20(fp)
  8159a0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  8159a4:	e0bffb17 	ldw	r2,-20(fp)
  8159a8:	10800117 	ldw	r2,4(r2)
  8159ac:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  8159b0:	008020b4 	movhi	r2,130
  8159b4:	10808904 	addi	r2,r2,548
  8159b8:	10c00017 	ldw	r3,0(r2)
  8159bc:	e0bff817 	ldw	r2,-32(fp)
  8159c0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8159c4:	00c020b4 	movhi	r3,130
  8159c8:	18c08904 	addi	r3,r3,548
  8159cc:	e0bff817 	ldw	r2,-32(fp)
  8159d0:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8159d4:	e0bffb17 	ldw	r2,-20(fp)
  8159d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8159dc:	008020b4 	movhi	r2,130
  8159e0:	10808b04 	addi	r2,r2,556
  8159e4:	10c00017 	ldw	r3,0(r2)
  8159e8:	e0bffb17 	ldw	r2,-20(fp)
  8159ec:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8159f0:	e0bffb17 	ldw	r2,-20(fp)
  8159f4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8159f8:	00c020b4 	movhi	r3,130
  8159fc:	18c08b04 	addi	r3,r3,556
  815a00:	e0bffb17 	ldw	r2,-20(fp)
  815a04:	18800015 	stw	r2,0(r3)
  815a08:	e0bff717 	ldw	r2,-36(fp)
  815a0c:	e0bff315 	stw	r2,-52(fp)
  815a10:	e0bff317 	ldw	r2,-52(fp)
  815a14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  815a18:	e0bffa03 	ldbu	r2,-24(fp)
  815a1c:	10800058 	cmpnei	r2,r2,1
  815a20:	1000011e 	bne	r2,zero,815a28 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  815a24:	0812a580 	call	812a58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  815a28:	e0bffd17 	ldw	r2,-12(fp)
  815a2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  815a30:	e03ff915 	stw	zero,-28(fp)
             break;
  815a34:	00000906 	br	815a5c <OSQDel+0x2e0>
  815a38:	e0bff717 	ldw	r2,-36(fp)
  815a3c:	e0bff215 	stw	r2,-56(fp)
  815a40:	e0bff217 	ldw	r2,-56(fp)
  815a44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  815a48:	e0fffd17 	ldw	r3,-12(fp)
  815a4c:	008001c4 	movi	r2,7
  815a50:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  815a54:	e0bffb17 	ldw	r2,-20(fp)
  815a58:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  815a5c:	e0bff917 	ldw	r2,-28(fp)
  815a60:	e0bfff15 	stw	r2,-4(fp)
  815a64:	e0bfff17 	ldw	r2,-4(fp)
}
  815a68:	e037883a 	mov	sp,fp
  815a6c:	dfc00117 	ldw	ra,4(sp)
  815a70:	df000017 	ldw	fp,0(sp)
  815a74:	dec00204 	addi	sp,sp,8
  815a78:	f800283a 	ret

00815a7c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  815a7c:	defff904 	addi	sp,sp,-28
  815a80:	df000615 	stw	fp,24(sp)
  815a84:	df000604 	addi	fp,sp,24
  815a88:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  815a8c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  815a90:	e0bffe17 	ldw	r2,-8(fp)
  815a94:	1004c03a 	cmpne	r2,r2,zero
  815a98:	1000031e 	bne	r2,zero,815aa8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  815a9c:	00800104 	movi	r2,4
  815aa0:	e0bfff15 	stw	r2,-4(fp)
  815aa4:	00002206 	br	815b30 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  815aa8:	e0bffe17 	ldw	r2,-8(fp)
  815aac:	10800003 	ldbu	r2,0(r2)
  815ab0:	10803fcc 	andi	r2,r2,255
  815ab4:	108000a0 	cmpeqi	r2,r2,2
  815ab8:	1000031e 	bne	r2,zero,815ac8 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  815abc:	00800044 	movi	r2,1
  815ac0:	e0bfff15 	stw	r2,-4(fp)
  815ac4:	00001a06 	br	815b30 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ac8:	0005303a 	rdctl	r2,status
  815acc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ad0:	e0fffb17 	ldw	r3,-20(fp)
  815ad4:	00bfff84 	movi	r2,-2
  815ad8:	1884703a 	and	r2,r3,r2
  815adc:	1001703a 	wrctl	status,r2
  
  return context;
  815ae0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  815ae4:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  815ae8:	e0bffe17 	ldw	r2,-8(fp)
  815aec:	10800117 	ldw	r2,4(r2)
  815af0:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  815af4:	e0bffd17 	ldw	r2,-12(fp)
  815af8:	10c00117 	ldw	r3,4(r2)
  815afc:	e0bffd17 	ldw	r2,-12(fp)
  815b00:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  815b04:	e0bffd17 	ldw	r2,-12(fp)
  815b08:	10c00117 	ldw	r3,4(r2)
  815b0c:	e0bffd17 	ldw	r2,-12(fp)
  815b10:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  815b14:	e0bffd17 	ldw	r2,-12(fp)
  815b18:	1000058d 	sth	zero,22(r2)
  815b1c:	e0bffc17 	ldw	r2,-16(fp)
  815b20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815b24:	e0bffa17 	ldw	r2,-24(fp)
  815b28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815b2c:	e03fff15 	stw	zero,-4(fp)
  815b30:	e0bfff17 	ldw	r2,-4(fp)
}
  815b34:	e037883a 	mov	sp,fp
  815b38:	df000017 	ldw	fp,0(sp)
  815b3c:	dec00104 	addi	sp,sp,4
  815b40:	f800283a 	ret

00815b44 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  815b44:	defff104 	addi	sp,sp,-60
  815b48:	dfc00e15 	stw	ra,56(sp)
  815b4c:	df000d15 	stw	fp,52(sp)
  815b50:	df000d04 	addi	fp,sp,52
  815b54:	e13ffb15 	stw	r4,-20(fp)
  815b58:	e1bffd15 	stw	r6,-12(fp)
  815b5c:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815b60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  815b64:	e0bffd17 	ldw	r2,-12(fp)
  815b68:	1004c03a 	cmpne	r2,r2,zero
  815b6c:	1000021e 	bne	r2,zero,815b78 <OSQPend+0x34>
        return ((void *)0);
  815b70:	e03fff15 	stw	zero,-4(fp)
  815b74:	0000b506 	br	815e4c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  815b78:	e0bffb17 	ldw	r2,-20(fp)
  815b7c:	1004c03a 	cmpne	r2,r2,zero
  815b80:	1000051e 	bne	r2,zero,815b98 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  815b84:	e0fffd17 	ldw	r3,-12(fp)
  815b88:	00800104 	movi	r2,4
  815b8c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815b90:	e03fff15 	stw	zero,-4(fp)
  815b94:	0000ad06 	br	815e4c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  815b98:	e0bffb17 	ldw	r2,-20(fp)
  815b9c:	10800003 	ldbu	r2,0(r2)
  815ba0:	10803fcc 	andi	r2,r2,255
  815ba4:	108000a0 	cmpeqi	r2,r2,2
  815ba8:	1000051e 	bne	r2,zero,815bc0 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815bac:	e0fffd17 	ldw	r3,-12(fp)
  815bb0:	00800044 	movi	r2,1
  815bb4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815bb8:	e03fff15 	stw	zero,-4(fp)
  815bbc:	0000a306 	br	815e4c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  815bc0:	008020b4 	movhi	r2,130
  815bc4:	10808c04 	addi	r2,r2,560
  815bc8:	10800003 	ldbu	r2,0(r2)
  815bcc:	10803fcc 	andi	r2,r2,255
  815bd0:	1005003a 	cmpeq	r2,r2,zero
  815bd4:	1000051e 	bne	r2,zero,815bec <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  815bd8:	e0fffd17 	ldw	r3,-12(fp)
  815bdc:	00800084 	movi	r2,2
  815be0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815be4:	e03fff15 	stw	zero,-4(fp)
  815be8:	00009806 	br	815e4c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  815bec:	008020b4 	movhi	r2,130
  815bf0:	10807e04 	addi	r2,r2,504
  815bf4:	10800003 	ldbu	r2,0(r2)
  815bf8:	10803fcc 	andi	r2,r2,255
  815bfc:	1005003a 	cmpeq	r2,r2,zero
  815c00:	1000051e 	bne	r2,zero,815c18 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  815c04:	e0fffd17 	ldw	r3,-12(fp)
  815c08:	00800344 	movi	r2,13
  815c0c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  815c10:	e03fff15 	stw	zero,-4(fp)
  815c14:	00008d06 	br	815e4c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c18:	0005303a 	rdctl	r2,status
  815c1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c20:	e0fff717 	ldw	r3,-36(fp)
  815c24:	00bfff84 	movi	r2,-2
  815c28:	1884703a 	and	r2,r3,r2
  815c2c:	1001703a 	wrctl	status,r2
  
  return context;
  815c30:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  815c34:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  815c38:	e0bffb17 	ldw	r2,-20(fp)
  815c3c:	10800117 	ldw	r2,4(r2)
  815c40:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  815c44:	e0bff917 	ldw	r2,-28(fp)
  815c48:	1080058b 	ldhu	r2,22(r2)
  815c4c:	10bfffcc 	andi	r2,r2,65535
  815c50:	1005003a 	cmpeq	r2,r2,zero
  815c54:	10001f1e 	bne	r2,zero,815cd4 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  815c58:	e0bff917 	ldw	r2,-28(fp)
  815c5c:	10c00417 	ldw	r3,16(r2)
  815c60:	18800017 	ldw	r2,0(r3)
  815c64:	e0bffa15 	stw	r2,-24(fp)
  815c68:	18c00104 	addi	r3,r3,4
  815c6c:	e0bff917 	ldw	r2,-28(fp)
  815c70:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  815c74:	e0bff917 	ldw	r2,-28(fp)
  815c78:	1080058b 	ldhu	r2,22(r2)
  815c7c:	10bfffc4 	addi	r2,r2,-1
  815c80:	1007883a 	mov	r3,r2
  815c84:	e0bff917 	ldw	r2,-28(fp)
  815c88:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  815c8c:	e0bff917 	ldw	r2,-28(fp)
  815c90:	10c00417 	ldw	r3,16(r2)
  815c94:	e0bff917 	ldw	r2,-28(fp)
  815c98:	10800217 	ldw	r2,8(r2)
  815c9c:	1880041e 	bne	r3,r2,815cb0 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  815ca0:	e0bff917 	ldw	r2,-28(fp)
  815ca4:	10c00117 	ldw	r3,4(r2)
  815ca8:	e0bff917 	ldw	r2,-28(fp)
  815cac:	10c00415 	stw	r3,16(r2)
  815cb0:	e0bff817 	ldw	r2,-32(fp)
  815cb4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815cb8:	e0bff617 	ldw	r2,-40(fp)
  815cbc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  815cc0:	e0bffd17 	ldw	r2,-12(fp)
  815cc4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  815cc8:	e0bffa17 	ldw	r2,-24(fp)
  815ccc:	e0bfff15 	stw	r2,-4(fp)
  815cd0:	00005e06 	br	815e4c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  815cd4:	008020b4 	movhi	r2,130
  815cd8:	10808d04 	addi	r2,r2,564
  815cdc:	10c00017 	ldw	r3,0(r2)
  815ce0:	008020b4 	movhi	r2,130
  815ce4:	10808d04 	addi	r2,r2,564
  815ce8:	10800017 	ldw	r2,0(r2)
  815cec:	10800c03 	ldbu	r2,48(r2)
  815cf0:	10800114 	ori	r2,r2,4
  815cf4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  815cf8:	008020b4 	movhi	r2,130
  815cfc:	10808d04 	addi	r2,r2,564
  815d00:	10800017 	ldw	r2,0(r2)
  815d04:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  815d08:	008020b4 	movhi	r2,130
  815d0c:	10808d04 	addi	r2,r2,564
  815d10:	10c00017 	ldw	r3,0(r2)
  815d14:	e0bffc0b 	ldhu	r2,-16(fp)
  815d18:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  815d1c:	e13ffb17 	ldw	r4,-20(fp)
  815d20:	08121ac0 	call	8121ac <OS_EventTaskWait>
  815d24:	e0bff817 	ldw	r2,-32(fp)
  815d28:	e0bff515 	stw	r2,-44(fp)
  815d2c:	e0bff517 	ldw	r2,-44(fp)
  815d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  815d34:	0812a580 	call	812a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815d38:	0005303a 	rdctl	r2,status
  815d3c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815d40:	e0fff417 	ldw	r3,-48(fp)
  815d44:	00bfff84 	movi	r2,-2
  815d48:	1884703a 	and	r2,r3,r2
  815d4c:	1001703a 	wrctl	status,r2
  
  return context;
  815d50:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  815d54:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  815d58:	008020b4 	movhi	r2,130
  815d5c:	10808d04 	addi	r2,r2,564
  815d60:	10800017 	ldw	r2,0(r2)
  815d64:	10800c43 	ldbu	r2,49(r2)
  815d68:	10803fcc 	andi	r2,r2,255
  815d6c:	e0bffe15 	stw	r2,-8(fp)
  815d70:	e0fffe17 	ldw	r3,-8(fp)
  815d74:	1805003a 	cmpeq	r2,r3,zero
  815d78:	1000041e 	bne	r2,zero,815d8c <OSQPend+0x248>
  815d7c:	e0fffe17 	ldw	r3,-8(fp)
  815d80:	188000a0 	cmpeqi	r2,r3,2
  815d84:	1000091e 	bne	r2,zero,815dac <OSQPend+0x268>
  815d88:	00000d06 	br	815dc0 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  815d8c:	008020b4 	movhi	r2,130
  815d90:	10808d04 	addi	r2,r2,564
  815d94:	10800017 	ldw	r2,0(r2)
  815d98:	10800917 	ldw	r2,36(r2)
  815d9c:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  815da0:	e0bffd17 	ldw	r2,-12(fp)
  815da4:	10000005 	stb	zero,0(r2)
             break;
  815da8:	00000e06 	br	815de4 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  815dac:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  815db0:	e0fffd17 	ldw	r3,-12(fp)
  815db4:	00800384 	movi	r2,14
  815db8:	18800005 	stb	r2,0(r3)
             break;
  815dbc:	00000906 	br	815de4 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  815dc0:	008020b4 	movhi	r2,130
  815dc4:	10808d04 	addi	r2,r2,564
  815dc8:	11000017 	ldw	r4,0(r2)
  815dcc:	e17ffb17 	ldw	r5,-20(fp)
  815dd0:	08124100 	call	812410 <OS_EventTaskRemove>
             pmsg = (void *)0;
  815dd4:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  815dd8:	e0fffd17 	ldw	r3,-12(fp)
  815ddc:	00800284 	movi	r2,10
  815de0:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  815de4:	008020b4 	movhi	r2,130
  815de8:	10808d04 	addi	r2,r2,564
  815dec:	10800017 	ldw	r2,0(r2)
  815df0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  815df4:	008020b4 	movhi	r2,130
  815df8:	10808d04 	addi	r2,r2,564
  815dfc:	10800017 	ldw	r2,0(r2)
  815e00:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  815e04:	008020b4 	movhi	r2,130
  815e08:	10808d04 	addi	r2,r2,564
  815e0c:	10800017 	ldw	r2,0(r2)
  815e10:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  815e14:	008020b4 	movhi	r2,130
  815e18:	10808d04 	addi	r2,r2,564
  815e1c:	10800017 	ldw	r2,0(r2)
  815e20:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  815e24:	008020b4 	movhi	r2,130
  815e28:	10808d04 	addi	r2,r2,564
  815e2c:	10800017 	ldw	r2,0(r2)
  815e30:	10000915 	stw	zero,36(r2)
  815e34:	e0bff817 	ldw	r2,-32(fp)
  815e38:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815e3c:	e0bff317 	ldw	r2,-52(fp)
  815e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  815e44:	e0bffa17 	ldw	r2,-24(fp)
  815e48:	e0bfff15 	stw	r2,-4(fp)
  815e4c:	e0bfff17 	ldw	r2,-4(fp)
}
  815e50:	e037883a 	mov	sp,fp
  815e54:	dfc00117 	ldw	ra,4(sp)
  815e58:	df000017 	ldw	fp,0(sp)
  815e5c:	dec00204 	addi	sp,sp,8
  815e60:	f800283a 	ret

00815e64 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  815e64:	defff504 	addi	sp,sp,-44
  815e68:	dfc00a15 	stw	ra,40(sp)
  815e6c:	df000915 	stw	fp,36(sp)
  815e70:	df000904 	addi	fp,sp,36
  815e74:	e13ffc15 	stw	r4,-16(fp)
  815e78:	e1bffe15 	stw	r6,-8(fp)
  815e7c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  815e80:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  815e84:	e0bffe17 	ldw	r2,-8(fp)
  815e88:	1004c03a 	cmpne	r2,r2,zero
  815e8c:	1000021e 	bne	r2,zero,815e98 <OSQPendAbort+0x34>
        return (0);
  815e90:	e03fff15 	stw	zero,-4(fp)
  815e94:	00004c06 	br	815fc8 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  815e98:	e0bffc17 	ldw	r2,-16(fp)
  815e9c:	1004c03a 	cmpne	r2,r2,zero
  815ea0:	1000051e 	bne	r2,zero,815eb8 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  815ea4:	e0fffe17 	ldw	r3,-8(fp)
  815ea8:	00800104 	movi	r2,4
  815eac:	18800005 	stb	r2,0(r3)
        return (0);
  815eb0:	e03fff15 	stw	zero,-4(fp)
  815eb4:	00004406 	br	815fc8 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  815eb8:	e0bffc17 	ldw	r2,-16(fp)
  815ebc:	10800003 	ldbu	r2,0(r2)
  815ec0:	10803fcc 	andi	r2,r2,255
  815ec4:	108000a0 	cmpeqi	r2,r2,2
  815ec8:	1000051e 	bne	r2,zero,815ee0 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  815ecc:	e0fffe17 	ldw	r3,-8(fp)
  815ed0:	00800044 	movi	r2,1
  815ed4:	18800005 	stb	r2,0(r3)
        return (0);
  815ed8:	e03fff15 	stw	zero,-4(fp)
  815edc:	00003a06 	br	815fc8 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815ee0:	0005303a 	rdctl	r2,status
  815ee4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815ee8:	e0fff917 	ldw	r3,-28(fp)
  815eec:	00bfff84 	movi	r2,-2
  815ef0:	1884703a 	and	r2,r3,r2
  815ef4:	1001703a 	wrctl	status,r2
  
  return context;
  815ef8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  815efc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  815f00:	e0bffc17 	ldw	r2,-16(fp)
  815f04:	10800283 	ldbu	r2,10(r2)
  815f08:	10803fcc 	andi	r2,r2,255
  815f0c:	1005003a 	cmpeq	r2,r2,zero
  815f10:	1000261e 	bne	r2,zero,815fac <OSQPendAbort+0x148>
        nbr_tasks = 0;
  815f14:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  815f18:	e0bffd03 	ldbu	r2,-12(fp)
  815f1c:	10800060 	cmpeqi	r2,r2,1
  815f20:	1000091e 	bne	r2,zero,815f48 <OSQPendAbort+0xe4>
  815f24:	00000e06 	br	815f60 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  815f28:	e13ffc17 	ldw	r4,-16(fp)
  815f2c:	000b883a 	mov	r5,zero
  815f30:	01800104 	movi	r6,4
  815f34:	01c00084 	movi	r7,2
  815f38:	08120180 	call	812018 <OS_EventTaskRdy>
                     nbr_tasks++;
  815f3c:	e0bffb03 	ldbu	r2,-20(fp)
  815f40:	10800044 	addi	r2,r2,1
  815f44:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  815f48:	e0bffc17 	ldw	r2,-16(fp)
  815f4c:	10800283 	ldbu	r2,10(r2)
  815f50:	10803fcc 	andi	r2,r2,255
  815f54:	1004c03a 	cmpne	r2,r2,zero
  815f58:	103ff31e 	bne	r2,zero,815f28 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  815f5c:	00000806 	br	815f80 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  815f60:	e13ffc17 	ldw	r4,-16(fp)
  815f64:	000b883a 	mov	r5,zero
  815f68:	01800104 	movi	r6,4
  815f6c:	01c00084 	movi	r7,2
  815f70:	08120180 	call	812018 <OS_EventTaskRdy>
                 nbr_tasks++;
  815f74:	e0bffb03 	ldbu	r2,-20(fp)
  815f78:	10800044 	addi	r2,r2,1
  815f7c:	e0bffb05 	stb	r2,-20(fp)
  815f80:	e0bffa17 	ldw	r2,-24(fp)
  815f84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f88:	e0bff817 	ldw	r2,-32(fp)
  815f8c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  815f90:	0812a580 	call	812a58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  815f94:	e0fffe17 	ldw	r3,-8(fp)
  815f98:	00800384 	movi	r2,14
  815f9c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  815fa0:	e0bffb03 	ldbu	r2,-20(fp)
  815fa4:	e0bfff15 	stw	r2,-4(fp)
  815fa8:	00000706 	br	815fc8 <OSQPendAbort+0x164>
  815fac:	e0bffa17 	ldw	r2,-24(fp)
  815fb0:	e0bff715 	stw	r2,-36(fp)
  815fb4:	e0bff717 	ldw	r2,-36(fp)
  815fb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  815fbc:	e0bffe17 	ldw	r2,-8(fp)
  815fc0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  815fc4:	e03fff15 	stw	zero,-4(fp)
  815fc8:	e0bfff17 	ldw	r2,-4(fp)
}
  815fcc:	e037883a 	mov	sp,fp
  815fd0:	dfc00117 	ldw	ra,4(sp)
  815fd4:	df000017 	ldw	fp,0(sp)
  815fd8:	dec00204 	addi	sp,sp,8
  815fdc:	f800283a 	ret

00815fe0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  815fe0:	defff504 	addi	sp,sp,-44
  815fe4:	dfc00a15 	stw	ra,40(sp)
  815fe8:	df000915 	stw	fp,36(sp)
  815fec:	df000904 	addi	fp,sp,36
  815ff0:	e13ffd15 	stw	r4,-12(fp)
  815ff4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  815ff8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  815ffc:	e0bffd17 	ldw	r2,-12(fp)
  816000:	1004c03a 	cmpne	r2,r2,zero
  816004:	1000031e 	bne	r2,zero,816014 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  816008:	00800104 	movi	r2,4
  81600c:	e0bfff15 	stw	r2,-4(fp)
  816010:	00004d06 	br	816148 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  816014:	e0bffd17 	ldw	r2,-12(fp)
  816018:	10800003 	ldbu	r2,0(r2)
  81601c:	10803fcc 	andi	r2,r2,255
  816020:	108000a0 	cmpeqi	r2,r2,2
  816024:	1000031e 	bne	r2,zero,816034 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  816028:	00800044 	movi	r2,1
  81602c:	e0bfff15 	stw	r2,-4(fp)
  816030:	00004506 	br	816148 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816034:	0005303a 	rdctl	r2,status
  816038:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81603c:	e0fffa17 	ldw	r3,-24(fp)
  816040:	00bfff84 	movi	r2,-2
  816044:	1884703a 	and	r2,r3,r2
  816048:	1001703a 	wrctl	status,r2
  
  return context;
  81604c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  816050:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  816054:	e0bffd17 	ldw	r2,-12(fp)
  816058:	10800283 	ldbu	r2,10(r2)
  81605c:	10803fcc 	andi	r2,r2,255
  816060:	1005003a 	cmpeq	r2,r2,zero
  816064:	10000c1e 	bne	r2,zero,816098 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  816068:	e13ffd17 	ldw	r4,-12(fp)
  81606c:	e17ffe17 	ldw	r5,-8(fp)
  816070:	01800104 	movi	r6,4
  816074:	000f883a 	mov	r7,zero
  816078:	08120180 	call	812018 <OS_EventTaskRdy>
  81607c:	e0bffb17 	ldw	r2,-20(fp)
  816080:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816084:	e0bff917 	ldw	r2,-28(fp)
  816088:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  81608c:	0812a580 	call	812a58 <OS_Sched>
        return (OS_ERR_NONE);
  816090:	e03fff15 	stw	zero,-4(fp)
  816094:	00002c06 	br	816148 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  816098:	e0bffd17 	ldw	r2,-12(fp)
  81609c:	10800117 	ldw	r2,4(r2)
  8160a0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  8160a4:	e0bffc17 	ldw	r2,-16(fp)
  8160a8:	10c0058b 	ldhu	r3,22(r2)
  8160ac:	e0bffc17 	ldw	r2,-16(fp)
  8160b0:	1080050b 	ldhu	r2,20(r2)
  8160b4:	18ffffcc 	andi	r3,r3,65535
  8160b8:	10bfffcc 	andi	r2,r2,65535
  8160bc:	18800736 	bltu	r3,r2,8160dc <OSQPost+0xfc>
  8160c0:	e0bffb17 	ldw	r2,-20(fp)
  8160c4:	e0bff815 	stw	r2,-32(fp)
  8160c8:	e0bff817 	ldw	r2,-32(fp)
  8160cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8160d0:	00800784 	movi	r2,30
  8160d4:	e0bfff15 	stw	r2,-4(fp)
  8160d8:	00001b06 	br	816148 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  8160dc:	e0bffc17 	ldw	r2,-16(fp)
  8160e0:	10c00317 	ldw	r3,12(r2)
  8160e4:	e0bffe17 	ldw	r2,-8(fp)
  8160e8:	18800015 	stw	r2,0(r3)
  8160ec:	18c00104 	addi	r3,r3,4
  8160f0:	e0bffc17 	ldw	r2,-16(fp)
  8160f4:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  8160f8:	e0bffc17 	ldw	r2,-16(fp)
  8160fc:	1080058b 	ldhu	r2,22(r2)
  816100:	10800044 	addi	r2,r2,1
  816104:	1007883a 	mov	r3,r2
  816108:	e0bffc17 	ldw	r2,-16(fp)
  81610c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  816110:	e0bffc17 	ldw	r2,-16(fp)
  816114:	10c00317 	ldw	r3,12(r2)
  816118:	e0bffc17 	ldw	r2,-16(fp)
  81611c:	10800217 	ldw	r2,8(r2)
  816120:	1880041e 	bne	r3,r2,816134 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  816124:	e0bffc17 	ldw	r2,-16(fp)
  816128:	10c00117 	ldw	r3,4(r2)
  81612c:	e0bffc17 	ldw	r2,-16(fp)
  816130:	10c00315 	stw	r3,12(r2)
  816134:	e0bffb17 	ldw	r2,-20(fp)
  816138:	e0bff715 	stw	r2,-36(fp)
  81613c:	e0bff717 	ldw	r2,-36(fp)
  816140:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816144:	e03fff15 	stw	zero,-4(fp)
  816148:	e0bfff17 	ldw	r2,-4(fp)
}
  81614c:	e037883a 	mov	sp,fp
  816150:	dfc00117 	ldw	ra,4(sp)
  816154:	df000017 	ldw	fp,0(sp)
  816158:	dec00204 	addi	sp,sp,8
  81615c:	f800283a 	ret

00816160 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  816160:	defff504 	addi	sp,sp,-44
  816164:	dfc00a15 	stw	ra,40(sp)
  816168:	df000915 	stw	fp,36(sp)
  81616c:	df000904 	addi	fp,sp,36
  816170:	e13ffd15 	stw	r4,-12(fp)
  816174:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816178:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81617c:	e0bffd17 	ldw	r2,-12(fp)
  816180:	1004c03a 	cmpne	r2,r2,zero
  816184:	1000031e 	bne	r2,zero,816194 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  816188:	00800104 	movi	r2,4
  81618c:	e0bfff15 	stw	r2,-4(fp)
  816190:	00004f06 	br	8162d0 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  816194:	e0bffd17 	ldw	r2,-12(fp)
  816198:	10800003 	ldbu	r2,0(r2)
  81619c:	10803fcc 	andi	r2,r2,255
  8161a0:	108000a0 	cmpeqi	r2,r2,2
  8161a4:	1000031e 	bne	r2,zero,8161b4 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  8161a8:	00800044 	movi	r2,1
  8161ac:	e0bfff15 	stw	r2,-4(fp)
  8161b0:	00004706 	br	8162d0 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8161b4:	0005303a 	rdctl	r2,status
  8161b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8161bc:	e0fffa17 	ldw	r3,-24(fp)
  8161c0:	00bfff84 	movi	r2,-2
  8161c4:	1884703a 	and	r2,r3,r2
  8161c8:	1001703a 	wrctl	status,r2
  
  return context;
  8161cc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8161d0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  8161d4:	e0bffd17 	ldw	r2,-12(fp)
  8161d8:	10800283 	ldbu	r2,10(r2)
  8161dc:	10803fcc 	andi	r2,r2,255
  8161e0:	1005003a 	cmpeq	r2,r2,zero
  8161e4:	10000c1e 	bne	r2,zero,816218 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8161e8:	e13ffd17 	ldw	r4,-12(fp)
  8161ec:	e17ffe17 	ldw	r5,-8(fp)
  8161f0:	01800104 	movi	r6,4
  8161f4:	000f883a 	mov	r7,zero
  8161f8:	08120180 	call	812018 <OS_EventTaskRdy>
  8161fc:	e0bffb17 	ldw	r2,-20(fp)
  816200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816204:	e0bff917 	ldw	r2,-28(fp)
  816208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  81620c:	0812a580 	call	812a58 <OS_Sched>
        return (OS_ERR_NONE);
  816210:	e03fff15 	stw	zero,-4(fp)
  816214:	00002e06 	br	8162d0 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  816218:	e0bffd17 	ldw	r2,-12(fp)
  81621c:	10800117 	ldw	r2,4(r2)
  816220:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  816224:	e0bffc17 	ldw	r2,-16(fp)
  816228:	10c0058b 	ldhu	r3,22(r2)
  81622c:	e0bffc17 	ldw	r2,-16(fp)
  816230:	1080050b 	ldhu	r2,20(r2)
  816234:	18ffffcc 	andi	r3,r3,65535
  816238:	10bfffcc 	andi	r2,r2,65535
  81623c:	18800736 	bltu	r3,r2,81625c <OSQPostFront+0xfc>
  816240:	e0bffb17 	ldw	r2,-20(fp)
  816244:	e0bff815 	stw	r2,-32(fp)
  816248:	e0bff817 	ldw	r2,-32(fp)
  81624c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  816250:	00800784 	movi	r2,30
  816254:	e0bfff15 	stw	r2,-4(fp)
  816258:	00001d06 	br	8162d0 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  81625c:	e0bffc17 	ldw	r2,-16(fp)
  816260:	10c00417 	ldw	r3,16(r2)
  816264:	e0bffc17 	ldw	r2,-16(fp)
  816268:	10800117 	ldw	r2,4(r2)
  81626c:	1880041e 	bne	r3,r2,816280 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  816270:	e0bffc17 	ldw	r2,-16(fp)
  816274:	10c00217 	ldw	r3,8(r2)
  816278:	e0bffc17 	ldw	r2,-16(fp)
  81627c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  816280:	e0bffc17 	ldw	r2,-16(fp)
  816284:	10800417 	ldw	r2,16(r2)
  816288:	10ffff04 	addi	r3,r2,-4
  81628c:	e0bffc17 	ldw	r2,-16(fp)
  816290:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  816294:	e0bffc17 	ldw	r2,-16(fp)
  816298:	10c00417 	ldw	r3,16(r2)
  81629c:	e0bffe17 	ldw	r2,-8(fp)
  8162a0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8162a4:	e0bffc17 	ldw	r2,-16(fp)
  8162a8:	1080058b 	ldhu	r2,22(r2)
  8162ac:	10800044 	addi	r2,r2,1
  8162b0:	1007883a 	mov	r3,r2
  8162b4:	e0bffc17 	ldw	r2,-16(fp)
  8162b8:	10c0058d 	sth	r3,22(r2)
  8162bc:	e0bffb17 	ldw	r2,-20(fp)
  8162c0:	e0bff715 	stw	r2,-36(fp)
  8162c4:	e0bff717 	ldw	r2,-36(fp)
  8162c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8162cc:	e03fff15 	stw	zero,-4(fp)
  8162d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8162d4:	e037883a 	mov	sp,fp
  8162d8:	dfc00117 	ldw	ra,4(sp)
  8162dc:	df000017 	ldw	fp,0(sp)
  8162e0:	dec00204 	addi	sp,sp,8
  8162e4:	f800283a 	ret

008162e8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8162e8:	defff404 	addi	sp,sp,-48
  8162ec:	dfc00b15 	stw	ra,44(sp)
  8162f0:	df000a15 	stw	fp,40(sp)
  8162f4:	df000a04 	addi	fp,sp,40
  8162f8:	e13ffc15 	stw	r4,-16(fp)
  8162fc:	e17ffd15 	stw	r5,-12(fp)
  816300:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816304:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816308:	e0bffc17 	ldw	r2,-16(fp)
  81630c:	1004c03a 	cmpne	r2,r2,zero
  816310:	1000031e 	bne	r2,zero,816320 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  816314:	00800104 	movi	r2,4
  816318:	e0bfff15 	stw	r2,-4(fp)
  81631c:	00007906 	br	816504 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  816320:	e0bffc17 	ldw	r2,-16(fp)
  816324:	10800003 	ldbu	r2,0(r2)
  816328:	10803fcc 	andi	r2,r2,255
  81632c:	108000a0 	cmpeqi	r2,r2,2
  816330:	1000031e 	bne	r2,zero,816340 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  816334:	00800044 	movi	r2,1
  816338:	e0bfff15 	stw	r2,-4(fp)
  81633c:	00007106 	br	816504 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816340:	0005303a 	rdctl	r2,status
  816344:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816348:	e0fff917 	ldw	r3,-28(fp)
  81634c:	00bfff84 	movi	r2,-2
  816350:	1884703a 	and	r2,r3,r2
  816354:	1001703a 	wrctl	status,r2
  
  return context;
  816358:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81635c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  816360:	e0bffc17 	ldw	r2,-16(fp)
  816364:	10800283 	ldbu	r2,10(r2)
  816368:	10803fcc 	andi	r2,r2,255
  81636c:	1005003a 	cmpeq	r2,r2,zero
  816370:	1000211e 	bne	r2,zero,8163f8 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  816374:	e0bffe03 	ldbu	r2,-8(fp)
  816378:	1080004c 	andi	r2,r2,1
  81637c:	10803fcc 	andi	r2,r2,255
  816380:	1005003a 	cmpeq	r2,r2,zero
  816384:	10000c1e 	bne	r2,zero,8163b8 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  816388:	00000506 	br	8163a0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81638c:	e13ffc17 	ldw	r4,-16(fp)
  816390:	e17ffd17 	ldw	r5,-12(fp)
  816394:	01800104 	movi	r6,4
  816398:	000f883a 	mov	r7,zero
  81639c:	08120180 	call	812018 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8163a0:	e0bffc17 	ldw	r2,-16(fp)
  8163a4:	10800283 	ldbu	r2,10(r2)
  8163a8:	10803fcc 	andi	r2,r2,255
  8163ac:	1004c03a 	cmpne	r2,r2,zero
  8163b0:	103ff61e 	bne	r2,zero,81638c <OSQPostOpt+0xa4>
  8163b4:	00000506 	br	8163cc <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8163b8:	e13ffc17 	ldw	r4,-16(fp)
  8163bc:	e17ffd17 	ldw	r5,-12(fp)
  8163c0:	01800104 	movi	r6,4
  8163c4:	000f883a 	mov	r7,zero
  8163c8:	08120180 	call	812018 <OS_EventTaskRdy>
  8163cc:	e0bffa17 	ldw	r2,-24(fp)
  8163d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163d4:	e0bff817 	ldw	r2,-32(fp)
  8163d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8163dc:	e0bffe03 	ldbu	r2,-8(fp)
  8163e0:	1080010c 	andi	r2,r2,4
  8163e4:	1004c03a 	cmpne	r2,r2,zero
  8163e8:	1000011e 	bne	r2,zero,8163f0 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8163ec:	0812a580 	call	812a58 <OS_Sched>
        }
        return (OS_ERR_NONE);
  8163f0:	e03fff15 	stw	zero,-4(fp)
  8163f4:	00004306 	br	816504 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8163f8:	e0bffc17 	ldw	r2,-16(fp)
  8163fc:	10800117 	ldw	r2,4(r2)
  816400:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  816404:	e0bffb17 	ldw	r2,-20(fp)
  816408:	10c0058b 	ldhu	r3,22(r2)
  81640c:	e0bffb17 	ldw	r2,-20(fp)
  816410:	1080050b 	ldhu	r2,20(r2)
  816414:	18ffffcc 	andi	r3,r3,65535
  816418:	10bfffcc 	andi	r2,r2,65535
  81641c:	18800736 	bltu	r3,r2,81643c <OSQPostOpt+0x154>
  816420:	e0bffa17 	ldw	r2,-24(fp)
  816424:	e0bff715 	stw	r2,-36(fp)
  816428:	e0bff717 	ldw	r2,-36(fp)
  81642c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  816430:	00800784 	movi	r2,30
  816434:	e0bfff15 	stw	r2,-4(fp)
  816438:	00003206 	br	816504 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  81643c:	e0bffe03 	ldbu	r2,-8(fp)
  816440:	1080008c 	andi	r2,r2,2
  816444:	1005003a 	cmpeq	r2,r2,zero
  816448:	1000131e 	bne	r2,zero,816498 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  81644c:	e0bffb17 	ldw	r2,-20(fp)
  816450:	10c00417 	ldw	r3,16(r2)
  816454:	e0bffb17 	ldw	r2,-20(fp)
  816458:	10800117 	ldw	r2,4(r2)
  81645c:	1880041e 	bne	r3,r2,816470 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  816460:	e0bffb17 	ldw	r2,-20(fp)
  816464:	10c00217 	ldw	r3,8(r2)
  816468:	e0bffb17 	ldw	r2,-20(fp)
  81646c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  816470:	e0bffb17 	ldw	r2,-20(fp)
  816474:	10800417 	ldw	r2,16(r2)
  816478:	10ffff04 	addi	r3,r2,-4
  81647c:	e0bffb17 	ldw	r2,-20(fp)
  816480:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  816484:	e0bffb17 	ldw	r2,-20(fp)
  816488:	10c00417 	ldw	r3,16(r2)
  81648c:	e0bffd17 	ldw	r2,-12(fp)
  816490:	18800015 	stw	r2,0(r3)
  816494:	00001006 	br	8164d8 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  816498:	e0bffb17 	ldw	r2,-20(fp)
  81649c:	10c00317 	ldw	r3,12(r2)
  8164a0:	e0bffd17 	ldw	r2,-12(fp)
  8164a4:	18800015 	stw	r2,0(r3)
  8164a8:	18c00104 	addi	r3,r3,4
  8164ac:	e0bffb17 	ldw	r2,-20(fp)
  8164b0:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8164b4:	e0bffb17 	ldw	r2,-20(fp)
  8164b8:	10c00317 	ldw	r3,12(r2)
  8164bc:	e0bffb17 	ldw	r2,-20(fp)
  8164c0:	10800217 	ldw	r2,8(r2)
  8164c4:	1880041e 	bne	r3,r2,8164d8 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  8164c8:	e0bffb17 	ldw	r2,-20(fp)
  8164cc:	10c00117 	ldw	r3,4(r2)
  8164d0:	e0bffb17 	ldw	r2,-20(fp)
  8164d4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8164d8:	e0bffb17 	ldw	r2,-20(fp)
  8164dc:	1080058b 	ldhu	r2,22(r2)
  8164e0:	10800044 	addi	r2,r2,1
  8164e4:	1007883a 	mov	r3,r2
  8164e8:	e0bffb17 	ldw	r2,-20(fp)
  8164ec:	10c0058d 	sth	r3,22(r2)
  8164f0:	e0bffa17 	ldw	r2,-24(fp)
  8164f4:	e0bff615 	stw	r2,-40(fp)
  8164f8:	e0bff617 	ldw	r2,-40(fp)
  8164fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816500:	e03fff15 	stw	zero,-4(fp)
  816504:	e0bfff17 	ldw	r2,-4(fp)
}
  816508:	e037883a 	mov	sp,fp
  81650c:	dfc00117 	ldw	ra,4(sp)
  816510:	df000017 	ldw	fp,0(sp)
  816514:	dec00204 	addi	sp,sp,8
  816518:	f800283a 	ret

0081651c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  81651c:	defff504 	addi	sp,sp,-44
  816520:	df000a15 	stw	fp,40(sp)
  816524:	df000a04 	addi	fp,sp,40
  816528:	e13ffd15 	stw	r4,-12(fp)
  81652c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  816530:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  816534:	e0bffd17 	ldw	r2,-12(fp)
  816538:	1004c03a 	cmpne	r2,r2,zero
  81653c:	1000031e 	bne	r2,zero,81654c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  816540:	00800104 	movi	r2,4
  816544:	e0bfff15 	stw	r2,-4(fp)
  816548:	00004f06 	br	816688 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  81654c:	e0bffe17 	ldw	r2,-8(fp)
  816550:	1004c03a 	cmpne	r2,r2,zero
  816554:	1000031e 	bne	r2,zero,816564 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  816558:	00800244 	movi	r2,9
  81655c:	e0bfff15 	stw	r2,-4(fp)
  816560:	00004906 	br	816688 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  816564:	e0bffd17 	ldw	r2,-12(fp)
  816568:	10800003 	ldbu	r2,0(r2)
  81656c:	10803fcc 	andi	r2,r2,255
  816570:	108000a0 	cmpeqi	r2,r2,2
  816574:	1000031e 	bne	r2,zero,816584 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  816578:	00800044 	movi	r2,1
  81657c:	e0bfff15 	stw	r2,-4(fp)
  816580:	00004106 	br	816688 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816584:	0005303a 	rdctl	r2,status
  816588:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81658c:	e0fff717 	ldw	r3,-36(fp)
  816590:	00bfff84 	movi	r2,-2
  816594:	1884703a 	and	r2,r3,r2
  816598:	1001703a 	wrctl	status,r2
  
  return context;
  81659c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8165a0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  8165a4:	e0bffd17 	ldw	r2,-12(fp)
  8165a8:	10c00283 	ldbu	r3,10(r2)
  8165ac:	e0bffe17 	ldw	r2,-8(fp)
  8165b0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  8165b4:	e0bffd17 	ldw	r2,-12(fp)
  8165b8:	108002c4 	addi	r2,r2,11
  8165bc:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  8165c0:	e0bffe17 	ldw	r2,-8(fp)
  8165c4:	10800204 	addi	r2,r2,8
  8165c8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8165cc:	e03ffb05 	stb	zero,-20(fp)
  8165d0:	00000d06 	br	816608 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  8165d4:	e0bffa17 	ldw	r2,-24(fp)
  8165d8:	10c00003 	ldbu	r3,0(r2)
  8165dc:	e0bff917 	ldw	r2,-28(fp)
  8165e0:	10c00005 	stb	r3,0(r2)
  8165e4:	e0bff917 	ldw	r2,-28(fp)
  8165e8:	10800044 	addi	r2,r2,1
  8165ec:	e0bff915 	stw	r2,-28(fp)
  8165f0:	e0bffa17 	ldw	r2,-24(fp)
  8165f4:	10800044 	addi	r2,r2,1
  8165f8:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8165fc:	e0bffb03 	ldbu	r2,-20(fp)
  816600:	10800044 	addi	r2,r2,1
  816604:	e0bffb05 	stb	r2,-20(fp)
  816608:	e0bffb03 	ldbu	r2,-20(fp)
  81660c:	108000f0 	cmpltui	r2,r2,3
  816610:	103ff01e 	bne	r2,zero,8165d4 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  816614:	e0bffd17 	ldw	r2,-12(fp)
  816618:	10800117 	ldw	r2,4(r2)
  81661c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  816620:	e0bffc17 	ldw	r2,-16(fp)
  816624:	1080058b 	ldhu	r2,22(r2)
  816628:	10bfffcc 	andi	r2,r2,65535
  81662c:	1005003a 	cmpeq	r2,r2,zero
  816630:	1000061e 	bne	r2,zero,81664c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  816634:	e0bffc17 	ldw	r2,-16(fp)
  816638:	10800417 	ldw	r2,16(r2)
  81663c:	10c00017 	ldw	r3,0(r2)
  816640:	e0bffe17 	ldw	r2,-8(fp)
  816644:	10c00015 	stw	r3,0(r2)
  816648:	00000206 	br	816654 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  81664c:	e0bffe17 	ldw	r2,-8(fp)
  816650:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  816654:	e0bffc17 	ldw	r2,-16(fp)
  816658:	10c0058b 	ldhu	r3,22(r2)
  81665c:	e0bffe17 	ldw	r2,-8(fp)
  816660:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  816664:	e0bffc17 	ldw	r2,-16(fp)
  816668:	10c0050b 	ldhu	r3,20(r2)
  81666c:	e0bffe17 	ldw	r2,-8(fp)
  816670:	10c0018d 	sth	r3,6(r2)
  816674:	e0bff817 	ldw	r2,-32(fp)
  816678:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81667c:	e0bff617 	ldw	r2,-40(fp)
  816680:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  816684:	e03fff15 	stw	zero,-4(fp)
  816688:	e0bfff17 	ldw	r2,-4(fp)
}
  81668c:	e037883a 	mov	sp,fp
  816690:	df000017 	ldw	fp,0(sp)
  816694:	dec00104 	addi	sp,sp,4
  816698:	f800283a 	ret

0081669c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81669c:	defffb04 	addi	sp,sp,-20
  8166a0:	dfc00415 	stw	ra,16(sp)
  8166a4:	df000315 	stw	fp,12(sp)
  8166a8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  8166ac:	010020b4 	movhi	r4,130
  8166b0:	211ed704 	addi	r4,r4,31580
  8166b4:	01407804 	movi	r5,480
  8166b8:	08129980 	call	812998 <OS_MemClr>
    pq1 = &OSQTbl[0];
  8166bc:	008020b4 	movhi	r2,130
  8166c0:	109ed704 	addi	r2,r2,31580
  8166c4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  8166c8:	008020b4 	movhi	r2,130
  8166cc:	109edd04 	addi	r2,r2,31604
  8166d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8166d4:	e03fff0d 	sth	zero,-4(fp)
  8166d8:	00000c06 	br	81670c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  8166dc:	e0fffe17 	ldw	r3,-8(fp)
  8166e0:	e0bffd17 	ldw	r2,-12(fp)
  8166e4:	18800015 	stw	r2,0(r3)
        pq1++;
  8166e8:	e0bffe17 	ldw	r2,-8(fp)
  8166ec:	10800604 	addi	r2,r2,24
  8166f0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8166f4:	e0bffd17 	ldw	r2,-12(fp)
  8166f8:	10800604 	addi	r2,r2,24
  8166fc:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  816700:	e0bfff0b 	ldhu	r2,-4(fp)
  816704:	10800044 	addi	r2,r2,1
  816708:	e0bfff0d 	sth	r2,-4(fp)
  81670c:	e0bfff0b 	ldhu	r2,-4(fp)
  816710:	108004f0 	cmpltui	r2,r2,19
  816714:	103ff11e 	bne	r2,zero,8166dc <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  816718:	e0bffe17 	ldw	r2,-8(fp)
  81671c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  816720:	00c020b4 	movhi	r3,130
  816724:	18c08904 	addi	r3,r3,548
  816728:	008020b4 	movhi	r2,130
  81672c:	109ed704 	addi	r2,r2,31580
  816730:	18800015 	stw	r2,0(r3)
#endif
}
  816734:	e037883a 	mov	sp,fp
  816738:	dfc00117 	ldw	ra,4(sp)
  81673c:	df000017 	ldw	fp,0(sp)
  816740:	dec00204 	addi	sp,sp,8
  816744:	f800283a 	ret

00816748 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  816748:	defff904 	addi	sp,sp,-28
  81674c:	df000615 	stw	fp,24(sp)
  816750:	df000604 	addi	fp,sp,24
  816754:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816758:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81675c:	e0bffe17 	ldw	r2,-8(fp)
  816760:	1004c03a 	cmpne	r2,r2,zero
  816764:	1000021e 	bne	r2,zero,816770 <OSSemAccept+0x28>
        return (0);
  816768:	e03fff15 	stw	zero,-4(fp)
  81676c:	00002106 	br	8167f4 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816770:	e0bffe17 	ldw	r2,-8(fp)
  816774:	10800003 	ldbu	r2,0(r2)
  816778:	10803fcc 	andi	r2,r2,255
  81677c:	108000e0 	cmpeqi	r2,r2,3
  816780:	1000021e 	bne	r2,zero,81678c <OSSemAccept+0x44>
        return (0);
  816784:	e03fff15 	stw	zero,-4(fp)
  816788:	00001a06 	br	8167f4 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81678c:	0005303a 	rdctl	r2,status
  816790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816794:	e0fffb17 	ldw	r3,-20(fp)
  816798:	00bfff84 	movi	r2,-2
  81679c:	1884703a 	and	r2,r3,r2
  8167a0:	1001703a 	wrctl	status,r2
  
  return context;
  8167a4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8167a8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  8167ac:	e0bffe17 	ldw	r2,-8(fp)
  8167b0:	1080020b 	ldhu	r2,8(r2)
  8167b4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  8167b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8167bc:	1005003a 	cmpeq	r2,r2,zero
  8167c0:	1000061e 	bne	r2,zero,8167dc <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  8167c4:	e0bffe17 	ldw	r2,-8(fp)
  8167c8:	1080020b 	ldhu	r2,8(r2)
  8167cc:	10bfffc4 	addi	r2,r2,-1
  8167d0:	1007883a 	mov	r3,r2
  8167d4:	e0bffe17 	ldw	r2,-8(fp)
  8167d8:	10c0020d 	sth	r3,8(r2)
  8167dc:	e0bffc17 	ldw	r2,-16(fp)
  8167e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8167e4:	e0bffa17 	ldw	r2,-24(fp)
  8167e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  8167ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8167f0:	e0bfff15 	stw	r2,-4(fp)
  8167f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8167f8:	e037883a 	mov	sp,fp
  8167fc:	df000017 	ldw	fp,0(sp)
  816800:	dec00104 	addi	sp,sp,4
  816804:	f800283a 	ret

00816808 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  816808:	defff804 	addi	sp,sp,-32
  81680c:	dfc00715 	stw	ra,28(sp)
  816810:	df000615 	stw	fp,24(sp)
  816814:	df000604 	addi	fp,sp,24
  816818:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81681c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  816820:	008020b4 	movhi	r2,130
  816824:	10808c04 	addi	r2,r2,560
  816828:	10800003 	ldbu	r2,0(r2)
  81682c:	10803fcc 	andi	r2,r2,255
  816830:	1005003a 	cmpeq	r2,r2,zero
  816834:	1000021e 	bne	r2,zero,816840 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  816838:	e03fff15 	stw	zero,-4(fp)
  81683c:	00003106 	br	816904 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816840:	0005303a 	rdctl	r2,status
  816844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816848:	e0fffb17 	ldw	r3,-20(fp)
  81684c:	00bfff84 	movi	r2,-2
  816850:	1884703a 	and	r2,r3,r2
  816854:	1001703a 	wrctl	status,r2
  
  return context;
  816858:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81685c:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  816860:	008020b4 	movhi	r2,130
  816864:	10808b04 	addi	r2,r2,556
  816868:	10800017 	ldw	r2,0(r2)
  81686c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  816870:	008020b4 	movhi	r2,130
  816874:	10808b04 	addi	r2,r2,556
  816878:	10800017 	ldw	r2,0(r2)
  81687c:	1005003a 	cmpeq	r2,r2,zero
  816880:	1000081e 	bne	r2,zero,8168a4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  816884:	008020b4 	movhi	r2,130
  816888:	10808b04 	addi	r2,r2,556
  81688c:	10800017 	ldw	r2,0(r2)
  816890:	10800117 	ldw	r2,4(r2)
  816894:	1007883a 	mov	r3,r2
  816898:	008020b4 	movhi	r2,130
  81689c:	10808b04 	addi	r2,r2,556
  8168a0:	10c00015 	stw	r3,0(r2)
  8168a4:	e0bffc17 	ldw	r2,-16(fp)
  8168a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8168ac:	e0bffa17 	ldw	r2,-24(fp)
  8168b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  8168b4:	e0bffd17 	ldw	r2,-12(fp)
  8168b8:	1005003a 	cmpeq	r2,r2,zero
  8168bc:	10000f1e 	bne	r2,zero,8168fc <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  8168c0:	e0fffd17 	ldw	r3,-12(fp)
  8168c4:	008000c4 	movi	r2,3
  8168c8:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  8168cc:	e0fffd17 	ldw	r3,-12(fp)
  8168d0:	e0bffe0b 	ldhu	r2,-8(fp)
  8168d4:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  8168d8:	e0bffd17 	ldw	r2,-12(fp)
  8168dc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  8168e0:	e0fffd17 	ldw	r3,-12(fp)
  8168e4:	00800fc4 	movi	r2,63
  8168e8:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  8168ec:	e0bffd17 	ldw	r2,-12(fp)
  8168f0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8168f4:	e13ffd17 	ldw	r4,-12(fp)
  8168f8:	08125cc0 	call	8125cc <OS_EventWaitListInit>
    }
    return (pevent);
  8168fc:	e0bffd17 	ldw	r2,-12(fp)
  816900:	e0bfff15 	stw	r2,-4(fp)
  816904:	e0bfff17 	ldw	r2,-4(fp)
}
  816908:	e037883a 	mov	sp,fp
  81690c:	dfc00117 	ldw	ra,4(sp)
  816910:	df000017 	ldw	fp,0(sp)
  816914:	dec00204 	addi	sp,sp,8
  816918:	f800283a 	ret

0081691c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81691c:	defff104 	addi	sp,sp,-60
  816920:	dfc00e15 	stw	ra,56(sp)
  816924:	df000d15 	stw	fp,52(sp)
  816928:	df000d04 	addi	fp,sp,52
  81692c:	e13ffb15 	stw	r4,-20(fp)
  816930:	e1bffd15 	stw	r6,-12(fp)
  816934:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816938:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81693c:	e0bffd17 	ldw	r2,-12(fp)
  816940:	1004c03a 	cmpne	r2,r2,zero
  816944:	1000031e 	bne	r2,zero,816954 <OSSemDel+0x38>
        return (pevent);
  816948:	e0bffb17 	ldw	r2,-20(fp)
  81694c:	e0bfff15 	stw	r2,-4(fp)
  816950:	00009406 	br	816ba4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  816954:	e0bffb17 	ldw	r2,-20(fp)
  816958:	1004c03a 	cmpne	r2,r2,zero
  81695c:	1000061e 	bne	r2,zero,816978 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  816960:	e0fffd17 	ldw	r3,-12(fp)
  816964:	00800104 	movi	r2,4
  816968:	18800005 	stb	r2,0(r3)
        return (pevent);
  81696c:	e0fffb17 	ldw	r3,-20(fp)
  816970:	e0ffff15 	stw	r3,-4(fp)
  816974:	00008b06 	br	816ba4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  816978:	e0bffb17 	ldw	r2,-20(fp)
  81697c:	10800003 	ldbu	r2,0(r2)
  816980:	10803fcc 	andi	r2,r2,255
  816984:	108000e0 	cmpeqi	r2,r2,3
  816988:	1000061e 	bne	r2,zero,8169a4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81698c:	e0fffd17 	ldw	r3,-12(fp)
  816990:	00800044 	movi	r2,1
  816994:	18800005 	stb	r2,0(r3)
        return (pevent);
  816998:	e0bffb17 	ldw	r2,-20(fp)
  81699c:	e0bfff15 	stw	r2,-4(fp)
  8169a0:	00008006 	br	816ba4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8169a4:	008020b4 	movhi	r2,130
  8169a8:	10808c04 	addi	r2,r2,560
  8169ac:	10800003 	ldbu	r2,0(r2)
  8169b0:	10803fcc 	andi	r2,r2,255
  8169b4:	1005003a 	cmpeq	r2,r2,zero
  8169b8:	1000061e 	bne	r2,zero,8169d4 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8169bc:	e0fffd17 	ldw	r3,-12(fp)
  8169c0:	008003c4 	movi	r2,15
  8169c4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8169c8:	e0fffb17 	ldw	r3,-20(fp)
  8169cc:	e0ffff15 	stw	r3,-4(fp)
  8169d0:	00007406 	br	816ba4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8169d4:	0005303a 	rdctl	r2,status
  8169d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8169dc:	e0fff717 	ldw	r3,-36(fp)
  8169e0:	00bfff84 	movi	r2,-2
  8169e4:	1884703a 	and	r2,r3,r2
  8169e8:	1001703a 	wrctl	status,r2
  
  return context;
  8169ec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8169f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8169f4:	e0bffb17 	ldw	r2,-20(fp)
  8169f8:	10800283 	ldbu	r2,10(r2)
  8169fc:	10803fcc 	andi	r2,r2,255
  816a00:	1005003a 	cmpeq	r2,r2,zero
  816a04:	1000031e 	bne	r2,zero,816a14 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  816a08:	00800044 	movi	r2,1
  816a0c:	e0bffa05 	stb	r2,-24(fp)
  816a10:	00000106 	br	816a18 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  816a14:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  816a18:	e0bffc03 	ldbu	r2,-16(fp)
  816a1c:	e0bffe15 	stw	r2,-8(fp)
  816a20:	e0fffe17 	ldw	r3,-8(fp)
  816a24:	1805003a 	cmpeq	r2,r3,zero
  816a28:	1000041e 	bne	r2,zero,816a3c <OSSemDel+0x120>
  816a2c:	e0fffe17 	ldw	r3,-8(fp)
  816a30:	18800060 	cmpeqi	r2,r3,1
  816a34:	10002d1e 	bne	r2,zero,816aec <OSSemDel+0x1d0>
  816a38:	00004f06 	br	816b78 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  816a3c:	e0bffa03 	ldbu	r2,-24(fp)
  816a40:	1004c03a 	cmpne	r2,r2,zero
  816a44:	10001a1e 	bne	r2,zero,816ab0 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  816a48:	e0fffb17 	ldw	r3,-20(fp)
  816a4c:	00800fc4 	movi	r2,63
  816a50:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  816a54:	e0bffb17 	ldw	r2,-20(fp)
  816a58:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  816a5c:	e0bffb17 	ldw	r2,-20(fp)
  816a60:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  816a64:	008020b4 	movhi	r2,130
  816a68:	10808b04 	addi	r2,r2,556
  816a6c:	10c00017 	ldw	r3,0(r2)
  816a70:	e0bffb17 	ldw	r2,-20(fp)
  816a74:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  816a78:	e0bffb17 	ldw	r2,-20(fp)
  816a7c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  816a80:	00c020b4 	movhi	r3,130
  816a84:	18c08b04 	addi	r3,r3,556
  816a88:	e0bffb17 	ldw	r2,-20(fp)
  816a8c:	18800015 	stw	r2,0(r3)
  816a90:	e0bff817 	ldw	r2,-32(fp)
  816a94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a98:	e0bff617 	ldw	r2,-40(fp)
  816a9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  816aa0:	e0bffd17 	ldw	r2,-12(fp)
  816aa4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  816aa8:	e03ff915 	stw	zero,-28(fp)
  816aac:	00003b06 	br	816b9c <OSSemDel+0x280>
  816ab0:	e0bff817 	ldw	r2,-32(fp)
  816ab4:	e0bff515 	stw	r2,-44(fp)
  816ab8:	e0bff517 	ldw	r2,-44(fp)
  816abc:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  816ac0:	e0fffd17 	ldw	r3,-12(fp)
  816ac4:	00801244 	movi	r2,73
  816ac8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  816acc:	e0bffb17 	ldw	r2,-20(fp)
  816ad0:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  816ad4:	00003106 	br	816b9c <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  816ad8:	e13ffb17 	ldw	r4,-20(fp)
  816adc:	000b883a 	mov	r5,zero
  816ae0:	01800044 	movi	r6,1
  816ae4:	000f883a 	mov	r7,zero
  816ae8:	08120180 	call	812018 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  816aec:	e0bffb17 	ldw	r2,-20(fp)
  816af0:	10800283 	ldbu	r2,10(r2)
  816af4:	10803fcc 	andi	r2,r2,255
  816af8:	1004c03a 	cmpne	r2,r2,zero
  816afc:	103ff61e 	bne	r2,zero,816ad8 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  816b00:	e0fffb17 	ldw	r3,-20(fp)
  816b04:	00800fc4 	movi	r2,63
  816b08:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  816b0c:	e0bffb17 	ldw	r2,-20(fp)
  816b10:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  816b14:	e0bffb17 	ldw	r2,-20(fp)
  816b18:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  816b1c:	008020b4 	movhi	r2,130
  816b20:	10808b04 	addi	r2,r2,556
  816b24:	10c00017 	ldw	r3,0(r2)
  816b28:	e0bffb17 	ldw	r2,-20(fp)
  816b2c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  816b30:	e0bffb17 	ldw	r2,-20(fp)
  816b34:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  816b38:	00c020b4 	movhi	r3,130
  816b3c:	18c08b04 	addi	r3,r3,556
  816b40:	e0bffb17 	ldw	r2,-20(fp)
  816b44:	18800015 	stw	r2,0(r3)
  816b48:	e0bff817 	ldw	r2,-32(fp)
  816b4c:	e0bff415 	stw	r2,-48(fp)
  816b50:	e0bff417 	ldw	r2,-48(fp)
  816b54:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  816b58:	e0bffa03 	ldbu	r2,-24(fp)
  816b5c:	10800058 	cmpnei	r2,r2,1
  816b60:	1000011e 	bne	r2,zero,816b68 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  816b64:	0812a580 	call	812a58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  816b68:	e0bffd17 	ldw	r2,-12(fp)
  816b6c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  816b70:	e03ff915 	stw	zero,-28(fp)
             break;
  816b74:	00000906 	br	816b9c <OSSemDel+0x280>
  816b78:	e0bff817 	ldw	r2,-32(fp)
  816b7c:	e0bff315 	stw	r2,-52(fp)
  816b80:	e0bff317 	ldw	r2,-52(fp)
  816b84:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  816b88:	e0fffd17 	ldw	r3,-12(fp)
  816b8c:	008001c4 	movi	r2,7
  816b90:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  816b94:	e0bffb17 	ldw	r2,-20(fp)
  816b98:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  816b9c:	e0bff917 	ldw	r2,-28(fp)
  816ba0:	e0bfff15 	stw	r2,-4(fp)
  816ba4:	e0bfff17 	ldw	r2,-4(fp)
}
  816ba8:	e037883a 	mov	sp,fp
  816bac:	dfc00117 	ldw	ra,4(sp)
  816bb0:	df000017 	ldw	fp,0(sp)
  816bb4:	dec00204 	addi	sp,sp,8
  816bb8:	f800283a 	ret

00816bbc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  816bbc:	defff404 	addi	sp,sp,-48
  816bc0:	dfc00b15 	stw	ra,44(sp)
  816bc4:	df000a15 	stw	fp,40(sp)
  816bc8:	df000a04 	addi	fp,sp,40
  816bcc:	e13ffc15 	stw	r4,-16(fp)
  816bd0:	e1bffe15 	stw	r6,-8(fp)
  816bd4:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816bd8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816bdc:	e0bffe17 	ldw	r2,-8(fp)
  816be0:	1005003a 	cmpeq	r2,r2,zero
  816be4:	10008f1e 	bne	r2,zero,816e24 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816be8:	e0bffc17 	ldw	r2,-16(fp)
  816bec:	1004c03a 	cmpne	r2,r2,zero
  816bf0:	1000041e 	bne	r2,zero,816c04 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  816bf4:	e0fffe17 	ldw	r3,-8(fp)
  816bf8:	00800104 	movi	r2,4
  816bfc:	18800005 	stb	r2,0(r3)
        return;
  816c00:	00008806 	br	816e24 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816c04:	e0bffc17 	ldw	r2,-16(fp)
  816c08:	10800003 	ldbu	r2,0(r2)
  816c0c:	10803fcc 	andi	r2,r2,255
  816c10:	108000e0 	cmpeqi	r2,r2,3
  816c14:	1000041e 	bne	r2,zero,816c28 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  816c18:	e0fffe17 	ldw	r3,-8(fp)
  816c1c:	00800044 	movi	r2,1
  816c20:	18800005 	stb	r2,0(r3)
        return;
  816c24:	00007f06 	br	816e24 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  816c28:	008020b4 	movhi	r2,130
  816c2c:	10808c04 	addi	r2,r2,560
  816c30:	10800003 	ldbu	r2,0(r2)
  816c34:	10803fcc 	andi	r2,r2,255
  816c38:	1005003a 	cmpeq	r2,r2,zero
  816c3c:	1000041e 	bne	r2,zero,816c50 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  816c40:	e0fffe17 	ldw	r3,-8(fp)
  816c44:	00800084 	movi	r2,2
  816c48:	18800005 	stb	r2,0(r3)
        return;
  816c4c:	00007506 	br	816e24 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  816c50:	008020b4 	movhi	r2,130
  816c54:	10807e04 	addi	r2,r2,504
  816c58:	10800003 	ldbu	r2,0(r2)
  816c5c:	10803fcc 	andi	r2,r2,255
  816c60:	1005003a 	cmpeq	r2,r2,zero
  816c64:	1000041e 	bne	r2,zero,816c78 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  816c68:	e0fffe17 	ldw	r3,-8(fp)
  816c6c:	00800344 	movi	r2,13
  816c70:	18800005 	stb	r2,0(r3)
        return;
  816c74:	00006b06 	br	816e24 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816c78:	0005303a 	rdctl	r2,status
  816c7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816c80:	e0fffa17 	ldw	r3,-24(fp)
  816c84:	00bfff84 	movi	r2,-2
  816c88:	1884703a 	and	r2,r3,r2
  816c8c:	1001703a 	wrctl	status,r2
  
  return context;
  816c90:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  816c94:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  816c98:	e0bffc17 	ldw	r2,-16(fp)
  816c9c:	1080020b 	ldhu	r2,8(r2)
  816ca0:	10bfffcc 	andi	r2,r2,65535
  816ca4:	1005003a 	cmpeq	r2,r2,zero
  816ca8:	10000d1e 	bne	r2,zero,816ce0 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  816cac:	e0bffc17 	ldw	r2,-16(fp)
  816cb0:	1080020b 	ldhu	r2,8(r2)
  816cb4:	10bfffc4 	addi	r2,r2,-1
  816cb8:	1007883a 	mov	r3,r2
  816cbc:	e0bffc17 	ldw	r2,-16(fp)
  816cc0:	10c0020d 	sth	r3,8(r2)
  816cc4:	e0bffb17 	ldw	r2,-20(fp)
  816cc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ccc:	e0bff917 	ldw	r2,-28(fp)
  816cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  816cd4:	e0bffe17 	ldw	r2,-8(fp)
  816cd8:	10000005 	stb	zero,0(r2)
        return;
  816cdc:	00005106 	br	816e24 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  816ce0:	008020b4 	movhi	r2,130
  816ce4:	10808d04 	addi	r2,r2,564
  816ce8:	10c00017 	ldw	r3,0(r2)
  816cec:	008020b4 	movhi	r2,130
  816cf0:	10808d04 	addi	r2,r2,564
  816cf4:	10800017 	ldw	r2,0(r2)
  816cf8:	10800c03 	ldbu	r2,48(r2)
  816cfc:	10800054 	ori	r2,r2,1
  816d00:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  816d04:	008020b4 	movhi	r2,130
  816d08:	10808d04 	addi	r2,r2,564
  816d0c:	10800017 	ldw	r2,0(r2)
  816d10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  816d14:	008020b4 	movhi	r2,130
  816d18:	10808d04 	addi	r2,r2,564
  816d1c:	10c00017 	ldw	r3,0(r2)
  816d20:	e0bffd0b 	ldhu	r2,-12(fp)
  816d24:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  816d28:	e13ffc17 	ldw	r4,-16(fp)
  816d2c:	08121ac0 	call	8121ac <OS_EventTaskWait>
  816d30:	e0bffb17 	ldw	r2,-20(fp)
  816d34:	e0bff815 	stw	r2,-32(fp)
  816d38:	e0bff817 	ldw	r2,-32(fp)
  816d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  816d40:	0812a580 	call	812a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d44:	0005303a 	rdctl	r2,status
  816d48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d4c:	e0fff717 	ldw	r3,-36(fp)
  816d50:	00bfff84 	movi	r2,-2
  816d54:	1884703a 	and	r2,r3,r2
  816d58:	1001703a 	wrctl	status,r2
  
  return context;
  816d5c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  816d60:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  816d64:	008020b4 	movhi	r2,130
  816d68:	10808d04 	addi	r2,r2,564
  816d6c:	10800017 	ldw	r2,0(r2)
  816d70:	10800c43 	ldbu	r2,49(r2)
  816d74:	10803fcc 	andi	r2,r2,255
  816d78:	e0bfff15 	stw	r2,-4(fp)
  816d7c:	e0ffff17 	ldw	r3,-4(fp)
  816d80:	1805003a 	cmpeq	r2,r3,zero
  816d84:	1000041e 	bne	r2,zero,816d98 <OSSemPend+0x1dc>
  816d88:	e0ffff17 	ldw	r3,-4(fp)
  816d8c:	188000a0 	cmpeqi	r2,r3,2
  816d90:	1000041e 	bne	r2,zero,816da4 <OSSemPend+0x1e8>
  816d94:	00000706 	br	816db4 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  816d98:	e0bffe17 	ldw	r2,-8(fp)
  816d9c:	10000005 	stb	zero,0(r2)
             break;
  816da0:	00000c06 	br	816dd4 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  816da4:	e0fffe17 	ldw	r3,-8(fp)
  816da8:	00800384 	movi	r2,14
  816dac:	18800005 	stb	r2,0(r3)
             break;
  816db0:	00000806 	br	816dd4 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  816db4:	008020b4 	movhi	r2,130
  816db8:	10808d04 	addi	r2,r2,564
  816dbc:	11000017 	ldw	r4,0(r2)
  816dc0:	e17ffc17 	ldw	r5,-16(fp)
  816dc4:	08124100 	call	812410 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  816dc8:	e0fffe17 	ldw	r3,-8(fp)
  816dcc:	00800284 	movi	r2,10
  816dd0:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  816dd4:	008020b4 	movhi	r2,130
  816dd8:	10808d04 	addi	r2,r2,564
  816ddc:	10800017 	ldw	r2,0(r2)
  816de0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  816de4:	008020b4 	movhi	r2,130
  816de8:	10808d04 	addi	r2,r2,564
  816dec:	10800017 	ldw	r2,0(r2)
  816df0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  816df4:	008020b4 	movhi	r2,130
  816df8:	10808d04 	addi	r2,r2,564
  816dfc:	10800017 	ldw	r2,0(r2)
  816e00:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  816e04:	008020b4 	movhi	r2,130
  816e08:	10808d04 	addi	r2,r2,564
  816e0c:	10800017 	ldw	r2,0(r2)
  816e10:	10000815 	stw	zero,32(r2)
  816e14:	e0bffb17 	ldw	r2,-20(fp)
  816e18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816e1c:	e0bff617 	ldw	r2,-40(fp)
  816e20:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  816e24:	e037883a 	mov	sp,fp
  816e28:	dfc00117 	ldw	ra,4(sp)
  816e2c:	df000017 	ldw	fp,0(sp)
  816e30:	dec00204 	addi	sp,sp,8
  816e34:	f800283a 	ret

00816e38 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  816e38:	defff504 	addi	sp,sp,-44
  816e3c:	dfc00a15 	stw	ra,40(sp)
  816e40:	df000915 	stw	fp,36(sp)
  816e44:	df000904 	addi	fp,sp,36
  816e48:	e13ffc15 	stw	r4,-16(fp)
  816e4c:	e1bffe15 	stw	r6,-8(fp)
  816e50:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816e54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  816e58:	e0bffe17 	ldw	r2,-8(fp)
  816e5c:	1004c03a 	cmpne	r2,r2,zero
  816e60:	1000021e 	bne	r2,zero,816e6c <OSSemPendAbort+0x34>
        return (0);
  816e64:	e03fff15 	stw	zero,-4(fp)
  816e68:	00004c06 	br	816f9c <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816e6c:	e0bffc17 	ldw	r2,-16(fp)
  816e70:	1004c03a 	cmpne	r2,r2,zero
  816e74:	1000051e 	bne	r2,zero,816e8c <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  816e78:	e0fffe17 	ldw	r3,-8(fp)
  816e7c:	00800104 	movi	r2,4
  816e80:	18800005 	stb	r2,0(r3)
        return (0);
  816e84:	e03fff15 	stw	zero,-4(fp)
  816e88:	00004406 	br	816f9c <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816e8c:	e0bffc17 	ldw	r2,-16(fp)
  816e90:	10800003 	ldbu	r2,0(r2)
  816e94:	10803fcc 	andi	r2,r2,255
  816e98:	108000e0 	cmpeqi	r2,r2,3
  816e9c:	1000051e 	bne	r2,zero,816eb4 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  816ea0:	e0fffe17 	ldw	r3,-8(fp)
  816ea4:	00800044 	movi	r2,1
  816ea8:	18800005 	stb	r2,0(r3)
        return (0);
  816eac:	e03fff15 	stw	zero,-4(fp)
  816eb0:	00003a06 	br	816f9c <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816eb4:	0005303a 	rdctl	r2,status
  816eb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ebc:	e0fff917 	ldw	r3,-28(fp)
  816ec0:	00bfff84 	movi	r2,-2
  816ec4:	1884703a 	and	r2,r3,r2
  816ec8:	1001703a 	wrctl	status,r2
  
  return context;
  816ecc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  816ed0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  816ed4:	e0bffc17 	ldw	r2,-16(fp)
  816ed8:	10800283 	ldbu	r2,10(r2)
  816edc:	10803fcc 	andi	r2,r2,255
  816ee0:	1005003a 	cmpeq	r2,r2,zero
  816ee4:	1000261e 	bne	r2,zero,816f80 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  816ee8:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  816eec:	e0bffd03 	ldbu	r2,-12(fp)
  816ef0:	10800060 	cmpeqi	r2,r2,1
  816ef4:	1000091e 	bne	r2,zero,816f1c <OSSemPendAbort+0xe4>
  816ef8:	00000e06 	br	816f34 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  816efc:	e13ffc17 	ldw	r4,-16(fp)
  816f00:	000b883a 	mov	r5,zero
  816f04:	01800044 	movi	r6,1
  816f08:	01c00084 	movi	r7,2
  816f0c:	08120180 	call	812018 <OS_EventTaskRdy>
                     nbr_tasks++;
  816f10:	e0bffb03 	ldbu	r2,-20(fp)
  816f14:	10800044 	addi	r2,r2,1
  816f18:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  816f1c:	e0bffc17 	ldw	r2,-16(fp)
  816f20:	10800283 	ldbu	r2,10(r2)
  816f24:	10803fcc 	andi	r2,r2,255
  816f28:	1004c03a 	cmpne	r2,r2,zero
  816f2c:	103ff31e 	bne	r2,zero,816efc <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  816f30:	00000806 	br	816f54 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  816f34:	e13ffc17 	ldw	r4,-16(fp)
  816f38:	000b883a 	mov	r5,zero
  816f3c:	01800044 	movi	r6,1
  816f40:	01c00084 	movi	r7,2
  816f44:	08120180 	call	812018 <OS_EventTaskRdy>
                 nbr_tasks++;
  816f48:	e0bffb03 	ldbu	r2,-20(fp)
  816f4c:	10800044 	addi	r2,r2,1
  816f50:	e0bffb05 	stb	r2,-20(fp)
  816f54:	e0bffa17 	ldw	r2,-24(fp)
  816f58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816f5c:	e0bff817 	ldw	r2,-32(fp)
  816f60:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  816f64:	0812a580 	call	812a58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  816f68:	e0fffe17 	ldw	r3,-8(fp)
  816f6c:	00800384 	movi	r2,14
  816f70:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  816f74:	e0bffb03 	ldbu	r2,-20(fp)
  816f78:	e0bfff15 	stw	r2,-4(fp)
  816f7c:	00000706 	br	816f9c <OSSemPendAbort+0x164>
  816f80:	e0bffa17 	ldw	r2,-24(fp)
  816f84:	e0bff715 	stw	r2,-36(fp)
  816f88:	e0bff717 	ldw	r2,-36(fp)
  816f8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  816f90:	e0bffe17 	ldw	r2,-8(fp)
  816f94:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  816f98:	e03fff15 	stw	zero,-4(fp)
  816f9c:	e0bfff17 	ldw	r2,-4(fp)
}
  816fa0:	e037883a 	mov	sp,fp
  816fa4:	dfc00117 	ldw	ra,4(sp)
  816fa8:	df000017 	ldw	fp,0(sp)
  816fac:	dec00204 	addi	sp,sp,8
  816fb0:	f800283a 	ret

00816fb4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  816fb4:	defff704 	addi	sp,sp,-36
  816fb8:	dfc00815 	stw	ra,32(sp)
  816fbc:	df000715 	stw	fp,28(sp)
  816fc0:	df000704 	addi	fp,sp,28
  816fc4:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  816fc8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  816fcc:	e0bffe17 	ldw	r2,-8(fp)
  816fd0:	1004c03a 	cmpne	r2,r2,zero
  816fd4:	1000031e 	bne	r2,zero,816fe4 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  816fd8:	00800104 	movi	r2,4
  816fdc:	e0bfff15 	stw	r2,-4(fp)
  816fe0:	00003806 	br	8170c4 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  816fe4:	e0bffe17 	ldw	r2,-8(fp)
  816fe8:	10800003 	ldbu	r2,0(r2)
  816fec:	10803fcc 	andi	r2,r2,255
  816ff0:	108000e0 	cmpeqi	r2,r2,3
  816ff4:	1000031e 	bne	r2,zero,817004 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  816ff8:	00800044 	movi	r2,1
  816ffc:	e0bfff15 	stw	r2,-4(fp)
  817000:	00003006 	br	8170c4 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817004:	0005303a 	rdctl	r2,status
  817008:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81700c:	e0fffc17 	ldw	r3,-16(fp)
  817010:	00bfff84 	movi	r2,-2
  817014:	1884703a 	and	r2,r3,r2
  817018:	1001703a 	wrctl	status,r2
  
  return context;
  81701c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  817020:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  817024:	e0bffe17 	ldw	r2,-8(fp)
  817028:	10800283 	ldbu	r2,10(r2)
  81702c:	10803fcc 	andi	r2,r2,255
  817030:	1005003a 	cmpeq	r2,r2,zero
  817034:	10000c1e 	bne	r2,zero,817068 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  817038:	e13ffe17 	ldw	r4,-8(fp)
  81703c:	000b883a 	mov	r5,zero
  817040:	01800044 	movi	r6,1
  817044:	000f883a 	mov	r7,zero
  817048:	08120180 	call	812018 <OS_EventTaskRdy>
  81704c:	e0bffd17 	ldw	r2,-12(fp)
  817050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817054:	e0bffb17 	ldw	r2,-20(fp)
  817058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81705c:	0812a580 	call	812a58 <OS_Sched>
        return (OS_ERR_NONE);
  817060:	e03fff15 	stw	zero,-4(fp)
  817064:	00001706 	br	8170c4 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  817068:	e0bffe17 	ldw	r2,-8(fp)
  81706c:	1080020b 	ldhu	r2,8(r2)
  817070:	10ffffcc 	andi	r3,r2,65535
  817074:	00bfffd4 	movui	r2,65535
  817078:	18800c26 	beq	r3,r2,8170ac <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  81707c:	e0bffe17 	ldw	r2,-8(fp)
  817080:	1080020b 	ldhu	r2,8(r2)
  817084:	10800044 	addi	r2,r2,1
  817088:	1007883a 	mov	r3,r2
  81708c:	e0bffe17 	ldw	r2,-8(fp)
  817090:	10c0020d 	sth	r3,8(r2)
  817094:	e0bffd17 	ldw	r2,-12(fp)
  817098:	e0bffa15 	stw	r2,-24(fp)
  81709c:	e0bffa17 	ldw	r2,-24(fp)
  8170a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8170a4:	e03fff15 	stw	zero,-4(fp)
  8170a8:	00000606 	br	8170c4 <OSSemPost+0x110>
  8170ac:	e0bffd17 	ldw	r2,-12(fp)
  8170b0:	e0bff915 	stw	r2,-28(fp)
  8170b4:	e0bff917 	ldw	r2,-28(fp)
  8170b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  8170bc:	00800c84 	movi	r2,50
  8170c0:	e0bfff15 	stw	r2,-4(fp)
  8170c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8170c8:	e037883a 	mov	sp,fp
  8170cc:	dfc00117 	ldw	ra,4(sp)
  8170d0:	df000017 	ldw	fp,0(sp)
  8170d4:	dec00204 	addi	sp,sp,8
  8170d8:	f800283a 	ret

008170dc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  8170dc:	defff604 	addi	sp,sp,-40
  8170e0:	df000915 	stw	fp,36(sp)
  8170e4:	df000904 	addi	fp,sp,36
  8170e8:	e13ffd15 	stw	r4,-12(fp)
  8170ec:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8170f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8170f4:	e0bffd17 	ldw	r2,-12(fp)
  8170f8:	1004c03a 	cmpne	r2,r2,zero
  8170fc:	1000031e 	bne	r2,zero,81710c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  817100:	00800104 	movi	r2,4
  817104:	e0bfff15 	stw	r2,-4(fp)
  817108:	00003b06 	br	8171f8 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  81710c:	e0bffe17 	ldw	r2,-8(fp)
  817110:	1004c03a 	cmpne	r2,r2,zero
  817114:	1000031e 	bne	r2,zero,817124 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  817118:	00800244 	movi	r2,9
  81711c:	e0bfff15 	stw	r2,-4(fp)
  817120:	00003506 	br	8171f8 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  817124:	e0bffd17 	ldw	r2,-12(fp)
  817128:	10800003 	ldbu	r2,0(r2)
  81712c:	10803fcc 	andi	r2,r2,255
  817130:	108000e0 	cmpeqi	r2,r2,3
  817134:	1000031e 	bne	r2,zero,817144 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  817138:	00800044 	movi	r2,1
  81713c:	e0bfff15 	stw	r2,-4(fp)
  817140:	00002d06 	br	8171f8 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817144:	0005303a 	rdctl	r2,status
  817148:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81714c:	e0fff817 	ldw	r3,-32(fp)
  817150:	00bfff84 	movi	r2,-2
  817154:	1884703a 	and	r2,r3,r2
  817158:	1001703a 	wrctl	status,r2
  
  return context;
  81715c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  817160:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  817164:	e0bffd17 	ldw	r2,-12(fp)
  817168:	10c00283 	ldbu	r3,10(r2)
  81716c:	e0bffe17 	ldw	r2,-8(fp)
  817170:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  817174:	e0bffd17 	ldw	r2,-12(fp)
  817178:	108002c4 	addi	r2,r2,11
  81717c:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  817180:	e0bffe17 	ldw	r2,-8(fp)
  817184:	10800084 	addi	r2,r2,2
  817188:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81718c:	e03ffa05 	stb	zero,-24(fp)
  817190:	00000d06 	br	8171c8 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  817194:	e0bffc17 	ldw	r2,-16(fp)
  817198:	10c00003 	ldbu	r3,0(r2)
  81719c:	e0bffb17 	ldw	r2,-20(fp)
  8171a0:	10c00005 	stb	r3,0(r2)
  8171a4:	e0bffb17 	ldw	r2,-20(fp)
  8171a8:	10800044 	addi	r2,r2,1
  8171ac:	e0bffb15 	stw	r2,-20(fp)
  8171b0:	e0bffc17 	ldw	r2,-16(fp)
  8171b4:	10800044 	addi	r2,r2,1
  8171b8:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8171bc:	e0bffa03 	ldbu	r2,-24(fp)
  8171c0:	10800044 	addi	r2,r2,1
  8171c4:	e0bffa05 	stb	r2,-24(fp)
  8171c8:	e0bffa03 	ldbu	r2,-24(fp)
  8171cc:	108000f0 	cmpltui	r2,r2,3
  8171d0:	103ff01e 	bne	r2,zero,817194 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  8171d4:	e0bffd17 	ldw	r2,-12(fp)
  8171d8:	10c0020b 	ldhu	r3,8(r2)
  8171dc:	e0bffe17 	ldw	r2,-8(fp)
  8171e0:	10c0000d 	sth	r3,0(r2)
  8171e4:	e0bff917 	ldw	r2,-28(fp)
  8171e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8171ec:	e0bff717 	ldw	r2,-36(fp)
  8171f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8171f4:	e03fff15 	stw	zero,-4(fp)
  8171f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8171fc:	e037883a 	mov	sp,fp
  817200:	df000017 	ldw	fp,0(sp)
  817204:	dec00104 	addi	sp,sp,4
  817208:	f800283a 	ret

0081720c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  81720c:	defff904 	addi	sp,sp,-28
  817210:	df000615 	stw	fp,24(sp)
  817214:	df000604 	addi	fp,sp,24
  817218:	e13ffd15 	stw	r4,-12(fp)
  81721c:	e1bfff15 	stw	r6,-4(fp)
  817220:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  817224:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  817228:	e0bfff17 	ldw	r2,-4(fp)
  81722c:	1005003a 	cmpeq	r2,r2,zero
  817230:	1000331e 	bne	r2,zero,817300 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  817234:	e0bffd17 	ldw	r2,-12(fp)
  817238:	1004c03a 	cmpne	r2,r2,zero
  81723c:	1000041e 	bne	r2,zero,817250 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  817240:	e0ffff17 	ldw	r3,-4(fp)
  817244:	00800104 	movi	r2,4
  817248:	18800005 	stb	r2,0(r3)
        return;
  81724c:	00002c06 	br	817300 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  817250:	e0bffd17 	ldw	r2,-12(fp)
  817254:	10800003 	ldbu	r2,0(r2)
  817258:	10803fcc 	andi	r2,r2,255
  81725c:	108000e0 	cmpeqi	r2,r2,3
  817260:	1000041e 	bne	r2,zero,817274 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  817264:	e0ffff17 	ldw	r3,-4(fp)
  817268:	00800044 	movi	r2,1
  81726c:	18800005 	stb	r2,0(r3)
        return;
  817270:	00002306 	br	817300 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817274:	0005303a 	rdctl	r2,status
  817278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81727c:	e0fffb17 	ldw	r3,-20(fp)
  817280:	00bfff84 	movi	r2,-2
  817284:	1884703a 	and	r2,r3,r2
  817288:	1001703a 	wrctl	status,r2
  
  return context;
  81728c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  817290:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  817294:	e0bfff17 	ldw	r2,-4(fp)
  817298:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  81729c:	e0bffd17 	ldw	r2,-12(fp)
  8172a0:	1080020b 	ldhu	r2,8(r2)
  8172a4:	10bfffcc 	andi	r2,r2,65535
  8172a8:	1005003a 	cmpeq	r2,r2,zero
  8172ac:	1000041e 	bne	r2,zero,8172c0 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  8172b0:	e0fffd17 	ldw	r3,-12(fp)
  8172b4:	e0bffe0b 	ldhu	r2,-8(fp)
  8172b8:	1880020d 	sth	r2,8(r3)
  8172bc:	00000c06 	br	8172f0 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  8172c0:	e0bffd17 	ldw	r2,-12(fp)
  8172c4:	10800283 	ldbu	r2,10(r2)
  8172c8:	10803fcc 	andi	r2,r2,255
  8172cc:	1004c03a 	cmpne	r2,r2,zero
  8172d0:	1000041e 	bne	r2,zero,8172e4 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  8172d4:	e0fffd17 	ldw	r3,-12(fp)
  8172d8:	e0bffe0b 	ldhu	r2,-8(fp)
  8172dc:	1880020d 	sth	r2,8(r3)
  8172e0:	00000306 	br	8172f0 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  8172e4:	e0ffff17 	ldw	r3,-4(fp)
  8172e8:	00801244 	movi	r2,73
  8172ec:	18800005 	stb	r2,0(r3)
  8172f0:	e0bffc17 	ldw	r2,-16(fp)
  8172f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8172f8:	e0bffa17 	ldw	r2,-24(fp)
  8172fc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  817300:	e037883a 	mov	sp,fp
  817304:	df000017 	ldw	fp,0(sp)
  817308:	dec00104 	addi	sp,sp,4
  81730c:	f800283a 	ret

00817310 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  817310:	defff004 	addi	sp,sp,-64
  817314:	dfc00f15 	stw	ra,60(sp)
  817318:	df000e15 	stw	fp,56(sp)
  81731c:	df000e04 	addi	fp,sp,56
  817320:	e13ffd05 	stb	r4,-12(fp)
  817324:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  817328:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  81732c:	e0bffd03 	ldbu	r2,-12(fp)
  817330:	10800530 	cmpltui	r2,r2,20
  817334:	1000061e 	bne	r2,zero,817350 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  817338:	e0bffd03 	ldbu	r2,-12(fp)
  81733c:	10803fe0 	cmpeqi	r2,r2,255
  817340:	1000031e 	bne	r2,zero,817350 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  817344:	00800a84 	movi	r2,42
  817348:	e0bfff15 	stw	r2,-4(fp)
  81734c:	00014706 	br	81786c <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  817350:	e0bffe03 	ldbu	r2,-8(fp)
  817354:	10800530 	cmpltui	r2,r2,20
  817358:	1000031e 	bne	r2,zero,817368 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  81735c:	00800a84 	movi	r2,42
  817360:	e0bfff15 	stw	r2,-4(fp)
  817364:	00014106 	br	81786c <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817368:	0005303a 	rdctl	r2,status
  81736c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817370:	e0fff617 	ldw	r3,-40(fp)
  817374:	00bfff84 	movi	r2,-2
  817378:	1884703a 	and	r2,r3,r2
  81737c:	1001703a 	wrctl	status,r2
  
  return context;
  817380:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817384:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  817388:	e0bffe03 	ldbu	r2,-8(fp)
  81738c:	00c020f4 	movhi	r3,131
  817390:	18e56304 	addi	r3,r3,-27252
  817394:	1085883a 	add	r2,r2,r2
  817398:	1085883a 	add	r2,r2,r2
  81739c:	10c5883a 	add	r2,r2,r3
  8173a0:	10800017 	ldw	r2,0(r2)
  8173a4:	1005003a 	cmpeq	r2,r2,zero
  8173a8:	1000071e 	bne	r2,zero,8173c8 <OSTaskChangePrio+0xb8>
  8173ac:	e0bff717 	ldw	r2,-36(fp)
  8173b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8173b4:	e0bff517 	ldw	r2,-44(fp)
  8173b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  8173bc:	00800a04 	movi	r2,40
  8173c0:	e0bfff15 	stw	r2,-4(fp)
  8173c4:	00012906 	br	81786c <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  8173c8:	e0bffd03 	ldbu	r2,-12(fp)
  8173cc:	10803fd8 	cmpnei	r2,r2,255
  8173d0:	1000051e 	bne	r2,zero,8173e8 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  8173d4:	008020b4 	movhi	r2,130
  8173d8:	10808d04 	addi	r2,r2,564
  8173dc:	10800017 	ldw	r2,0(r2)
  8173e0:	10800c83 	ldbu	r2,50(r2)
  8173e4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8173e8:	e0bffd03 	ldbu	r2,-12(fp)
  8173ec:	00c020f4 	movhi	r3,131
  8173f0:	18e56304 	addi	r3,r3,-27252
  8173f4:	1085883a 	add	r2,r2,r2
  8173f8:	1085883a 	add	r2,r2,r2
  8173fc:	10c5883a 	add	r2,r2,r3
  817400:	10800017 	ldw	r2,0(r2)
  817404:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  817408:	e0bffa17 	ldw	r2,-24(fp)
  81740c:	1004c03a 	cmpne	r2,r2,zero
  817410:	1000071e 	bne	r2,zero,817430 <OSTaskChangePrio+0x120>
  817414:	e0bff717 	ldw	r2,-36(fp)
  817418:	e0bff415 	stw	r2,-48(fp)
  81741c:	e0bff417 	ldw	r2,-48(fp)
  817420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  817424:	00800a44 	movi	r2,41
  817428:	e0bfff15 	stw	r2,-4(fp)
  81742c:	00010f06 	br	81786c <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  817430:	e0bffa17 	ldw	r2,-24(fp)
  817434:	10800058 	cmpnei	r2,r2,1
  817438:	1000071e 	bne	r2,zero,817458 <OSTaskChangePrio+0x148>
  81743c:	e0bff717 	ldw	r2,-36(fp)
  817440:	e0bff315 	stw	r2,-52(fp)
  817444:	e0bff317 	ldw	r2,-52(fp)
  817448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  81744c:	008010c4 	movi	r2,67
  817450:	e0bfff15 	stw	r2,-4(fp)
  817454:	00010506 	br	81786c <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  817458:	e0bffe03 	ldbu	r2,-8(fp)
  81745c:	1004d0fa 	srli	r2,r2,3
  817460:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  817464:	e0bffe03 	ldbu	r2,-8(fp)
  817468:	108001cc 	andi	r2,r2,7
  81746c:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  817470:	e0fff983 	ldbu	r3,-26(fp)
  817474:	00800044 	movi	r2,1
  817478:	10c4983a 	sll	r2,r2,r3
  81747c:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  817480:	e0fff943 	ldbu	r3,-27(fp)
  817484:	00800044 	movi	r2,1
  817488:	10c4983a 	sll	r2,r2,r3
  81748c:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  817490:	e0bffd03 	ldbu	r2,-12(fp)
  817494:	00c020f4 	movhi	r3,131
  817498:	18e56304 	addi	r3,r3,-27252
  81749c:	1085883a 	add	r2,r2,r2
  8174a0:	1085883a 	add	r2,r2,r2
  8174a4:	10c5883a 	add	r2,r2,r3
  8174a8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  8174ac:	e0bffe03 	ldbu	r2,-8(fp)
  8174b0:	00c020f4 	movhi	r3,131
  8174b4:	18e56304 	addi	r3,r3,-27252
  8174b8:	1085883a 	add	r2,r2,r2
  8174bc:	1085883a 	add	r2,r2,r2
  8174c0:	10c7883a 	add	r3,r2,r3
  8174c4:	e0bffa17 	ldw	r2,-24(fp)
  8174c8:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  8174cc:	e0bffa17 	ldw	r2,-24(fp)
  8174d0:	10800d03 	ldbu	r2,52(r2)
  8174d4:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  8174d8:	e0bffa17 	ldw	r2,-24(fp)
  8174dc:	10800d83 	ldbu	r2,54(r2)
  8174e0:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8174e4:	e0bffa17 	ldw	r2,-24(fp)
  8174e8:	10800d43 	ldbu	r2,53(r2)
  8174ec:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8174f0:	e0fff903 	ldbu	r3,-28(fp)
  8174f4:	008020b4 	movhi	r2,130
  8174f8:	10808a44 	addi	r2,r2,553
  8174fc:	10c5883a 	add	r2,r2,r3
  817500:	10c00003 	ldbu	r3,0(r2)
  817504:	e0bff803 	ldbu	r2,-32(fp)
  817508:	1884703a 	and	r2,r3,r2
  81750c:	10803fcc 	andi	r2,r2,255
  817510:	1005003a 	cmpeq	r2,r2,zero
  817514:	1000381e 	bne	r2,zero,8175f8 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  817518:	e13ff903 	ldbu	r4,-28(fp)
  81751c:	e0fff903 	ldbu	r3,-28(fp)
  817520:	008020b4 	movhi	r2,130
  817524:	10808a44 	addi	r2,r2,553
  817528:	10c5883a 	add	r2,r2,r3
  81752c:	10800003 	ldbu	r2,0(r2)
  817530:	1007883a 	mov	r3,r2
  817534:	e0bff803 	ldbu	r2,-32(fp)
  817538:	0084303a 	nor	r2,zero,r2
  81753c:	1884703a 	and	r2,r3,r2
  817540:	1007883a 	mov	r3,r2
  817544:	008020b4 	movhi	r2,130
  817548:	10808a44 	addi	r2,r2,553
  81754c:	1105883a 	add	r2,r2,r4
  817550:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  817554:	e0fff903 	ldbu	r3,-28(fp)
  817558:	008020b4 	movhi	r2,130
  81755c:	10808a44 	addi	r2,r2,553
  817560:	10c5883a 	add	r2,r2,r3
  817564:	10800003 	ldbu	r2,0(r2)
  817568:	10803fcc 	andi	r2,r2,255
  81756c:	1004c03a 	cmpne	r2,r2,zero
  817570:	10000b1e 	bne	r2,zero,8175a0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  817574:	e0bff843 	ldbu	r2,-31(fp)
  817578:	0084303a 	nor	r2,zero,r2
  81757c:	1007883a 	mov	r3,r2
  817580:	008020b4 	movhi	r2,130
  817584:	10808a04 	addi	r2,r2,552
  817588:	10800003 	ldbu	r2,0(r2)
  81758c:	1884703a 	and	r2,r3,r2
  817590:	1007883a 	mov	r3,r2
  817594:	008020b4 	movhi	r2,130
  817598:	10808a04 	addi	r2,r2,552
  81759c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  8175a0:	008020b4 	movhi	r2,130
  8175a4:	10808a04 	addi	r2,r2,552
  8175a8:	10c00003 	ldbu	r3,0(r2)
  8175ac:	e0bff8c3 	ldbu	r2,-29(fp)
  8175b0:	1884b03a 	or	r2,r3,r2
  8175b4:	1007883a 	mov	r3,r2
  8175b8:	008020b4 	movhi	r2,130
  8175bc:	10808a04 	addi	r2,r2,552
  8175c0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  8175c4:	e13ff983 	ldbu	r4,-26(fp)
  8175c8:	e0fff983 	ldbu	r3,-26(fp)
  8175cc:	008020b4 	movhi	r2,130
  8175d0:	10808a44 	addi	r2,r2,553
  8175d4:	10c5883a 	add	r2,r2,r3
  8175d8:	10c00003 	ldbu	r3,0(r2)
  8175dc:	e0bff883 	ldbu	r2,-30(fp)
  8175e0:	1884b03a 	or	r2,r3,r2
  8175e4:	1007883a 	mov	r3,r2
  8175e8:	008020b4 	movhi	r2,130
  8175ec:	10808a44 	addi	r2,r2,553
  8175f0:	1105883a 	add	r2,r2,r4
  8175f4:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  8175f8:	e0bffa17 	ldw	r2,-24(fp)
  8175fc:	10800717 	ldw	r2,28(r2)
  817600:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  817604:	e0bffc17 	ldw	r2,-16(fp)
  817608:	1005003a 	cmpeq	r2,r2,zero
  81760c:	1000341e 	bne	r2,zero,8176e0 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  817610:	e13ff903 	ldbu	r4,-28(fp)
  817614:	e0fff903 	ldbu	r3,-28(fp)
  817618:	e0bffc17 	ldw	r2,-16(fp)
  81761c:	1885883a 	add	r2,r3,r2
  817620:	10800204 	addi	r2,r2,8
  817624:	108000c3 	ldbu	r2,3(r2)
  817628:	1007883a 	mov	r3,r2
  81762c:	e0bff803 	ldbu	r2,-32(fp)
  817630:	0084303a 	nor	r2,zero,r2
  817634:	1884703a 	and	r2,r3,r2
  817638:	1007883a 	mov	r3,r2
  81763c:	e0bffc17 	ldw	r2,-16(fp)
  817640:	2085883a 	add	r2,r4,r2
  817644:	10800204 	addi	r2,r2,8
  817648:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  81764c:	e0fff903 	ldbu	r3,-28(fp)
  817650:	e0bffc17 	ldw	r2,-16(fp)
  817654:	1885883a 	add	r2,r3,r2
  817658:	10800204 	addi	r2,r2,8
  81765c:	108000c3 	ldbu	r2,3(r2)
  817660:	10803fcc 	andi	r2,r2,255
  817664:	1004c03a 	cmpne	r2,r2,zero
  817668:	1000091e 	bne	r2,zero,817690 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  81766c:	e0bffc17 	ldw	r2,-16(fp)
  817670:	10800283 	ldbu	r2,10(r2)
  817674:	1007883a 	mov	r3,r2
  817678:	e0bff843 	ldbu	r2,-31(fp)
  81767c:	0084303a 	nor	r2,zero,r2
  817680:	1884703a 	and	r2,r3,r2
  817684:	1007883a 	mov	r3,r2
  817688:	e0bffc17 	ldw	r2,-16(fp)
  81768c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  817690:	e0bffc17 	ldw	r2,-16(fp)
  817694:	10c00283 	ldbu	r3,10(r2)
  817698:	e0bff8c3 	ldbu	r2,-29(fp)
  81769c:	1884b03a 	or	r2,r3,r2
  8176a0:	1007883a 	mov	r3,r2
  8176a4:	e0bffc17 	ldw	r2,-16(fp)
  8176a8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  8176ac:	e13ff983 	ldbu	r4,-26(fp)
  8176b0:	e0fff983 	ldbu	r3,-26(fp)
  8176b4:	e0bffc17 	ldw	r2,-16(fp)
  8176b8:	1885883a 	add	r2,r3,r2
  8176bc:	10800204 	addi	r2,r2,8
  8176c0:	10c000c3 	ldbu	r3,3(r2)
  8176c4:	e0bff883 	ldbu	r2,-30(fp)
  8176c8:	1884b03a 	or	r2,r3,r2
  8176cc:	1007883a 	mov	r3,r2
  8176d0:	e0bffc17 	ldw	r2,-16(fp)
  8176d4:	2085883a 	add	r2,r4,r2
  8176d8:	10800204 	addi	r2,r2,8
  8176dc:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  8176e0:	e0bffa17 	ldw	r2,-24(fp)
  8176e4:	10800817 	ldw	r2,32(r2)
  8176e8:	1005003a 	cmpeq	r2,r2,zero
  8176ec:	1000441e 	bne	r2,zero,817800 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  8176f0:	e0bffa17 	ldw	r2,-24(fp)
  8176f4:	10800817 	ldw	r2,32(r2)
  8176f8:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  8176fc:	e0bffb17 	ldw	r2,-20(fp)
  817700:	10800017 	ldw	r2,0(r2)
  817704:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  817708:	00003a06 	br	8177f4 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  81770c:	e13ff903 	ldbu	r4,-28(fp)
  817710:	e0fff903 	ldbu	r3,-28(fp)
  817714:	e0bffc17 	ldw	r2,-16(fp)
  817718:	1885883a 	add	r2,r3,r2
  81771c:	10800204 	addi	r2,r2,8
  817720:	108000c3 	ldbu	r2,3(r2)
  817724:	1007883a 	mov	r3,r2
  817728:	e0bff803 	ldbu	r2,-32(fp)
  81772c:	0084303a 	nor	r2,zero,r2
  817730:	1884703a 	and	r2,r3,r2
  817734:	1007883a 	mov	r3,r2
  817738:	e0bffc17 	ldw	r2,-16(fp)
  81773c:	2085883a 	add	r2,r4,r2
  817740:	10800204 	addi	r2,r2,8
  817744:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  817748:	e0fff903 	ldbu	r3,-28(fp)
  81774c:	e0bffc17 	ldw	r2,-16(fp)
  817750:	1885883a 	add	r2,r3,r2
  817754:	10800204 	addi	r2,r2,8
  817758:	108000c3 	ldbu	r2,3(r2)
  81775c:	10803fcc 	andi	r2,r2,255
  817760:	1004c03a 	cmpne	r2,r2,zero
  817764:	1000091e 	bne	r2,zero,81778c <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  817768:	e0bffc17 	ldw	r2,-16(fp)
  81776c:	10800283 	ldbu	r2,10(r2)
  817770:	1007883a 	mov	r3,r2
  817774:	e0bff843 	ldbu	r2,-31(fp)
  817778:	0084303a 	nor	r2,zero,r2
  81777c:	1884703a 	and	r2,r3,r2
  817780:	1007883a 	mov	r3,r2
  817784:	e0bffc17 	ldw	r2,-16(fp)
  817788:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81778c:	e0bffc17 	ldw	r2,-16(fp)
  817790:	10c00283 	ldbu	r3,10(r2)
  817794:	e0bff8c3 	ldbu	r2,-29(fp)
  817798:	1884b03a 	or	r2,r3,r2
  81779c:	1007883a 	mov	r3,r2
  8177a0:	e0bffc17 	ldw	r2,-16(fp)
  8177a4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  8177a8:	e13ff983 	ldbu	r4,-26(fp)
  8177ac:	e0fff983 	ldbu	r3,-26(fp)
  8177b0:	e0bffc17 	ldw	r2,-16(fp)
  8177b4:	1885883a 	add	r2,r3,r2
  8177b8:	10800204 	addi	r2,r2,8
  8177bc:	10c000c3 	ldbu	r3,3(r2)
  8177c0:	e0bff883 	ldbu	r2,-30(fp)
  8177c4:	1884b03a 	or	r2,r3,r2
  8177c8:	1007883a 	mov	r3,r2
  8177cc:	e0bffc17 	ldw	r2,-16(fp)
  8177d0:	2085883a 	add	r2,r4,r2
  8177d4:	10800204 	addi	r2,r2,8
  8177d8:	10c000c5 	stb	r3,3(r2)
            pevents++;
  8177dc:	e0bffb17 	ldw	r2,-20(fp)
  8177e0:	10800104 	addi	r2,r2,4
  8177e4:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  8177e8:	e0bffb17 	ldw	r2,-20(fp)
  8177ec:	10800017 	ldw	r2,0(r2)
  8177f0:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  8177f4:	e0bffc17 	ldw	r2,-16(fp)
  8177f8:	1004c03a 	cmpne	r2,r2,zero
  8177fc:	103fc31e 	bne	r2,zero,81770c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  817800:	e0fffa17 	ldw	r3,-24(fp)
  817804:	e0bffe03 	ldbu	r2,-8(fp)
  817808:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  81780c:	e0fffa17 	ldw	r3,-24(fp)
  817810:	e0bff983 	ldbu	r2,-26(fp)
  817814:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  817818:	e0fffa17 	ldw	r3,-24(fp)
  81781c:	e0bff943 	ldbu	r2,-27(fp)
  817820:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  817824:	e0fffa17 	ldw	r3,-24(fp)
  817828:	e0bff8c3 	ldbu	r2,-29(fp)
  81782c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  817830:	e0fffa17 	ldw	r3,-24(fp)
  817834:	e0bff883 	ldbu	r2,-30(fp)
  817838:	18800d45 	stb	r2,53(r3)
  81783c:	e0bff717 	ldw	r2,-36(fp)
  817840:	e0bff215 	stw	r2,-56(fp)
  817844:	e0bff217 	ldw	r2,-56(fp)
  817848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81784c:	008020b4 	movhi	r2,130
  817850:	10807e44 	addi	r2,r2,505
  817854:	10800003 	ldbu	r2,0(r2)
  817858:	10803fcc 	andi	r2,r2,255
  81785c:	10800058 	cmpnei	r2,r2,1
  817860:	1000011e 	bne	r2,zero,817868 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  817864:	0812a580 	call	812a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
  817868:	e03fff15 	stw	zero,-4(fp)
  81786c:	e0bfff17 	ldw	r2,-4(fp)
}
  817870:	e037883a 	mov	sp,fp
  817874:	dfc00117 	ldw	ra,4(sp)
  817878:	df000017 	ldw	fp,0(sp)
  81787c:	dec00204 	addi	sp,sp,8
  817880:	f800283a 	ret

00817884 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  817884:	deffed04 	addi	sp,sp,-76
  817888:	dfc01215 	stw	ra,72(sp)
  81788c:	df001115 	stw	fp,68(sp)
  817890:	df001104 	addi	fp,sp,68
  817894:	e13ffb15 	stw	r4,-20(fp)
  817898:	e17ffc15 	stw	r5,-16(fp)
  81789c:	e1bffd15 	stw	r6,-12(fp)
  8178a0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8178a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8178a8:	e0bffe03 	ldbu	r2,-8(fp)
  8178ac:	10800570 	cmpltui	r2,r2,21
  8178b0:	1000031e 	bne	r2,zero,8178c0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8178b4:	00800a84 	movi	r2,42
  8178b8:	e0bfff15 	stw	r2,-4(fp)
  8178bc:	00006006 	br	817a40 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8178c0:	0005303a 	rdctl	r2,status
  8178c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8178c8:	e0fff717 	ldw	r3,-36(fp)
  8178cc:	00bfff84 	movi	r2,-2
  8178d0:	1884703a 	and	r2,r3,r2
  8178d4:	1001703a 	wrctl	status,r2
  
  return context;
  8178d8:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8178dc:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8178e0:	008020b4 	movhi	r2,130
  8178e4:	10808c04 	addi	r2,r2,560
  8178e8:	10800003 	ldbu	r2,0(r2)
  8178ec:	10803fcc 	andi	r2,r2,255
  8178f0:	1005003a 	cmpeq	r2,r2,zero
  8178f4:	1000071e 	bne	r2,zero,817914 <OSTaskCreate+0x90>
  8178f8:	e0bff817 	ldw	r2,-32(fp)
  8178fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817900:	e0bff617 	ldw	r2,-40(fp)
  817904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817908:	00800f04 	movi	r2,60
  81790c:	e0bfff15 	stw	r2,-4(fp)
  817910:	00004b06 	br	817a40 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817914:	e0bffe03 	ldbu	r2,-8(fp)
  817918:	00c020f4 	movhi	r3,131
  81791c:	18e56304 	addi	r3,r3,-27252
  817920:	1085883a 	add	r2,r2,r2
  817924:	1085883a 	add	r2,r2,r2
  817928:	10c5883a 	add	r2,r2,r3
  81792c:	10800017 	ldw	r2,0(r2)
  817930:	1004c03a 	cmpne	r2,r2,zero
  817934:	10003c1e 	bne	r2,zero,817a28 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  817938:	e0bffe03 	ldbu	r2,-8(fp)
  81793c:	00c020f4 	movhi	r3,131
  817940:	18e56304 	addi	r3,r3,-27252
  817944:	1085883a 	add	r2,r2,r2
  817948:	1085883a 	add	r2,r2,r2
  81794c:	10c7883a 	add	r3,r2,r3
  817950:	00800044 	movi	r2,1
  817954:	18800015 	stw	r2,0(r3)
  817958:	e0bff817 	ldw	r2,-32(fp)
  81795c:	e0bff515 	stw	r2,-44(fp)
  817960:	e0bff517 	ldw	r2,-44(fp)
  817964:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  817968:	e13ffb17 	ldw	r4,-20(fp)
  81796c:	e17ffc17 	ldw	r5,-16(fp)
  817970:	e1bffd17 	ldw	r6,-12(fp)
  817974:	000f883a 	mov	r7,zero
  817978:	081b7940 	call	81b794 <OSTaskStkInit>
  81797c:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  817980:	e13ffe03 	ldbu	r4,-8(fp)
  817984:	d8000015 	stw	zero,0(sp)
  817988:	d8000115 	stw	zero,4(sp)
  81798c:	d8000215 	stw	zero,8(sp)
  817990:	e17ffa17 	ldw	r5,-24(fp)
  817994:	000d883a 	mov	r6,zero
  817998:	000f883a 	mov	r7,zero
  81799c:	0812e600 	call	812e60 <OS_TCBInit>
  8179a0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  8179a4:	e0bff903 	ldbu	r2,-28(fp)
  8179a8:	1004c03a 	cmpne	r2,r2,zero
  8179ac:	1000081e 	bne	r2,zero,8179d0 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  8179b0:	008020b4 	movhi	r2,130
  8179b4:	10807e44 	addi	r2,r2,505
  8179b8:	10800003 	ldbu	r2,0(r2)
  8179bc:	10803fcc 	andi	r2,r2,255
  8179c0:	10800058 	cmpnei	r2,r2,1
  8179c4:	1000151e 	bne	r2,zero,817a1c <OSTaskCreate+0x198>
                OS_Sched();
  8179c8:	0812a580 	call	812a58 <OS_Sched>
  8179cc:	00001306 	br	817a1c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8179d0:	0005303a 	rdctl	r2,status
  8179d4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8179d8:	e0fff417 	ldw	r3,-48(fp)
  8179dc:	00bfff84 	movi	r2,-2
  8179e0:	1884703a 	and	r2,r3,r2
  8179e4:	1001703a 	wrctl	status,r2
  
  return context;
  8179e8:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8179ec:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  8179f0:	e0bffe03 	ldbu	r2,-8(fp)
  8179f4:	00c020f4 	movhi	r3,131
  8179f8:	18e56304 	addi	r3,r3,-27252
  8179fc:	1085883a 	add	r2,r2,r2
  817a00:	1085883a 	add	r2,r2,r2
  817a04:	10c5883a 	add	r2,r2,r3
  817a08:	10000015 	stw	zero,0(r2)
  817a0c:	e0bff817 	ldw	r2,-32(fp)
  817a10:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817a14:	e0bff317 	ldw	r2,-52(fp)
  817a18:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817a1c:	e0bff903 	ldbu	r2,-28(fp)
  817a20:	e0bfff15 	stw	r2,-4(fp)
  817a24:	00000606 	br	817a40 <OSTaskCreate+0x1bc>
  817a28:	e0bff817 	ldw	r2,-32(fp)
  817a2c:	e0bff215 	stw	r2,-56(fp)
  817a30:	e0bff217 	ldw	r2,-56(fp)
  817a34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  817a38:	00800a04 	movi	r2,40
  817a3c:	e0bfff15 	stw	r2,-4(fp)
  817a40:	e0bfff17 	ldw	r2,-4(fp)
}
  817a44:	e037883a 	mov	sp,fp
  817a48:	dfc00117 	ldw	ra,4(sp)
  817a4c:	df000017 	ldw	fp,0(sp)
  817a50:	dec00204 	addi	sp,sp,8
  817a54:	f800283a 	ret

00817a58 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  817a58:	deffeb04 	addi	sp,sp,-84
  817a5c:	dfc01415 	stw	ra,80(sp)
  817a60:	df001315 	stw	fp,76(sp)
  817a64:	df001304 	addi	fp,sp,76
  817a68:	e13ff915 	stw	r4,-28(fp)
  817a6c:	e17ffa15 	stw	r5,-24(fp)
  817a70:	e1bffb15 	stw	r6,-20(fp)
  817a74:	e0800217 	ldw	r2,8(fp)
  817a78:	e0c00617 	ldw	r3,24(fp)
  817a7c:	e1fffc05 	stb	r7,-16(fp)
  817a80:	e0bffd0d 	sth	r2,-12(fp)
  817a84:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  817a88:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  817a8c:	e0bffc03 	ldbu	r2,-16(fp)
  817a90:	10800570 	cmpltui	r2,r2,21
  817a94:	1000031e 	bne	r2,zero,817aa4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  817a98:	00800a84 	movi	r2,42
  817a9c:	e0bfff15 	stw	r2,-4(fp)
  817aa0:	00006706 	br	817c40 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817aa4:	0005303a 	rdctl	r2,status
  817aa8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817aac:	e0fff517 	ldw	r3,-44(fp)
  817ab0:	00bfff84 	movi	r2,-2
  817ab4:	1884703a 	and	r2,r3,r2
  817ab8:	1001703a 	wrctl	status,r2
  
  return context;
  817abc:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  817ac0:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  817ac4:	008020b4 	movhi	r2,130
  817ac8:	10808c04 	addi	r2,r2,560
  817acc:	10800003 	ldbu	r2,0(r2)
  817ad0:	10803fcc 	andi	r2,r2,255
  817ad4:	1005003a 	cmpeq	r2,r2,zero
  817ad8:	1000071e 	bne	r2,zero,817af8 <OSTaskCreateExt+0xa0>
  817adc:	e0bff617 	ldw	r2,-40(fp)
  817ae0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ae4:	e0bff417 	ldw	r2,-48(fp)
  817ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  817aec:	00800f04 	movi	r2,60
  817af0:	e0bfff15 	stw	r2,-4(fp)
  817af4:	00005206 	br	817c40 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  817af8:	e0bffc03 	ldbu	r2,-16(fp)
  817afc:	00c020f4 	movhi	r3,131
  817b00:	18e56304 	addi	r3,r3,-27252
  817b04:	1085883a 	add	r2,r2,r2
  817b08:	1085883a 	add	r2,r2,r2
  817b0c:	10c5883a 	add	r2,r2,r3
  817b10:	10800017 	ldw	r2,0(r2)
  817b14:	1004c03a 	cmpne	r2,r2,zero
  817b18:	1000431e 	bne	r2,zero,817c28 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  817b1c:	e0bffc03 	ldbu	r2,-16(fp)
  817b20:	00c020f4 	movhi	r3,131
  817b24:	18e56304 	addi	r3,r3,-27252
  817b28:	1085883a 	add	r2,r2,r2
  817b2c:	1085883a 	add	r2,r2,r2
  817b30:	10c7883a 	add	r3,r2,r3
  817b34:	00800044 	movi	r2,1
  817b38:	18800015 	stw	r2,0(r3)
  817b3c:	e0bff617 	ldw	r2,-40(fp)
  817b40:	e0bff315 	stw	r2,-52(fp)
  817b44:	e0bff317 	ldw	r2,-52(fp)
  817b48:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  817b4c:	e1bffe0b 	ldhu	r6,-8(fp)
  817b50:	e1000317 	ldw	r4,12(fp)
  817b54:	e1400417 	ldw	r5,16(fp)
  817b58:	0818cd40 	call	818cd4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  817b5c:	e1fffe0b 	ldhu	r7,-8(fp)
  817b60:	e13ff917 	ldw	r4,-28(fp)
  817b64:	e17ffa17 	ldw	r5,-24(fp)
  817b68:	e1bffb17 	ldw	r6,-20(fp)
  817b6c:	081b7940 	call	81b794 <OSTaskStkInit>
  817b70:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  817b74:	e13ffc03 	ldbu	r4,-16(fp)
  817b78:	e1fffd0b 	ldhu	r7,-12(fp)
  817b7c:	e0fffe0b 	ldhu	r3,-8(fp)
  817b80:	e0800417 	ldw	r2,16(fp)
  817b84:	d8800015 	stw	r2,0(sp)
  817b88:	e0800517 	ldw	r2,20(fp)
  817b8c:	d8800115 	stw	r2,4(sp)
  817b90:	d8c00215 	stw	r3,8(sp)
  817b94:	e17ff817 	ldw	r5,-32(fp)
  817b98:	e1800317 	ldw	r6,12(fp)
  817b9c:	0812e600 	call	812e60 <OS_TCBInit>
  817ba0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  817ba4:	e0bff703 	ldbu	r2,-36(fp)
  817ba8:	1004c03a 	cmpne	r2,r2,zero
  817bac:	1000081e 	bne	r2,zero,817bd0 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  817bb0:	008020b4 	movhi	r2,130
  817bb4:	10807e44 	addi	r2,r2,505
  817bb8:	10800003 	ldbu	r2,0(r2)
  817bbc:	10803fcc 	andi	r2,r2,255
  817bc0:	10800058 	cmpnei	r2,r2,1
  817bc4:	1000151e 	bne	r2,zero,817c1c <OSTaskCreateExt+0x1c4>
                OS_Sched();
  817bc8:	0812a580 	call	812a58 <OS_Sched>
  817bcc:	00001306 	br	817c1c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817bd0:	0005303a 	rdctl	r2,status
  817bd4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817bd8:	e0fff217 	ldw	r3,-56(fp)
  817bdc:	00bfff84 	movi	r2,-2
  817be0:	1884703a 	and	r2,r3,r2
  817be4:	1001703a 	wrctl	status,r2
  
  return context;
  817be8:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  817bec:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  817bf0:	e0bffc03 	ldbu	r2,-16(fp)
  817bf4:	00c020f4 	movhi	r3,131
  817bf8:	18e56304 	addi	r3,r3,-27252
  817bfc:	1085883a 	add	r2,r2,r2
  817c00:	1085883a 	add	r2,r2,r2
  817c04:	10c5883a 	add	r2,r2,r3
  817c08:	10000015 	stw	zero,0(r2)
  817c0c:	e0bff617 	ldw	r2,-40(fp)
  817c10:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817c14:	e0bff117 	ldw	r2,-60(fp)
  817c18:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  817c1c:	e0bff703 	ldbu	r2,-36(fp)
  817c20:	e0bfff15 	stw	r2,-4(fp)
  817c24:	00000606 	br	817c40 <OSTaskCreateExt+0x1e8>
  817c28:	e0bff617 	ldw	r2,-40(fp)
  817c2c:	e0bff015 	stw	r2,-64(fp)
  817c30:	e0bff017 	ldw	r2,-64(fp)
  817c34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  817c38:	00800a04 	movi	r2,40
  817c3c:	e0bfff15 	stw	r2,-4(fp)
  817c40:	e0bfff17 	ldw	r2,-4(fp)
}
  817c44:	e037883a 	mov	sp,fp
  817c48:	dfc00117 	ldw	ra,4(sp)
  817c4c:	df000017 	ldw	fp,0(sp)
  817c50:	dec00204 	addi	sp,sp,8
  817c54:	f800283a 	ret

00817c58 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  817c58:	defff304 	addi	sp,sp,-52
  817c5c:	dfc00c15 	stw	ra,48(sp)
  817c60:	df000b15 	stw	fp,44(sp)
  817c64:	df000b04 	addi	fp,sp,44
  817c68:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  817c6c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  817c70:	008020b4 	movhi	r2,130
  817c74:	10808c04 	addi	r2,r2,560
  817c78:	10800003 	ldbu	r2,0(r2)
  817c7c:	10803fcc 	andi	r2,r2,255
  817c80:	1005003a 	cmpeq	r2,r2,zero
  817c84:	1000031e 	bne	r2,zero,817c94 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  817c88:	00801004 	movi	r2,64
  817c8c:	e0bfff15 	stw	r2,-4(fp)
  817c90:	0000ee06 	br	81804c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  817c94:	e0bffe03 	ldbu	r2,-8(fp)
  817c98:	10800518 	cmpnei	r2,r2,20
  817c9c:	1000031e 	bne	r2,zero,817cac <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  817ca0:	00800f84 	movi	r2,62
  817ca4:	e0bfff15 	stw	r2,-4(fp)
  817ca8:	0000e806 	br	81804c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  817cac:	e0bffe03 	ldbu	r2,-8(fp)
  817cb0:	10800530 	cmpltui	r2,r2,20
  817cb4:	1000061e 	bne	r2,zero,817cd0 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  817cb8:	e0bffe03 	ldbu	r2,-8(fp)
  817cbc:	10803fe0 	cmpeqi	r2,r2,255
  817cc0:	1000031e 	bne	r2,zero,817cd0 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  817cc4:	00800a84 	movi	r2,42
  817cc8:	e0bfff15 	stw	r2,-4(fp)
  817ccc:	0000df06 	br	81804c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817cd0:	0005303a 	rdctl	r2,status
  817cd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817cd8:	e0fffa17 	ldw	r3,-24(fp)
  817cdc:	00bfff84 	movi	r2,-2
  817ce0:	1884703a 	and	r2,r3,r2
  817ce4:	1001703a 	wrctl	status,r2
  
  return context;
  817ce8:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  817cec:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  817cf0:	e0bffe03 	ldbu	r2,-8(fp)
  817cf4:	10803fd8 	cmpnei	r2,r2,255
  817cf8:	1000051e 	bne	r2,zero,817d10 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  817cfc:	008020b4 	movhi	r2,130
  817d00:	10808d04 	addi	r2,r2,564
  817d04:	10800017 	ldw	r2,0(r2)
  817d08:	10800c83 	ldbu	r2,50(r2)
  817d0c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  817d10:	e0bffe03 	ldbu	r2,-8(fp)
  817d14:	00c020f4 	movhi	r3,131
  817d18:	18e56304 	addi	r3,r3,-27252
  817d1c:	1085883a 	add	r2,r2,r2
  817d20:	1085883a 	add	r2,r2,r2
  817d24:	10c5883a 	add	r2,r2,r3
  817d28:	10800017 	ldw	r2,0(r2)
  817d2c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  817d30:	e0bffc17 	ldw	r2,-16(fp)
  817d34:	1004c03a 	cmpne	r2,r2,zero
  817d38:	1000071e 	bne	r2,zero,817d58 <OSTaskDel+0x100>
  817d3c:	e0bffb17 	ldw	r2,-20(fp)
  817d40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817d44:	e0bff917 	ldw	r2,-28(fp)
  817d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  817d4c:	008010c4 	movi	r2,67
  817d50:	e0bfff15 	stw	r2,-4(fp)
  817d54:	0000bd06 	br	81804c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  817d58:	e0bffc17 	ldw	r2,-16(fp)
  817d5c:	10800058 	cmpnei	r2,r2,1
  817d60:	1000071e 	bne	r2,zero,817d80 <OSTaskDel+0x128>
  817d64:	e0bffb17 	ldw	r2,-20(fp)
  817d68:	e0bff815 	stw	r2,-32(fp)
  817d6c:	e0bff817 	ldw	r2,-32(fp)
  817d70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  817d74:	00800f44 	movi	r2,61
  817d78:	e0bfff15 	stw	r2,-4(fp)
  817d7c:	0000b306 	br	81804c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  817d80:	e0bffc17 	ldw	r2,-16(fp)
  817d84:	10800d03 	ldbu	r2,52(r2)
  817d88:	11003fcc 	andi	r4,r2,255
  817d8c:	e0bffc17 	ldw	r2,-16(fp)
  817d90:	10800d03 	ldbu	r2,52(r2)
  817d94:	10c03fcc 	andi	r3,r2,255
  817d98:	008020b4 	movhi	r2,130
  817d9c:	10808a44 	addi	r2,r2,553
  817da0:	10c5883a 	add	r2,r2,r3
  817da4:	10800003 	ldbu	r2,0(r2)
  817da8:	1007883a 	mov	r3,r2
  817dac:	e0bffc17 	ldw	r2,-16(fp)
  817db0:	10800d43 	ldbu	r2,53(r2)
  817db4:	0084303a 	nor	r2,zero,r2
  817db8:	1884703a 	and	r2,r3,r2
  817dbc:	1007883a 	mov	r3,r2
  817dc0:	008020b4 	movhi	r2,130
  817dc4:	10808a44 	addi	r2,r2,553
  817dc8:	1105883a 	add	r2,r2,r4
  817dcc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  817dd0:	e0bffc17 	ldw	r2,-16(fp)
  817dd4:	10800d03 	ldbu	r2,52(r2)
  817dd8:	10c03fcc 	andi	r3,r2,255
  817ddc:	008020b4 	movhi	r2,130
  817de0:	10808a44 	addi	r2,r2,553
  817de4:	10c5883a 	add	r2,r2,r3
  817de8:	10800003 	ldbu	r2,0(r2)
  817dec:	10803fcc 	andi	r2,r2,255
  817df0:	1004c03a 	cmpne	r2,r2,zero
  817df4:	10000c1e 	bne	r2,zero,817e28 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  817df8:	e0bffc17 	ldw	r2,-16(fp)
  817dfc:	10800d83 	ldbu	r2,54(r2)
  817e00:	0084303a 	nor	r2,zero,r2
  817e04:	1007883a 	mov	r3,r2
  817e08:	008020b4 	movhi	r2,130
  817e0c:	10808a04 	addi	r2,r2,552
  817e10:	10800003 	ldbu	r2,0(r2)
  817e14:	1884703a 	and	r2,r3,r2
  817e18:	1007883a 	mov	r3,r2
  817e1c:	008020b4 	movhi	r2,130
  817e20:	10808a04 	addi	r2,r2,552
  817e24:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  817e28:	e0bffc17 	ldw	r2,-16(fp)
  817e2c:	10800717 	ldw	r2,28(r2)
  817e30:	1005003a 	cmpeq	r2,r2,zero
  817e34:	1000041e 	bne	r2,zero,817e48 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  817e38:	e0bffc17 	ldw	r2,-16(fp)
  817e3c:	11400717 	ldw	r5,28(r2)
  817e40:	e13ffc17 	ldw	r4,-16(fp)
  817e44:	08124100 	call	812410 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  817e48:	e0bffc17 	ldw	r2,-16(fp)
  817e4c:	10800817 	ldw	r2,32(r2)
  817e50:	1005003a 	cmpeq	r2,r2,zero
  817e54:	1000041e 	bne	r2,zero,817e68 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  817e58:	e0bffc17 	ldw	r2,-16(fp)
  817e5c:	11400817 	ldw	r5,32(r2)
  817e60:	e13ffc17 	ldw	r4,-16(fp)
  817e64:	08124c80 	call	8124c8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  817e68:	e0bffc17 	ldw	r2,-16(fp)
  817e6c:	10800a17 	ldw	r2,40(r2)
  817e70:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  817e74:	e0bffd17 	ldw	r2,-12(fp)
  817e78:	1005003a 	cmpeq	r2,r2,zero
  817e7c:	1000021e 	bne	r2,zero,817e88 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  817e80:	e13ffd17 	ldw	r4,-12(fp)
  817e84:	0814b5c0 	call	814b5c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  817e88:	e0bffc17 	ldw	r2,-16(fp)
  817e8c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  817e90:	e0bffc17 	ldw	r2,-16(fp)
  817e94:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  817e98:	e0bffc17 	ldw	r2,-16(fp)
  817e9c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  817ea0:	008020b4 	movhi	r2,130
  817ea4:	10807e04 	addi	r2,r2,504
  817ea8:	10800003 	ldbu	r2,0(r2)
  817eac:	10803fcc 	andi	r2,r2,255
  817eb0:	10803fe0 	cmpeqi	r2,r2,255
  817eb4:	1000081e 	bne	r2,zero,817ed8 <OSTaskDel+0x280>
        OSLockNesting++;
  817eb8:	008020b4 	movhi	r2,130
  817ebc:	10807e04 	addi	r2,r2,504
  817ec0:	10800003 	ldbu	r2,0(r2)
  817ec4:	10800044 	addi	r2,r2,1
  817ec8:	1007883a 	mov	r3,r2
  817ecc:	008020b4 	movhi	r2,130
  817ed0:	10807e04 	addi	r2,r2,504
  817ed4:	10c00005 	stb	r3,0(r2)
  817ed8:	e0bffb17 	ldw	r2,-20(fp)
  817edc:	e0bff715 	stw	r2,-36(fp)
  817ee0:	e0bff717 	ldw	r2,-36(fp)
  817ee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  817ee8:	0811ffc0 	call	811ffc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817eec:	0005303a 	rdctl	r2,status
  817ef0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817ef4:	e0fff617 	ldw	r3,-40(fp)
  817ef8:	00bfff84 	movi	r2,-2
  817efc:	1884703a 	and	r2,r3,r2
  817f00:	1001703a 	wrctl	status,r2
  
  return context;
  817f04:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  817f08:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  817f0c:	008020b4 	movhi	r2,130
  817f10:	10807e04 	addi	r2,r2,504
  817f14:	10800003 	ldbu	r2,0(r2)
  817f18:	10803fcc 	andi	r2,r2,255
  817f1c:	1005003a 	cmpeq	r2,r2,zero
  817f20:	1000081e 	bne	r2,zero,817f44 <OSTaskDel+0x2ec>
        OSLockNesting--;
  817f24:	008020b4 	movhi	r2,130
  817f28:	10807e04 	addi	r2,r2,504
  817f2c:	10800003 	ldbu	r2,0(r2)
  817f30:	10bfffc4 	addi	r2,r2,-1
  817f34:	1007883a 	mov	r3,r2
  817f38:	008020b4 	movhi	r2,130
  817f3c:	10807e04 	addi	r2,r2,504
  817f40:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  817f44:	e13ffc17 	ldw	r4,-16(fp)
  817f48:	081bac40 	call	81bac4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  817f4c:	008020b4 	movhi	r2,130
  817f50:	10808644 	addi	r2,r2,537
  817f54:	10800003 	ldbu	r2,0(r2)
  817f58:	10bfffc4 	addi	r2,r2,-1
  817f5c:	1007883a 	mov	r3,r2
  817f60:	008020b4 	movhi	r2,130
  817f64:	10808644 	addi	r2,r2,537
  817f68:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  817f6c:	e0bffe03 	ldbu	r2,-8(fp)
  817f70:	00c020f4 	movhi	r3,131
  817f74:	18e56304 	addi	r3,r3,-27252
  817f78:	1085883a 	add	r2,r2,r2
  817f7c:	1085883a 	add	r2,r2,r2
  817f80:	10c5883a 	add	r2,r2,r3
  817f84:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  817f88:	e0bffc17 	ldw	r2,-16(fp)
  817f8c:	10800617 	ldw	r2,24(r2)
  817f90:	1004c03a 	cmpne	r2,r2,zero
  817f94:	1000091e 	bne	r2,zero,817fbc <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  817f98:	e0bffc17 	ldw	r2,-16(fp)
  817f9c:	10800517 	ldw	r2,20(r2)
  817fa0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  817fa4:	e0bffc17 	ldw	r2,-16(fp)
  817fa8:	10c00517 	ldw	r3,20(r2)
  817fac:	008020b4 	movhi	r2,130
  817fb0:	10808104 	addi	r2,r2,516
  817fb4:	10c00015 	stw	r3,0(r2)
  817fb8:	00000a06 	br	817fe4 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  817fbc:	e0bffc17 	ldw	r2,-16(fp)
  817fc0:	10c00617 	ldw	r3,24(r2)
  817fc4:	e0bffc17 	ldw	r2,-16(fp)
  817fc8:	10800517 	ldw	r2,20(r2)
  817fcc:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  817fd0:	e0bffc17 	ldw	r2,-16(fp)
  817fd4:	10c00517 	ldw	r3,20(r2)
  817fd8:	e0bffc17 	ldw	r2,-16(fp)
  817fdc:	10800617 	ldw	r2,24(r2)
  817fe0:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  817fe4:	008020b4 	movhi	r2,130
  817fe8:	10808504 	addi	r2,r2,532
  817fec:	10c00017 	ldw	r3,0(r2)
  817ff0:	e0bffc17 	ldw	r2,-16(fp)
  817ff4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  817ff8:	00c020b4 	movhi	r3,130
  817ffc:	18c08504 	addi	r3,r3,532
  818000:	e0bffc17 	ldw	r2,-16(fp)
  818004:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  818008:	e0fffc17 	ldw	r3,-16(fp)
  81800c:	00800fc4 	movi	r2,63
  818010:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  818014:	e0bffc17 	ldw	r2,-16(fp)
  818018:	10001345 	stb	zero,77(r2)
  81801c:	e0bffb17 	ldw	r2,-20(fp)
  818020:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818024:	e0bff517 	ldw	r2,-44(fp)
  818028:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81802c:	008020b4 	movhi	r2,130
  818030:	10807e44 	addi	r2,r2,505
  818034:	10800003 	ldbu	r2,0(r2)
  818038:	10803fcc 	andi	r2,r2,255
  81803c:	10800058 	cmpnei	r2,r2,1
  818040:	1000011e 	bne	r2,zero,818048 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  818044:	0812a580 	call	812a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
  818048:	e03fff15 	stw	zero,-4(fp)
  81804c:	e0bfff17 	ldw	r2,-4(fp)
}
  818050:	e037883a 	mov	sp,fp
  818054:	dfc00117 	ldw	ra,4(sp)
  818058:	df000017 	ldw	fp,0(sp)
  81805c:	dec00204 	addi	sp,sp,8
  818060:	f800283a 	ret

00818064 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  818064:	defff404 	addi	sp,sp,-48
  818068:	df000b15 	stw	fp,44(sp)
  81806c:	df000b04 	addi	fp,sp,44
  818070:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818074:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  818078:	e0bffe03 	ldbu	r2,-8(fp)
  81807c:	10800518 	cmpnei	r2,r2,20
  818080:	1000031e 	bne	r2,zero,818090 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  818084:	00800f84 	movi	r2,62
  818088:	e0bfff15 	stw	r2,-4(fp)
  81808c:	00004c06 	br	8181c0 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  818090:	e0bffe03 	ldbu	r2,-8(fp)
  818094:	10800530 	cmpltui	r2,r2,20
  818098:	1000061e 	bne	r2,zero,8180b4 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  81809c:	e0bffe03 	ldbu	r2,-8(fp)
  8180a0:	10803fe0 	cmpeqi	r2,r2,255
  8180a4:	1000031e 	bne	r2,zero,8180b4 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  8180a8:	00800a84 	movi	r2,42
  8180ac:	e0bfff15 	stw	r2,-4(fp)
  8180b0:	00004306 	br	8181c0 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  8180b4:	e0bffe03 	ldbu	r2,-8(fp)
  8180b8:	10803fd8 	cmpnei	r2,r2,255
  8180bc:	1000141e 	bne	r2,zero,818110 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8180c0:	0005303a 	rdctl	r2,status
  8180c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8180c8:	e0fffa17 	ldw	r3,-24(fp)
  8180cc:	00bfff84 	movi	r2,-2
  8180d0:	1884703a 	and	r2,r3,r2
  8180d4:	1001703a 	wrctl	status,r2
  
  return context;
  8180d8:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  8180dc:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  8180e0:	008020b4 	movhi	r2,130
  8180e4:	10808d04 	addi	r2,r2,564
  8180e8:	10800017 	ldw	r2,0(r2)
  8180ec:	10800dc3 	ldbu	r2,55(r2)
  8180f0:	e0bffd05 	stb	r2,-12(fp)
  8180f4:	e0bffb17 	ldw	r2,-20(fp)
  8180f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8180fc:	e0bff917 	ldw	r2,-28(fp)
  818100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  818104:	e0bffd03 	ldbu	r2,-12(fp)
  818108:	e0bfff15 	stw	r2,-4(fp)
  81810c:	00002c06 	br	8181c0 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818110:	0005303a 	rdctl	r2,status
  818114:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818118:	e0fff817 	ldw	r3,-32(fp)
  81811c:	00bfff84 	movi	r2,-2
  818120:	1884703a 	and	r2,r3,r2
  818124:	1001703a 	wrctl	status,r2
  
  return context;
  818128:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81812c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  818130:	e0bffe03 	ldbu	r2,-8(fp)
  818134:	00c020f4 	movhi	r3,131
  818138:	18e56304 	addi	r3,r3,-27252
  81813c:	1085883a 	add	r2,r2,r2
  818140:	1085883a 	add	r2,r2,r2
  818144:	10c5883a 	add	r2,r2,r3
  818148:	10800017 	ldw	r2,0(r2)
  81814c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  818150:	e0bffc17 	ldw	r2,-16(fp)
  818154:	1004c03a 	cmpne	r2,r2,zero
  818158:	1000071e 	bne	r2,zero,818178 <OSTaskDelReq+0x114>
  81815c:	e0bffb17 	ldw	r2,-20(fp)
  818160:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818164:	e0bff717 	ldw	r2,-36(fp)
  818168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  81816c:	008010c4 	movi	r2,67
  818170:	e0bfff15 	stw	r2,-4(fp)
  818174:	00001206 	br	8181c0 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  818178:	e0bffc17 	ldw	r2,-16(fp)
  81817c:	10800058 	cmpnei	r2,r2,1
  818180:	1000071e 	bne	r2,zero,8181a0 <OSTaskDelReq+0x13c>
  818184:	e0bffb17 	ldw	r2,-20(fp)
  818188:	e0bff615 	stw	r2,-40(fp)
  81818c:	e0bff617 	ldw	r2,-40(fp)
  818190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  818194:	00800f44 	movi	r2,61
  818198:	e0bfff15 	stw	r2,-4(fp)
  81819c:	00000806 	br	8181c0 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  8181a0:	e0fffc17 	ldw	r3,-16(fp)
  8181a4:	00800fc4 	movi	r2,63
  8181a8:	18800dc5 	stb	r2,55(r3)
  8181ac:	e0bffb17 	ldw	r2,-20(fp)
  8181b0:	e0bff515 	stw	r2,-44(fp)
  8181b4:	e0bff517 	ldw	r2,-44(fp)
  8181b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8181bc:	e03fff15 	stw	zero,-4(fp)
  8181c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8181c4:	e037883a 	mov	sp,fp
  8181c8:	df000017 	ldw	fp,0(sp)
  8181cc:	dec00104 	addi	sp,sp,4
  8181d0:	f800283a 	ret

008181d4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8181d4:	defff304 	addi	sp,sp,-52
  8181d8:	dfc00c15 	stw	ra,48(sp)
  8181dc:	df000b15 	stw	fp,44(sp)
  8181e0:	df000b04 	addi	fp,sp,44
  8181e4:	e17ffd15 	stw	r5,-12(fp)
  8181e8:	e1bffe15 	stw	r6,-8(fp)
  8181ec:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  8181f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  8181f4:	e0bffe17 	ldw	r2,-8(fp)
  8181f8:	1004c03a 	cmpne	r2,r2,zero
  8181fc:	1000021e 	bne	r2,zero,818208 <OSTaskNameGet+0x34>
        return (0);
  818200:	e03fff15 	stw	zero,-4(fp)
  818204:	00005b06 	br	818374 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  818208:	e0bffc03 	ldbu	r2,-16(fp)
  81820c:	10800570 	cmpltui	r2,r2,21
  818210:	1000081e 	bne	r2,zero,818234 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  818214:	e0bffc03 	ldbu	r2,-16(fp)
  818218:	10803fe0 	cmpeqi	r2,r2,255
  81821c:	1000051e 	bne	r2,zero,818234 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  818220:	e0fffe17 	ldw	r3,-8(fp)
  818224:	00800a84 	movi	r2,42
  818228:	18800005 	stb	r2,0(r3)
            return (0);
  81822c:	e03fff15 	stw	zero,-4(fp)
  818230:	00005006 	br	818374 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  818234:	e0bffd17 	ldw	r2,-12(fp)
  818238:	1004c03a 	cmpne	r2,r2,zero
  81823c:	1000051e 	bne	r2,zero,818254 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  818240:	e0fffe17 	ldw	r3,-8(fp)
  818244:	00800304 	movi	r2,12
  818248:	18800005 	stb	r2,0(r3)
        return (0);
  81824c:	e03fff15 	stw	zero,-4(fp)
  818250:	00004806 	br	818374 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  818254:	008020b4 	movhi	r2,130
  818258:	10808c04 	addi	r2,r2,560
  81825c:	10800003 	ldbu	r2,0(r2)
  818260:	10803fcc 	andi	r2,r2,255
  818264:	1005003a 	cmpeq	r2,r2,zero
  818268:	1000051e 	bne	r2,zero,818280 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  81826c:	e0fffe17 	ldw	r3,-8(fp)
  818270:	00800444 	movi	r2,17
  818274:	18800005 	stb	r2,0(r3)
        return (0);
  818278:	e03fff15 	stw	zero,-4(fp)
  81827c:	00003d06 	br	818374 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818280:	0005303a 	rdctl	r2,status
  818284:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818288:	e0fff817 	ldw	r3,-32(fp)
  81828c:	00bfff84 	movi	r2,-2
  818290:	1884703a 	and	r2,r3,r2
  818294:	1001703a 	wrctl	status,r2
  
  return context;
  818298:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81829c:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  8182a0:	e0bffc03 	ldbu	r2,-16(fp)
  8182a4:	10803fd8 	cmpnei	r2,r2,255
  8182a8:	1000051e 	bne	r2,zero,8182c0 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  8182ac:	008020b4 	movhi	r2,130
  8182b0:	10808d04 	addi	r2,r2,564
  8182b4:	10800017 	ldw	r2,0(r2)
  8182b8:	10800c83 	ldbu	r2,50(r2)
  8182bc:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8182c0:	e0bffc03 	ldbu	r2,-16(fp)
  8182c4:	00c020f4 	movhi	r3,131
  8182c8:	18e56304 	addi	r3,r3,-27252
  8182cc:	1085883a 	add	r2,r2,r2
  8182d0:	1085883a 	add	r2,r2,r2
  8182d4:	10c5883a 	add	r2,r2,r3
  8182d8:	10800017 	ldw	r2,0(r2)
  8182dc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8182e0:	e0bffb17 	ldw	r2,-20(fp)
  8182e4:	1004c03a 	cmpne	r2,r2,zero
  8182e8:	1000091e 	bne	r2,zero,818310 <OSTaskNameGet+0x13c>
  8182ec:	e0bff917 	ldw	r2,-28(fp)
  8182f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8182f4:	e0bff717 	ldw	r2,-36(fp)
  8182f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8182fc:	e0fffe17 	ldw	r3,-8(fp)
  818300:	008010c4 	movi	r2,67
  818304:	18800005 	stb	r2,0(r3)
        return (0);
  818308:	e03fff15 	stw	zero,-4(fp)
  81830c:	00001906 	br	818374 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  818310:	e0bffb17 	ldw	r2,-20(fp)
  818314:	10800058 	cmpnei	r2,r2,1
  818318:	1000091e 	bne	r2,zero,818340 <OSTaskNameGet+0x16c>
  81831c:	e0bff917 	ldw	r2,-28(fp)
  818320:	e0bff615 	stw	r2,-40(fp)
  818324:	e0bff617 	ldw	r2,-40(fp)
  818328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81832c:	e0fffe17 	ldw	r3,-8(fp)
  818330:	008010c4 	movi	r2,67
  818334:	18800005 	stb	r2,0(r3)
        return (0);
  818338:	e03fff15 	stw	zero,-4(fp)
  81833c:	00000d06 	br	818374 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  818340:	e0bffb17 	ldw	r2,-20(fp)
  818344:	11401304 	addi	r5,r2,76
  818348:	e13ffd17 	ldw	r4,-12(fp)
  81834c:	0812b9c0 	call	812b9c <OS_StrCopy>
  818350:	e0bffa05 	stb	r2,-24(fp)
  818354:	e0bff917 	ldw	r2,-28(fp)
  818358:	e0bff515 	stw	r2,-44(fp)
  81835c:	e0bff517 	ldw	r2,-44(fp)
  818360:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  818364:	e0bffe17 	ldw	r2,-8(fp)
  818368:	10000005 	stb	zero,0(r2)
    return (len);
  81836c:	e0bffa03 	ldbu	r2,-24(fp)
  818370:	e0bfff15 	stw	r2,-4(fp)
  818374:	e0bfff17 	ldw	r2,-4(fp)
}
  818378:	e037883a 	mov	sp,fp
  81837c:	dfc00117 	ldw	ra,4(sp)
  818380:	df000017 	ldw	fp,0(sp)
  818384:	dec00204 	addi	sp,sp,8
  818388:	f800283a 	ret

0081838c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81838c:	defff304 	addi	sp,sp,-52
  818390:	dfc00c15 	stw	ra,48(sp)
  818394:	df000b15 	stw	fp,44(sp)
  818398:	df000b04 	addi	fp,sp,44
  81839c:	e17ffe15 	stw	r5,-8(fp)
  8183a0:	e1bfff15 	stw	r6,-4(fp)
  8183a4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8183a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8183ac:	e0bfff17 	ldw	r2,-4(fp)
  8183b0:	1005003a 	cmpeq	r2,r2,zero
  8183b4:	1000611e 	bne	r2,zero,81853c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  8183b8:	e0bffd03 	ldbu	r2,-12(fp)
  8183bc:	10800570 	cmpltui	r2,r2,21
  8183c0:	1000071e 	bne	r2,zero,8183e0 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  8183c4:	e0bffd03 	ldbu	r2,-12(fp)
  8183c8:	10803fe0 	cmpeqi	r2,r2,255
  8183cc:	1000041e 	bne	r2,zero,8183e0 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  8183d0:	e0ffff17 	ldw	r3,-4(fp)
  8183d4:	00800a84 	movi	r2,42
  8183d8:	18800005 	stb	r2,0(r3)
            return;
  8183dc:	00005706 	br	81853c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  8183e0:	e0bffe17 	ldw	r2,-8(fp)
  8183e4:	1004c03a 	cmpne	r2,r2,zero
  8183e8:	1000041e 	bne	r2,zero,8183fc <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8183ec:	e0ffff17 	ldw	r3,-4(fp)
  8183f0:	00800304 	movi	r2,12
  8183f4:	18800005 	stb	r2,0(r3)
        return;
  8183f8:	00005006 	br	81853c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  8183fc:	008020b4 	movhi	r2,130
  818400:	10808c04 	addi	r2,r2,560
  818404:	10800003 	ldbu	r2,0(r2)
  818408:	10803fcc 	andi	r2,r2,255
  81840c:	1005003a 	cmpeq	r2,r2,zero
  818410:	1000041e 	bne	r2,zero,818424 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  818414:	e0ffff17 	ldw	r3,-4(fp)
  818418:	00800484 	movi	r2,18
  81841c:	18800005 	stb	r2,0(r3)
        return;
  818420:	00004606 	br	81853c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818424:	0005303a 	rdctl	r2,status
  818428:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81842c:	e0fff917 	ldw	r3,-28(fp)
  818430:	00bfff84 	movi	r2,-2
  818434:	1884703a 	and	r2,r3,r2
  818438:	1001703a 	wrctl	status,r2
  
  return context;
  81843c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  818440:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  818444:	e0bffd03 	ldbu	r2,-12(fp)
  818448:	10803fd8 	cmpnei	r2,r2,255
  81844c:	1000051e 	bne	r2,zero,818464 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  818450:	008020b4 	movhi	r2,130
  818454:	10808d04 	addi	r2,r2,564
  818458:	10800017 	ldw	r2,0(r2)
  81845c:	10800c83 	ldbu	r2,50(r2)
  818460:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818464:	e0bffd03 	ldbu	r2,-12(fp)
  818468:	00c020f4 	movhi	r3,131
  81846c:	18e56304 	addi	r3,r3,-27252
  818470:	1085883a 	add	r2,r2,r2
  818474:	1085883a 	add	r2,r2,r2
  818478:	10c5883a 	add	r2,r2,r3
  81847c:	10800017 	ldw	r2,0(r2)
  818480:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  818484:	e0bffb17 	ldw	r2,-20(fp)
  818488:	1004c03a 	cmpne	r2,r2,zero
  81848c:	1000081e 	bne	r2,zero,8184b0 <OSTaskNameSet+0x124>
  818490:	e0bffa17 	ldw	r2,-24(fp)
  818494:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818498:	e0bff817 	ldw	r2,-32(fp)
  81849c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8184a0:	e0ffff17 	ldw	r3,-4(fp)
  8184a4:	008010c4 	movi	r2,67
  8184a8:	18800005 	stb	r2,0(r3)
        return;
  8184ac:	00002306 	br	81853c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  8184b0:	e0bffb17 	ldw	r2,-20(fp)
  8184b4:	10800058 	cmpnei	r2,r2,1
  8184b8:	1000081e 	bne	r2,zero,8184dc <OSTaskNameSet+0x150>
  8184bc:	e0bffa17 	ldw	r2,-24(fp)
  8184c0:	e0bff715 	stw	r2,-36(fp)
  8184c4:	e0bff717 	ldw	r2,-36(fp)
  8184c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8184cc:	e0ffff17 	ldw	r3,-4(fp)
  8184d0:	008010c4 	movi	r2,67
  8184d4:	18800005 	stb	r2,0(r3)
        return;
  8184d8:	00001806 	br	81853c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  8184dc:	e13ffe17 	ldw	r4,-8(fp)
  8184e0:	0812c1c0 	call	812c1c <OS_StrLen>
  8184e4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8184e8:	e0bffc03 	ldbu	r2,-16(fp)
  8184ec:	10800830 	cmpltui	r2,r2,32
  8184f0:	1000081e 	bne	r2,zero,818514 <OSTaskNameSet+0x188>
  8184f4:	e0bffa17 	ldw	r2,-24(fp)
  8184f8:	e0bff615 	stw	r2,-40(fp)
  8184fc:	e0bff617 	ldw	r2,-40(fp)
  818500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  818504:	e0ffff17 	ldw	r3,-4(fp)
  818508:	00801044 	movi	r2,65
  81850c:	18800005 	stb	r2,0(r3)
        return;
  818510:	00000a06 	br	81853c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  818514:	e0bffb17 	ldw	r2,-20(fp)
  818518:	11001304 	addi	r4,r2,76
  81851c:	e17ffe17 	ldw	r5,-8(fp)
  818520:	0812b9c0 	call	812b9c <OS_StrCopy>
  818524:	e0bffa17 	ldw	r2,-24(fp)
  818528:	e0bff515 	stw	r2,-44(fp)
  81852c:	e0bff517 	ldw	r2,-44(fp)
  818530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  818534:	e0bfff17 	ldw	r2,-4(fp)
  818538:	10000005 	stb	zero,0(r2)
}
  81853c:	e037883a 	mov	sp,fp
  818540:	dfc00117 	ldw	ra,4(sp)
  818544:	df000017 	ldw	fp,0(sp)
  818548:	dec00204 	addi	sp,sp,8
  81854c:	f800283a 	ret

00818550 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  818550:	defff304 	addi	sp,sp,-52
  818554:	dfc00c15 	stw	ra,48(sp)
  818558:	df000b15 	stw	fp,44(sp)
  81855c:	df000b04 	addi	fp,sp,44
  818560:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  818564:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  818568:	e0bffe03 	ldbu	r2,-8(fp)
  81856c:	10800530 	cmpltui	r2,r2,20
  818570:	1000031e 	bne	r2,zero,818580 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  818574:	00800a84 	movi	r2,42
  818578:	e0bfff15 	stw	r2,-4(fp)
  81857c:	00007406 	br	818750 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818580:	0005303a 	rdctl	r2,status
  818584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818588:	e0fffb17 	ldw	r3,-20(fp)
  81858c:	00bfff84 	movi	r2,-2
  818590:	1884703a 	and	r2,r3,r2
  818594:	1001703a 	wrctl	status,r2
  
  return context;
  818598:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81859c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  8185a0:	e0bffe03 	ldbu	r2,-8(fp)
  8185a4:	00c020f4 	movhi	r3,131
  8185a8:	18e56304 	addi	r3,r3,-27252
  8185ac:	1085883a 	add	r2,r2,r2
  8185b0:	1085883a 	add	r2,r2,r2
  8185b4:	10c5883a 	add	r2,r2,r3
  8185b8:	10800017 	ldw	r2,0(r2)
  8185bc:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  8185c0:	e0bffd17 	ldw	r2,-12(fp)
  8185c4:	1004c03a 	cmpne	r2,r2,zero
  8185c8:	1000071e 	bne	r2,zero,8185e8 <OSTaskResume+0x98>
  8185cc:	e0bffc17 	ldw	r2,-16(fp)
  8185d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8185d4:	e0bffa17 	ldw	r2,-24(fp)
  8185d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  8185dc:	00801184 	movi	r2,70
  8185e0:	e0bfff15 	stw	r2,-4(fp)
  8185e4:	00005a06 	br	818750 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  8185e8:	e0bffd17 	ldw	r2,-12(fp)
  8185ec:	10800058 	cmpnei	r2,r2,1
  8185f0:	1000071e 	bne	r2,zero,818610 <OSTaskResume+0xc0>
  8185f4:	e0bffc17 	ldw	r2,-16(fp)
  8185f8:	e0bff915 	stw	r2,-28(fp)
  8185fc:	e0bff917 	ldw	r2,-28(fp)
  818600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818604:	008010c4 	movi	r2,67
  818608:	e0bfff15 	stw	r2,-4(fp)
  81860c:	00005006 	br	818750 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  818610:	e0bffd17 	ldw	r2,-12(fp)
  818614:	10800c03 	ldbu	r2,48(r2)
  818618:	10803fcc 	andi	r2,r2,255
  81861c:	1080020c 	andi	r2,r2,8
  818620:	1005003a 	cmpeq	r2,r2,zero
  818624:	1000441e 	bne	r2,zero,818738 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  818628:	e0bffd17 	ldw	r2,-12(fp)
  81862c:	10c00c03 	ldbu	r3,48(r2)
  818630:	00bffdc4 	movi	r2,-9
  818634:	1884703a 	and	r2,r3,r2
  818638:	1007883a 	mov	r3,r2
  81863c:	e0bffd17 	ldw	r2,-12(fp)
  818640:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  818644:	e0bffd17 	ldw	r2,-12(fp)
  818648:	10800c03 	ldbu	r2,48(r2)
  81864c:	10803fcc 	andi	r2,r2,255
  818650:	1004c03a 	cmpne	r2,r2,zero
  818654:	1000321e 	bne	r2,zero,818720 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  818658:	e0bffd17 	ldw	r2,-12(fp)
  81865c:	10800b8b 	ldhu	r2,46(r2)
  818660:	10bfffcc 	andi	r2,r2,65535
  818664:	1004c03a 	cmpne	r2,r2,zero
  818668:	1000281e 	bne	r2,zero,81870c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81866c:	e0bffd17 	ldw	r2,-12(fp)
  818670:	10c00d83 	ldbu	r3,54(r2)
  818674:	008020b4 	movhi	r2,130
  818678:	10808a04 	addi	r2,r2,552
  81867c:	10800003 	ldbu	r2,0(r2)
  818680:	1884b03a 	or	r2,r3,r2
  818684:	1007883a 	mov	r3,r2
  818688:	008020b4 	movhi	r2,130
  81868c:	10808a04 	addi	r2,r2,552
  818690:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  818694:	e0bffd17 	ldw	r2,-12(fp)
  818698:	10800d03 	ldbu	r2,52(r2)
  81869c:	11003fcc 	andi	r4,r2,255
  8186a0:	e0bffd17 	ldw	r2,-12(fp)
  8186a4:	10800d03 	ldbu	r2,52(r2)
  8186a8:	10c03fcc 	andi	r3,r2,255
  8186ac:	008020b4 	movhi	r2,130
  8186b0:	10808a44 	addi	r2,r2,553
  8186b4:	10c5883a 	add	r2,r2,r3
  8186b8:	10c00003 	ldbu	r3,0(r2)
  8186bc:	e0bffd17 	ldw	r2,-12(fp)
  8186c0:	10800d43 	ldbu	r2,53(r2)
  8186c4:	1884b03a 	or	r2,r3,r2
  8186c8:	1007883a 	mov	r3,r2
  8186cc:	008020b4 	movhi	r2,130
  8186d0:	10808a44 	addi	r2,r2,553
  8186d4:	1105883a 	add	r2,r2,r4
  8186d8:	10c00005 	stb	r3,0(r2)
  8186dc:	e0bffc17 	ldw	r2,-16(fp)
  8186e0:	e0bff815 	stw	r2,-32(fp)
  8186e4:	e0bff817 	ldw	r2,-32(fp)
  8186e8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  8186ec:	008020b4 	movhi	r2,130
  8186f0:	10807e44 	addi	r2,r2,505
  8186f4:	10800003 	ldbu	r2,0(r2)
  8186f8:	10803fcc 	andi	r2,r2,255
  8186fc:	10800058 	cmpnei	r2,r2,1
  818700:	10000b1e 	bne	r2,zero,818730 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  818704:	0812a580 	call	812a58 <OS_Sched>
  818708:	00000906 	br	818730 <OSTaskResume+0x1e0>
  81870c:	e0bffc17 	ldw	r2,-16(fp)
  818710:	e0bff715 	stw	r2,-36(fp)
  818714:	e0bff717 	ldw	r2,-36(fp)
  818718:	1001703a 	wrctl	status,r2
  81871c:	00000406 	br	818730 <OSTaskResume+0x1e0>
  818720:	e0bffc17 	ldw	r2,-16(fp)
  818724:	e0bff615 	stw	r2,-40(fp)
  818728:	e0bff617 	ldw	r2,-40(fp)
  81872c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  818730:	e03fff15 	stw	zero,-4(fp)
  818734:	00000606 	br	818750 <OSTaskResume+0x200>
  818738:	e0bffc17 	ldw	r2,-16(fp)
  81873c:	e0bff515 	stw	r2,-44(fp)
  818740:	e0bff517 	ldw	r2,-44(fp)
  818744:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  818748:	00801104 	movi	r2,68
  81874c:	e0bfff15 	stw	r2,-4(fp)
  818750:	e0bfff17 	ldw	r2,-4(fp)
}
  818754:	e037883a 	mov	sp,fp
  818758:	dfc00117 	ldw	ra,4(sp)
  81875c:	df000017 	ldw	fp,0(sp)
  818760:	dec00204 	addi	sp,sp,8
  818764:	f800283a 	ret

00818768 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  818768:	defff204 	addi	sp,sp,-56
  81876c:	df000d15 	stw	fp,52(sp)
  818770:	df000d04 	addi	fp,sp,52
  818774:	e17ffe15 	stw	r5,-8(fp)
  818778:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81877c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  818780:	e0bffd03 	ldbu	r2,-12(fp)
  818784:	10800570 	cmpltui	r2,r2,21
  818788:	1000061e 	bne	r2,zero,8187a4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  81878c:	e0bffd03 	ldbu	r2,-12(fp)
  818790:	10803fe0 	cmpeqi	r2,r2,255
  818794:	1000031e 	bne	r2,zero,8187a4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  818798:	00800a84 	movi	r2,42
  81879c:	e0bfff15 	stw	r2,-4(fp)
  8187a0:	00006b06 	br	818950 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  8187a4:	e0bffe17 	ldw	r2,-8(fp)
  8187a8:	1004c03a 	cmpne	r2,r2,zero
  8187ac:	1000031e 	bne	r2,zero,8187bc <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  8187b0:	00800244 	movi	r2,9
  8187b4:	e0bfff15 	stw	r2,-4(fp)
  8187b8:	00006506 	br	818950 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  8187bc:	e0bffe17 	ldw	r2,-8(fp)
  8187c0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  8187c4:	e0bffe17 	ldw	r2,-8(fp)
  8187c8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8187cc:	0005303a 	rdctl	r2,status
  8187d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8187d4:	e0fff717 	ldw	r3,-36(fp)
  8187d8:	00bfff84 	movi	r2,-2
  8187dc:	1884703a 	and	r2,r3,r2
  8187e0:	1001703a 	wrctl	status,r2
  
  return context;
  8187e4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8187e8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  8187ec:	e0bffd03 	ldbu	r2,-12(fp)
  8187f0:	10803fd8 	cmpnei	r2,r2,255
  8187f4:	1000051e 	bne	r2,zero,81880c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  8187f8:	008020b4 	movhi	r2,130
  8187fc:	10808d04 	addi	r2,r2,564
  818800:	10800017 	ldw	r2,0(r2)
  818804:	10800c83 	ldbu	r2,50(r2)
  818808:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81880c:	e0bffd03 	ldbu	r2,-12(fp)
  818810:	00c020f4 	movhi	r3,131
  818814:	18e56304 	addi	r3,r3,-27252
  818818:	1085883a 	add	r2,r2,r2
  81881c:	1085883a 	add	r2,r2,r2
  818820:	10c5883a 	add	r2,r2,r3
  818824:	10800017 	ldw	r2,0(r2)
  818828:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  81882c:	e0bffc17 	ldw	r2,-16(fp)
  818830:	1004c03a 	cmpne	r2,r2,zero
  818834:	1000071e 	bne	r2,zero,818854 <OSTaskStkChk+0xec>
  818838:	e0bff817 	ldw	r2,-32(fp)
  81883c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818840:	e0bff617 	ldw	r2,-40(fp)
  818844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818848:	008010c4 	movi	r2,67
  81884c:	e0bfff15 	stw	r2,-4(fp)
  818850:	00003f06 	br	818950 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  818854:	e0bffc17 	ldw	r2,-16(fp)
  818858:	10800058 	cmpnei	r2,r2,1
  81885c:	1000071e 	bne	r2,zero,81887c <OSTaskStkChk+0x114>
  818860:	e0bff817 	ldw	r2,-32(fp)
  818864:	e0bff515 	stw	r2,-44(fp)
  818868:	e0bff517 	ldw	r2,-44(fp)
  81886c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818870:	008010c4 	movi	r2,67
  818874:	e0bfff15 	stw	r2,-4(fp)
  818878:	00003506 	br	818950 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  81887c:	e0bffc17 	ldw	r2,-16(fp)
  818880:	1080040b 	ldhu	r2,16(r2)
  818884:	10bfffcc 	andi	r2,r2,65535
  818888:	1080004c 	andi	r2,r2,1
  81888c:	1004c03a 	cmpne	r2,r2,zero
  818890:	1000071e 	bne	r2,zero,8188b0 <OSTaskStkChk+0x148>
  818894:	e0bff817 	ldw	r2,-32(fp)
  818898:	e0bff415 	stw	r2,-48(fp)
  81889c:	e0bff417 	ldw	r2,-48(fp)
  8188a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  8188a4:	00801144 	movi	r2,69
  8188a8:	e0bfff15 	stw	r2,-4(fp)
  8188ac:	00002806 	br	818950 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  8188b0:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  8188b4:	e0bffc17 	ldw	r2,-16(fp)
  8188b8:	10800317 	ldw	r2,12(r2)
  8188bc:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  8188c0:	e0bffc17 	ldw	r2,-16(fp)
  8188c4:	10800217 	ldw	r2,8(r2)
  8188c8:	e0bffb15 	stw	r2,-20(fp)
  8188cc:	e0bff817 	ldw	r2,-32(fp)
  8188d0:	e0bff315 	stw	r2,-52(fp)
  8188d4:	e0bff317 	ldw	r2,-52(fp)
  8188d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8188dc:	00000306 	br	8188ec <OSTaskStkChk+0x184>
        nfree++;
  8188e0:	e0bffa17 	ldw	r2,-24(fp)
  8188e4:	10800044 	addi	r2,r2,1
  8188e8:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8188ec:	e0bffb17 	ldw	r2,-20(fp)
  8188f0:	10800017 	ldw	r2,0(r2)
  8188f4:	1005003a 	cmpeq	r2,r2,zero
  8188f8:	1007883a 	mov	r3,r2
  8188fc:	e0bffb17 	ldw	r2,-20(fp)
  818900:	10800104 	addi	r2,r2,4
  818904:	e0bffb15 	stw	r2,-20(fp)
  818908:	18803fcc 	andi	r2,r3,255
  81890c:	1004c03a 	cmpne	r2,r2,zero
  818910:	103ff31e 	bne	r2,zero,8188e0 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  818914:	e0bffa17 	ldw	r2,-24(fp)
  818918:	1085883a 	add	r2,r2,r2
  81891c:	1085883a 	add	r2,r2,r2
  818920:	1007883a 	mov	r3,r2
  818924:	e0bffe17 	ldw	r2,-8(fp)
  818928:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  81892c:	e0fff917 	ldw	r3,-28(fp)
  818930:	e0bffa17 	ldw	r2,-24(fp)
  818934:	1885c83a 	sub	r2,r3,r2
  818938:	1085883a 	add	r2,r2,r2
  81893c:	1085883a 	add	r2,r2,r2
  818940:	1007883a 	mov	r3,r2
  818944:	e0bffe17 	ldw	r2,-8(fp)
  818948:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  81894c:	e03fff15 	stw	zero,-4(fp)
  818950:	e0bfff17 	ldw	r2,-4(fp)
}
  818954:	e037883a 	mov	sp,fp
  818958:	df000017 	ldw	fp,0(sp)
  81895c:	dec00104 	addi	sp,sp,4
  818960:	f800283a 	ret

00818964 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  818964:	defff404 	addi	sp,sp,-48
  818968:	dfc00b15 	stw	ra,44(sp)
  81896c:	df000a15 	stw	fp,40(sp)
  818970:	df000a04 	addi	fp,sp,40
  818974:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818978:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  81897c:	e0bffe03 	ldbu	r2,-8(fp)
  818980:	10800518 	cmpnei	r2,r2,20
  818984:	1000031e 	bne	r2,zero,818994 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  818988:	008011c4 	movi	r2,71
  81898c:	e0bfff15 	stw	r2,-4(fp)
  818990:	00007906 	br	818b78 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  818994:	e0bffe03 	ldbu	r2,-8(fp)
  818998:	10800530 	cmpltui	r2,r2,20
  81899c:	1000061e 	bne	r2,zero,8189b8 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  8189a0:	e0bffe03 	ldbu	r2,-8(fp)
  8189a4:	10803fe0 	cmpeqi	r2,r2,255
  8189a8:	1000031e 	bne	r2,zero,8189b8 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  8189ac:	00800a84 	movi	r2,42
  8189b0:	e0bfff15 	stw	r2,-4(fp)
  8189b4:	00007006 	br	818b78 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8189b8:	0005303a 	rdctl	r2,status
  8189bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8189c0:	e0fff917 	ldw	r3,-28(fp)
  8189c4:	00bfff84 	movi	r2,-2
  8189c8:	1884703a 	and	r2,r3,r2
  8189cc:	1001703a 	wrctl	status,r2
  
  return context;
  8189d0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  8189d4:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  8189d8:	e0bffe03 	ldbu	r2,-8(fp)
  8189dc:	10803fd8 	cmpnei	r2,r2,255
  8189e0:	1000081e 	bne	r2,zero,818a04 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  8189e4:	008020b4 	movhi	r2,130
  8189e8:	10808d04 	addi	r2,r2,564
  8189ec:	10800017 	ldw	r2,0(r2)
  8189f0:	10800c83 	ldbu	r2,50(r2)
  8189f4:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  8189f8:	00800044 	movi	r2,1
  8189fc:	e0bffd05 	stb	r2,-12(fp)
  818a00:	00000b06 	br	818a30 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  818a04:	008020b4 	movhi	r2,130
  818a08:	10808d04 	addi	r2,r2,564
  818a0c:	10800017 	ldw	r2,0(r2)
  818a10:	10800c83 	ldbu	r2,50(r2)
  818a14:	10c03fcc 	andi	r3,r2,255
  818a18:	e0bffe03 	ldbu	r2,-8(fp)
  818a1c:	1880031e 	bne	r3,r2,818a2c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  818a20:	00800044 	movi	r2,1
  818a24:	e0bffd05 	stb	r2,-12(fp)
  818a28:	00000106 	br	818a30 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  818a2c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818a30:	e0bffe03 	ldbu	r2,-8(fp)
  818a34:	00c020f4 	movhi	r3,131
  818a38:	18e56304 	addi	r3,r3,-27252
  818a3c:	1085883a 	add	r2,r2,r2
  818a40:	1085883a 	add	r2,r2,r2
  818a44:	10c5883a 	add	r2,r2,r3
  818a48:	10800017 	ldw	r2,0(r2)
  818a4c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  818a50:	e0bffc17 	ldw	r2,-16(fp)
  818a54:	1004c03a 	cmpne	r2,r2,zero
  818a58:	1000071e 	bne	r2,zero,818a78 <OSTaskSuspend+0x114>
  818a5c:	e0bffa17 	ldw	r2,-24(fp)
  818a60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818a64:	e0bff817 	ldw	r2,-32(fp)
  818a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  818a6c:	00801204 	movi	r2,72
  818a70:	e0bfff15 	stw	r2,-4(fp)
  818a74:	00004006 	br	818b78 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  818a78:	e0bffc17 	ldw	r2,-16(fp)
  818a7c:	10800058 	cmpnei	r2,r2,1
  818a80:	1000071e 	bne	r2,zero,818aa0 <OSTaskSuspend+0x13c>
  818a84:	e0bffa17 	ldw	r2,-24(fp)
  818a88:	e0bff715 	stw	r2,-36(fp)
  818a8c:	e0bff717 	ldw	r2,-36(fp)
  818a90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818a94:	008010c4 	movi	r2,67
  818a98:	e0bfff15 	stw	r2,-4(fp)
  818a9c:	00003606 	br	818b78 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  818aa0:	e0bffc17 	ldw	r2,-16(fp)
  818aa4:	10800d03 	ldbu	r2,52(r2)
  818aa8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  818aac:	e13ffb03 	ldbu	r4,-20(fp)
  818ab0:	e0fffb03 	ldbu	r3,-20(fp)
  818ab4:	008020b4 	movhi	r2,130
  818ab8:	10808a44 	addi	r2,r2,553
  818abc:	10c5883a 	add	r2,r2,r3
  818ac0:	10800003 	ldbu	r2,0(r2)
  818ac4:	1007883a 	mov	r3,r2
  818ac8:	e0bffc17 	ldw	r2,-16(fp)
  818acc:	10800d43 	ldbu	r2,53(r2)
  818ad0:	0084303a 	nor	r2,zero,r2
  818ad4:	1884703a 	and	r2,r3,r2
  818ad8:	1007883a 	mov	r3,r2
  818adc:	008020b4 	movhi	r2,130
  818ae0:	10808a44 	addi	r2,r2,553
  818ae4:	1105883a 	add	r2,r2,r4
  818ae8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  818aec:	e0fffb03 	ldbu	r3,-20(fp)
  818af0:	008020b4 	movhi	r2,130
  818af4:	10808a44 	addi	r2,r2,553
  818af8:	10c5883a 	add	r2,r2,r3
  818afc:	10800003 	ldbu	r2,0(r2)
  818b00:	10803fcc 	andi	r2,r2,255
  818b04:	1004c03a 	cmpne	r2,r2,zero
  818b08:	10000c1e 	bne	r2,zero,818b3c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  818b0c:	e0bffc17 	ldw	r2,-16(fp)
  818b10:	10800d83 	ldbu	r2,54(r2)
  818b14:	0084303a 	nor	r2,zero,r2
  818b18:	1007883a 	mov	r3,r2
  818b1c:	008020b4 	movhi	r2,130
  818b20:	10808a04 	addi	r2,r2,552
  818b24:	10800003 	ldbu	r2,0(r2)
  818b28:	1884703a 	and	r2,r3,r2
  818b2c:	1007883a 	mov	r3,r2
  818b30:	008020b4 	movhi	r2,130
  818b34:	10808a04 	addi	r2,r2,552
  818b38:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  818b3c:	e0bffc17 	ldw	r2,-16(fp)
  818b40:	10800c03 	ldbu	r2,48(r2)
  818b44:	10800214 	ori	r2,r2,8
  818b48:	1007883a 	mov	r3,r2
  818b4c:	e0bffc17 	ldw	r2,-16(fp)
  818b50:	10c00c05 	stb	r3,48(r2)
  818b54:	e0bffa17 	ldw	r2,-24(fp)
  818b58:	e0bff615 	stw	r2,-40(fp)
  818b5c:	e0bff617 	ldw	r2,-40(fp)
  818b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  818b64:	e0bffd03 	ldbu	r2,-12(fp)
  818b68:	10800058 	cmpnei	r2,r2,1
  818b6c:	1000011e 	bne	r2,zero,818b74 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  818b70:	0812a580 	call	812a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
  818b74:	e03fff15 	stw	zero,-4(fp)
  818b78:	e0bfff17 	ldw	r2,-4(fp)
}
  818b7c:	e037883a 	mov	sp,fp
  818b80:	dfc00117 	ldw	ra,4(sp)
  818b84:	df000017 	ldw	fp,0(sp)
  818b88:	dec00204 	addi	sp,sp,8
  818b8c:	f800283a 	ret

00818b90 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  818b90:	defff504 	addi	sp,sp,-44
  818b94:	dfc00a15 	stw	ra,40(sp)
  818b98:	df000915 	stw	fp,36(sp)
  818b9c:	df000904 	addi	fp,sp,36
  818ba0:	e17ffe15 	stw	r5,-8(fp)
  818ba4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818ba8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  818bac:	e0bffd03 	ldbu	r2,-12(fp)
  818bb0:	10800570 	cmpltui	r2,r2,21
  818bb4:	1000061e 	bne	r2,zero,818bd0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  818bb8:	e0bffd03 	ldbu	r2,-12(fp)
  818bbc:	10803fe0 	cmpeqi	r2,r2,255
  818bc0:	1000031e 	bne	r2,zero,818bd0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  818bc4:	00800a84 	movi	r2,42
  818bc8:	e0bfff15 	stw	r2,-4(fp)
  818bcc:	00003b06 	br	818cbc <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  818bd0:	e0bffe17 	ldw	r2,-8(fp)
  818bd4:	1004c03a 	cmpne	r2,r2,zero
  818bd8:	1000031e 	bne	r2,zero,818be8 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  818bdc:	00800244 	movi	r2,9
  818be0:	e0bfff15 	stw	r2,-4(fp)
  818be4:	00003506 	br	818cbc <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818be8:	0005303a 	rdctl	r2,status
  818bec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818bf0:	e0fffa17 	ldw	r3,-24(fp)
  818bf4:	00bfff84 	movi	r2,-2
  818bf8:	1884703a 	and	r2,r3,r2
  818bfc:	1001703a 	wrctl	status,r2
  
  return context;
  818c00:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  818c04:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  818c08:	e0bffd03 	ldbu	r2,-12(fp)
  818c0c:	10803fd8 	cmpnei	r2,r2,255
  818c10:	1000051e 	bne	r2,zero,818c28 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  818c14:	008020b4 	movhi	r2,130
  818c18:	10808d04 	addi	r2,r2,564
  818c1c:	10800017 	ldw	r2,0(r2)
  818c20:	10800c83 	ldbu	r2,50(r2)
  818c24:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  818c28:	e0bffd03 	ldbu	r2,-12(fp)
  818c2c:	00c020f4 	movhi	r3,131
  818c30:	18e56304 	addi	r3,r3,-27252
  818c34:	1085883a 	add	r2,r2,r2
  818c38:	1085883a 	add	r2,r2,r2
  818c3c:	10c5883a 	add	r2,r2,r3
  818c40:	10800017 	ldw	r2,0(r2)
  818c44:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  818c48:	e0bffc17 	ldw	r2,-16(fp)
  818c4c:	1004c03a 	cmpne	r2,r2,zero
  818c50:	1000071e 	bne	r2,zero,818c70 <OSTaskQuery+0xe0>
  818c54:	e0bffb17 	ldw	r2,-20(fp)
  818c58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818c5c:	e0bff917 	ldw	r2,-28(fp)
  818c60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  818c64:	00800a44 	movi	r2,41
  818c68:	e0bfff15 	stw	r2,-4(fp)
  818c6c:	00001306 	br	818cbc <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  818c70:	e0bffc17 	ldw	r2,-16(fp)
  818c74:	10800058 	cmpnei	r2,r2,1
  818c78:	1000071e 	bne	r2,zero,818c98 <OSTaskQuery+0x108>
  818c7c:	e0bffb17 	ldw	r2,-20(fp)
  818c80:	e0bff815 	stw	r2,-32(fp)
  818c84:	e0bff817 	ldw	r2,-32(fp)
  818c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  818c8c:	008010c4 	movi	r2,67
  818c90:	e0bfff15 	stw	r2,-4(fp)
  818c94:	00000906 	br	818cbc <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  818c98:	e13ffe17 	ldw	r4,-8(fp)
  818c9c:	e17ffc17 	ldw	r5,-16(fp)
  818ca0:	01801b04 	movi	r6,108
  818ca4:	08129ec0 	call	8129ec <OS_MemCopy>
  818ca8:	e0bffb17 	ldw	r2,-20(fp)
  818cac:	e0bff715 	stw	r2,-36(fp)
  818cb0:	e0bff717 	ldw	r2,-36(fp)
  818cb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  818cb8:	e03fff15 	stw	zero,-4(fp)
  818cbc:	e0bfff17 	ldw	r2,-4(fp)
}
  818cc0:	e037883a 	mov	sp,fp
  818cc4:	dfc00117 	ldw	ra,4(sp)
  818cc8:	df000017 	ldw	fp,0(sp)
  818ccc:	dec00204 	addi	sp,sp,8
  818cd0:	f800283a 	ret

00818cd4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  818cd4:	defffc04 	addi	sp,sp,-16
  818cd8:	df000315 	stw	fp,12(sp)
  818cdc:	df000304 	addi	fp,sp,12
  818ce0:	e13ffd15 	stw	r4,-12(fp)
  818ce4:	e17ffe15 	stw	r5,-8(fp)
  818ce8:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  818cec:	e0bfff0b 	ldhu	r2,-4(fp)
  818cf0:	1080004c 	andi	r2,r2,1
  818cf4:	10803fcc 	andi	r2,r2,255
  818cf8:	1005003a 	cmpeq	r2,r2,zero
  818cfc:	1000101e 	bne	r2,zero,818d40 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  818d00:	e0bfff0b 	ldhu	r2,-4(fp)
  818d04:	1080008c 	andi	r2,r2,2
  818d08:	1005003a 	cmpeq	r2,r2,zero
  818d0c:	10000c1e 	bne	r2,zero,818d40 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  818d10:	00000806 	br	818d34 <OS_TaskStkClr+0x60>
                size--;
  818d14:	e0bffe17 	ldw	r2,-8(fp)
  818d18:	10bfffc4 	addi	r2,r2,-1
  818d1c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  818d20:	e0bffd17 	ldw	r2,-12(fp)
  818d24:	10000015 	stw	zero,0(r2)
  818d28:	e0bffd17 	ldw	r2,-12(fp)
  818d2c:	10800104 	addi	r2,r2,4
  818d30:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  818d34:	e0bffe17 	ldw	r2,-8(fp)
  818d38:	1004c03a 	cmpne	r2,r2,zero
  818d3c:	103ff51e 	bne	r2,zero,818d14 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  818d40:	e037883a 	mov	sp,fp
  818d44:	df000017 	ldw	fp,0(sp)
  818d48:	dec00104 	addi	sp,sp,4
  818d4c:	f800283a 	ret

00818d50 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  818d50:	defff904 	addi	sp,sp,-28
  818d54:	dfc00615 	stw	ra,24(sp)
  818d58:	df000515 	stw	fp,20(sp)
  818d5c:	df000504 	addi	fp,sp,20
  818d60:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818d64:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818d68:	008020b4 	movhi	r2,130
  818d6c:	10808c04 	addi	r2,r2,560
  818d70:	10800003 	ldbu	r2,0(r2)
  818d74:	10803fcc 	andi	r2,r2,255
  818d78:	1004c03a 	cmpne	r2,r2,zero
  818d7c:	1000421e 	bne	r2,zero,818e88 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  818d80:	e0bfff0b 	ldhu	r2,-4(fp)
  818d84:	1005003a 	cmpeq	r2,r2,zero
  818d88:	10003f1e 	bne	r2,zero,818e88 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818d8c:	0005303a 	rdctl	r2,status
  818d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818d94:	e0fffc17 	ldw	r3,-16(fp)
  818d98:	00bfff84 	movi	r2,-2
  818d9c:	1884703a 	and	r2,r3,r2
  818da0:	1001703a 	wrctl	status,r2
  
  return context;
  818da4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  818da8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  818dac:	008020b4 	movhi	r2,130
  818db0:	10808d04 	addi	r2,r2,564
  818db4:	10800017 	ldw	r2,0(r2)
  818db8:	10800d03 	ldbu	r2,52(r2)
  818dbc:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  818dc0:	e13ffe03 	ldbu	r4,-8(fp)
  818dc4:	e0fffe03 	ldbu	r3,-8(fp)
  818dc8:	008020b4 	movhi	r2,130
  818dcc:	10808a44 	addi	r2,r2,553
  818dd0:	10c5883a 	add	r2,r2,r3
  818dd4:	10800003 	ldbu	r2,0(r2)
  818dd8:	1007883a 	mov	r3,r2
  818ddc:	008020b4 	movhi	r2,130
  818de0:	10808d04 	addi	r2,r2,564
  818de4:	10800017 	ldw	r2,0(r2)
  818de8:	10800d43 	ldbu	r2,53(r2)
  818dec:	0084303a 	nor	r2,zero,r2
  818df0:	1884703a 	and	r2,r3,r2
  818df4:	1007883a 	mov	r3,r2
  818df8:	008020b4 	movhi	r2,130
  818dfc:	10808a44 	addi	r2,r2,553
  818e00:	1105883a 	add	r2,r2,r4
  818e04:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  818e08:	e0fffe03 	ldbu	r3,-8(fp)
  818e0c:	008020b4 	movhi	r2,130
  818e10:	10808a44 	addi	r2,r2,553
  818e14:	10c5883a 	add	r2,r2,r3
  818e18:	10800003 	ldbu	r2,0(r2)
  818e1c:	10803fcc 	andi	r2,r2,255
  818e20:	1004c03a 	cmpne	r2,r2,zero
  818e24:	10000e1e 	bne	r2,zero,818e60 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  818e28:	008020b4 	movhi	r2,130
  818e2c:	10808d04 	addi	r2,r2,564
  818e30:	10800017 	ldw	r2,0(r2)
  818e34:	10800d83 	ldbu	r2,54(r2)
  818e38:	0084303a 	nor	r2,zero,r2
  818e3c:	1007883a 	mov	r3,r2
  818e40:	008020b4 	movhi	r2,130
  818e44:	10808a04 	addi	r2,r2,552
  818e48:	10800003 	ldbu	r2,0(r2)
  818e4c:	1884703a 	and	r2,r3,r2
  818e50:	1007883a 	mov	r3,r2
  818e54:	008020b4 	movhi	r2,130
  818e58:	10808a04 	addi	r2,r2,552
  818e5c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  818e60:	008020b4 	movhi	r2,130
  818e64:	10808d04 	addi	r2,r2,564
  818e68:	10c00017 	ldw	r3,0(r2)
  818e6c:	e0bfff0b 	ldhu	r2,-4(fp)
  818e70:	18800b8d 	sth	r2,46(r3)
  818e74:	e0bffd17 	ldw	r2,-12(fp)
  818e78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818e7c:	e0bffb17 	ldw	r2,-20(fp)
  818e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  818e84:	0812a580 	call	812a58 <OS_Sched>
    }
}
  818e88:	e037883a 	mov	sp,fp
  818e8c:	dfc00117 	ldw	ra,4(sp)
  818e90:	df000017 	ldw	fp,0(sp)
  818e94:	dec00204 	addi	sp,sp,8
  818e98:	f800283a 	ret

00818e9c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  818e9c:	defff604 	addi	sp,sp,-40
  818ea0:	dfc00915 	stw	ra,36(sp)
  818ea4:	df000815 	stw	fp,32(sp)
  818ea8:	dc000715 	stw	r16,28(sp)
  818eac:	df000704 	addi	fp,sp,28
  818eb0:	e13ffb05 	stb	r4,-20(fp)
  818eb4:	e17ffc05 	stb	r5,-16(fp)
  818eb8:	e1bffd05 	stb	r6,-12(fp)
  818ebc:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818ec0:	008020b4 	movhi	r2,130
  818ec4:	10808c04 	addi	r2,r2,560
  818ec8:	10800003 	ldbu	r2,0(r2)
  818ecc:	10803fcc 	andi	r2,r2,255
  818ed0:	1005003a 	cmpeq	r2,r2,zero
  818ed4:	1000031e 	bne	r2,zero,818ee4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  818ed8:	00801544 	movi	r2,85
  818edc:	e0bfff15 	stw	r2,-4(fp)
  818ee0:	00004b06 	br	819010 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  818ee4:	e0bffb03 	ldbu	r2,-20(fp)
  818ee8:	1004c03a 	cmpne	r2,r2,zero
  818eec:	10000c1e 	bne	r2,zero,818f20 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  818ef0:	e0bffc03 	ldbu	r2,-16(fp)
  818ef4:	1004c03a 	cmpne	r2,r2,zero
  818ef8:	1000091e 	bne	r2,zero,818f20 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  818efc:	e0bffd03 	ldbu	r2,-12(fp)
  818f00:	1004c03a 	cmpne	r2,r2,zero
  818f04:	1000061e 	bne	r2,zero,818f20 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  818f08:	e0bffe0b 	ldhu	r2,-8(fp)
  818f0c:	1004c03a 	cmpne	r2,r2,zero
  818f10:	1000031e 	bne	r2,zero,818f20 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  818f14:	00801504 	movi	r2,84
  818f18:	e0bfff15 	stw	r2,-4(fp)
  818f1c:	00003c06 	br	819010 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  818f20:	e0bffc03 	ldbu	r2,-16(fp)
  818f24:	10800f30 	cmpltui	r2,r2,60
  818f28:	1000031e 	bne	r2,zero,818f38 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  818f2c:	00801444 	movi	r2,81
  818f30:	e0bfff15 	stw	r2,-4(fp)
  818f34:	00003606 	br	819010 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  818f38:	e0bffd03 	ldbu	r2,-12(fp)
  818f3c:	10800f30 	cmpltui	r2,r2,60
  818f40:	1000031e 	bne	r2,zero,818f50 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  818f44:	00801484 	movi	r2,82
  818f48:	e0bfff15 	stw	r2,-4(fp)
  818f4c:	00003006 	br	819010 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  818f50:	e0bffe0b 	ldhu	r2,-8(fp)
  818f54:	1080fa30 	cmpltui	r2,r2,1000
  818f58:	1000031e 	bne	r2,zero,818f68 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  818f5c:	008014c4 	movi	r2,83
  818f60:	e0bfff15 	stw	r2,-4(fp)
  818f64:	00002a06 	br	819010 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  818f68:	e13ffb03 	ldbu	r4,-20(fp)
  818f6c:	01438404 	movi	r5,3600
  818f70:	080f9440 	call	80f944 <__mulsi3>
  818f74:	1021883a 	mov	r16,r2
  818f78:	e13ffc03 	ldbu	r4,-16(fp)
  818f7c:	01400f04 	movi	r5,60
  818f80:	080f9440 	call	80f944 <__mulsi3>
  818f84:	8087883a 	add	r3,r16,r2
  818f88:	e0bffd03 	ldbu	r2,-12(fp)
  818f8c:	1889883a 	add	r4,r3,r2
  818f90:	0140fa04 	movi	r5,1000
  818f94:	080f9440 	call	80f944 <__mulsi3>
  818f98:	1021883a 	mov	r16,r2
  818f9c:	e13ffe0b 	ldhu	r4,-8(fp)
  818fa0:	0140fa04 	movi	r5,1000
  818fa4:	080f9440 	call	80f944 <__mulsi3>
  818fa8:	1009883a 	mov	r4,r2
  818fac:	0140fa04 	movi	r5,1000
  818fb0:	080f9340 	call	80f934 <__udivsi3>
  818fb4:	8085883a 	add	r2,r16,r2
  818fb8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  818fbc:	e0bffa17 	ldw	r2,-24(fp)
  818fc0:	1004d43a 	srli	r2,r2,16
  818fc4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  818fc8:	e0bffa17 	ldw	r2,-24(fp)
  818fcc:	10bfffcc 	andi	r2,r2,65535
  818fd0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  818fd4:	e0bffa17 	ldw	r2,-24(fp)
  818fd8:	113fffcc 	andi	r4,r2,65535
  818fdc:	0818d500 	call	818d50 <OSTimeDly>
    while (loops > 0) {
  818fe0:	00000706 	br	819000 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  818fe4:	01200014 	movui	r4,32768
  818fe8:	0818d500 	call	818d50 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  818fec:	01200014 	movui	r4,32768
  818ff0:	0818d500 	call	818d50 <OSTimeDly>
        loops--;
  818ff4:	e0bff90b 	ldhu	r2,-28(fp)
  818ff8:	10bfffc4 	addi	r2,r2,-1
  818ffc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  819000:	e0bff90b 	ldhu	r2,-28(fp)
  819004:	1004c03a 	cmpne	r2,r2,zero
  819008:	103ff61e 	bne	r2,zero,818fe4 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  81900c:	e03fff15 	stw	zero,-4(fp)
  819010:	e0bfff17 	ldw	r2,-4(fp)
}
  819014:	e037883a 	mov	sp,fp
  819018:	dfc00217 	ldw	ra,8(sp)
  81901c:	df000117 	ldw	fp,4(sp)
  819020:	dc000017 	ldw	r16,0(sp)
  819024:	dec00304 	addi	sp,sp,12
  819028:	f800283a 	ret

0081902c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81902c:	defff404 	addi	sp,sp,-48
  819030:	dfc00b15 	stw	ra,44(sp)
  819034:	df000a15 	stw	fp,40(sp)
  819038:	df000a04 	addi	fp,sp,40
  81903c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  819040:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  819044:	e0bffe03 	ldbu	r2,-8(fp)
  819048:	10800530 	cmpltui	r2,r2,20
  81904c:	1000031e 	bne	r2,zero,81905c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  819050:	00800a84 	movi	r2,42
  819054:	e0bfff15 	stw	r2,-4(fp)
  819058:	00007206 	br	819224 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81905c:	0005303a 	rdctl	r2,status
  819060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819064:	e0fffb17 	ldw	r3,-20(fp)
  819068:	00bfff84 	movi	r2,-2
  81906c:	1884703a 	and	r2,r3,r2
  819070:	1001703a 	wrctl	status,r2
  
  return context;
  819074:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  819078:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  81907c:	e0bffe03 	ldbu	r2,-8(fp)
  819080:	00c020f4 	movhi	r3,131
  819084:	18e56304 	addi	r3,r3,-27252
  819088:	1085883a 	add	r2,r2,r2
  81908c:	1085883a 	add	r2,r2,r2
  819090:	10c5883a 	add	r2,r2,r3
  819094:	10800017 	ldw	r2,0(r2)
  819098:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  81909c:	e0bffd17 	ldw	r2,-12(fp)
  8190a0:	1004c03a 	cmpne	r2,r2,zero
  8190a4:	1000071e 	bne	r2,zero,8190c4 <OSTimeDlyResume+0x98>
  8190a8:	e0bffc17 	ldw	r2,-16(fp)
  8190ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8190b0:	e0bffa17 	ldw	r2,-24(fp)
  8190b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8190b8:	008010c4 	movi	r2,67
  8190bc:	e0bfff15 	stw	r2,-4(fp)
  8190c0:	00005806 	br	819224 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8190c4:	e0bffd17 	ldw	r2,-12(fp)
  8190c8:	10800058 	cmpnei	r2,r2,1
  8190cc:	1000071e 	bne	r2,zero,8190ec <OSTimeDlyResume+0xc0>
  8190d0:	e0bffc17 	ldw	r2,-16(fp)
  8190d4:	e0bff915 	stw	r2,-28(fp)
  8190d8:	e0bff917 	ldw	r2,-28(fp)
  8190dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8190e0:	008010c4 	movi	r2,67
  8190e4:	e0bfff15 	stw	r2,-4(fp)
  8190e8:	00004e06 	br	819224 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8190ec:	e0bffd17 	ldw	r2,-12(fp)
  8190f0:	10800b8b 	ldhu	r2,46(r2)
  8190f4:	10bfffcc 	andi	r2,r2,65535
  8190f8:	1004c03a 	cmpne	r2,r2,zero
  8190fc:	1000071e 	bne	r2,zero,81911c <OSTimeDlyResume+0xf0>
  819100:	e0bffc17 	ldw	r2,-16(fp)
  819104:	e0bff815 	stw	r2,-32(fp)
  819108:	e0bff817 	ldw	r2,-32(fp)
  81910c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  819110:	00801404 	movi	r2,80
  819114:	e0bfff15 	stw	r2,-4(fp)
  819118:	00004206 	br	819224 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  81911c:	e0bffd17 	ldw	r2,-12(fp)
  819120:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  819124:	e0bffd17 	ldw	r2,-12(fp)
  819128:	10800c03 	ldbu	r2,48(r2)
  81912c:	10803fcc 	andi	r2,r2,255
  819130:	10800dcc 	andi	r2,r2,55
  819134:	1005003a 	cmpeq	r2,r2,zero
  819138:	10000b1e 	bne	r2,zero,819168 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  81913c:	e0bffd17 	ldw	r2,-12(fp)
  819140:	10c00c03 	ldbu	r3,48(r2)
  819144:	00bff204 	movi	r2,-56
  819148:	1884703a 	and	r2,r3,r2
  81914c:	1007883a 	mov	r3,r2
  819150:	e0bffd17 	ldw	r2,-12(fp)
  819154:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  819158:	e0fffd17 	ldw	r3,-12(fp)
  81915c:	00800044 	movi	r2,1
  819160:	18800c45 	stb	r2,49(r3)
  819164:	00000206 	br	819170 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  819168:	e0bffd17 	ldw	r2,-12(fp)
  81916c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  819170:	e0bffd17 	ldw	r2,-12(fp)
  819174:	10800c03 	ldbu	r2,48(r2)
  819178:	10803fcc 	andi	r2,r2,255
  81917c:	1080020c 	andi	r2,r2,8
  819180:	1004c03a 	cmpne	r2,r2,zero
  819184:	1000221e 	bne	r2,zero,819210 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  819188:	e0bffd17 	ldw	r2,-12(fp)
  81918c:	10c00d83 	ldbu	r3,54(r2)
  819190:	008020b4 	movhi	r2,130
  819194:	10808a04 	addi	r2,r2,552
  819198:	10800003 	ldbu	r2,0(r2)
  81919c:	1884b03a 	or	r2,r3,r2
  8191a0:	1007883a 	mov	r3,r2
  8191a4:	008020b4 	movhi	r2,130
  8191a8:	10808a04 	addi	r2,r2,552
  8191ac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8191b0:	e0bffd17 	ldw	r2,-12(fp)
  8191b4:	10800d03 	ldbu	r2,52(r2)
  8191b8:	11003fcc 	andi	r4,r2,255
  8191bc:	e0bffd17 	ldw	r2,-12(fp)
  8191c0:	10800d03 	ldbu	r2,52(r2)
  8191c4:	10c03fcc 	andi	r3,r2,255
  8191c8:	008020b4 	movhi	r2,130
  8191cc:	10808a44 	addi	r2,r2,553
  8191d0:	10c5883a 	add	r2,r2,r3
  8191d4:	10c00003 	ldbu	r3,0(r2)
  8191d8:	e0bffd17 	ldw	r2,-12(fp)
  8191dc:	10800d43 	ldbu	r2,53(r2)
  8191e0:	1884b03a 	or	r2,r3,r2
  8191e4:	1007883a 	mov	r3,r2
  8191e8:	008020b4 	movhi	r2,130
  8191ec:	10808a44 	addi	r2,r2,553
  8191f0:	1105883a 	add	r2,r2,r4
  8191f4:	10c00005 	stb	r3,0(r2)
  8191f8:	e0bffc17 	ldw	r2,-16(fp)
  8191fc:	e0bff715 	stw	r2,-36(fp)
  819200:	e0bff717 	ldw	r2,-36(fp)
  819204:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  819208:	0812a580 	call	812a58 <OS_Sched>
  81920c:	00000406 	br	819220 <OSTimeDlyResume+0x1f4>
  819210:	e0bffc17 	ldw	r2,-16(fp)
  819214:	e0bff615 	stw	r2,-40(fp)
  819218:	e0bff617 	ldw	r2,-40(fp)
  81921c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  819220:	e03fff15 	stw	zero,-4(fp)
  819224:	e0bfff17 	ldw	r2,-4(fp)
}
  819228:	e037883a 	mov	sp,fp
  81922c:	dfc00117 	ldw	ra,4(sp)
  819230:	df000017 	ldw	fp,0(sp)
  819234:	dec00204 	addi	sp,sp,8
  819238:	f800283a 	ret

0081923c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  81923c:	defffb04 	addi	sp,sp,-20
  819240:	df000415 	stw	fp,16(sp)
  819244:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  819248:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81924c:	0005303a 	rdctl	r2,status
  819250:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819254:	e0fffd17 	ldw	r3,-12(fp)
  819258:	00bfff84 	movi	r2,-2
  81925c:	1884703a 	and	r2,r3,r2
  819260:	1001703a 	wrctl	status,r2
  
  return context;
  819264:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  819268:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  81926c:	008020b4 	movhi	r2,130
  819270:	10808e04 	addi	r2,r2,568
  819274:	10800017 	ldw	r2,0(r2)
  819278:	e0bfff15 	stw	r2,-4(fp)
  81927c:	e0bffe17 	ldw	r2,-8(fp)
  819280:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819284:	e0bffc17 	ldw	r2,-16(fp)
  819288:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  81928c:	e0bfff17 	ldw	r2,-4(fp)
}
  819290:	e037883a 	mov	sp,fp
  819294:	df000017 	ldw	fp,0(sp)
  819298:	dec00104 	addi	sp,sp,4
  81929c:	f800283a 	ret

008192a0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8192a0:	defffb04 	addi	sp,sp,-20
  8192a4:	df000415 	stw	fp,16(sp)
  8192a8:	df000404 	addi	fp,sp,16
  8192ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8192b0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8192b4:	0005303a 	rdctl	r2,status
  8192b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8192bc:	e0fffd17 	ldw	r3,-12(fp)
  8192c0:	00bfff84 	movi	r2,-2
  8192c4:	1884703a 	and	r2,r3,r2
  8192c8:	1001703a 	wrctl	status,r2
  
  return context;
  8192cc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8192d0:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  8192d4:	00c020b4 	movhi	r3,130
  8192d8:	18c08e04 	addi	r3,r3,568
  8192dc:	e0bfff17 	ldw	r2,-4(fp)
  8192e0:	18800015 	stw	r2,0(r3)
  8192e4:	e0bffe17 	ldw	r2,-8(fp)
  8192e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8192ec:	e0bffc17 	ldw	r2,-16(fp)
  8192f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8192f4:	e037883a 	mov	sp,fp
  8192f8:	df000017 	ldw	fp,0(sp)
  8192fc:	dec00104 	addi	sp,sp,4
  819300:	f800283a 	ret

00819304 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  819304:	defffd04 	addi	sp,sp,-12
  819308:	dfc00215 	stw	ra,8(sp)
  81930c:	df000115 	stw	fp,4(sp)
  819310:	df000104 	addi	fp,sp,4
  819314:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  819318:	081b6a40 	call	81b6a4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81931c:	00800044 	movi	r2,1
  819320:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  819324:	e037883a 	mov	sp,fp
  819328:	dfc00117 	ldw	ra,4(sp)
  81932c:	df000017 	ldw	fp,0(sp)
  819330:	dec00204 	addi	sp,sp,8
  819334:	f800283a 	ret

00819338 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  819338:	defffe04 	addi	sp,sp,-8
  81933c:	dfc00115 	stw	ra,4(sp)
  819340:	df000015 	stw	fp,0(sp)
  819344:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  819348:	01004474 	movhi	r4,273
  81934c:	21240004 	addi	r4,r4,-28672
  819350:	000b883a 	mov	r5,zero
  819354:	000d883a 	mov	r6,zero
  819358:	01c0fa04 	movi	r7,1000
  81935c:	081a1bc0 	call	81a1bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  819360:	010020b4 	movhi	r4,130
  819364:	21353804 	addi	r4,r4,-11040
  819368:	000b883a 	mov	r5,zero
  81936c:	01800044 	movi	r6,1
  819370:	08195380 	call	819538 <altera_avalon_jtag_uart_init>
  819374:	010020b4 	movhi	r4,130
  819378:	21352e04 	addi	r4,r4,-11080
  81937c:	08193b80 	call	8193b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  819380:	010020b4 	movhi	r4,130
  819384:	21394904 	addi	r4,r4,-6876
  819388:	081a2f40 	call	81a2f4 <alt_up_character_lcd_init>
  81938c:	010020b4 	movhi	r4,130
  819390:	21394904 	addi	r4,r4,-6876
  819394:	08193b80 	call	8193b8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  819398:	010020b4 	movhi	r4,130
  81939c:	21395404 	addi	r4,r4,-6832
  8193a0:	08193b80 	call	8193b8 <alt_dev_reg>
}
  8193a4:	e037883a 	mov	sp,fp
  8193a8:	dfc00117 	ldw	ra,4(sp)
  8193ac:	df000017 	ldw	fp,0(sp)
  8193b0:	dec00204 	addi	sp,sp,8
  8193b4:	f800283a 	ret

008193b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8193b8:	defffd04 	addi	sp,sp,-12
  8193bc:	dfc00215 	stw	ra,8(sp)
  8193c0:	df000115 	stw	fp,4(sp)
  8193c4:	df000104 	addi	fp,sp,4
  8193c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8193cc:	e13fff17 	ldw	r4,-4(fp)
  8193d0:	014020b4 	movhi	r5,130
  8193d4:	29796804 	addi	r5,r5,-6752
  8193d8:	081ac7c0 	call	81ac7c <alt_dev_llist_insert>
}
  8193dc:	e037883a 	mov	sp,fp
  8193e0:	dfc00117 	ldw	ra,4(sp)
  8193e4:	df000017 	ldw	fp,0(sp)
  8193e8:	dec00204 	addi	sp,sp,8
  8193ec:	f800283a 	ret

008193f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8193f0:	defffa04 	addi	sp,sp,-24
  8193f4:	dfc00515 	stw	ra,20(sp)
  8193f8:	df000415 	stw	fp,16(sp)
  8193fc:	df000404 	addi	fp,sp,16
  819400:	e13ffd15 	stw	r4,-12(fp)
  819404:	e17ffe15 	stw	r5,-8(fp)
  819408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81940c:	e0bffd17 	ldw	r2,-12(fp)
  819410:	10800017 	ldw	r2,0(r2)
  819414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  819418:	e0bffc17 	ldw	r2,-16(fp)
  81941c:	11000a04 	addi	r4,r2,40
  819420:	e0bffd17 	ldw	r2,-12(fp)
  819424:	11c00217 	ldw	r7,8(r2)
  819428:	e17ffe17 	ldw	r5,-8(fp)
  81942c:	e1bfff17 	ldw	r6,-4(fp)
  819430:	0819bac0 	call	819bac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  819434:	e037883a 	mov	sp,fp
  819438:	dfc00117 	ldw	ra,4(sp)
  81943c:	df000017 	ldw	fp,0(sp)
  819440:	dec00204 	addi	sp,sp,8
  819444:	f800283a 	ret

00819448 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  819448:	defffa04 	addi	sp,sp,-24
  81944c:	dfc00515 	stw	ra,20(sp)
  819450:	df000415 	stw	fp,16(sp)
  819454:	df000404 	addi	fp,sp,16
  819458:	e13ffd15 	stw	r4,-12(fp)
  81945c:	e17ffe15 	stw	r5,-8(fp)
  819460:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  819464:	e0bffd17 	ldw	r2,-12(fp)
  819468:	10800017 	ldw	r2,0(r2)
  81946c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  819470:	e0bffc17 	ldw	r2,-16(fp)
  819474:	11000a04 	addi	r4,r2,40
  819478:	e0bffd17 	ldw	r2,-12(fp)
  81947c:	11c00217 	ldw	r7,8(r2)
  819480:	e17ffe17 	ldw	r5,-8(fp)
  819484:	e1bfff17 	ldw	r6,-4(fp)
  819488:	0819e6c0 	call	819e6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81948c:	e037883a 	mov	sp,fp
  819490:	dfc00117 	ldw	ra,4(sp)
  819494:	df000017 	ldw	fp,0(sp)
  819498:	dec00204 	addi	sp,sp,8
  81949c:	f800283a 	ret

008194a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8194a0:	defffc04 	addi	sp,sp,-16
  8194a4:	dfc00315 	stw	ra,12(sp)
  8194a8:	df000215 	stw	fp,8(sp)
  8194ac:	df000204 	addi	fp,sp,8
  8194b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8194b4:	e0bfff17 	ldw	r2,-4(fp)
  8194b8:	10800017 	ldw	r2,0(r2)
  8194bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8194c0:	e0bffe17 	ldw	r2,-8(fp)
  8194c4:	11000a04 	addi	r4,r2,40
  8194c8:	e0bfff17 	ldw	r2,-4(fp)
  8194cc:	11400217 	ldw	r5,8(r2)
  8194d0:	0819a440 	call	819a44 <altera_avalon_jtag_uart_close>
}
  8194d4:	e037883a 	mov	sp,fp
  8194d8:	dfc00117 	ldw	ra,4(sp)
  8194dc:	df000017 	ldw	fp,0(sp)
  8194e0:	dec00204 	addi	sp,sp,8
  8194e4:	f800283a 	ret

008194e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8194e8:	defffa04 	addi	sp,sp,-24
  8194ec:	dfc00515 	stw	ra,20(sp)
  8194f0:	df000415 	stw	fp,16(sp)
  8194f4:	df000404 	addi	fp,sp,16
  8194f8:	e13ffd15 	stw	r4,-12(fp)
  8194fc:	e17ffe15 	stw	r5,-8(fp)
  819500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  819504:	e0bffd17 	ldw	r2,-12(fp)
  819508:	10800017 	ldw	r2,0(r2)
  81950c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  819510:	e0bffc17 	ldw	r2,-16(fp)
  819514:	11000a04 	addi	r4,r2,40
  819518:	e17ffe17 	ldw	r5,-8(fp)
  81951c:	e1bfff17 	ldw	r6,-4(fp)
  819520:	0819ab80 	call	819ab8 <altera_avalon_jtag_uart_ioctl>
}
  819524:	e037883a 	mov	sp,fp
  819528:	dfc00117 	ldw	ra,4(sp)
  81952c:	df000017 	ldw	fp,0(sp)
  819530:	dec00204 	addi	sp,sp,8
  819534:	f800283a 	ret

00819538 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  819538:	defff504 	addi	sp,sp,-44
  81953c:	dfc00a15 	stw	ra,40(sp)
  819540:	df000915 	stw	fp,36(sp)
  819544:	df000904 	addi	fp,sp,36
  819548:	e13ffd15 	stw	r4,-12(fp)
  81954c:	e17ffe15 	stw	r5,-8(fp)
  819550:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  819554:	e0bffd17 	ldw	r2,-12(fp)
  819558:	10800c04 	addi	r2,r2,48
  81955c:	e0bffb15 	stw	r2,-20(fp)
  819560:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  819564:	e13ffc0b 	ldhu	r4,-16(fp)
  819568:	e17ffc84 	addi	r5,fp,-14
  81956c:	08136000 	call	813600 <OSFlagCreate>
  819570:	1007883a 	mov	r3,r2
  819574:	e0bffb17 	ldw	r2,-20(fp)
  819578:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  81957c:	e0bffd17 	ldw	r2,-12(fp)
  819580:	10800a04 	addi	r2,r2,40
  819584:	e0bff915 	stw	r2,-28(fp)
  819588:	00800044 	movi	r2,1
  81958c:	e0bffa0d 	sth	r2,-24(fp)
  819590:	e13ffa0b 	ldhu	r4,-24(fp)
  819594:	08168080 	call	816808 <OSSemCreate>
  819598:	1007883a 	mov	r3,r2
  81959c:	e0bff917 	ldw	r2,-28(fp)
  8195a0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  8195a4:	e0bffd17 	ldw	r2,-12(fp)
  8195a8:	10800b04 	addi	r2,r2,44
  8195ac:	e0bff715 	stw	r2,-36(fp)
  8195b0:	00800044 	movi	r2,1
  8195b4:	e0bff80d 	sth	r2,-32(fp)
  8195b8:	e13ff80b 	ldhu	r4,-32(fp)
  8195bc:	08168080 	call	816808 <OSSemCreate>
  8195c0:	1007883a 	mov	r3,r2
  8195c4:	e0bff717 	ldw	r2,-36(fp)
  8195c8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8195cc:	e0fffd17 	ldw	r3,-12(fp)
  8195d0:	00800044 	movi	r2,1
  8195d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8195d8:	e0bffd17 	ldw	r2,-12(fp)
  8195dc:	10800017 	ldw	r2,0(r2)
  8195e0:	11000104 	addi	r4,r2,4
  8195e4:	e0bffd17 	ldw	r2,-12(fp)
  8195e8:	10800817 	ldw	r2,32(r2)
  8195ec:	1007883a 	mov	r3,r2
  8195f0:	2005883a 	mov	r2,r4
  8195f4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8195f8:	e13fff17 	ldw	r4,-4(fp)
  8195fc:	e17ffd17 	ldw	r5,-12(fp)
  819600:	018020b4 	movhi	r6,130
  819604:	31a59a04 	addi	r6,r6,-27032
  819608:	081b0580 	call	81b058 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81960c:	e0bffd17 	ldw	r2,-12(fp)
  819610:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  819614:	e0bffd17 	ldw	r2,-12(fp)
  819618:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81961c:	008020b4 	movhi	r2,130
  819620:	10809304 	addi	r2,r2,588
  819624:	10800017 	ldw	r2,0(r2)
  819628:	100b883a 	mov	r5,r2
  81962c:	018020b4 	movhi	r6,130
  819630:	31a64c04 	addi	r6,r6,-26320
  819634:	e1fffd17 	ldw	r7,-12(fp)
  819638:	081ab0c0 	call	81ab0c <alt_alarm_start>
  81963c:	1004403a 	cmpge	r2,r2,zero
  819640:	1000041e 	bne	r2,zero,819654 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  819644:	e0fffd17 	ldw	r3,-12(fp)
  819648:	00a00034 	movhi	r2,32768
  81964c:	10bfffc4 	addi	r2,r2,-1
  819650:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  819654:	e037883a 	mov	sp,fp
  819658:	dfc00117 	ldw	ra,4(sp)
  81965c:	df000017 	ldw	fp,0(sp)
  819660:	dec00204 	addi	sp,sp,8
  819664:	f800283a 	ret

00819668 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  819668:	defff104 	addi	sp,sp,-60
  81966c:	dfc00e15 	stw	ra,56(sp)
  819670:	df000d15 	stw	fp,52(sp)
  819674:	df000d04 	addi	fp,sp,52
  819678:	e13ffe15 	stw	r4,-8(fp)
  81967c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  819680:	e0bffe17 	ldw	r2,-8(fp)
  819684:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  819688:	e0bffc17 	ldw	r2,-16(fp)
  81968c:	10800017 	ldw	r2,0(r2)
  819690:	e0bffb15 	stw	r2,-20(fp)
  819694:	00000006 	br	819698 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  819698:	e0bffb17 	ldw	r2,-20(fp)
  81969c:	10800104 	addi	r2,r2,4
  8196a0:	10800037 	ldwio	r2,0(r2)
  8196a4:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8196a8:	e0bffa17 	ldw	r2,-24(fp)
  8196ac:	1080c00c 	andi	r2,r2,768
  8196b0:	1005003a 	cmpeq	r2,r2,zero
  8196b4:	1000991e 	bne	r2,zero,81991c <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8196b8:	e0bffa17 	ldw	r2,-24(fp)
  8196bc:	1080400c 	andi	r2,r2,256
  8196c0:	1005003a 	cmpeq	r2,r2,zero
  8196c4:	1000481e 	bne	r2,zero,8197e8 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8196c8:	00800074 	movhi	r2,1
  8196cc:	e0bff915 	stw	r2,-28(fp)
  8196d0:	00000006 	br	8196d4 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8196d4:	e0bffc17 	ldw	r2,-16(fp)
  8196d8:	10800d17 	ldw	r2,52(r2)
  8196dc:	10800044 	addi	r2,r2,1
  8196e0:	1081ffcc 	andi	r2,r2,2047
  8196e4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  8196e8:	e0bffc17 	ldw	r2,-16(fp)
  8196ec:	10c00e17 	ldw	r3,56(r2)
  8196f0:	e0bff817 	ldw	r2,-32(fp)
  8196f4:	18802826 	beq	r3,r2,819798 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8196f8:	e0bffb17 	ldw	r2,-20(fp)
  8196fc:	10800037 	ldwio	r2,0(r2)
  819700:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  819704:	e0bff917 	ldw	r2,-28(fp)
  819708:	10a0000c 	andi	r2,r2,32768
  81970c:	1005003a 	cmpeq	r2,r2,zero
  819710:	1000211e 	bne	r2,zero,819798 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  819714:	e0bffc17 	ldw	r2,-16(fp)
  819718:	10c00d17 	ldw	r3,52(r2)
  81971c:	e0bff917 	ldw	r2,-28(fp)
  819720:	1009883a 	mov	r4,r2
  819724:	e0bffc17 	ldw	r2,-16(fp)
  819728:	1885883a 	add	r2,r3,r2
  81972c:	10801104 	addi	r2,r2,68
  819730:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819734:	e0bffc17 	ldw	r2,-16(fp)
  819738:	10800d17 	ldw	r2,52(r2)
  81973c:	10800044 	addi	r2,r2,1
  819740:	10c1ffcc 	andi	r3,r2,2047
  819744:	e0bffc17 	ldw	r2,-16(fp)
  819748:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81974c:	e0bffc17 	ldw	r2,-16(fp)
  819750:	10800c17 	ldw	r2,48(r2)
  819754:	e0bff515 	stw	r2,-44(fp)
  819758:	00800044 	movi	r2,1
  81975c:	e0bff60d 	sth	r2,-40(fp)
  819760:	00800044 	movi	r2,1
  819764:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819768:	008020b4 	movhi	r2,130
  81976c:	10807e44 	addi	r2,r2,505
  819770:	10800003 	ldbu	r2,0(r2)
  819774:	10803fcc 	andi	r2,r2,255
  819778:	1005003a 	cmpeq	r2,r2,zero
  81977c:	103fd51e 	bne	r2,zero,8196d4 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  819780:	e17ff60b 	ldhu	r5,-40(fp)
  819784:	e1bff683 	ldbu	r6,-38(fp)
  819788:	e1fffd04 	addi	r7,fp,-12
  81978c:	e13ff517 	ldw	r4,-44(fp)
  819790:	08143280 	call	814328 <OSFlagPost>
    return err;
  819794:	003fcf06 	br	8196d4 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  819798:	e0bff917 	ldw	r2,-28(fp)
  81979c:	10bfffec 	andhi	r2,r2,65535
  8197a0:	1005003a 	cmpeq	r2,r2,zero
  8197a4:	1000101e 	bne	r2,zero,8197e8 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8197a8:	e0bffc17 	ldw	r2,-16(fp)
  8197ac:	10c00817 	ldw	r3,32(r2)
  8197b0:	00bfff84 	movi	r2,-2
  8197b4:	1886703a 	and	r3,r3,r2
  8197b8:	e0bffc17 	ldw	r2,-16(fp)
  8197bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8197c0:	e0bffb17 	ldw	r2,-20(fp)
  8197c4:	11000104 	addi	r4,r2,4
  8197c8:	e0bffc17 	ldw	r2,-16(fp)
  8197cc:	10800817 	ldw	r2,32(r2)
  8197d0:	1007883a 	mov	r3,r2
  8197d4:	2005883a 	mov	r2,r4
  8197d8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8197dc:	e0bffb17 	ldw	r2,-20(fp)
  8197e0:	10800104 	addi	r2,r2,4
  8197e4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8197e8:	e0bffa17 	ldw	r2,-24(fp)
  8197ec:	1080800c 	andi	r2,r2,512
  8197f0:	1005003a 	cmpeq	r2,r2,zero
  8197f4:	103fa81e 	bne	r2,zero,819698 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8197f8:	e0bffa17 	ldw	r2,-24(fp)
  8197fc:	10bfffec 	andhi	r2,r2,65535
  819800:	1004d43a 	srli	r2,r2,16
  819804:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  819808:	00002706 	br	8198a8 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81980c:	e13ffb17 	ldw	r4,-20(fp)
  819810:	e0bffc17 	ldw	r2,-16(fp)
  819814:	10c01017 	ldw	r3,64(r2)
  819818:	e0bffc17 	ldw	r2,-16(fp)
  81981c:	1885883a 	add	r2,r3,r2
  819820:	10821104 	addi	r2,r2,2116
  819824:	10800003 	ldbu	r2,0(r2)
  819828:	10c03fcc 	andi	r3,r2,255
  81982c:	18c0201c 	xori	r3,r3,128
  819830:	18ffe004 	addi	r3,r3,-128
  819834:	2005883a 	mov	r2,r4
  819838:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81983c:	e0bffc17 	ldw	r2,-16(fp)
  819840:	10801017 	ldw	r2,64(r2)
  819844:	10800044 	addi	r2,r2,1
  819848:	10c1ffcc 	andi	r3,r2,2047
  81984c:	e0bffc17 	ldw	r2,-16(fp)
  819850:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  819854:	e0bffc17 	ldw	r2,-16(fp)
  819858:	10800c17 	ldw	r2,48(r2)
  81985c:	e0bff315 	stw	r2,-52(fp)
  819860:	00800084 	movi	r2,2
  819864:	e0bff40d 	sth	r2,-48(fp)
  819868:	00800044 	movi	r2,1
  81986c:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  819870:	008020b4 	movhi	r2,130
  819874:	10807e44 	addi	r2,r2,505
  819878:	10800003 	ldbu	r2,0(r2)
  81987c:	10803fcc 	andi	r2,r2,255
  819880:	1005003a 	cmpeq	r2,r2,zero
  819884:	1000051e 	bne	r2,zero,81989c <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  819888:	e17ff40b 	ldhu	r5,-48(fp)
  81988c:	e1bff483 	ldbu	r6,-46(fp)
  819890:	e1fffd44 	addi	r7,fp,-11
  819894:	e13ff317 	ldw	r4,-52(fp)
  819898:	08143280 	call	814328 <OSFlagPost>

        space--;
  81989c:	e0bff717 	ldw	r2,-36(fp)
  8198a0:	10bfffc4 	addi	r2,r2,-1
  8198a4:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8198a8:	e0bff717 	ldw	r2,-36(fp)
  8198ac:	1005003a 	cmpeq	r2,r2,zero
  8198b0:	1000051e 	bne	r2,zero,8198c8 <altera_avalon_jtag_uart_irq+0x260>
  8198b4:	e0bffc17 	ldw	r2,-16(fp)
  8198b8:	10c01017 	ldw	r3,64(r2)
  8198bc:	e0bffc17 	ldw	r2,-16(fp)
  8198c0:	10800f17 	ldw	r2,60(r2)
  8198c4:	18bfd11e 	bne	r3,r2,81980c <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8198c8:	e0bff717 	ldw	r2,-36(fp)
  8198cc:	1005003a 	cmpeq	r2,r2,zero
  8198d0:	103f711e 	bne	r2,zero,819698 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8198d4:	e0bffc17 	ldw	r2,-16(fp)
  8198d8:	10c00817 	ldw	r3,32(r2)
  8198dc:	00bfff44 	movi	r2,-3
  8198e0:	1886703a 	and	r3,r3,r2
  8198e4:	e0bffc17 	ldw	r2,-16(fp)
  8198e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8198ec:	e0bffc17 	ldw	r2,-16(fp)
  8198f0:	10800017 	ldw	r2,0(r2)
  8198f4:	11000104 	addi	r4,r2,4
  8198f8:	e0bffc17 	ldw	r2,-16(fp)
  8198fc:	10800817 	ldw	r2,32(r2)
  819900:	1007883a 	mov	r3,r2
  819904:	2005883a 	mov	r2,r4
  819908:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81990c:	e0bffb17 	ldw	r2,-20(fp)
  819910:	10800104 	addi	r2,r2,4
  819914:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  819918:	003f5f06 	br	819698 <altera_avalon_jtag_uart_irq+0x30>
}
  81991c:	e037883a 	mov	sp,fp
  819920:	dfc00117 	ldw	ra,4(sp)
  819924:	df000017 	ldw	fp,0(sp)
  819928:	dec00204 	addi	sp,sp,8
  81992c:	f800283a 	ret

00819930 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  819930:	defff804 	addi	sp,sp,-32
  819934:	dfc00715 	stw	ra,28(sp)
  819938:	df000615 	stw	fp,24(sp)
  81993c:	df000604 	addi	fp,sp,24
  819940:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  819944:	e0bfff17 	ldw	r2,-4(fp)
  819948:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81994c:	e0bffd17 	ldw	r2,-12(fp)
  819950:	10800017 	ldw	r2,0(r2)
  819954:	10800104 	addi	r2,r2,4
  819958:	10800037 	ldwio	r2,0(r2)
  81995c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  819960:	e0bffc17 	ldw	r2,-16(fp)
  819964:	1081000c 	andi	r2,r2,1024
  819968:	1005003a 	cmpeq	r2,r2,zero
  81996c:	10000c1e 	bne	r2,zero,8199a0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  819970:	e0bffd17 	ldw	r2,-12(fp)
  819974:	10800017 	ldw	r2,0(r2)
  819978:	11000104 	addi	r4,r2,4
  81997c:	e0bffd17 	ldw	r2,-12(fp)
  819980:	10800817 	ldw	r2,32(r2)
  819984:	10810014 	ori	r2,r2,1024
  819988:	1007883a 	mov	r3,r2
  81998c:	2005883a 	mov	r2,r4
  819990:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  819994:	e0bffd17 	ldw	r2,-12(fp)
  819998:	10000915 	stw	zero,36(r2)
  81999c:	00002106 	br	819a24 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8199a0:	e0bffd17 	ldw	r2,-12(fp)
  8199a4:	10c00917 	ldw	r3,36(r2)
  8199a8:	00a00034 	movhi	r2,32768
  8199ac:	10bfff04 	addi	r2,r2,-4
  8199b0:	10c01c36 	bltu	r2,r3,819a24 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  8199b4:	e0bffd17 	ldw	r2,-12(fp)
  8199b8:	10800917 	ldw	r2,36(r2)
  8199bc:	10c00044 	addi	r3,r2,1
  8199c0:	e0bffd17 	ldw	r2,-12(fp)
  8199c4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8199c8:	e0bffd17 	ldw	r2,-12(fp)
  8199cc:	10c00917 	ldw	r3,36(r2)
  8199d0:	e0bffd17 	ldw	r2,-12(fp)
  8199d4:	10800117 	ldw	r2,4(r2)
  8199d8:	18801236 	bltu	r3,r2,819a24 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  8199dc:	e0bffd17 	ldw	r2,-12(fp)
  8199e0:	10800c17 	ldw	r2,48(r2)
  8199e4:	e0bffa15 	stw	r2,-24(fp)
  8199e8:	00800104 	movi	r2,4
  8199ec:	e0bffb0d 	sth	r2,-20(fp)
  8199f0:	00800044 	movi	r2,1
  8199f4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8199f8:	008020b4 	movhi	r2,130
  8199fc:	10807e44 	addi	r2,r2,505
  819a00:	10800003 	ldbu	r2,0(r2)
  819a04:	10803fcc 	andi	r2,r2,255
  819a08:	1005003a 	cmpeq	r2,r2,zero
  819a0c:	1000051e 	bne	r2,zero,819a24 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  819a10:	e17ffb0b 	ldhu	r5,-20(fp)
  819a14:	e1bffb83 	ldbu	r6,-18(fp)
  819a18:	e1fffe04 	addi	r7,fp,-8
  819a1c:	e13ffa17 	ldw	r4,-24(fp)
  819a20:	08143280 	call	814328 <OSFlagPost>
  819a24:	008020b4 	movhi	r2,130
  819a28:	10809304 	addi	r2,r2,588
  819a2c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  819a30:	e037883a 	mov	sp,fp
  819a34:	dfc00117 	ldw	ra,4(sp)
  819a38:	df000017 	ldw	fp,0(sp)
  819a3c:	dec00204 	addi	sp,sp,8
  819a40:	f800283a 	ret

00819a44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  819a44:	defffc04 	addi	sp,sp,-16
  819a48:	df000315 	stw	fp,12(sp)
  819a4c:	df000304 	addi	fp,sp,12
  819a50:	e13ffd15 	stw	r4,-12(fp)
  819a54:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  819a58:	00000706 	br	819a78 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  819a5c:	e0bffe17 	ldw	r2,-8(fp)
  819a60:	1090000c 	andi	r2,r2,16384
  819a64:	1005003a 	cmpeq	r2,r2,zero
  819a68:	1000031e 	bne	r2,zero,819a78 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  819a6c:	00bffd44 	movi	r2,-11
  819a70:	e0bfff15 	stw	r2,-4(fp)
  819a74:	00000b06 	br	819aa4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  819a78:	e0bffd17 	ldw	r2,-12(fp)
  819a7c:	10c01017 	ldw	r3,64(r2)
  819a80:	e0bffd17 	ldw	r2,-12(fp)
  819a84:	10800f17 	ldw	r2,60(r2)
  819a88:	18800526 	beq	r3,r2,819aa0 <altera_avalon_jtag_uart_close+0x5c>
  819a8c:	e0bffd17 	ldw	r2,-12(fp)
  819a90:	10c00917 	ldw	r3,36(r2)
  819a94:	e0bffd17 	ldw	r2,-12(fp)
  819a98:	10800117 	ldw	r2,4(r2)
  819a9c:	18bfef36 	bltu	r3,r2,819a5c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  819aa0:	e03fff15 	stw	zero,-4(fp)
  819aa4:	e0bfff17 	ldw	r2,-4(fp)
}
  819aa8:	e037883a 	mov	sp,fp
  819aac:	df000017 	ldw	fp,0(sp)
  819ab0:	dec00104 	addi	sp,sp,4
  819ab4:	f800283a 	ret

00819ab8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  819ab8:	defff804 	addi	sp,sp,-32
  819abc:	df000715 	stw	fp,28(sp)
  819ac0:	df000704 	addi	fp,sp,28
  819ac4:	e13ffb15 	stw	r4,-20(fp)
  819ac8:	e17ffc15 	stw	r5,-16(fp)
  819acc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  819ad0:	00bff9c4 	movi	r2,-25
  819ad4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  819ad8:	e0bffc17 	ldw	r2,-16(fp)
  819adc:	e0bfff15 	stw	r2,-4(fp)
  819ae0:	e0ffff17 	ldw	r3,-4(fp)
  819ae4:	189a8060 	cmpeqi	r2,r3,27137
  819ae8:	1000041e 	bne	r2,zero,819afc <altera_avalon_jtag_uart_ioctl+0x44>
  819aec:	e0ffff17 	ldw	r3,-4(fp)
  819af0:	189a80a0 	cmpeqi	r2,r3,27138
  819af4:	10001b1e 	bne	r2,zero,819b64 <altera_avalon_jtag_uart_ioctl+0xac>
  819af8:	00002706 	br	819b98 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  819afc:	e0bffb17 	ldw	r2,-20(fp)
  819b00:	10c00117 	ldw	r3,4(r2)
  819b04:	00a00034 	movhi	r2,32768
  819b08:	10bfffc4 	addi	r2,r2,-1
  819b0c:	18802226 	beq	r3,r2,819b98 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  819b10:	e0bffd17 	ldw	r2,-12(fp)
  819b14:	10800017 	ldw	r2,0(r2)
  819b18:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  819b1c:	e0bff917 	ldw	r2,-28(fp)
  819b20:	10800090 	cmplti	r2,r2,2
  819b24:	1000071e 	bne	r2,zero,819b44 <altera_avalon_jtag_uart_ioctl+0x8c>
  819b28:	e0fff917 	ldw	r3,-28(fp)
  819b2c:	00a00034 	movhi	r2,32768
  819b30:	10bfffc4 	addi	r2,r2,-1
  819b34:	18800326 	beq	r3,r2,819b44 <altera_avalon_jtag_uart_ioctl+0x8c>
  819b38:	e0bff917 	ldw	r2,-28(fp)
  819b3c:	e0bffe15 	stw	r2,-8(fp)
  819b40:	00000306 	br	819b50 <altera_avalon_jtag_uart_ioctl+0x98>
  819b44:	00e00034 	movhi	r3,32768
  819b48:	18ffff84 	addi	r3,r3,-2
  819b4c:	e0fffe15 	stw	r3,-8(fp)
  819b50:	e0bffb17 	ldw	r2,-20(fp)
  819b54:	e0fffe17 	ldw	r3,-8(fp)
  819b58:	10c00115 	stw	r3,4(r2)
      rc = 0;
  819b5c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  819b60:	00000d06 	br	819b98 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  819b64:	e0bffb17 	ldw	r2,-20(fp)
  819b68:	10c00117 	ldw	r3,4(r2)
  819b6c:	00a00034 	movhi	r2,32768
  819b70:	10bfffc4 	addi	r2,r2,-1
  819b74:	18800826 	beq	r3,r2,819b98 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  819b78:	e13ffd17 	ldw	r4,-12(fp)
  819b7c:	e0bffb17 	ldw	r2,-20(fp)
  819b80:	10c00917 	ldw	r3,36(r2)
  819b84:	e0bffb17 	ldw	r2,-20(fp)
  819b88:	10800117 	ldw	r2,4(r2)
  819b8c:	1885803a 	cmpltu	r2,r3,r2
  819b90:	20800015 	stw	r2,0(r4)
      rc = 0;
  819b94:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  819b98:	e0bffa17 	ldw	r2,-24(fp)
}
  819b9c:	e037883a 	mov	sp,fp
  819ba0:	df000017 	ldw	fp,0(sp)
  819ba4:	dec00104 	addi	sp,sp,4
  819ba8:	f800283a 	ret

00819bac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  819bac:	deffeb04 	addi	sp,sp,-84
  819bb0:	dfc01415 	stw	ra,80(sp)
  819bb4:	df001315 	stw	fp,76(sp)
  819bb8:	df001304 	addi	fp,sp,76
  819bbc:	e13ffb15 	stw	r4,-20(fp)
  819bc0:	e17ffc15 	stw	r5,-16(fp)
  819bc4:	e1bffd15 	stw	r6,-12(fp)
  819bc8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  819bcc:	e0bffc17 	ldw	r2,-16(fp)
  819bd0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  819bd4:	e0bffb17 	ldw	r2,-20(fp)
  819bd8:	10800a17 	ldw	r2,40(r2)
  819bdc:	e0bff315 	stw	r2,-52(fp)
  819be0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  819be4:	e17ff40b 	ldhu	r5,-48(fp)
  819be8:	e1bffa44 	addi	r6,fp,-23
  819bec:	e13ff317 	ldw	r4,-52(fp)
  819bf0:	0816bbc0 	call	816bbc <OSSemPend>

  while (space > 0)
  819bf4:	00006406 	br	819d88 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  819bf8:	e0bffb17 	ldw	r2,-20(fp)
  819bfc:	10800d17 	ldw	r2,52(r2)
  819c00:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  819c04:	e0bffb17 	ldw	r2,-20(fp)
  819c08:	10800e17 	ldw	r2,56(r2)
  819c0c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  819c10:	e0fff617 	ldw	r3,-40(fp)
  819c14:	e0bff517 	ldw	r2,-44(fp)
  819c18:	18800536 	bltu	r3,r2,819c30 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  819c1c:	e0bff617 	ldw	r2,-40(fp)
  819c20:	e0fff517 	ldw	r3,-44(fp)
  819c24:	10c5c83a 	sub	r2,r2,r3
  819c28:	e0bff715 	stw	r2,-36(fp)
  819c2c:	00000406 	br	819c40 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  819c30:	00820004 	movi	r2,2048
  819c34:	e0fff517 	ldw	r3,-44(fp)
  819c38:	10c5c83a 	sub	r2,r2,r3
  819c3c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  819c40:	e0bff717 	ldw	r2,-36(fp)
  819c44:	1005003a 	cmpeq	r2,r2,zero
  819c48:	10001f1e 	bne	r2,zero,819cc8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  819c4c:	e0fffd17 	ldw	r3,-12(fp)
  819c50:	e0bff717 	ldw	r2,-36(fp)
  819c54:	1880022e 	bgeu	r3,r2,819c60 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  819c58:	e0bffd17 	ldw	r2,-12(fp)
  819c5c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  819c60:	e0bffb17 	ldw	r2,-20(fp)
  819c64:	10c01104 	addi	r3,r2,68
  819c68:	e0bff517 	ldw	r2,-44(fp)
  819c6c:	1887883a 	add	r3,r3,r2
  819c70:	e0bff917 	ldw	r2,-28(fp)
  819c74:	1009883a 	mov	r4,r2
  819c78:	180b883a 	mov	r5,r3
  819c7c:	e1bff717 	ldw	r6,-36(fp)
  819c80:	0807fa80 	call	807fa8 <memcpy>
      ptr   += n;
  819c84:	e0fff717 	ldw	r3,-36(fp)
  819c88:	e0bff917 	ldw	r2,-28(fp)
  819c8c:	10c5883a 	add	r2,r2,r3
  819c90:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  819c94:	e0fffd17 	ldw	r3,-12(fp)
  819c98:	e0bff717 	ldw	r2,-36(fp)
  819c9c:	1885c83a 	sub	r2,r3,r2
  819ca0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819ca4:	e0fff517 	ldw	r3,-44(fp)
  819ca8:	e0bff717 	ldw	r2,-36(fp)
  819cac:	1885883a 	add	r2,r3,r2
  819cb0:	10c1ffcc 	andi	r3,r2,2047
  819cb4:	e0bffb17 	ldw	r2,-20(fp)
  819cb8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  819cbc:	e0bffd17 	ldw	r2,-12(fp)
  819cc0:	10800048 	cmpgei	r2,r2,1
  819cc4:	103fcc1e 	bne	r2,zero,819bf8 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  819cc8:	e0fff917 	ldw	r3,-28(fp)
  819ccc:	e0bffc17 	ldw	r2,-16(fp)
  819cd0:	1880301e 	bne	r3,r2,819d94 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  819cd4:	e0bffe17 	ldw	r2,-8(fp)
  819cd8:	1090000c 	andi	r2,r2,16384
  819cdc:	1004c03a 	cmpne	r2,r2,zero
  819ce0:	10002c1e 	bne	r2,zero,819d94 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  819ce4:	008020b4 	movhi	r2,130
  819ce8:	10807e44 	addi	r2,r2,505
  819cec:	10800003 	ldbu	r2,0(r2)
  819cf0:	10803fcc 	andi	r2,r2,255
  819cf4:	10800058 	cmpnei	r2,r2,1
  819cf8:	1000161e 	bne	r2,zero,819d54 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  819cfc:	e0bffb17 	ldw	r2,-20(fp)
  819d00:	10800c17 	ldw	r2,48(r2)
  819d04:	e0bff015 	stw	r2,-64(fp)
  819d08:	00800144 	movi	r2,5
  819d0c:	e0bff10d 	sth	r2,-60(fp)
  819d10:	00bfe0c4 	movi	r2,-125
  819d14:	e0bff185 	stb	r2,-58(fp)
  819d18:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  819d1c:	008020b4 	movhi	r2,130
  819d20:	10807e44 	addi	r2,r2,505
  819d24:	10800003 	ldbu	r2,0(r2)
  819d28:	10803fcc 	andi	r2,r2,255
  819d2c:	1005003a 	cmpeq	r2,r2,zero
  819d30:	1000111e 	bne	r2,zero,819d78 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  819d34:	e17ff10b 	ldhu	r5,-60(fp)
  819d38:	e1bff183 	ldbu	r6,-58(fp)
  819d3c:	e1fff20b 	ldhu	r7,-56(fp)
  819d40:	e0bffa04 	addi	r2,fp,-24
  819d44:	d8800015 	stw	r2,0(sp)
  819d48:	e13ff017 	ldw	r4,-64(fp)
  819d4c:	0813c7c0 	call	813c7c <OSFlagPend>
    return err;
  819d50:	00000906 	br	819d78 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  819d54:	e0bffb17 	ldw	r2,-20(fp)
  819d58:	10c00d17 	ldw	r3,52(r2)
  819d5c:	e0bff617 	ldw	r2,-40(fp)
  819d60:	1880051e 	bne	r3,r2,819d78 <altera_avalon_jtag_uart_read+0x1cc>
  819d64:	e0bffb17 	ldw	r2,-20(fp)
  819d68:	10c00917 	ldw	r3,36(r2)
  819d6c:	e0bffb17 	ldw	r2,-20(fp)
  819d70:	10800117 	ldw	r2,4(r2)
  819d74:	18bff736 	bltu	r3,r2,819d54 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  819d78:	e0bffb17 	ldw	r2,-20(fp)
  819d7c:	10c00d17 	ldw	r3,52(r2)
  819d80:	e0bff617 	ldw	r2,-40(fp)
  819d84:	18800326 	beq	r3,r2,819d94 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  819d88:	e0bffd17 	ldw	r2,-12(fp)
  819d8c:	10800048 	cmpgei	r2,r2,1
  819d90:	103f991e 	bne	r2,zero,819bf8 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  819d94:	e0bffb17 	ldw	r2,-20(fp)
  819d98:	11000a17 	ldw	r4,40(r2)
  819d9c:	0816fb40 	call	816fb4 <OSSemPost>

  if (ptr != buffer)
  819da0:	e0fff917 	ldw	r3,-28(fp)
  819da4:	e0bffc17 	ldw	r2,-16(fp)
  819da8:	18801926 	beq	r3,r2,819e10 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819dac:	0005303a 	rdctl	r2,status
  819db0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819db4:	e0ffef17 	ldw	r3,-68(fp)
  819db8:	00bfff84 	movi	r2,-2
  819dbc:	1884703a 	and	r2,r3,r2
  819dc0:	1001703a 	wrctl	status,r2
  
  return context;
  819dc4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  819dc8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  819dcc:	e0bffb17 	ldw	r2,-20(fp)
  819dd0:	10800817 	ldw	r2,32(r2)
  819dd4:	10c00054 	ori	r3,r2,1
  819dd8:	e0bffb17 	ldw	r2,-20(fp)
  819ddc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819de0:	e0bffb17 	ldw	r2,-20(fp)
  819de4:	10800017 	ldw	r2,0(r2)
  819de8:	11000104 	addi	r4,r2,4
  819dec:	e0bffb17 	ldw	r2,-20(fp)
  819df0:	10800817 	ldw	r2,32(r2)
  819df4:	1007883a 	mov	r3,r2
  819df8:	2005883a 	mov	r2,r4
  819dfc:	10c00035 	stwio	r3,0(r2)
  819e00:	e0bff817 	ldw	r2,-32(fp)
  819e04:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819e08:	e0bfee17 	ldw	r2,-72(fp)
  819e0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  819e10:	e0fff917 	ldw	r3,-28(fp)
  819e14:	e0bffc17 	ldw	r2,-16(fp)
  819e18:	18800526 	beq	r3,r2,819e30 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  819e1c:	e0fff917 	ldw	r3,-28(fp)
  819e20:	e0bffc17 	ldw	r2,-16(fp)
  819e24:	1887c83a 	sub	r3,r3,r2
  819e28:	e0ffff15 	stw	r3,-4(fp)
  819e2c:	00000906 	br	819e54 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  819e30:	e0bffe17 	ldw	r2,-8(fp)
  819e34:	1090000c 	andi	r2,r2,16384
  819e38:	1005003a 	cmpeq	r2,r2,zero
  819e3c:	1000031e 	bne	r2,zero,819e4c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  819e40:	00bffd44 	movi	r2,-11
  819e44:	e0bfff15 	stw	r2,-4(fp)
  819e48:	00000206 	br	819e54 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  819e4c:	00bffec4 	movi	r2,-5
  819e50:	e0bfff15 	stw	r2,-4(fp)
  819e54:	e0bfff17 	ldw	r2,-4(fp)
}
  819e58:	e037883a 	mov	sp,fp
  819e5c:	dfc00117 	ldw	ra,4(sp)
  819e60:	df000017 	ldw	fp,0(sp)
  819e64:	dec00204 	addi	sp,sp,8
  819e68:	f800283a 	ret

00819e6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  819e6c:	deffeb04 	addi	sp,sp,-84
  819e70:	dfc01415 	stw	ra,80(sp)
  819e74:	df001315 	stw	fp,76(sp)
  819e78:	df001304 	addi	fp,sp,76
  819e7c:	e13ffb15 	stw	r4,-20(fp)
  819e80:	e17ffc15 	stw	r5,-16(fp)
  819e84:	e1bffd15 	stw	r6,-12(fp)
  819e88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  819e8c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  819e90:	e0bffc17 	ldw	r2,-16(fp)
  819e94:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  819e98:	e0bffb17 	ldw	r2,-20(fp)
  819e9c:	10800b17 	ldw	r2,44(r2)
  819ea0:	e0bff315 	stw	r2,-52(fp)
  819ea4:	e03ff40d 	sth	zero,-48(fp)
  819ea8:	e17ff40b 	ldhu	r5,-48(fp)
  819eac:	e1bffa04 	addi	r6,fp,-24
  819eb0:	e13ff317 	ldw	r4,-52(fp)
  819eb4:	0816bbc0 	call	816bbc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819eb8:	00003a06 	br	819fa4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  819ebc:	e0bffb17 	ldw	r2,-20(fp)
  819ec0:	10800f17 	ldw	r2,60(r2)
  819ec4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  819ec8:	e0bffb17 	ldw	r2,-20(fp)
  819ecc:	10801017 	ldw	r2,64(r2)
  819ed0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  819ed4:	e0fff917 	ldw	r3,-28(fp)
  819ed8:	e0bff817 	ldw	r2,-32(fp)
  819edc:	1880062e 	bgeu	r3,r2,819ef8 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  819ee0:	e0fff817 	ldw	r3,-32(fp)
  819ee4:	e0bff917 	ldw	r2,-28(fp)
  819ee8:	1885c83a 	sub	r2,r3,r2
  819eec:	10bfffc4 	addi	r2,r2,-1
  819ef0:	e0bff715 	stw	r2,-36(fp)
  819ef4:	00000c06 	br	819f28 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  819ef8:	e0bff817 	ldw	r2,-32(fp)
  819efc:	1005003a 	cmpeq	r2,r2,zero
  819f00:	1000051e 	bne	r2,zero,819f18 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  819f04:	00820004 	movi	r2,2048
  819f08:	e0fff917 	ldw	r3,-28(fp)
  819f0c:	10c5c83a 	sub	r2,r2,r3
  819f10:	e0bff715 	stw	r2,-36(fp)
  819f14:	00000406 	br	819f28 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  819f18:	0081ffc4 	movi	r2,2047
  819f1c:	e0fff917 	ldw	r3,-28(fp)
  819f20:	10c5c83a 	sub	r2,r2,r3
  819f24:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  819f28:	e0bff717 	ldw	r2,-36(fp)
  819f2c:	1005003a 	cmpeq	r2,r2,zero
  819f30:	10001f1e 	bne	r2,zero,819fb0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  819f34:	e0fffd17 	ldw	r3,-12(fp)
  819f38:	e0bff717 	ldw	r2,-36(fp)
  819f3c:	1880022e 	bgeu	r3,r2,819f48 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  819f40:	e0bffd17 	ldw	r2,-12(fp)
  819f44:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  819f48:	e0bffb17 	ldw	r2,-20(fp)
  819f4c:	10c21104 	addi	r3,r2,2116
  819f50:	e0bff917 	ldw	r2,-28(fp)
  819f54:	1885883a 	add	r2,r3,r2
  819f58:	e0fffc17 	ldw	r3,-16(fp)
  819f5c:	1009883a 	mov	r4,r2
  819f60:	180b883a 	mov	r5,r3
  819f64:	e1bff717 	ldw	r6,-36(fp)
  819f68:	0807fa80 	call	807fa8 <memcpy>
      ptr   += n;
  819f6c:	e0fff717 	ldw	r3,-36(fp)
  819f70:	e0bffc17 	ldw	r2,-16(fp)
  819f74:	10c5883a 	add	r2,r2,r3
  819f78:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  819f7c:	e0fffd17 	ldw	r3,-12(fp)
  819f80:	e0bff717 	ldw	r2,-36(fp)
  819f84:	1885c83a 	sub	r2,r3,r2
  819f88:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819f8c:	e0fff917 	ldw	r3,-28(fp)
  819f90:	e0bff717 	ldw	r2,-36(fp)
  819f94:	1885883a 	add	r2,r3,r2
  819f98:	10c1ffcc 	andi	r3,r2,2047
  819f9c:	e0bffb17 	ldw	r2,-20(fp)
  819fa0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819fa4:	e0bffd17 	ldw	r2,-12(fp)
  819fa8:	10800048 	cmpgei	r2,r2,1
  819fac:	103fc31e 	bne	r2,zero,819ebc <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819fb0:	0005303a 	rdctl	r2,status
  819fb4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819fb8:	e0fff217 	ldw	r3,-56(fp)
  819fbc:	00bfff84 	movi	r2,-2
  819fc0:	1884703a 	and	r2,r3,r2
  819fc4:	1001703a 	wrctl	status,r2
  
  return context;
  819fc8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  819fcc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  819fd0:	e0bffb17 	ldw	r2,-20(fp)
  819fd4:	10800817 	ldw	r2,32(r2)
  819fd8:	10c00094 	ori	r3,r2,2
  819fdc:	e0bffb17 	ldw	r2,-20(fp)
  819fe0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819fe4:	e0bffb17 	ldw	r2,-20(fp)
  819fe8:	10800017 	ldw	r2,0(r2)
  819fec:	11000104 	addi	r4,r2,4
  819ff0:	e0bffb17 	ldw	r2,-20(fp)
  819ff4:	10800817 	ldw	r2,32(r2)
  819ff8:	1007883a 	mov	r3,r2
  819ffc:	2005883a 	mov	r2,r4
  81a000:	10c00035 	stwio	r3,0(r2)
  81a004:	e0bff617 	ldw	r2,-40(fp)
  81a008:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a00c:	e0bff117 	ldw	r2,-60(fp)
  81a010:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81a014:	e0bffd17 	ldw	r2,-12(fp)
  81a018:	10800050 	cmplti	r2,r2,1
  81a01c:	10002d1e 	bne	r2,zero,81a0d4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81a020:	e0bffe17 	ldw	r2,-8(fp)
  81a024:	1090000c 	andi	r2,r2,16384
  81a028:	1004c03a 	cmpne	r2,r2,zero
  81a02c:	10002c1e 	bne	r2,zero,81a0e0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81a030:	008020b4 	movhi	r2,130
  81a034:	10807e44 	addi	r2,r2,505
  81a038:	10800003 	ldbu	r2,0(r2)
  81a03c:	10803fcc 	andi	r2,r2,255
  81a040:	10800058 	cmpnei	r2,r2,1
  81a044:	1000161e 	bne	r2,zero,81a0a0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  81a048:	e0bffb17 	ldw	r2,-20(fp)
  81a04c:	10800c17 	ldw	r2,48(r2)
  81a050:	e0bfee15 	stw	r2,-72(fp)
  81a054:	00800184 	movi	r2,6
  81a058:	e0bfef0d 	sth	r2,-68(fp)
  81a05c:	00bfe0c4 	movi	r2,-125
  81a060:	e0bfef85 	stb	r2,-66(fp)
  81a064:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81a068:	008020b4 	movhi	r2,130
  81a06c:	10807e44 	addi	r2,r2,505
  81a070:	10800003 	ldbu	r2,0(r2)
  81a074:	10803fcc 	andi	r2,r2,255
  81a078:	1005003a 	cmpeq	r2,r2,zero
  81a07c:	1000111e 	bne	r2,zero,81a0c4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81a080:	e17fef0b 	ldhu	r5,-68(fp)
  81a084:	e1bfef83 	ldbu	r6,-66(fp)
  81a088:	e1fff00b 	ldhu	r7,-64(fp)
  81a08c:	e0bffa44 	addi	r2,fp,-23
  81a090:	d8800015 	stw	r2,0(sp)
  81a094:	e13fee17 	ldw	r4,-72(fp)
  81a098:	0813c7c0 	call	813c7c <OSFlagPend>
    return err;
  81a09c:	00000906 	br	81a0c4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81a0a0:	e0bffb17 	ldw	r2,-20(fp)
  81a0a4:	10c01017 	ldw	r3,64(r2)
  81a0a8:	e0bff817 	ldw	r2,-32(fp)
  81a0ac:	1880051e 	bne	r3,r2,81a0c4 <altera_avalon_jtag_uart_write+0x258>
  81a0b0:	e0bffb17 	ldw	r2,-20(fp)
  81a0b4:	10c00917 	ldw	r3,36(r2)
  81a0b8:	e0bffb17 	ldw	r2,-20(fp)
  81a0bc:	10800117 	ldw	r2,4(r2)
  81a0c0:	18bff736 	bltu	r3,r2,81a0a0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81a0c4:	e0bffb17 	ldw	r2,-20(fp)
  81a0c8:	10c01017 	ldw	r3,64(r2)
  81a0cc:	e0bff817 	ldw	r2,-32(fp)
  81a0d0:	18800326 	beq	r3,r2,81a0e0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  81a0d4:	e0bffd17 	ldw	r2,-12(fp)
  81a0d8:	10800048 	cmpgei	r2,r2,1
  81a0dc:	103fb11e 	bne	r2,zero,819fa4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81a0e0:	e0bffb17 	ldw	r2,-20(fp)
  81a0e4:	11000b17 	ldw	r4,44(r2)
  81a0e8:	0816fb40 	call	816fb4 <OSSemPost>

  if (ptr != start)
  81a0ec:	e0fffc17 	ldw	r3,-16(fp)
  81a0f0:	e0bff517 	ldw	r2,-44(fp)
  81a0f4:	18800526 	beq	r3,r2,81a10c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  81a0f8:	e0fffc17 	ldw	r3,-16(fp)
  81a0fc:	e0bff517 	ldw	r2,-44(fp)
  81a100:	1887c83a 	sub	r3,r3,r2
  81a104:	e0ffff15 	stw	r3,-4(fp)
  81a108:	00000906 	br	81a130 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  81a10c:	e0bffe17 	ldw	r2,-8(fp)
  81a110:	1090000c 	andi	r2,r2,16384
  81a114:	1005003a 	cmpeq	r2,r2,zero
  81a118:	1000031e 	bne	r2,zero,81a128 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  81a11c:	00bffd44 	movi	r2,-11
  81a120:	e0bfff15 	stw	r2,-4(fp)
  81a124:	00000206 	br	81a130 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  81a128:	00bffec4 	movi	r2,-5
  81a12c:	e0bfff15 	stw	r2,-4(fp)
  81a130:	e0bfff17 	ldw	r2,-4(fp)
}
  81a134:	e037883a 	mov	sp,fp
  81a138:	dfc00117 	ldw	ra,4(sp)
  81a13c:	df000017 	ldw	fp,0(sp)
  81a140:	dec00204 	addi	sp,sp,8
  81a144:	f800283a 	ret

0081a148 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81a148:	defff904 	addi	sp,sp,-28
  81a14c:	dfc00615 	stw	ra,24(sp)
  81a150:	df000515 	stw	fp,20(sp)
  81a154:	df000504 	addi	fp,sp,20
  81a158:	e13ffe15 	stw	r4,-8(fp)
  81a15c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81a160:	e0bffe17 	ldw	r2,-8(fp)
  81a164:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81a168:	e0bffe17 	ldw	r2,-8(fp)
  81a16c:	10800104 	addi	r2,r2,4
  81a170:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a174:	0005303a 	rdctl	r2,status
  81a178:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a17c:	e0fffc17 	ldw	r3,-16(fp)
  81a180:	00bfff84 	movi	r2,-2
  81a184:	1884703a 	and	r2,r3,r2
  81a188:	1001703a 	wrctl	status,r2
  
  return context;
  81a18c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81a190:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81a194:	081b5940 	call	81b594 <alt_tick>
  81a198:	e0bffd17 	ldw	r2,-12(fp)
  81a19c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a1a0:	e0bffb17 	ldw	r2,-20(fp)
  81a1a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81a1a8:	e037883a 	mov	sp,fp
  81a1ac:	dfc00117 	ldw	ra,4(sp)
  81a1b0:	df000017 	ldw	fp,0(sp)
  81a1b4:	dec00204 	addi	sp,sp,8
  81a1b8:	f800283a 	ret

0081a1bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81a1bc:	defff904 	addi	sp,sp,-28
  81a1c0:	dfc00615 	stw	ra,24(sp)
  81a1c4:	df000515 	stw	fp,20(sp)
  81a1c8:	df000504 	addi	fp,sp,20
  81a1cc:	e13ffc15 	stw	r4,-16(fp)
  81a1d0:	e17ffd15 	stw	r5,-12(fp)
  81a1d4:	e1bffe15 	stw	r6,-8(fp)
  81a1d8:	e1ffff15 	stw	r7,-4(fp)
  81a1dc:	e0bfff17 	ldw	r2,-4(fp)
  81a1e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81a1e4:	008020b4 	movhi	r2,130
  81a1e8:	10809304 	addi	r2,r2,588
  81a1ec:	10800017 	ldw	r2,0(r2)
  81a1f0:	1004c03a 	cmpne	r2,r2,zero
  81a1f4:	1000041e 	bne	r2,zero,81a208 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81a1f8:	00c020b4 	movhi	r3,130
  81a1fc:	18c09304 	addi	r3,r3,588
  81a200:	e0bffb17 	ldw	r2,-20(fp)
  81a204:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81a208:	e0bffc17 	ldw	r2,-16(fp)
  81a20c:	10800104 	addi	r2,r2,4
  81a210:	1007883a 	mov	r3,r2
  81a214:	008001c4 	movi	r2,7
  81a218:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81a21c:	e13ffe17 	ldw	r4,-8(fp)
  81a220:	e17ffc17 	ldw	r5,-16(fp)
  81a224:	018020b4 	movhi	r6,130
  81a228:	31a85204 	addi	r6,r6,-24248
  81a22c:	081b0580 	call	81b058 <alt_irq_register>
#endif  
}
  81a230:	e037883a 	mov	sp,fp
  81a234:	dfc00117 	ldw	ra,4(sp)
  81a238:	df000017 	ldw	fp,0(sp)
  81a23c:	dec00204 	addi	sp,sp,8
  81a240:	f800283a 	ret

0081a244 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  81a244:	defffc04 	addi	sp,sp,-16
  81a248:	df000315 	stw	fp,12(sp)
  81a24c:	df000304 	addi	fp,sp,12
  81a250:	e13ffe15 	stw	r4,-8(fp)
  81a254:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81a258:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  81a25c:	e0bfff17 	ldw	r2,-4(fp)
  81a260:	1004c03a 	cmpne	r2,r2,zero
  81a264:	1000061e 	bne	r2,zero,81a280 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81a268:	e0bffe17 	ldw	r2,-8(fp)
  81a26c:	1007883a 	mov	r3,r2
  81a270:	e0bffd03 	ldbu	r2,-12(fp)
  81a274:	10c4b03a 	or	r2,r2,r3
  81a278:	e0bffd05 	stb	r2,-12(fp)
  81a27c:	00000806 	br	81a2a0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  81a280:	e0bffe17 	ldw	r2,-8(fp)
  81a284:	1007883a 	mov	r3,r2
  81a288:	e0bffd03 	ldbu	r2,-12(fp)
  81a28c:	10c4b03a 	or	r2,r2,r3
  81a290:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  81a294:	e0bffd03 	ldbu	r2,-12(fp)
  81a298:	10801014 	ori	r2,r2,64
  81a29c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  81a2a0:	e0fffd03 	ldbu	r3,-12(fp)
  81a2a4:	00bfe004 	movi	r2,-128
  81a2a8:	1884b03a 	or	r2,r3,r2
  81a2ac:	10803fcc 	andi	r2,r2,255
}
  81a2b0:	e037883a 	mov	sp,fp
  81a2b4:	df000017 	ldw	fp,0(sp)
  81a2b8:	dec00104 	addi	sp,sp,4
  81a2bc:	f800283a 	ret

0081a2c0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  81a2c0:	defffd04 	addi	sp,sp,-12
  81a2c4:	df000215 	stw	fp,8(sp)
  81a2c8:	df000204 	addi	fp,sp,8
  81a2cc:	e13ffe15 	stw	r4,-8(fp)
  81a2d0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  81a2d4:	e0bffe17 	ldw	r2,-8(fp)
  81a2d8:	10800a17 	ldw	r2,40(r2)
  81a2dc:	e0ffff03 	ldbu	r3,-4(fp)
  81a2e0:	10c00025 	stbio	r3,0(r2)
}
  81a2e4:	e037883a 	mov	sp,fp
  81a2e8:	df000017 	ldw	fp,0(sp)
  81a2ec:	dec00104 	addi	sp,sp,4
  81a2f0:	f800283a 	ret

0081a2f4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  81a2f4:	defffe04 	addi	sp,sp,-8
  81a2f8:	df000115 	stw	fp,4(sp)
  81a2fc:	df000104 	addi	fp,sp,4
  81a300:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  81a304:	e0bfff17 	ldw	r2,-4(fp)
  81a308:	10800a17 	ldw	r2,40(r2)
  81a30c:	1007883a 	mov	r3,r2
  81a310:	00800044 	movi	r2,1
  81a314:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  81a318:	e037883a 	mov	sp,fp
  81a31c:	df000017 	ldw	fp,0(sp)
  81a320:	dec00104 	addi	sp,sp,4
  81a324:	f800283a 	ret

0081a328 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  81a328:	defffc04 	addi	sp,sp,-16
  81a32c:	dfc00315 	stw	ra,12(sp)
  81a330:	df000215 	stw	fp,8(sp)
  81a334:	df000204 	addi	fp,sp,8
  81a338:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  81a33c:	e13fff17 	ldw	r4,-4(fp)
  81a340:	014020b4 	movhi	r5,130
  81a344:	29796804 	addi	r5,r5,-6752
  81a348:	081ae580 	call	81ae58 <alt_find_dev>
  81a34c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  81a350:	e0bffe17 	ldw	r2,-8(fp)
}
  81a354:	e037883a 	mov	sp,fp
  81a358:	dfc00117 	ldw	ra,4(sp)
  81a35c:	df000017 	ldw	fp,0(sp)
  81a360:	dec00204 	addi	sp,sp,8
  81a364:	f800283a 	ret

0081a368 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81a368:	defffb04 	addi	sp,sp,-20
  81a36c:	df000415 	stw	fp,16(sp)
  81a370:	df000404 	addi	fp,sp,16
  81a374:	e13ffd15 	stw	r4,-12(fp)
  81a378:	e17ffe15 	stw	r5,-8(fp)
  81a37c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  81a380:	e03ffc15 	stw	zero,-16(fp)
  81a384:	00000f06 	br	81a3c4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81a388:	e0bffd17 	ldw	r2,-12(fp)
  81a38c:	10800a17 	ldw	r2,40(r2)
  81a390:	11000044 	addi	r4,r2,1
  81a394:	e0fffc17 	ldw	r3,-16(fp)
  81a398:	e0bffe17 	ldw	r2,-8(fp)
  81a39c:	1885883a 	add	r2,r3,r2
  81a3a0:	10800003 	ldbu	r2,0(r2)
  81a3a4:	10c03fcc 	andi	r3,r2,255
  81a3a8:	18c0201c 	xori	r3,r3,128
  81a3ac:	18ffe004 	addi	r3,r3,-128
  81a3b0:	2005883a 	mov	r2,r4
  81a3b4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81a3b8:	e0bffc17 	ldw	r2,-16(fp)
  81a3bc:	10800044 	addi	r2,r2,1
  81a3c0:	e0bffc15 	stw	r2,-16(fp)
  81a3c4:	e0fffc17 	ldw	r3,-16(fp)
  81a3c8:	e0bfff17 	ldw	r2,-4(fp)
  81a3cc:	18bfee36 	bltu	r3,r2,81a388 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  81a3d0:	e037883a 	mov	sp,fp
  81a3d4:	df000017 	ldw	fp,0(sp)
  81a3d8:	dec00104 	addi	sp,sp,4
  81a3dc:	f800283a 	ret

0081a3e0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  81a3e0:	defffd04 	addi	sp,sp,-12
  81a3e4:	df000215 	stw	fp,8(sp)
  81a3e8:	df000204 	addi	fp,sp,8
  81a3ec:	e13ffe15 	stw	r4,-8(fp)
  81a3f0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  81a3f4:	00000d06 	br	81a42c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81a3f8:	e0bffe17 	ldw	r2,-8(fp)
  81a3fc:	10800a17 	ldw	r2,40(r2)
  81a400:	11000044 	addi	r4,r2,1
  81a404:	e0bfff17 	ldw	r2,-4(fp)
  81a408:	10800003 	ldbu	r2,0(r2)
  81a40c:	10c03fcc 	andi	r3,r2,255
  81a410:	18c0201c 	xori	r3,r3,128
  81a414:	18ffe004 	addi	r3,r3,-128
  81a418:	2005883a 	mov	r2,r4
  81a41c:	10c00025 	stbio	r3,0(r2)
		++ptr;
  81a420:	e0bfff17 	ldw	r2,-4(fp)
  81a424:	10800044 	addi	r2,r2,1
  81a428:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  81a42c:	e0bfff17 	ldw	r2,-4(fp)
  81a430:	10800003 	ldbu	r2,0(r2)
  81a434:	10803fcc 	andi	r2,r2,255
  81a438:	1080201c 	xori	r2,r2,128
  81a43c:	10bfe004 	addi	r2,r2,-128
  81a440:	1004c03a 	cmpne	r2,r2,zero
  81a444:	103fec1e 	bne	r2,zero,81a3f8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81a448:	e037883a 	mov	sp,fp
  81a44c:	df000017 	ldw	fp,0(sp)
  81a450:	dec00104 	addi	sp,sp,4
  81a454:	f800283a 	ret

0081a458 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81a458:	defffb04 	addi	sp,sp,-20
  81a45c:	dfc00415 	stw	ra,16(sp)
  81a460:	df000315 	stw	fp,12(sp)
  81a464:	df000304 	addi	fp,sp,12
  81a468:	e13ffd15 	stw	r4,-12(fp)
  81a46c:	e17ffe15 	stw	r5,-8(fp)
  81a470:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  81a474:	e0bffd17 	ldw	r2,-12(fp)
  81a478:	10800017 	ldw	r2,0(r2)
  81a47c:	1009883a 	mov	r4,r2
  81a480:	e1bfff17 	ldw	r6,-4(fp)
  81a484:	e17ffe17 	ldw	r5,-8(fp)
  81a488:	081a3680 	call	81a368 <alt_up_character_lcd_write>
	return 0;
  81a48c:	0005883a 	mov	r2,zero
}
  81a490:	e037883a 	mov	sp,fp
  81a494:	dfc00117 	ldw	ra,4(sp)
  81a498:	df000017 	ldw	fp,0(sp)
  81a49c:	dec00204 	addi	sp,sp,8
  81a4a0:	f800283a 	ret

0081a4a4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  81a4a4:	defff904 	addi	sp,sp,-28
  81a4a8:	dfc00615 	stw	ra,24(sp)
  81a4ac:	df000515 	stw	fp,20(sp)
  81a4b0:	df000504 	addi	fp,sp,20
  81a4b4:	e13ffc15 	stw	r4,-16(fp)
  81a4b8:	e17ffd15 	stw	r5,-12(fp)
  81a4bc:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  81a4c0:	e0bffd17 	ldw	r2,-12(fp)
  81a4c4:	10800a28 	cmpgeui	r2,r2,40
  81a4c8:	1000031e 	bne	r2,zero,81a4d8 <alt_up_character_lcd_set_cursor_pos+0x34>
  81a4cc:	e0bffe17 	ldw	r2,-8(fp)
  81a4d0:	108000b0 	cmpltui	r2,r2,2
  81a4d4:	1000031e 	bne	r2,zero,81a4e4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81a4d8:	00bfffc4 	movi	r2,-1
  81a4dc:	e0bfff15 	stw	r2,-4(fp)
  81a4e0:	00000806 	br	81a504 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81a4e4:	e13ffd17 	ldw	r4,-12(fp)
  81a4e8:	e17ffe17 	ldw	r5,-8(fp)
  81a4ec:	081a2440 	call	81a244 <get_DDRAM_addr>
  81a4f0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  81a4f4:	e17ffb03 	ldbu	r5,-20(fp)
  81a4f8:	e13ffc17 	ldw	r4,-16(fp)
  81a4fc:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
	return 0;
  81a500:	e03fff15 	stw	zero,-4(fp)
  81a504:	e0bfff17 	ldw	r2,-4(fp)
}
  81a508:	e037883a 	mov	sp,fp
  81a50c:	dfc00117 	ldw	ra,4(sp)
  81a510:	df000017 	ldw	fp,0(sp)
  81a514:	dec00204 	addi	sp,sp,8
  81a518:	f800283a 	ret

0081a51c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81a51c:	defff904 	addi	sp,sp,-28
  81a520:	dfc00615 	stw	ra,24(sp)
  81a524:	df000515 	stw	fp,20(sp)
  81a528:	df000504 	addi	fp,sp,20
  81a52c:	e13ffc15 	stw	r4,-16(fp)
  81a530:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81a534:	e0bffd17 	ldw	r2,-12(fp)
  81a538:	1005003a 	cmpeq	r2,r2,zero
  81a53c:	10001e1e 	bne	r2,zero,81a5b8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  81a540:	e0bffd17 	ldw	r2,-12(fp)
  81a544:	10800050 	cmplti	r2,r2,1
  81a548:	1000031e 	bne	r2,zero,81a558 <alt_up_character_lcd_shift_cursor+0x3c>
  81a54c:	00800504 	movi	r2,20
  81a550:	e0bfff05 	stb	r2,-4(fp)
  81a554:	00000206 	br	81a560 <alt_up_character_lcd_shift_cursor+0x44>
  81a558:	00c00404 	movi	r3,16
  81a55c:	e0ffff05 	stb	r3,-4(fp)
  81a560:	e0bfff03 	ldbu	r2,-4(fp)
  81a564:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81a568:	e0fffd17 	ldw	r3,-12(fp)
  81a56c:	e0fffe15 	stw	r3,-8(fp)
  81a570:	e0fffe17 	ldw	r3,-8(fp)
  81a574:	1804403a 	cmpge	r2,r3,zero
  81a578:	1000031e 	bne	r2,zero,81a588 <alt_up_character_lcd_shift_cursor+0x6c>
  81a57c:	e0bffe17 	ldw	r2,-8(fp)
  81a580:	0085c83a 	sub	r2,zero,r2
  81a584:	e0bffe15 	stw	r2,-8(fp)
  81a588:	e0fffe17 	ldw	r3,-8(fp)
  81a58c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81a590:	00000306 	br	81a5a0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81a594:	e17ffb43 	ldbu	r5,-19(fp)
  81a598:	e13ffc17 	ldw	r4,-16(fp)
  81a59c:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81a5a0:	e0bffb03 	ldbu	r2,-20(fp)
  81a5a4:	10bfffc4 	addi	r2,r2,-1
  81a5a8:	e0bffb05 	stb	r2,-20(fp)
  81a5ac:	e0bffb03 	ldbu	r2,-20(fp)
  81a5b0:	10803fd8 	cmpnei	r2,r2,255
  81a5b4:	103ff71e 	bne	r2,zero,81a594 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81a5b8:	e037883a 	mov	sp,fp
  81a5bc:	dfc00117 	ldw	ra,4(sp)
  81a5c0:	df000017 	ldw	fp,0(sp)
  81a5c4:	dec00204 	addi	sp,sp,8
  81a5c8:	f800283a 	ret

0081a5cc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81a5cc:	defff904 	addi	sp,sp,-28
  81a5d0:	dfc00615 	stw	ra,24(sp)
  81a5d4:	df000515 	stw	fp,20(sp)
  81a5d8:	df000504 	addi	fp,sp,20
  81a5dc:	e13ffc15 	stw	r4,-16(fp)
  81a5e0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81a5e4:	e0bffd17 	ldw	r2,-12(fp)
  81a5e8:	1005003a 	cmpeq	r2,r2,zero
  81a5ec:	10001e1e 	bne	r2,zero,81a668 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  81a5f0:	e0bffd17 	ldw	r2,-12(fp)
  81a5f4:	10800050 	cmplti	r2,r2,1
  81a5f8:	1000031e 	bne	r2,zero,81a608 <alt_up_character_lcd_shift_display+0x3c>
  81a5fc:	00800704 	movi	r2,28
  81a600:	e0bfff05 	stb	r2,-4(fp)
  81a604:	00000206 	br	81a610 <alt_up_character_lcd_shift_display+0x44>
  81a608:	00c00604 	movi	r3,24
  81a60c:	e0ffff05 	stb	r3,-4(fp)
  81a610:	e0bfff03 	ldbu	r2,-4(fp)
  81a614:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81a618:	e0fffd17 	ldw	r3,-12(fp)
  81a61c:	e0fffe15 	stw	r3,-8(fp)
  81a620:	e0fffe17 	ldw	r3,-8(fp)
  81a624:	1804403a 	cmpge	r2,r3,zero
  81a628:	1000031e 	bne	r2,zero,81a638 <alt_up_character_lcd_shift_display+0x6c>
  81a62c:	e0bffe17 	ldw	r2,-8(fp)
  81a630:	0085c83a 	sub	r2,zero,r2
  81a634:	e0bffe15 	stw	r2,-8(fp)
  81a638:	e0fffe17 	ldw	r3,-8(fp)
  81a63c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81a640:	00000306 	br	81a650 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81a644:	e17ffb43 	ldbu	r5,-19(fp)
  81a648:	e13ffc17 	ldw	r4,-16(fp)
  81a64c:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81a650:	e0bffb03 	ldbu	r2,-20(fp)
  81a654:	10bfffc4 	addi	r2,r2,-1
  81a658:	e0bffb05 	stb	r2,-20(fp)
  81a65c:	e0bffb03 	ldbu	r2,-20(fp)
  81a660:	10803fd8 	cmpnei	r2,r2,255
  81a664:	103ff71e 	bne	r2,zero,81a644 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81a668:	e037883a 	mov	sp,fp
  81a66c:	dfc00117 	ldw	ra,4(sp)
  81a670:	df000017 	ldw	fp,0(sp)
  81a674:	dec00204 	addi	sp,sp,8
  81a678:	f800283a 	ret

0081a67c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  81a67c:	defff904 	addi	sp,sp,-28
  81a680:	dfc00615 	stw	ra,24(sp)
  81a684:	df000515 	stw	fp,20(sp)
  81a688:	df000504 	addi	fp,sp,20
  81a68c:	e13ffc15 	stw	r4,-16(fp)
  81a690:	e17ffd15 	stw	r5,-12(fp)
  81a694:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81a698:	e0bffd17 	ldw	r2,-12(fp)
  81a69c:	10800a28 	cmpgeui	r2,r2,40
  81a6a0:	1000031e 	bne	r2,zero,81a6b0 <alt_up_character_lcd_erase_pos+0x34>
  81a6a4:	e0bffe17 	ldw	r2,-8(fp)
  81a6a8:	108000b0 	cmpltui	r2,r2,2
  81a6ac:	1000031e 	bne	r2,zero,81a6bc <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  81a6b0:	00bfffc4 	movi	r2,-1
  81a6b4:	e0bfff15 	stw	r2,-4(fp)
  81a6b8:	00000e06 	br	81a6f4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81a6bc:	e13ffd17 	ldw	r4,-12(fp)
  81a6c0:	e17ffe17 	ldw	r5,-8(fp)
  81a6c4:	081a2440 	call	81a244 <get_DDRAM_addr>
  81a6c8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  81a6cc:	e17ffb03 	ldbu	r5,-20(fp)
  81a6d0:	e13ffc17 	ldw	r4,-16(fp)
  81a6d4:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  81a6d8:	e0bffc17 	ldw	r2,-16(fp)
  81a6dc:	10800a17 	ldw	r2,40(r2)
  81a6e0:	10800044 	addi	r2,r2,1
  81a6e4:	1007883a 	mov	r3,r2
  81a6e8:	00800084 	movi	r2,2
  81a6ec:	18800025 	stbio	r2,0(r3)
	return 0;
  81a6f0:	e03fff15 	stw	zero,-4(fp)
  81a6f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a6f8:	e037883a 	mov	sp,fp
  81a6fc:	dfc00117 	ldw	ra,4(sp)
  81a700:	df000017 	ldw	fp,0(sp)
  81a704:	dec00204 	addi	sp,sp,8
  81a708:	f800283a 	ret

0081a70c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  81a70c:	defffd04 	addi	sp,sp,-12
  81a710:	dfc00215 	stw	ra,8(sp)
  81a714:	df000115 	stw	fp,4(sp)
  81a718:	df000104 	addi	fp,sp,4
  81a71c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  81a720:	e13fff17 	ldw	r4,-4(fp)
  81a724:	01400304 	movi	r5,12
  81a728:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
}
  81a72c:	e037883a 	mov	sp,fp
  81a730:	dfc00117 	ldw	ra,4(sp)
  81a734:	df000017 	ldw	fp,0(sp)
  81a738:	dec00204 	addi	sp,sp,8
  81a73c:	f800283a 	ret

0081a740 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  81a740:	defffd04 	addi	sp,sp,-12
  81a744:	dfc00215 	stw	ra,8(sp)
  81a748:	df000115 	stw	fp,4(sp)
  81a74c:	df000104 	addi	fp,sp,4
  81a750:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  81a754:	e13fff17 	ldw	r4,-4(fp)
  81a758:	014003c4 	movi	r5,15
  81a75c:	081a2c00 	call	81a2c0 <alt_up_character_lcd_send_cmd>
}
  81a760:	e037883a 	mov	sp,fp
  81a764:	dfc00117 	ldw	ra,4(sp)
  81a768:	df000017 	ldw	fp,0(sp)
  81a76c:	dec00204 	addi	sp,sp,8
  81a770:	f800283a 	ret

0081a774 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  81a774:	defffd04 	addi	sp,sp,-12
  81a778:	df000215 	stw	fp,8(sp)
  81a77c:	df000204 	addi	fp,sp,8
  81a780:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81a784:	e0bfff17 	ldw	r2,-4(fp)
  81a788:	10800a17 	ldw	r2,40(r2)
  81a78c:	10800104 	addi	r2,r2,4
  81a790:	10800037 	ldwio	r2,0(r2)
  81a794:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  81a798:	e0bffe17 	ldw	r2,-8(fp)
  81a79c:	10800054 	ori	r2,r2,1
  81a7a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  81a7a4:	e0bfff17 	ldw	r2,-4(fp)
  81a7a8:	10800a17 	ldw	r2,40(r2)
  81a7ac:	10800104 	addi	r2,r2,4
  81a7b0:	e0fffe17 	ldw	r3,-8(fp)
  81a7b4:	10c00035 	stwio	r3,0(r2)
}
  81a7b8:	e037883a 	mov	sp,fp
  81a7bc:	df000017 	ldw	fp,0(sp)
  81a7c0:	dec00104 	addi	sp,sp,4
  81a7c4:	f800283a 	ret

0081a7c8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  81a7c8:	defffd04 	addi	sp,sp,-12
  81a7cc:	df000215 	stw	fp,8(sp)
  81a7d0:	df000204 	addi	fp,sp,8
  81a7d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81a7d8:	e0bfff17 	ldw	r2,-4(fp)
  81a7dc:	10800a17 	ldw	r2,40(r2)
  81a7e0:	10800104 	addi	r2,r2,4
  81a7e4:	10800037 	ldwio	r2,0(r2)
  81a7e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  81a7ec:	e0fffe17 	ldw	r3,-8(fp)
  81a7f0:	00bfff84 	movi	r2,-2
  81a7f4:	1884703a 	and	r2,r3,r2
  81a7f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  81a7fc:	e0bfff17 	ldw	r2,-4(fp)
  81a800:	10800a17 	ldw	r2,40(r2)
  81a804:	10800104 	addi	r2,r2,4
  81a808:	e0fffe17 	ldw	r3,-8(fp)
  81a80c:	10c00035 	stwio	r3,0(r2)
}
  81a810:	e037883a 	mov	sp,fp
  81a814:	df000017 	ldw	fp,0(sp)
  81a818:	dec00104 	addi	sp,sp,4
  81a81c:	f800283a 	ret

0081a820 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  81a820:	defffd04 	addi	sp,sp,-12
  81a824:	df000215 	stw	fp,8(sp)
  81a828:	df000204 	addi	fp,sp,8
  81a82c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  81a830:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  81a834:	e0bfff17 	ldw	r2,-4(fp)
  81a838:	10800a17 	ldw	r2,40(r2)
  81a83c:	10800084 	addi	r2,r2,2
  81a840:	1080002b 	ldhuio	r2,0(r2)
  81a844:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  81a848:	e0bffe0b 	ldhu	r2,-8(fp)
}
  81a84c:	e037883a 	mov	sp,fp
  81a850:	df000017 	ldw	fp,0(sp)
  81a854:	dec00104 	addi	sp,sp,4
  81a858:	f800283a 	ret

0081a85c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  81a85c:	defffd04 	addi	sp,sp,-12
  81a860:	df000215 	stw	fp,8(sp)
  81a864:	df000204 	addi	fp,sp,8
  81a868:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81a86c:	e0bfff17 	ldw	r2,-4(fp)
  81a870:	10800a17 	ldw	r2,40(r2)
  81a874:	10800104 	addi	r2,r2,4
  81a878:	10800037 	ldwio	r2,0(r2)
  81a87c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  81a880:	e0bffe17 	ldw	r2,-8(fp)
  81a884:	10bfffec 	andhi	r2,r2,65535
  81a888:	1004d43a 	srli	r2,r2,16
}
  81a88c:	e037883a 	mov	sp,fp
  81a890:	df000017 	ldw	fp,0(sp)
  81a894:	dec00104 	addi	sp,sp,4
  81a898:	f800283a 	ret

0081a89c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  81a89c:	defffc04 	addi	sp,sp,-16
  81a8a0:	df000315 	stw	fp,12(sp)
  81a8a4:	df000304 	addi	fp,sp,12
  81a8a8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  81a8ac:	e0bffe17 	ldw	r2,-8(fp)
  81a8b0:	1080800c 	andi	r2,r2,512
  81a8b4:	1004d27a 	srli	r2,r2,9
  81a8b8:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  81a8bc:	e0bffd17 	ldw	r2,-12(fp)
  81a8c0:	1005003a 	cmpeq	r2,r2,zero
  81a8c4:	1000031e 	bne	r2,zero,81a8d4 <alt_up_rs232_check_parity+0x38>
  81a8c8:	00bfffc4 	movi	r2,-1
  81a8cc:	e0bfff15 	stw	r2,-4(fp)
  81a8d0:	00000106 	br	81a8d8 <alt_up_rs232_check_parity+0x3c>
  81a8d4:	e03fff15 	stw	zero,-4(fp)
  81a8d8:	e0bfff17 	ldw	r2,-4(fp)
}
  81a8dc:	e037883a 	mov	sp,fp
  81a8e0:	df000017 	ldw	fp,0(sp)
  81a8e4:	dec00104 	addi	sp,sp,4
  81a8e8:	f800283a 	ret

0081a8ec <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  81a8ec:	defffc04 	addi	sp,sp,-16
  81a8f0:	df000315 	stw	fp,12(sp)
  81a8f4:	df000304 	addi	fp,sp,12
  81a8f8:	e13ffe15 	stw	r4,-8(fp)
  81a8fc:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81a900:	e0bffe17 	ldw	r2,-8(fp)
  81a904:	10800a17 	ldw	r2,40(r2)
  81a908:	10800037 	ldwio	r2,0(r2)
  81a90c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  81a910:	e0bffe17 	ldw	r2,-8(fp)
  81a914:	10800a17 	ldw	r2,40(r2)
  81a918:	e0ffff03 	ldbu	r3,-4(fp)
  81a91c:	10c00035 	stwio	r3,0(r2)
	return 0;
  81a920:	0005883a 	mov	r2,zero
}
  81a924:	e037883a 	mov	sp,fp
  81a928:	df000017 	ldw	fp,0(sp)
  81a92c:	dec00104 	addi	sp,sp,4
  81a930:	f800283a 	ret

0081a934 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  81a934:	defffa04 	addi	sp,sp,-24
  81a938:	dfc00515 	stw	ra,20(sp)
  81a93c:	df000415 	stw	fp,16(sp)
  81a940:	df000404 	addi	fp,sp,16
  81a944:	e13ffd15 	stw	r4,-12(fp)
  81a948:	e17ffe15 	stw	r5,-8(fp)
  81a94c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81a950:	e0bffd17 	ldw	r2,-12(fp)
  81a954:	10800a17 	ldw	r2,40(r2)
  81a958:	10800037 	ldwio	r2,0(r2)
  81a95c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  81a960:	e0bffc17 	ldw	r2,-16(fp)
  81a964:	1007883a 	mov	r3,r2
  81a968:	e0bffe17 	ldw	r2,-8(fp)
  81a96c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  81a970:	e13ffc17 	ldw	r4,-16(fp)
  81a974:	081a89c0 	call	81a89c <alt_up_rs232_check_parity>
  81a978:	1007883a 	mov	r3,r2
  81a97c:	e0bfff17 	ldw	r2,-4(fp)
  81a980:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  81a984:	e0bffc17 	ldw	r2,-16(fp)
  81a988:	10a0000c 	andi	r2,r2,32768
  81a98c:	1004d3fa 	srli	r2,r2,15
  81a990:	10bfffc4 	addi	r2,r2,-1
}
  81a994:	e037883a 	mov	sp,fp
  81a998:	dfc00117 	ldw	ra,4(sp)
  81a99c:	df000017 	ldw	fp,0(sp)
  81a9a0:	dec00204 	addi	sp,sp,8
  81a9a4:	f800283a 	ret

0081a9a8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  81a9a8:	defff804 	addi	sp,sp,-32
  81a9ac:	dfc00715 	stw	ra,28(sp)
  81a9b0:	df000615 	stw	fp,24(sp)
  81a9b4:	df000604 	addi	fp,sp,24
  81a9b8:	e13ffd15 	stw	r4,-12(fp)
  81a9bc:	e17ffe15 	stw	r5,-8(fp)
  81a9c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  81a9c4:	e0bffd17 	ldw	r2,-12(fp)
  81a9c8:	10800017 	ldw	r2,0(r2)
  81a9cc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  81a9d0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  81a9d4:	00000c06 	br	81aa08 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  81a9d8:	e17ffe17 	ldw	r5,-8(fp)
  81a9dc:	e0bffe17 	ldw	r2,-8(fp)
  81a9e0:	10800044 	addi	r2,r2,1
  81a9e4:	e0bffe15 	stw	r2,-8(fp)
  81a9e8:	e1bffc04 	addi	r6,fp,-16
  81a9ec:	e13ffb17 	ldw	r4,-20(fp)
  81a9f0:	081a9340 	call	81a934 <alt_up_rs232_read_data>
  81a9f4:	1004c03a 	cmpne	r2,r2,zero
  81a9f8:	1000091e 	bne	r2,zero,81aa20 <alt_up_rs232_read_fd+0x78>
			count++;
  81a9fc:	e0bffa17 	ldw	r2,-24(fp)
  81aa00:	10800044 	addi	r2,r2,1
  81aa04:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  81aa08:	e0bfff17 	ldw	r2,-4(fp)
  81aa0c:	10bfffc4 	addi	r2,r2,-1
  81aa10:	e0bfff15 	stw	r2,-4(fp)
  81aa14:	e0bfff17 	ldw	r2,-4(fp)
  81aa18:	10bfffd8 	cmpnei	r2,r2,-1
  81aa1c:	103fee1e 	bne	r2,zero,81a9d8 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  81aa20:	e0bffa17 	ldw	r2,-24(fp)
}
  81aa24:	e037883a 	mov	sp,fp
  81aa28:	dfc00117 	ldw	ra,4(sp)
  81aa2c:	df000017 	ldw	fp,0(sp)
  81aa30:	dec00204 	addi	sp,sp,8
  81aa34:	f800283a 	ret

0081aa38 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  81aa38:	defff904 	addi	sp,sp,-28
  81aa3c:	dfc00615 	stw	ra,24(sp)
  81aa40:	df000515 	stw	fp,20(sp)
  81aa44:	df000504 	addi	fp,sp,20
  81aa48:	e13ffd15 	stw	r4,-12(fp)
  81aa4c:	e17ffe15 	stw	r5,-8(fp)
  81aa50:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  81aa54:	e0bffd17 	ldw	r2,-12(fp)
  81aa58:	10800017 	ldw	r2,0(r2)
  81aa5c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  81aa60:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  81aa64:	00000d06 	br	81aa9c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  81aa68:	e0bffe17 	ldw	r2,-8(fp)
  81aa6c:	10800003 	ldbu	r2,0(r2)
  81aa70:	11403fcc 	andi	r5,r2,255
  81aa74:	e13ffc17 	ldw	r4,-16(fp)
  81aa78:	081a8ec0 	call	81a8ec <alt_up_rs232_write_data>
  81aa7c:	1004c03a 	cmpne	r2,r2,zero
  81aa80:	10000c1e 	bne	r2,zero,81aab4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  81aa84:	e0bffb17 	ldw	r2,-20(fp)
  81aa88:	10800044 	addi	r2,r2,1
  81aa8c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  81aa90:	e0bffe17 	ldw	r2,-8(fp)
  81aa94:	10800044 	addi	r2,r2,1
  81aa98:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  81aa9c:	e0bfff17 	ldw	r2,-4(fp)
  81aaa0:	10bfffc4 	addi	r2,r2,-1
  81aaa4:	e0bfff15 	stw	r2,-4(fp)
  81aaa8:	e0bfff17 	ldw	r2,-4(fp)
  81aaac:	10bfffd8 	cmpnei	r2,r2,-1
  81aab0:	103fed1e 	bne	r2,zero,81aa68 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  81aab4:	e0bffb17 	ldw	r2,-20(fp)
}
  81aab8:	e037883a 	mov	sp,fp
  81aabc:	dfc00117 	ldw	ra,4(sp)
  81aac0:	df000017 	ldw	fp,0(sp)
  81aac4:	dec00204 	addi	sp,sp,8
  81aac8:	f800283a 	ret

0081aacc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  81aacc:	defffc04 	addi	sp,sp,-16
  81aad0:	dfc00315 	stw	ra,12(sp)
  81aad4:	df000215 	stw	fp,8(sp)
  81aad8:	df000204 	addi	fp,sp,8
  81aadc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  81aae0:	e13fff17 	ldw	r4,-4(fp)
  81aae4:	014020b4 	movhi	r5,130
  81aae8:	29796804 	addi	r5,r5,-6752
  81aaec:	081ae580 	call	81ae58 <alt_find_dev>
  81aaf0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  81aaf4:	e0bffe17 	ldw	r2,-8(fp)
}
  81aaf8:	e037883a 	mov	sp,fp
  81aafc:	dfc00117 	ldw	ra,4(sp)
  81ab00:	df000017 	ldw	fp,0(sp)
  81ab04:	dec00204 	addi	sp,sp,8
  81ab08:	f800283a 	ret

0081ab0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81ab0c:	defff404 	addi	sp,sp,-48
  81ab10:	df000b15 	stw	fp,44(sp)
  81ab14:	df000b04 	addi	fp,sp,44
  81ab18:	e13ffb15 	stw	r4,-20(fp)
  81ab1c:	e17ffc15 	stw	r5,-16(fp)
  81ab20:	e1bffd15 	stw	r6,-12(fp)
  81ab24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81ab28:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81ab2c:	008020b4 	movhi	r2,130
  81ab30:	10809304 	addi	r2,r2,588
  81ab34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81ab38:	1005003a 	cmpeq	r2,r2,zero
  81ab3c:	1000411e 	bne	r2,zero,81ac44 <alt_alarm_start+0x138>
  {
    if (alarm)
  81ab40:	e0bffb17 	ldw	r2,-20(fp)
  81ab44:	1005003a 	cmpeq	r2,r2,zero
  81ab48:	10003b1e 	bne	r2,zero,81ac38 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81ab4c:	e0fffb17 	ldw	r3,-20(fp)
  81ab50:	e0bffd17 	ldw	r2,-12(fp)
  81ab54:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81ab58:	e0fffb17 	ldw	r3,-20(fp)
  81ab5c:	e0bffe17 	ldw	r2,-8(fp)
  81ab60:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ab64:	0005303a 	rdctl	r2,status
  81ab68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ab6c:	e0fff817 	ldw	r3,-32(fp)
  81ab70:	00bfff84 	movi	r2,-2
  81ab74:	1884703a 	and	r2,r3,r2
  81ab78:	1001703a 	wrctl	status,r2
  
  return context;
  81ab7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81ab80:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81ab84:	008020b4 	movhi	r2,130
  81ab88:	10809404 	addi	r2,r2,592
  81ab8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81ab90:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81ab94:	e0fffc17 	ldw	r3,-16(fp)
  81ab98:	e0bff917 	ldw	r2,-28(fp)
  81ab9c:	1885883a 	add	r2,r3,r2
  81aba0:	10c00044 	addi	r3,r2,1
  81aba4:	e0bffb17 	ldw	r2,-20(fp)
  81aba8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81abac:	e0bffb17 	ldw	r2,-20(fp)
  81abb0:	10c00217 	ldw	r3,8(r2)
  81abb4:	e0bff917 	ldw	r2,-28(fp)
  81abb8:	1880042e 	bgeu	r3,r2,81abcc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81abbc:	e0fffb17 	ldw	r3,-20(fp)
  81abc0:	00800044 	movi	r2,1
  81abc4:	18800405 	stb	r2,16(r3)
  81abc8:	00000206 	br	81abd4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81abcc:	e0bffb17 	ldw	r2,-20(fp)
  81abd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81abd4:	e0fffb17 	ldw	r3,-20(fp)
  81abd8:	008020b4 	movhi	r2,130
  81abdc:	10b98d04 	addi	r2,r2,-6604
  81abe0:	e0bff615 	stw	r2,-40(fp)
  81abe4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81abe8:	e0fff717 	ldw	r3,-36(fp)
  81abec:	e0bff617 	ldw	r2,-40(fp)
  81abf0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81abf4:	e0bff617 	ldw	r2,-40(fp)
  81abf8:	10c00017 	ldw	r3,0(r2)
  81abfc:	e0bff717 	ldw	r2,-36(fp)
  81ac00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81ac04:	e0bff617 	ldw	r2,-40(fp)
  81ac08:	10c00017 	ldw	r3,0(r2)
  81ac0c:	e0bff717 	ldw	r2,-36(fp)
  81ac10:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81ac14:	e0fff617 	ldw	r3,-40(fp)
  81ac18:	e0bff717 	ldw	r2,-36(fp)
  81ac1c:	18800015 	stw	r2,0(r3)
  81ac20:	e0bffa17 	ldw	r2,-24(fp)
  81ac24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ac28:	e0bff517 	ldw	r2,-44(fp)
  81ac2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81ac30:	e03fff15 	stw	zero,-4(fp)
  81ac34:	00000506 	br	81ac4c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81ac38:	00bffa84 	movi	r2,-22
  81ac3c:	e0bfff15 	stw	r2,-4(fp)
  81ac40:	00000206 	br	81ac4c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81ac44:	00bfde84 	movi	r2,-134
  81ac48:	e0bfff15 	stw	r2,-4(fp)
  81ac4c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81ac50:	e037883a 	mov	sp,fp
  81ac54:	df000017 	ldw	fp,0(sp)
  81ac58:	dec00104 	addi	sp,sp,4
  81ac5c:	f800283a 	ret

0081ac60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81ac60:	deffff04 	addi	sp,sp,-4
  81ac64:	df000015 	stw	fp,0(sp)
  81ac68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81ac6c:	e037883a 	mov	sp,fp
  81ac70:	df000017 	ldw	fp,0(sp)
  81ac74:	dec00104 	addi	sp,sp,4
  81ac78:	f800283a 	ret

0081ac7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81ac7c:	defff904 	addi	sp,sp,-28
  81ac80:	dfc00615 	stw	ra,24(sp)
  81ac84:	df000515 	stw	fp,20(sp)
  81ac88:	df000504 	addi	fp,sp,20
  81ac8c:	e13ffd15 	stw	r4,-12(fp)
  81ac90:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81ac94:	e0bffd17 	ldw	r2,-12(fp)
  81ac98:	1005003a 	cmpeq	r2,r2,zero
  81ac9c:	1000041e 	bne	r2,zero,81acb0 <alt_dev_llist_insert+0x34>
  81aca0:	e0bffd17 	ldw	r2,-12(fp)
  81aca4:	10800217 	ldw	r2,8(r2)
  81aca8:	1004c03a 	cmpne	r2,r2,zero
  81acac:	1000071e 	bne	r2,zero,81accc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81acb0:	081ad300 	call	81ad30 <alt_get_errno>
  81acb4:	1007883a 	mov	r3,r2
  81acb8:	00800584 	movi	r2,22
  81acbc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81acc0:	00bffa84 	movi	r2,-22
  81acc4:	e0bfff15 	stw	r2,-4(fp)
  81acc8:	00001306 	br	81ad18 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81accc:	e0fffd17 	ldw	r3,-12(fp)
  81acd0:	e0bffe17 	ldw	r2,-8(fp)
  81acd4:	e0bffb15 	stw	r2,-20(fp)
  81acd8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81acdc:	e0fffc17 	ldw	r3,-16(fp)
  81ace0:	e0bffb17 	ldw	r2,-20(fp)
  81ace4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81ace8:	e0bffb17 	ldw	r2,-20(fp)
  81acec:	10c00017 	ldw	r3,0(r2)
  81acf0:	e0bffc17 	ldw	r2,-16(fp)
  81acf4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81acf8:	e0bffb17 	ldw	r2,-20(fp)
  81acfc:	10c00017 	ldw	r3,0(r2)
  81ad00:	e0bffc17 	ldw	r2,-16(fp)
  81ad04:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81ad08:	e0fffb17 	ldw	r3,-20(fp)
  81ad0c:	e0bffc17 	ldw	r2,-16(fp)
  81ad10:	18800015 	stw	r2,0(r3)

  return 0;  
  81ad14:	e03fff15 	stw	zero,-4(fp)
  81ad18:	e0bfff17 	ldw	r2,-4(fp)
}
  81ad1c:	e037883a 	mov	sp,fp
  81ad20:	dfc00117 	ldw	ra,4(sp)
  81ad24:	df000017 	ldw	fp,0(sp)
  81ad28:	dec00204 	addi	sp,sp,8
  81ad2c:	f800283a 	ret

0081ad30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ad30:	defffd04 	addi	sp,sp,-12
  81ad34:	dfc00215 	stw	ra,8(sp)
  81ad38:	df000115 	stw	fp,4(sp)
  81ad3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81ad40:	008020b4 	movhi	r2,130
  81ad44:	10b96b04 	addi	r2,r2,-6740
  81ad48:	10800017 	ldw	r2,0(r2)
  81ad4c:	1005003a 	cmpeq	r2,r2,zero
  81ad50:	1000061e 	bne	r2,zero,81ad6c <alt_get_errno+0x3c>
  81ad54:	008020b4 	movhi	r2,130
  81ad58:	10b96b04 	addi	r2,r2,-6740
  81ad5c:	10800017 	ldw	r2,0(r2)
  81ad60:	103ee83a 	callr	r2
  81ad64:	e0bfff15 	stw	r2,-4(fp)
  81ad68:	00000306 	br	81ad78 <alt_get_errno+0x48>
  81ad6c:	008020b4 	movhi	r2,130
  81ad70:	10807204 	addi	r2,r2,456
  81ad74:	e0bfff15 	stw	r2,-4(fp)
  81ad78:	e0bfff17 	ldw	r2,-4(fp)
}
  81ad7c:	e037883a 	mov	sp,fp
  81ad80:	dfc00117 	ldw	ra,4(sp)
  81ad84:	df000017 	ldw	fp,0(sp)
  81ad88:	dec00204 	addi	sp,sp,8
  81ad8c:	f800283a 	ret

0081ad90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81ad90:	defffd04 	addi	sp,sp,-12
  81ad94:	dfc00215 	stw	ra,8(sp)
  81ad98:	df000115 	stw	fp,4(sp)
  81ad9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ada0:	00bfff04 	movi	r2,-4
  81ada4:	00c020b4 	movhi	r3,130
  81ada8:	18f07a04 	addi	r3,r3,-15896
  81adac:	1885883a 	add	r2,r3,r2
  81adb0:	e0bfff15 	stw	r2,-4(fp)
  81adb4:	00000606 	br	81add0 <_do_ctors+0x40>
        (*ctor) (); 
  81adb8:	e0bfff17 	ldw	r2,-4(fp)
  81adbc:	10800017 	ldw	r2,0(r2)
  81adc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81adc4:	e0bfff17 	ldw	r2,-4(fp)
  81adc8:	10bfff04 	addi	r2,r2,-4
  81adcc:	e0bfff15 	stw	r2,-4(fp)
  81add0:	e0ffff17 	ldw	r3,-4(fp)
  81add4:	008020b4 	movhi	r2,130
  81add8:	10b07904 	addi	r2,r2,-15900
  81addc:	18bff62e 	bgeu	r3,r2,81adb8 <_do_ctors+0x28>
        (*ctor) (); 
}
  81ade0:	e037883a 	mov	sp,fp
  81ade4:	dfc00117 	ldw	ra,4(sp)
  81ade8:	df000017 	ldw	fp,0(sp)
  81adec:	dec00204 	addi	sp,sp,8
  81adf0:	f800283a 	ret

0081adf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81adf4:	defffd04 	addi	sp,sp,-12
  81adf8:	dfc00215 	stw	ra,8(sp)
  81adfc:	df000115 	stw	fp,4(sp)
  81ae00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ae04:	00bfff04 	movi	r2,-4
  81ae08:	00c020b4 	movhi	r3,130
  81ae0c:	18f07a04 	addi	r3,r3,-15896
  81ae10:	1885883a 	add	r2,r3,r2
  81ae14:	e0bfff15 	stw	r2,-4(fp)
  81ae18:	00000606 	br	81ae34 <_do_dtors+0x40>
        (*dtor) (); 
  81ae1c:	e0bfff17 	ldw	r2,-4(fp)
  81ae20:	10800017 	ldw	r2,0(r2)
  81ae24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ae28:	e0bfff17 	ldw	r2,-4(fp)
  81ae2c:	10bfff04 	addi	r2,r2,-4
  81ae30:	e0bfff15 	stw	r2,-4(fp)
  81ae34:	e0ffff17 	ldw	r3,-4(fp)
  81ae38:	008020b4 	movhi	r2,130
  81ae3c:	10b07a04 	addi	r2,r2,-15896
  81ae40:	18bff62e 	bgeu	r3,r2,81ae1c <_do_dtors+0x28>
        (*dtor) (); 
}
  81ae44:	e037883a 	mov	sp,fp
  81ae48:	dfc00117 	ldw	ra,4(sp)
  81ae4c:	df000017 	ldw	fp,0(sp)
  81ae50:	dec00204 	addi	sp,sp,8
  81ae54:	f800283a 	ret

0081ae58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81ae58:	defff904 	addi	sp,sp,-28
  81ae5c:	dfc00615 	stw	ra,24(sp)
  81ae60:	df000515 	stw	fp,20(sp)
  81ae64:	df000504 	addi	fp,sp,20
  81ae68:	e13ffd15 	stw	r4,-12(fp)
  81ae6c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81ae70:	e0bffe17 	ldw	r2,-8(fp)
  81ae74:	10800017 	ldw	r2,0(r2)
  81ae78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81ae7c:	e13ffd17 	ldw	r4,-12(fp)
  81ae80:	08018140 	call	801814 <strlen>
  81ae84:	10800044 	addi	r2,r2,1
  81ae88:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ae8c:	00000d06 	br	81aec4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81ae90:	e0bffc17 	ldw	r2,-16(fp)
  81ae94:	11000217 	ldw	r4,8(r2)
  81ae98:	e1bffb17 	ldw	r6,-20(fp)
  81ae9c:	e17ffd17 	ldw	r5,-12(fp)
  81aea0:	081be1c0 	call	81be1c <memcmp>
  81aea4:	1004c03a 	cmpne	r2,r2,zero
  81aea8:	1000031e 	bne	r2,zero,81aeb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81aeac:	e0bffc17 	ldw	r2,-16(fp)
  81aeb0:	e0bfff15 	stw	r2,-4(fp)
  81aeb4:	00000706 	br	81aed4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81aeb8:	e0bffc17 	ldw	r2,-16(fp)
  81aebc:	10800017 	ldw	r2,0(r2)
  81aec0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81aec4:	e0fffe17 	ldw	r3,-8(fp)
  81aec8:	e0bffc17 	ldw	r2,-16(fp)
  81aecc:	10fff01e 	bne	r2,r3,81ae90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81aed0:	e03fff15 	stw	zero,-4(fp)
  81aed4:	e0bfff17 	ldw	r2,-4(fp)
}
  81aed8:	e037883a 	mov	sp,fp
  81aedc:	dfc00117 	ldw	ra,4(sp)
  81aee0:	df000017 	ldw	fp,0(sp)
  81aee4:	dec00204 	addi	sp,sp,8
  81aee8:	f800283a 	ret

0081aeec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81aeec:	deffff04 	addi	sp,sp,-4
  81aef0:	df000015 	stw	fp,0(sp)
  81aef4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  81aef8:	e037883a 	mov	sp,fp
  81aefc:	df000017 	ldw	fp,0(sp)
  81af00:	dec00104 	addi	sp,sp,4
  81af04:	f800283a 	ret

0081af08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81af08:	defff804 	addi	sp,sp,-32
  81af0c:	dfc00715 	stw	ra,28(sp)
  81af10:	df000615 	stw	fp,24(sp)
  81af14:	dc000515 	stw	r16,20(sp)
  81af18:	df000504 	addi	fp,sp,20
  81af1c:	e13ffc15 	stw	r4,-16(fp)
  81af20:	e17ffd15 	stw	r5,-12(fp)
  81af24:	e1bffe15 	stw	r6,-8(fp)
  81af28:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81af2c:	e13ffd17 	ldw	r4,-12(fp)
  81af30:	e17ffe17 	ldw	r5,-8(fp)
  81af34:	e1bfff17 	ldw	r6,-4(fp)
  81af38:	081b3100 	call	81b310 <open>
  81af3c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81af40:	e0bffb17 	ldw	r2,-20(fp)
  81af44:	1004803a 	cmplt	r2,r2,zero
  81af48:	10001f1e 	bne	r2,zero,81afc8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81af4c:	e13ffb17 	ldw	r4,-20(fp)
  81af50:	040020b4 	movhi	r16,130
  81af54:	8434ce04 	addi	r16,r16,-11464
  81af58:	01400304 	movi	r5,12
  81af5c:	080f9440 	call	80f944 <__mulsi3>
  81af60:	1405883a 	add	r2,r2,r16
  81af64:	10c00017 	ldw	r3,0(r2)
  81af68:	e0bffc17 	ldw	r2,-16(fp)
  81af6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81af70:	e13ffb17 	ldw	r4,-20(fp)
  81af74:	040020b4 	movhi	r16,130
  81af78:	8434ce04 	addi	r16,r16,-11464
  81af7c:	01400304 	movi	r5,12
  81af80:	080f9440 	call	80f944 <__mulsi3>
  81af84:	1405883a 	add	r2,r2,r16
  81af88:	10800104 	addi	r2,r2,4
  81af8c:	10c00017 	ldw	r3,0(r2)
  81af90:	e0bffc17 	ldw	r2,-16(fp)
  81af94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81af98:	e13ffb17 	ldw	r4,-20(fp)
  81af9c:	040020b4 	movhi	r16,130
  81afa0:	8434ce04 	addi	r16,r16,-11464
  81afa4:	01400304 	movi	r5,12
  81afa8:	080f9440 	call	80f944 <__mulsi3>
  81afac:	1405883a 	add	r2,r2,r16
  81afb0:	10800204 	addi	r2,r2,8
  81afb4:	10c00017 	ldw	r3,0(r2)
  81afb8:	e0bffc17 	ldw	r2,-16(fp)
  81afbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81afc0:	e13ffb17 	ldw	r4,-20(fp)
  81afc4:	0810a800 	call	810a80 <alt_release_fd>
  }
} 
  81afc8:	e037883a 	mov	sp,fp
  81afcc:	dfc00217 	ldw	ra,8(sp)
  81afd0:	df000117 	ldw	fp,4(sp)
  81afd4:	dc000017 	ldw	r16,0(sp)
  81afd8:	dec00304 	addi	sp,sp,12
  81afdc:	f800283a 	ret

0081afe0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81afe0:	defffb04 	addi	sp,sp,-20
  81afe4:	dfc00415 	stw	ra,16(sp)
  81afe8:	df000315 	stw	fp,12(sp)
  81afec:	df000304 	addi	fp,sp,12
  81aff0:	e13ffd15 	stw	r4,-12(fp)
  81aff4:	e17ffe15 	stw	r5,-8(fp)
  81aff8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81affc:	010020b4 	movhi	r4,130
  81b000:	2134d104 	addi	r4,r4,-11452
  81b004:	e17ffd17 	ldw	r5,-12(fp)
  81b008:	01800044 	movi	r6,1
  81b00c:	01c07fc4 	movi	r7,511
  81b010:	081af080 	call	81af08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81b014:	010020b4 	movhi	r4,130
  81b018:	2134ce04 	addi	r4,r4,-11464
  81b01c:	e17ffe17 	ldw	r5,-8(fp)
  81b020:	000d883a 	mov	r6,zero
  81b024:	01c07fc4 	movi	r7,511
  81b028:	081af080 	call	81af08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81b02c:	010020b4 	movhi	r4,130
  81b030:	2134d404 	addi	r4,r4,-11440
  81b034:	e17fff17 	ldw	r5,-4(fp)
  81b038:	01800044 	movi	r6,1
  81b03c:	01c07fc4 	movi	r7,511
  81b040:	081af080 	call	81af08 <alt_open_fd>
}  
  81b044:	e037883a 	mov	sp,fp
  81b048:	dfc00117 	ldw	ra,4(sp)
  81b04c:	df000017 	ldw	fp,0(sp)
  81b050:	dec00204 	addi	sp,sp,8
  81b054:	f800283a 	ret

0081b058 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81b058:	deffef04 	addi	sp,sp,-68
  81b05c:	df001015 	stw	fp,64(sp)
  81b060:	df001004 	addi	fp,sp,64
  81b064:	e13ffc15 	stw	r4,-16(fp)
  81b068:	e17ffd15 	stw	r5,-12(fp)
  81b06c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81b070:	00bffa84 	movi	r2,-22
  81b074:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81b078:	e0bffc17 	ldw	r2,-16(fp)
  81b07c:	10800828 	cmpgeui	r2,r2,32
  81b080:	1000601e 	bne	r2,zero,81b204 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b084:	0005303a 	rdctl	r2,status
  81b088:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b08c:	e0fff917 	ldw	r3,-28(fp)
  81b090:	00bfff84 	movi	r2,-2
  81b094:	1884703a 	and	r2,r3,r2
  81b098:	1001703a 	wrctl	status,r2
  
  return context;
  81b09c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81b0a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81b0a4:	e0bffc17 	ldw	r2,-16(fp)
  81b0a8:	00c020f4 	movhi	r3,131
  81b0ac:	18e57804 	addi	r3,r3,-27168
  81b0b0:	100490fa 	slli	r2,r2,3
  81b0b4:	10c7883a 	add	r3,r2,r3
  81b0b8:	e0bffe17 	ldw	r2,-8(fp)
  81b0bc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81b0c0:	e0bffc17 	ldw	r2,-16(fp)
  81b0c4:	00c020f4 	movhi	r3,131
  81b0c8:	18e57804 	addi	r3,r3,-27168
  81b0cc:	100490fa 	slli	r2,r2,3
  81b0d0:	10c5883a 	add	r2,r2,r3
  81b0d4:	10c00104 	addi	r3,r2,4
  81b0d8:	e0bffd17 	ldw	r2,-12(fp)
  81b0dc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81b0e0:	e0bffe17 	ldw	r2,-8(fp)
  81b0e4:	1005003a 	cmpeq	r2,r2,zero
  81b0e8:	1000201e 	bne	r2,zero,81b16c <alt_irq_register+0x114>
  81b0ec:	e0bffc17 	ldw	r2,-16(fp)
  81b0f0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b0f4:	0005303a 	rdctl	r2,status
  81b0f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b0fc:	e0fff617 	ldw	r3,-40(fp)
  81b100:	00bfff84 	movi	r2,-2
  81b104:	1884703a 	and	r2,r3,r2
  81b108:	1001703a 	wrctl	status,r2
  
  return context;
  81b10c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81b110:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81b114:	e0fff717 	ldw	r3,-36(fp)
  81b118:	00800044 	movi	r2,1
  81b11c:	10c4983a 	sll	r2,r2,r3
  81b120:	1007883a 	mov	r3,r2
  81b124:	008020b4 	movhi	r2,130
  81b128:	10809204 	addi	r2,r2,584
  81b12c:	10800017 	ldw	r2,0(r2)
  81b130:	1886b03a 	or	r3,r3,r2
  81b134:	008020b4 	movhi	r2,130
  81b138:	10809204 	addi	r2,r2,584
  81b13c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81b140:	008020b4 	movhi	r2,130
  81b144:	10809204 	addi	r2,r2,584
  81b148:	10800017 	ldw	r2,0(r2)
  81b14c:	100170fa 	wrctl	ienable,r2
  81b150:	e0bff817 	ldw	r2,-32(fp)
  81b154:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b158:	e0bff517 	ldw	r2,-44(fp)
  81b15c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81b160:	0005883a 	mov	r2,zero
  81b164:	e0bfff15 	stw	r2,-4(fp)
  81b168:	00002006 	br	81b1ec <alt_irq_register+0x194>
  81b16c:	e0bffc17 	ldw	r2,-16(fp)
  81b170:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b174:	0005303a 	rdctl	r2,status
  81b178:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b17c:	e0fff217 	ldw	r3,-56(fp)
  81b180:	00bfff84 	movi	r2,-2
  81b184:	1884703a 	and	r2,r3,r2
  81b188:	1001703a 	wrctl	status,r2
  
  return context;
  81b18c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81b190:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81b194:	e0fff317 	ldw	r3,-52(fp)
  81b198:	00800044 	movi	r2,1
  81b19c:	10c4983a 	sll	r2,r2,r3
  81b1a0:	0084303a 	nor	r2,zero,r2
  81b1a4:	1007883a 	mov	r3,r2
  81b1a8:	008020b4 	movhi	r2,130
  81b1ac:	10809204 	addi	r2,r2,584
  81b1b0:	10800017 	ldw	r2,0(r2)
  81b1b4:	1886703a 	and	r3,r3,r2
  81b1b8:	008020b4 	movhi	r2,130
  81b1bc:	10809204 	addi	r2,r2,584
  81b1c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81b1c4:	008020b4 	movhi	r2,130
  81b1c8:	10809204 	addi	r2,r2,584
  81b1cc:	10800017 	ldw	r2,0(r2)
  81b1d0:	100170fa 	wrctl	ienable,r2
  81b1d4:	e0bff417 	ldw	r2,-48(fp)
  81b1d8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b1dc:	e0bff117 	ldw	r2,-60(fp)
  81b1e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81b1e4:	0005883a 	mov	r2,zero
  81b1e8:	e0bfff15 	stw	r2,-4(fp)
  81b1ec:	e0bfff17 	ldw	r2,-4(fp)
  81b1f0:	e0bffb15 	stw	r2,-20(fp)
  81b1f4:	e0bffa17 	ldw	r2,-24(fp)
  81b1f8:	e0bff015 	stw	r2,-64(fp)
  81b1fc:	e0bff017 	ldw	r2,-64(fp)
  81b200:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81b204:	e0bffb17 	ldw	r2,-20(fp)
}
  81b208:	e037883a 	mov	sp,fp
  81b20c:	df000017 	ldw	fp,0(sp)
  81b210:	dec00104 	addi	sp,sp,4
  81b214:	f800283a 	ret

0081b218 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81b218:	defffa04 	addi	sp,sp,-24
  81b21c:	dfc00515 	stw	ra,20(sp)
  81b220:	df000415 	stw	fp,16(sp)
  81b224:	dc000315 	stw	r16,12(sp)
  81b228:	df000304 	addi	fp,sp,12
  81b22c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81b230:	e0bffe17 	ldw	r2,-8(fp)
  81b234:	10800217 	ldw	r2,8(r2)
  81b238:	10d00034 	orhi	r3,r2,16384
  81b23c:	e0bffe17 	ldw	r2,-8(fp)
  81b240:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b244:	e03ffd15 	stw	zero,-12(fp)
  81b248:	00002306 	br	81b2d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81b24c:	e13ffd17 	ldw	r4,-12(fp)
  81b250:	040020b4 	movhi	r16,130
  81b254:	8434ce04 	addi	r16,r16,-11464
  81b258:	01400304 	movi	r5,12
  81b25c:	080f9440 	call	80f944 <__mulsi3>
  81b260:	1405883a 	add	r2,r2,r16
  81b264:	10c00017 	ldw	r3,0(r2)
  81b268:	e0bffe17 	ldw	r2,-8(fp)
  81b26c:	10800017 	ldw	r2,0(r2)
  81b270:	1880161e 	bne	r3,r2,81b2cc <alt_file_locked+0xb4>
  81b274:	e13ffd17 	ldw	r4,-12(fp)
  81b278:	040020b4 	movhi	r16,130
  81b27c:	8434ce04 	addi	r16,r16,-11464
  81b280:	01400304 	movi	r5,12
  81b284:	080f9440 	call	80f944 <__mulsi3>
  81b288:	1405883a 	add	r2,r2,r16
  81b28c:	10800204 	addi	r2,r2,8
  81b290:	10800017 	ldw	r2,0(r2)
  81b294:	1004403a 	cmpge	r2,r2,zero
  81b298:	10000c1e 	bne	r2,zero,81b2cc <alt_file_locked+0xb4>
  81b29c:	e13ffd17 	ldw	r4,-12(fp)
  81b2a0:	01400304 	movi	r5,12
  81b2a4:	080f9440 	call	80f944 <__mulsi3>
  81b2a8:	1007883a 	mov	r3,r2
  81b2ac:	008020b4 	movhi	r2,130
  81b2b0:	10b4ce04 	addi	r2,r2,-11464
  81b2b4:	1887883a 	add	r3,r3,r2
  81b2b8:	e0bffe17 	ldw	r2,-8(fp)
  81b2bc:	18800326 	beq	r3,r2,81b2cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81b2c0:	00bffcc4 	movi	r2,-13
  81b2c4:	e0bfff15 	stw	r2,-4(fp)
  81b2c8:	00000a06 	br	81b2f4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b2cc:	e0bffd17 	ldw	r2,-12(fp)
  81b2d0:	10800044 	addi	r2,r2,1
  81b2d4:	e0bffd15 	stw	r2,-12(fp)
  81b2d8:	008020b4 	movhi	r2,130
  81b2dc:	10b96a04 	addi	r2,r2,-6744
  81b2e0:	10800017 	ldw	r2,0(r2)
  81b2e4:	1007883a 	mov	r3,r2
  81b2e8:	e0bffd17 	ldw	r2,-12(fp)
  81b2ec:	18bfd72e 	bgeu	r3,r2,81b24c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81b2f0:	e03fff15 	stw	zero,-4(fp)
  81b2f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b2f8:	e037883a 	mov	sp,fp
  81b2fc:	dfc00217 	ldw	ra,8(sp)
  81b300:	df000117 	ldw	fp,4(sp)
  81b304:	dc000017 	ldw	r16,0(sp)
  81b308:	dec00304 	addi	sp,sp,12
  81b30c:	f800283a 	ret

0081b310 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81b310:	defff404 	addi	sp,sp,-48
  81b314:	dfc00b15 	stw	ra,44(sp)
  81b318:	df000a15 	stw	fp,40(sp)
  81b31c:	df000a04 	addi	fp,sp,40
  81b320:	e13ffb15 	stw	r4,-20(fp)
  81b324:	e17ffc15 	stw	r5,-16(fp)
  81b328:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81b32c:	00bfffc4 	movi	r2,-1
  81b330:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81b334:	00bffb44 	movi	r2,-19
  81b338:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81b33c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81b340:	e13ffb17 	ldw	r4,-20(fp)
  81b344:	014020b4 	movhi	r5,130
  81b348:	29796804 	addi	r5,r5,-6752
  81b34c:	081ae580 	call	81ae58 <alt_find_dev>
  81b350:	e0bffa15 	stw	r2,-24(fp)
  81b354:	e0bffa17 	ldw	r2,-24(fp)
  81b358:	1004c03a 	cmpne	r2,r2,zero
  81b35c:	1000051e 	bne	r2,zero,81b374 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81b360:	e13ffb17 	ldw	r4,-20(fp)
  81b364:	081bbac0 	call	81bbac <alt_find_file>
  81b368:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81b36c:	00800044 	movi	r2,1
  81b370:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81b374:	e0bffa17 	ldw	r2,-24(fp)
  81b378:	1005003a 	cmpeq	r2,r2,zero
  81b37c:	1000311e 	bne	r2,zero,81b444 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81b380:	e13ffa17 	ldw	r4,-24(fp)
  81b384:	081bccc0 	call	81bccc <alt_get_fd>
  81b388:	e0bff815 	stw	r2,-32(fp)
  81b38c:	e0bff817 	ldw	r2,-32(fp)
  81b390:	1004403a 	cmpge	r2,r2,zero
  81b394:	1000031e 	bne	r2,zero,81b3a4 <open+0x94>
    {
      status = index;
  81b398:	e0bff817 	ldw	r2,-32(fp)
  81b39c:	e0bff715 	stw	r2,-36(fp)
  81b3a0:	00002a06 	br	81b44c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  81b3a4:	e13ff817 	ldw	r4,-32(fp)
  81b3a8:	01400304 	movi	r5,12
  81b3ac:	080f9440 	call	80f944 <__mulsi3>
  81b3b0:	1007883a 	mov	r3,r2
  81b3b4:	008020b4 	movhi	r2,130
  81b3b8:	10b4ce04 	addi	r2,r2,-11464
  81b3bc:	1885883a 	add	r2,r3,r2
  81b3c0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81b3c4:	e0fffc17 	ldw	r3,-16(fp)
  81b3c8:	00900034 	movhi	r2,16384
  81b3cc:	10bfffc4 	addi	r2,r2,-1
  81b3d0:	1886703a 	and	r3,r3,r2
  81b3d4:	e0bff917 	ldw	r2,-28(fp)
  81b3d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81b3dc:	e0bff617 	ldw	r2,-40(fp)
  81b3e0:	1004c03a 	cmpne	r2,r2,zero
  81b3e4:	1000061e 	bne	r2,zero,81b400 <open+0xf0>
  81b3e8:	e13ff917 	ldw	r4,-28(fp)
  81b3ec:	081b2180 	call	81b218 <alt_file_locked>
  81b3f0:	e0bff715 	stw	r2,-36(fp)
  81b3f4:	e0bff717 	ldw	r2,-36(fp)
  81b3f8:	1004803a 	cmplt	r2,r2,zero
  81b3fc:	1000131e 	bne	r2,zero,81b44c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81b400:	e0bffa17 	ldw	r2,-24(fp)
  81b404:	10800317 	ldw	r2,12(r2)
  81b408:	1005003a 	cmpeq	r2,r2,zero
  81b40c:	1000091e 	bne	r2,zero,81b434 <open+0x124>
  81b410:	e0bffa17 	ldw	r2,-24(fp)
  81b414:	10800317 	ldw	r2,12(r2)
  81b418:	e13ff917 	ldw	r4,-28(fp)
  81b41c:	e17ffb17 	ldw	r5,-20(fp)
  81b420:	e1bffc17 	ldw	r6,-16(fp)
  81b424:	e1fffd17 	ldw	r7,-12(fp)
  81b428:	103ee83a 	callr	r2
  81b42c:	e0bfff15 	stw	r2,-4(fp)
  81b430:	00000106 	br	81b438 <open+0x128>
  81b434:	e03fff15 	stw	zero,-4(fp)
  81b438:	e0bfff17 	ldw	r2,-4(fp)
  81b43c:	e0bff715 	stw	r2,-36(fp)
  81b440:	00000206 	br	81b44c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81b444:	00bffb44 	movi	r2,-19
  81b448:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81b44c:	e0bff717 	ldw	r2,-36(fp)
  81b450:	1004403a 	cmpge	r2,r2,zero
  81b454:	1000091e 	bne	r2,zero,81b47c <open+0x16c>
  {
    alt_release_fd (index);  
  81b458:	e13ff817 	ldw	r4,-32(fp)
  81b45c:	0810a800 	call	810a80 <alt_release_fd>
    ALT_ERRNO = -status;
  81b460:	081b49c0 	call	81b49c <alt_get_errno>
  81b464:	e0fff717 	ldw	r3,-36(fp)
  81b468:	00c7c83a 	sub	r3,zero,r3
  81b46c:	10c00015 	stw	r3,0(r2)
    return -1;
  81b470:	00bfffc4 	movi	r2,-1
  81b474:	e0bffe15 	stw	r2,-8(fp)
  81b478:	00000206 	br	81b484 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  81b47c:	e0bff817 	ldw	r2,-32(fp)
  81b480:	e0bffe15 	stw	r2,-8(fp)
  81b484:	e0bffe17 	ldw	r2,-8(fp)
}
  81b488:	e037883a 	mov	sp,fp
  81b48c:	dfc00117 	ldw	ra,4(sp)
  81b490:	df000017 	ldw	fp,0(sp)
  81b494:	dec00204 	addi	sp,sp,8
  81b498:	f800283a 	ret

0081b49c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b49c:	defffd04 	addi	sp,sp,-12
  81b4a0:	dfc00215 	stw	ra,8(sp)
  81b4a4:	df000115 	stw	fp,4(sp)
  81b4a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b4ac:	008020b4 	movhi	r2,130
  81b4b0:	10b96b04 	addi	r2,r2,-6740
  81b4b4:	10800017 	ldw	r2,0(r2)
  81b4b8:	1005003a 	cmpeq	r2,r2,zero
  81b4bc:	1000061e 	bne	r2,zero,81b4d8 <alt_get_errno+0x3c>
  81b4c0:	008020b4 	movhi	r2,130
  81b4c4:	10b96b04 	addi	r2,r2,-6740
  81b4c8:	10800017 	ldw	r2,0(r2)
  81b4cc:	103ee83a 	callr	r2
  81b4d0:	e0bfff15 	stw	r2,-4(fp)
  81b4d4:	00000306 	br	81b4e4 <alt_get_errno+0x48>
  81b4d8:	008020b4 	movhi	r2,130
  81b4dc:	10807204 	addi	r2,r2,456
  81b4e0:	e0bfff15 	stw	r2,-4(fp)
  81b4e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b4e8:	e037883a 	mov	sp,fp
  81b4ec:	dfc00117 	ldw	ra,4(sp)
  81b4f0:	df000017 	ldw	fp,0(sp)
  81b4f4:	dec00204 	addi	sp,sp,8
  81b4f8:	f800283a 	ret

0081b4fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81b4fc:	defffa04 	addi	sp,sp,-24
  81b500:	df000515 	stw	fp,20(sp)
  81b504:	df000504 	addi	fp,sp,20
  81b508:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b50c:	0005303a 	rdctl	r2,status
  81b510:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b514:	e0fffd17 	ldw	r3,-12(fp)
  81b518:	00bfff84 	movi	r2,-2
  81b51c:	1884703a 	and	r2,r3,r2
  81b520:	1001703a 	wrctl	status,r2
  
  return context;
  81b524:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81b528:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81b52c:	e0bfff17 	ldw	r2,-4(fp)
  81b530:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81b534:	e0bffc17 	ldw	r2,-16(fp)
  81b538:	10c00017 	ldw	r3,0(r2)
  81b53c:	e0bffc17 	ldw	r2,-16(fp)
  81b540:	10800117 	ldw	r2,4(r2)
  81b544:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81b548:	e0bffc17 	ldw	r2,-16(fp)
  81b54c:	10c00117 	ldw	r3,4(r2)
  81b550:	e0bffc17 	ldw	r2,-16(fp)
  81b554:	10800017 	ldw	r2,0(r2)
  81b558:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81b55c:	e0fffc17 	ldw	r3,-16(fp)
  81b560:	e0bffc17 	ldw	r2,-16(fp)
  81b564:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81b568:	e0fffc17 	ldw	r3,-16(fp)
  81b56c:	e0bffc17 	ldw	r2,-16(fp)
  81b570:	18800015 	stw	r2,0(r3)
  81b574:	e0bffe17 	ldw	r2,-8(fp)
  81b578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b57c:	e0bffb17 	ldw	r2,-20(fp)
  81b580:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81b584:	e037883a 	mov	sp,fp
  81b588:	df000017 	ldw	fp,0(sp)
  81b58c:	dec00104 	addi	sp,sp,4
  81b590:	f800283a 	ret

0081b594 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81b594:	defffb04 	addi	sp,sp,-20
  81b598:	dfc00415 	stw	ra,16(sp)
  81b59c:	df000315 	stw	fp,12(sp)
  81b5a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81b5a4:	d0a02e17 	ldw	r2,-32584(gp)
  81b5a8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81b5ac:	d0a73517 	ldw	r2,-25388(gp)
  81b5b0:	10800044 	addi	r2,r2,1
  81b5b4:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81b5b8:	00003106 	br	81b680 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81b5bc:	e0bffe17 	ldw	r2,-8(fp)
  81b5c0:	10800017 	ldw	r2,0(r2)
  81b5c4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81b5c8:	e0bffe17 	ldw	r2,-8(fp)
  81b5cc:	10800403 	ldbu	r2,16(r2)
  81b5d0:	10803fcc 	andi	r2,r2,255
  81b5d4:	1005003a 	cmpeq	r2,r2,zero
  81b5d8:	1000051e 	bne	r2,zero,81b5f0 <alt_tick+0x5c>
  81b5dc:	d0a73517 	ldw	r2,-25388(gp)
  81b5e0:	1004c03a 	cmpne	r2,r2,zero
  81b5e4:	1000021e 	bne	r2,zero,81b5f0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81b5e8:	e0bffe17 	ldw	r2,-8(fp)
  81b5ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81b5f0:	e0bffe17 	ldw	r2,-8(fp)
  81b5f4:	10c00217 	ldw	r3,8(r2)
  81b5f8:	d0a73517 	ldw	r2,-25388(gp)
  81b5fc:	10c01e36 	bltu	r2,r3,81b678 <alt_tick+0xe4>
  81b600:	e0bffe17 	ldw	r2,-8(fp)
  81b604:	10800403 	ldbu	r2,16(r2)
  81b608:	10803fcc 	andi	r2,r2,255
  81b60c:	1004c03a 	cmpne	r2,r2,zero
  81b610:	1000191e 	bne	r2,zero,81b678 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81b614:	e0bffe17 	ldw	r2,-8(fp)
  81b618:	10c00317 	ldw	r3,12(r2)
  81b61c:	e0bffe17 	ldw	r2,-8(fp)
  81b620:	11000517 	ldw	r4,20(r2)
  81b624:	183ee83a 	callr	r3
  81b628:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81b62c:	e0bffd17 	ldw	r2,-12(fp)
  81b630:	1004c03a 	cmpne	r2,r2,zero
  81b634:	1000031e 	bne	r2,zero,81b644 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81b638:	e13ffe17 	ldw	r4,-8(fp)
  81b63c:	081b4fc0 	call	81b4fc <alt_alarm_stop>
  81b640:	00000d06 	br	81b678 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81b644:	e0bffe17 	ldw	r2,-8(fp)
  81b648:	10c00217 	ldw	r3,8(r2)
  81b64c:	e0bffd17 	ldw	r2,-12(fp)
  81b650:	1887883a 	add	r3,r3,r2
  81b654:	e0bffe17 	ldw	r2,-8(fp)
  81b658:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81b65c:	e0bffe17 	ldw	r2,-8(fp)
  81b660:	10c00217 	ldw	r3,8(r2)
  81b664:	d0a73517 	ldw	r2,-25388(gp)
  81b668:	1880032e 	bgeu	r3,r2,81b678 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81b66c:	e0fffe17 	ldw	r3,-8(fp)
  81b670:	00800044 	movi	r2,1
  81b674:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81b678:	e0bfff17 	ldw	r2,-4(fp)
  81b67c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81b680:	d0e02e04 	addi	r3,gp,-32584
  81b684:	e0bffe17 	ldw	r2,-8(fp)
  81b688:	10ffcc1e 	bne	r2,r3,81b5bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81b68c:	0811d9c0 	call	811d9c <OSTimeTick>
}
  81b690:	e037883a 	mov	sp,fp
  81b694:	dfc00117 	ldw	ra,4(sp)
  81b698:	df000017 	ldw	fp,0(sp)
  81b69c:	dec00204 	addi	sp,sp,8
  81b6a0:	f800283a 	ret

0081b6a4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81b6a4:	deffff04 	addi	sp,sp,-4
  81b6a8:	df000015 	stw	fp,0(sp)
  81b6ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81b6b0:	000170fa 	wrctl	ienable,zero
}
  81b6b4:	e037883a 	mov	sp,fp
  81b6b8:	df000017 	ldw	fp,0(sp)
  81b6bc:	dec00104 	addi	sp,sp,4
  81b6c0:	f800283a 	ret

0081b6c4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81b6c4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81b6c8:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81b6cc:	d1272e17 	ldw	r4,-25416(gp)

      stw ra,  0(sp)
  81b6d0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81b6d4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81b6d8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81b6dc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81b6e0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81b6e4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81b6e8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81b6ec:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81b6f0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81b6f4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81b6f8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81b6fc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81b700:	081bae40 	call	81bae4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81b704:	d1272917 	ldw	r4,-25436(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81b708:	d1672107 	ldb	r5,-25468(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81b70c:	d1272e15 	stw	r4,-25416(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81b710:	d1672145 	stb	r5,-25467(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81b714:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81b718:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81b71c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81b720:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81b724:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81b728:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81b72c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81b730:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81b734:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81b738:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81b73c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81b740:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81b744:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81b748:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81b74c:	f800283a 	ret

0081b750 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81b750:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81b754:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81b758:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81b75c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81b760:	081bae40 	call	81bae4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81b764:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81b768:	d4a71f45 	stb	r18,-25475(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81b76c:	003fe506 	br	81b704 <OSCtxSw+0x40>

0081b770 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81b770:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81b774:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81b778:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81b77c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81b780:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81b784:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81b788:	dec00204 	addi	sp,sp,8

      callr r2
  81b78c:	103ee83a 	callr	r2

      nop
  81b790:	0001883a 	nop

0081b794 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81b794:	defff704 	addi	sp,sp,-36
  81b798:	dfc00815 	stw	ra,32(sp)
  81b79c:	df000715 	stw	fp,28(sp)
  81b7a0:	df000704 	addi	fp,sp,28
  81b7a4:	e13ffc15 	stw	r4,-16(fp)
  81b7a8:	e17ffd15 	stw	r5,-12(fp)
  81b7ac:	e1bffe15 	stw	r6,-8(fp)
  81b7b0:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81b7b4:	e0bffe17 	ldw	r2,-8(fp)
  81b7b8:	1007883a 	mov	r3,r2
  81b7bc:	00bfff04 	movi	r2,-4
  81b7c0:	1884703a 	and	r2,r3,r2
  81b7c4:	10bf0004 	addi	r2,r2,-1024
  81b7c8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81b7cc:	e0bff917 	ldw	r2,-28(fp)
  81b7d0:	10000015 	stw	zero,0(r2)
  81b7d4:	e0bff917 	ldw	r2,-28(fp)
  81b7d8:	10c0bb04 	addi	r3,r2,748
  81b7dc:	e0bff917 	ldw	r2,-28(fp)
  81b7e0:	10c00115 	stw	r3,4(r2)
  81b7e4:	e0bff917 	ldw	r2,-28(fp)
  81b7e8:	1080bb04 	addi	r2,r2,748
  81b7ec:	10c01704 	addi	r3,r2,92
  81b7f0:	e0bff917 	ldw	r2,-28(fp)
  81b7f4:	10c00215 	stw	r3,8(r2)
  81b7f8:	e0bff917 	ldw	r2,-28(fp)
  81b7fc:	1080bb04 	addi	r2,r2,748
  81b800:	10c02e04 	addi	r3,r2,184
  81b804:	e0bff917 	ldw	r2,-28(fp)
  81b808:	10c00315 	stw	r3,12(r2)
  81b80c:	e0bff917 	ldw	r2,-28(fp)
  81b810:	10000415 	stw	zero,16(r2)
  81b814:	e0bff917 	ldw	r2,-28(fp)
  81b818:	10800504 	addi	r2,r2,20
  81b81c:	1009883a 	mov	r4,r2
  81b820:	01800644 	movi	r6,25
  81b824:	000b883a 	mov	r5,zero
  81b828:	08081280 	call	808128 <memset>
  81b82c:	e0bff917 	ldw	r2,-28(fp)
  81b830:	10000c15 	stw	zero,48(r2)
  81b834:	e0fff917 	ldw	r3,-28(fp)
  81b838:	008020b4 	movhi	r2,130
  81b83c:	10b2b404 	addi	r2,r2,-13616
  81b840:	18800d15 	stw	r2,52(r3)
  81b844:	e0bff917 	ldw	r2,-28(fp)
  81b848:	10000e15 	stw	zero,56(r2)
  81b84c:	e0bff917 	ldw	r2,-28(fp)
  81b850:	10000f15 	stw	zero,60(r2)
  81b854:	e0bff917 	ldw	r2,-28(fp)
  81b858:	10001015 	stw	zero,64(r2)
  81b85c:	e0bff917 	ldw	r2,-28(fp)
  81b860:	10001115 	stw	zero,68(r2)
  81b864:	e0bff917 	ldw	r2,-28(fp)
  81b868:	10001215 	stw	zero,72(r2)
  81b86c:	e0bff917 	ldw	r2,-28(fp)
  81b870:	10001315 	stw	zero,76(r2)
  81b874:	e0bff917 	ldw	r2,-28(fp)
  81b878:	10001415 	stw	zero,80(r2)
  81b87c:	e0bff917 	ldw	r2,-28(fp)
  81b880:	10001515 	stw	zero,84(r2)
  81b884:	e0bff917 	ldw	r2,-28(fp)
  81b888:	10001615 	stw	zero,88(r2)
  81b88c:	e0bff917 	ldw	r2,-28(fp)
  81b890:	10001715 	stw	zero,92(r2)
  81b894:	e0bff917 	ldw	r2,-28(fp)
  81b898:	10001805 	stb	zero,96(r2)
  81b89c:	e0bff917 	ldw	r2,-28(fp)
  81b8a0:	10801f04 	addi	r2,r2,124
  81b8a4:	10000015 	stw	zero,0(r2)
  81b8a8:	10000115 	stw	zero,4(r2)
  81b8ac:	10000215 	stw	zero,8(r2)
  81b8b0:	10000315 	stw	zero,12(r2)
  81b8b4:	10000415 	stw	zero,16(r2)
  81b8b8:	10000515 	stw	zero,20(r2)
  81b8bc:	10000615 	stw	zero,24(r2)
  81b8c0:	10000715 	stw	zero,28(r2)
  81b8c4:	10000815 	stw	zero,32(r2)
  81b8c8:	e0bff917 	ldw	r2,-28(fp)
  81b8cc:	10002815 	stw	zero,160(r2)
  81b8d0:	e0fff917 	ldw	r3,-28(fp)
  81b8d4:	00800044 	movi	r2,1
  81b8d8:	18802915 	stw	r2,164(r3)
  81b8dc:	18002a15 	stw	zero,168(r3)
  81b8e0:	e0fff917 	ldw	r3,-28(fp)
  81b8e4:	008cc384 	movi	r2,13070
  81b8e8:	18802b0d 	sth	r2,172(r3)
  81b8ec:	e0fff917 	ldw	r3,-28(fp)
  81b8f0:	00aaf344 	movi	r2,-21555
  81b8f4:	18802b8d 	sth	r2,174(r3)
  81b8f8:	e0fff917 	ldw	r3,-28(fp)
  81b8fc:	00848d04 	movi	r2,4660
  81b900:	18802c0d 	sth	r2,176(r3)
  81b904:	e0fff917 	ldw	r3,-28(fp)
  81b908:	00b99b44 	movi	r2,-6547
  81b90c:	18802c8d 	sth	r2,178(r3)
  81b910:	e0fff917 	ldw	r3,-28(fp)
  81b914:	00b7bb04 	movi	r2,-8468
  81b918:	18802d0d 	sth	r2,180(r3)
  81b91c:	e0fff917 	ldw	r3,-28(fp)
  81b920:	00800144 	movi	r2,5
  81b924:	18802d8d 	sth	r2,182(r3)
  81b928:	e0fff917 	ldw	r3,-28(fp)
  81b92c:	008002c4 	movi	r2,11
  81b930:	18802e0d 	sth	r2,184(r3)
  81b934:	e0bff917 	ldw	r2,-28(fp)
  81b938:	10002f15 	stw	zero,188(r2)
  81b93c:	e0bff917 	ldw	r2,-28(fp)
  81b940:	10003015 	stw	zero,192(r2)
  81b944:	e0bff917 	ldw	r2,-28(fp)
  81b948:	10003115 	stw	zero,196(r2)
  81b94c:	e0bff917 	ldw	r2,-28(fp)
  81b950:	10003215 	stw	zero,200(r2)
  81b954:	e0bff917 	ldw	r2,-28(fp)
  81b958:	10003315 	stw	zero,204(r2)
  81b95c:	e0bff917 	ldw	r2,-28(fp)
  81b960:	10003415 	stw	zero,208(r2)
  81b964:	e0bff917 	ldw	r2,-28(fp)
  81b968:	10003e15 	stw	zero,248(r2)
  81b96c:	e0bff917 	ldw	r2,-28(fp)
  81b970:	10003f15 	stw	zero,252(r2)
  81b974:	e0bff917 	ldw	r2,-28(fp)
  81b978:	10004015 	stw	zero,256(r2)
  81b97c:	e0bff917 	ldw	r2,-28(fp)
  81b980:	10004115 	stw	zero,260(r2)
  81b984:	e0bff917 	ldw	r2,-28(fp)
  81b988:	10004215 	stw	zero,264(r2)
  81b98c:	e0bff917 	ldw	r2,-28(fp)
  81b990:	10004315 	stw	zero,268(r2)
  81b994:	e0bff917 	ldw	r2,-28(fp)
  81b998:	10004415 	stw	zero,272(r2)
  81b99c:	e0bff917 	ldw	r2,-28(fp)
  81b9a0:	10004515 	stw	zero,276(r2)
  81b9a4:	e0bff917 	ldw	r2,-28(fp)
  81b9a8:	10004615 	stw	zero,280(r2)
  81b9ac:	e0bff917 	ldw	r2,-28(fp)
  81b9b0:	10004715 	stw	zero,284(r2)
  81b9b4:	e0bff917 	ldw	r2,-28(fp)
  81b9b8:	10003505 	stb	zero,212(r2)
  81b9bc:	e0bff917 	ldw	r2,-28(fp)
  81b9c0:	10003705 	stb	zero,220(r2)
  81b9c4:	e0bff917 	ldw	r2,-28(fp)
  81b9c8:	10003d15 	stw	zero,244(r2)
  81b9cc:	e0bff917 	ldw	r2,-28(fp)
  81b9d0:	10005215 	stw	zero,328(r2)
  81b9d4:	e0bff917 	ldw	r2,-28(fp)
  81b9d8:	10005315 	stw	zero,332(r2)
  81b9dc:	e0bff917 	ldw	r2,-28(fp)
  81b9e0:	10005415 	stw	zero,336(r2)
  81b9e4:	e0bff917 	ldw	r2,-28(fp)
  81b9e8:	10005515 	stw	zero,340(r2)
  81b9ec:	e0bff917 	ldw	r2,-28(fp)
  81b9f0:	1000b515 	stw	zero,724(r2)
  81b9f4:	e0bff917 	ldw	r2,-28(fp)
  81b9f8:	10007515 	stw	zero,468(r2)
  81b9fc:	e0bff917 	ldw	r2,-28(fp)
  81ba00:	1000b715 	stw	zero,732(r2)
  81ba04:	e0bff917 	ldw	r2,-28(fp)
  81ba08:	1000b815 	stw	zero,736(r2)
  81ba0c:	e0bff917 	ldw	r2,-28(fp)
  81ba10:	1000b915 	stw	zero,740(r2)
  81ba14:	e0bff917 	ldw	r2,-28(fp)
  81ba18:	1000ba15 	stw	zero,744(r2)
  81ba1c:	e0bff917 	ldw	r2,-28(fp)
  81ba20:	1080bb04 	addi	r2,r2,748
  81ba24:	1009883a 	mov	r4,r2
  81ba28:	01804504 	movi	r6,276
  81ba2c:	000b883a 	mov	r5,zero
  81ba30:	08081280 	call	808128 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81ba34:	e0bff917 	ldw	r2,-28(fp)
  81ba38:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81ba3c:	e0bffb17 	ldw	r2,-20(fp)
  81ba40:	10bff304 	addi	r2,r2,-52
  81ba44:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81ba48:	e0bffa17 	ldw	r2,-24(fp)
  81ba4c:	10c00c04 	addi	r3,r2,48
  81ba50:	e0bffc17 	ldw	r2,-16(fp)
  81ba54:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81ba58:	e0bffa17 	ldw	r2,-24(fp)
  81ba5c:	10c00b04 	addi	r3,r2,44
  81ba60:	e0bffd17 	ldw	r2,-12(fp)
  81ba64:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81ba68:	e0bffa17 	ldw	r2,-24(fp)
  81ba6c:	10c00a04 	addi	r3,r2,40
  81ba70:	e0bff917 	ldw	r2,-28(fp)
  81ba74:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81ba78:	008020b4 	movhi	r2,130
  81ba7c:	10addc04 	addi	r2,r2,-18576
  81ba80:	10c00104 	addi	r3,r2,4
  81ba84:	e0bffa17 	ldw	r2,-24(fp)
  81ba88:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81ba8c:	e0bffa17 	ldw	r2,-24(fp)
}
  81ba90:	e037883a 	mov	sp,fp
  81ba94:	dfc00117 	ldw	ra,4(sp)
  81ba98:	df000017 	ldw	fp,0(sp)
  81ba9c:	dec00204 	addi	sp,sp,8
  81baa0:	f800283a 	ret

0081baa4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81baa4:	defffe04 	addi	sp,sp,-8
  81baa8:	df000115 	stw	fp,4(sp)
  81baac:	df000104 	addi	fp,sp,4
  81bab0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81bab4:	e037883a 	mov	sp,fp
  81bab8:	df000017 	ldw	fp,0(sp)
  81babc:	dec00104 	addi	sp,sp,4
  81bac0:	f800283a 	ret

0081bac4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81bac4:	defffe04 	addi	sp,sp,-8
  81bac8:	df000115 	stw	fp,4(sp)
  81bacc:	df000104 	addi	fp,sp,4
  81bad0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81bad4:	e037883a 	mov	sp,fp
  81bad8:	df000017 	ldw	fp,0(sp)
  81badc:	dec00104 	addi	sp,sp,4
  81bae0:	f800283a 	ret

0081bae4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81bae4:	deffff04 	addi	sp,sp,-4
  81bae8:	df000015 	stw	fp,0(sp)
  81baec:	d839883a 	mov	fp,sp
}
  81baf0:	e037883a 	mov	sp,fp
  81baf4:	df000017 	ldw	fp,0(sp)
  81baf8:	dec00104 	addi	sp,sp,4
  81bafc:	f800283a 	ret

0081bb00 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81bb00:	deffff04 	addi	sp,sp,-4
  81bb04:	df000015 	stw	fp,0(sp)
  81bb08:	d839883a 	mov	fp,sp
}
  81bb0c:	e037883a 	mov	sp,fp
  81bb10:	df000017 	ldw	fp,0(sp)
  81bb14:	dec00104 	addi	sp,sp,4
  81bb18:	f800283a 	ret

0081bb1c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81bb1c:	deffff04 	addi	sp,sp,-4
  81bb20:	df000015 	stw	fp,0(sp)
  81bb24:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81bb28:	e037883a 	mov	sp,fp
  81bb2c:	df000017 	ldw	fp,0(sp)
  81bb30:	dec00104 	addi	sp,sp,4
  81bb34:	f800283a 	ret

0081bb38 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81bb38:	deffff04 	addi	sp,sp,-4
  81bb3c:	df000015 	stw	fp,0(sp)
  81bb40:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81bb44:	e037883a 	mov	sp,fp
  81bb48:	df000017 	ldw	fp,0(sp)
  81bb4c:	dec00104 	addi	sp,sp,4
  81bb50:	f800283a 	ret

0081bb54 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81bb54:	deffff04 	addi	sp,sp,-4
  81bb58:	df000015 	stw	fp,0(sp)
  81bb5c:	d839883a 	mov	fp,sp
}
  81bb60:	e037883a 	mov	sp,fp
  81bb64:	df000017 	ldw	fp,0(sp)
  81bb68:	dec00104 	addi	sp,sp,4
  81bb6c:	f800283a 	ret

0081bb70 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81bb70:	deffff04 	addi	sp,sp,-4
  81bb74:	df000015 	stw	fp,0(sp)
  81bb78:	d839883a 	mov	fp,sp
}
  81bb7c:	e037883a 	mov	sp,fp
  81bb80:	df000017 	ldw	fp,0(sp)
  81bb84:	dec00104 	addi	sp,sp,4
  81bb88:	f800283a 	ret

0081bb8c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81bb8c:	defffe04 	addi	sp,sp,-8
  81bb90:	df000115 	stw	fp,4(sp)
  81bb94:	df000104 	addi	fp,sp,4
  81bb98:	e13fff15 	stw	r4,-4(fp)
}
  81bb9c:	e037883a 	mov	sp,fp
  81bba0:	df000017 	ldw	fp,0(sp)
  81bba4:	dec00104 	addi	sp,sp,4
  81bba8:	f800283a 	ret

0081bbac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81bbac:	defffa04 	addi	sp,sp,-24
  81bbb0:	dfc00515 	stw	ra,20(sp)
  81bbb4:	df000415 	stw	fp,16(sp)
  81bbb8:	df000404 	addi	fp,sp,16
  81bbbc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81bbc0:	008020b4 	movhi	r2,130
  81bbc4:	10b96604 	addi	r2,r2,-6760
  81bbc8:	10800017 	ldw	r2,0(r2)
  81bbcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81bbd0:	00003306 	br	81bca0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81bbd4:	e0bffd17 	ldw	r2,-12(fp)
  81bbd8:	11000217 	ldw	r4,8(r2)
  81bbdc:	08018140 	call	801814 <strlen>
  81bbe0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81bbe4:	e0bffd17 	ldw	r2,-12(fp)
  81bbe8:	10c00217 	ldw	r3,8(r2)
  81bbec:	e0bffc17 	ldw	r2,-16(fp)
  81bbf0:	1885883a 	add	r2,r3,r2
  81bbf4:	10bfffc4 	addi	r2,r2,-1
  81bbf8:	10800003 	ldbu	r2,0(r2)
  81bbfc:	10803fcc 	andi	r2,r2,255
  81bc00:	1080201c 	xori	r2,r2,128
  81bc04:	10bfe004 	addi	r2,r2,-128
  81bc08:	10800bd8 	cmpnei	r2,r2,47
  81bc0c:	1000031e 	bne	r2,zero,81bc1c <alt_find_file+0x70>
    {
      len -= 1;
  81bc10:	e0bffc17 	ldw	r2,-16(fp)
  81bc14:	10bfffc4 	addi	r2,r2,-1
  81bc18:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81bc1c:	e0bffc17 	ldw	r2,-16(fp)
  81bc20:	1007883a 	mov	r3,r2
  81bc24:	e0bffe17 	ldw	r2,-8(fp)
  81bc28:	1885883a 	add	r2,r3,r2
  81bc2c:	10800003 	ldbu	r2,0(r2)
  81bc30:	10803fcc 	andi	r2,r2,255
  81bc34:	1080201c 	xori	r2,r2,128
  81bc38:	10bfe004 	addi	r2,r2,-128
  81bc3c:	10800be0 	cmpeqi	r2,r2,47
  81bc40:	10000a1e 	bne	r2,zero,81bc6c <alt_find_file+0xc0>
  81bc44:	e0bffc17 	ldw	r2,-16(fp)
  81bc48:	1007883a 	mov	r3,r2
  81bc4c:	e0bffe17 	ldw	r2,-8(fp)
  81bc50:	1885883a 	add	r2,r3,r2
  81bc54:	10800003 	ldbu	r2,0(r2)
  81bc58:	10803fcc 	andi	r2,r2,255
  81bc5c:	1080201c 	xori	r2,r2,128
  81bc60:	10bfe004 	addi	r2,r2,-128
  81bc64:	1004c03a 	cmpne	r2,r2,zero
  81bc68:	10000a1e 	bne	r2,zero,81bc94 <alt_find_file+0xe8>
  81bc6c:	e0bffd17 	ldw	r2,-12(fp)
  81bc70:	11000217 	ldw	r4,8(r2)
  81bc74:	e1bffc17 	ldw	r6,-16(fp)
  81bc78:	e17ffe17 	ldw	r5,-8(fp)
  81bc7c:	081be1c0 	call	81be1c <memcmp>
  81bc80:	1004c03a 	cmpne	r2,r2,zero
  81bc84:	1000031e 	bne	r2,zero,81bc94 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81bc88:	e0bffd17 	ldw	r2,-12(fp)
  81bc8c:	e0bfff15 	stw	r2,-4(fp)
  81bc90:	00000806 	br	81bcb4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81bc94:	e0bffd17 	ldw	r2,-12(fp)
  81bc98:	10800017 	ldw	r2,0(r2)
  81bc9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81bca0:	00c020b4 	movhi	r3,130
  81bca4:	18f96604 	addi	r3,r3,-6760
  81bca8:	e0bffd17 	ldw	r2,-12(fp)
  81bcac:	10ffc91e 	bne	r2,r3,81bbd4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81bcb0:	e03fff15 	stw	zero,-4(fp)
  81bcb4:	e0bfff17 	ldw	r2,-4(fp)
}
  81bcb8:	e037883a 	mov	sp,fp
  81bcbc:	dfc00117 	ldw	ra,4(sp)
  81bcc0:	df000017 	ldw	fp,0(sp)
  81bcc4:	dec00204 	addi	sp,sp,8
  81bcc8:	f800283a 	ret

0081bccc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81bccc:	defff704 	addi	sp,sp,-36
  81bcd0:	dfc00815 	stw	ra,32(sp)
  81bcd4:	df000715 	stw	fp,28(sp)
  81bcd8:	dc000615 	stw	r16,24(sp)
  81bcdc:	df000604 	addi	fp,sp,24
  81bce0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81bce4:	00bffa04 	movi	r2,-24
  81bce8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81bcec:	008020b4 	movhi	r2,130
  81bcf0:	10807604 	addi	r2,r2,472
  81bcf4:	10800017 	ldw	r2,0(r2)
  81bcf8:	e0bffa15 	stw	r2,-24(fp)
  81bcfc:	e03ffb0d 	sth	zero,-20(fp)
  81bd00:	e17ffb0b 	ldhu	r5,-20(fp)
  81bd04:	e1bffe04 	addi	r6,fp,-8
  81bd08:	e13ffa17 	ldw	r4,-24(fp)
  81bd0c:	0816bbc0 	call	816bbc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81bd10:	e03ffd15 	stw	zero,-12(fp)
  81bd14:	00002006 	br	81bd98 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  81bd18:	e13ffd17 	ldw	r4,-12(fp)
  81bd1c:	040020b4 	movhi	r16,130
  81bd20:	8434ce04 	addi	r16,r16,-11464
  81bd24:	01400304 	movi	r5,12
  81bd28:	080f9440 	call	80f944 <__mulsi3>
  81bd2c:	1405883a 	add	r2,r2,r16
  81bd30:	10800017 	ldw	r2,0(r2)
  81bd34:	1004c03a 	cmpne	r2,r2,zero
  81bd38:	1000141e 	bne	r2,zero,81bd8c <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  81bd3c:	e13ffd17 	ldw	r4,-12(fp)
  81bd40:	040020b4 	movhi	r16,130
  81bd44:	8434ce04 	addi	r16,r16,-11464
  81bd48:	01400304 	movi	r5,12
  81bd4c:	080f9440 	call	80f944 <__mulsi3>
  81bd50:	1407883a 	add	r3,r2,r16
  81bd54:	e0bfff17 	ldw	r2,-4(fp)
  81bd58:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81bd5c:	008020b4 	movhi	r2,130
  81bd60:	10b96a04 	addi	r2,r2,-6744
  81bd64:	10c00017 	ldw	r3,0(r2)
  81bd68:	e0bffd17 	ldw	r2,-12(fp)
  81bd6c:	1880040e 	bge	r3,r2,81bd80 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  81bd70:	00c020b4 	movhi	r3,130
  81bd74:	18f96a04 	addi	r3,r3,-6744
  81bd78:	e0bffd17 	ldw	r2,-12(fp)
  81bd7c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81bd80:	e0bffd17 	ldw	r2,-12(fp)
  81bd84:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81bd88:	00000606 	br	81bda4 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81bd8c:	e0bffd17 	ldw	r2,-12(fp)
  81bd90:	10800044 	addi	r2,r2,1
  81bd94:	e0bffd15 	stw	r2,-12(fp)
  81bd98:	e0bffd17 	ldw	r2,-12(fp)
  81bd9c:	10800810 	cmplti	r2,r2,32
  81bda0:	103fdd1e 	bne	r2,zero,81bd18 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81bda4:	008020b4 	movhi	r2,130
  81bda8:	10807604 	addi	r2,r2,472
  81bdac:	11000017 	ldw	r4,0(r2)
  81bdb0:	0816fb40 	call	816fb4 <OSSemPost>

  return rc;
  81bdb4:	e0bffc17 	ldw	r2,-16(fp)
}
  81bdb8:	e037883a 	mov	sp,fp
  81bdbc:	dfc00217 	ldw	ra,8(sp)
  81bdc0:	df000117 	ldw	fp,4(sp)
  81bdc4:	dc000017 	ldw	r16,0(sp)
  81bdc8:	dec00304 	addi	sp,sp,12
  81bdcc:	f800283a 	ret

0081bdd0 <atexit>:
  81bdd0:	200b883a 	mov	r5,r4
  81bdd4:	000d883a 	mov	r6,zero
  81bdd8:	0009883a 	mov	r4,zero
  81bddc:	000f883a 	mov	r7,zero
  81bde0:	081be901 	jmpi	81be90 <__register_exitproc>

0081bde4 <exit>:
  81bde4:	defffe04 	addi	sp,sp,-8
  81bde8:	000b883a 	mov	r5,zero
  81bdec:	dc000015 	stw	r16,0(sp)
  81bdf0:	dfc00115 	stw	ra,4(sp)
  81bdf4:	2021883a 	mov	r16,r4
  81bdf8:	081bfc80 	call	81bfc8 <__call_exitprocs>
  81bdfc:	008020b4 	movhi	r2,130
  81be00:	10b96304 	addi	r2,r2,-6772
  81be04:	11000017 	ldw	r4,0(r2)
  81be08:	20800f17 	ldw	r2,60(r4)
  81be0c:	10000126 	beq	r2,zero,81be14 <exit+0x30>
  81be10:	103ee83a 	callr	r2
  81be14:	8009883a 	mov	r4,r16
  81be18:	081c1b80 	call	81c1b8 <_exit>

0081be1c <memcmp>:
  81be1c:	00c000c4 	movi	r3,3
  81be20:	1980032e 	bgeu	r3,r6,81be30 <memcmp+0x14>
  81be24:	2144b03a 	or	r2,r4,r5
  81be28:	10c4703a 	and	r2,r2,r3
  81be2c:	10000f26 	beq	r2,zero,81be6c <memcmp+0x50>
  81be30:	31ffffc4 	addi	r7,r6,-1
  81be34:	3000061e 	bne	r6,zero,81be50 <memcmp+0x34>
  81be38:	00000a06 	br	81be64 <memcmp+0x48>
  81be3c:	39ffffc4 	addi	r7,r7,-1
  81be40:	00bfffc4 	movi	r2,-1
  81be44:	21000044 	addi	r4,r4,1
  81be48:	29400044 	addi	r5,r5,1
  81be4c:	38800526 	beq	r7,r2,81be64 <memcmp+0x48>
  81be50:	20c00003 	ldbu	r3,0(r4)
  81be54:	28800003 	ldbu	r2,0(r5)
  81be58:	18bff826 	beq	r3,r2,81be3c <memcmp+0x20>
  81be5c:	1885c83a 	sub	r2,r3,r2
  81be60:	f800283a 	ret
  81be64:	0005883a 	mov	r2,zero
  81be68:	f800283a 	ret
  81be6c:	180f883a 	mov	r7,r3
  81be70:	20c00017 	ldw	r3,0(r4)
  81be74:	28800017 	ldw	r2,0(r5)
  81be78:	18bfed1e 	bne	r3,r2,81be30 <memcmp+0x14>
  81be7c:	31bfff04 	addi	r6,r6,-4
  81be80:	21000104 	addi	r4,r4,4
  81be84:	29400104 	addi	r5,r5,4
  81be88:	39bff936 	bltu	r7,r6,81be70 <memcmp+0x54>
  81be8c:	003fe806 	br	81be30 <memcmp+0x14>

0081be90 <__register_exitproc>:
  81be90:	defffa04 	addi	sp,sp,-24
  81be94:	008020b4 	movhi	r2,130
  81be98:	10b96304 	addi	r2,r2,-6772
  81be9c:	dc000015 	stw	r16,0(sp)
  81bea0:	14000017 	ldw	r16,0(r2)
  81bea4:	dd000415 	stw	r20,16(sp)
  81bea8:	2829883a 	mov	r20,r5
  81beac:	81405217 	ldw	r5,328(r16)
  81beb0:	dcc00315 	stw	r19,12(sp)
  81beb4:	dc800215 	stw	r18,8(sp)
  81beb8:	dc400115 	stw	r17,4(sp)
  81bebc:	dfc00515 	stw	ra,20(sp)
  81bec0:	2023883a 	mov	r17,r4
  81bec4:	3027883a 	mov	r19,r6
  81bec8:	3825883a 	mov	r18,r7
  81becc:	28002526 	beq	r5,zero,81bf64 <__register_exitproc+0xd4>
  81bed0:	29000117 	ldw	r4,4(r5)
  81bed4:	008007c4 	movi	r2,31
  81bed8:	11002716 	blt	r2,r4,81bf78 <__register_exitproc+0xe8>
  81bedc:	8800101e 	bne	r17,zero,81bf20 <__register_exitproc+0x90>
  81bee0:	2105883a 	add	r2,r4,r4
  81bee4:	1085883a 	add	r2,r2,r2
  81bee8:	20c00044 	addi	r3,r4,1
  81beec:	1145883a 	add	r2,r2,r5
  81bef0:	0009883a 	mov	r4,zero
  81bef4:	15000215 	stw	r20,8(r2)
  81bef8:	28c00115 	stw	r3,4(r5)
  81befc:	2005883a 	mov	r2,r4
  81bf00:	dfc00517 	ldw	ra,20(sp)
  81bf04:	dd000417 	ldw	r20,16(sp)
  81bf08:	dcc00317 	ldw	r19,12(sp)
  81bf0c:	dc800217 	ldw	r18,8(sp)
  81bf10:	dc400117 	ldw	r17,4(sp)
  81bf14:	dc000017 	ldw	r16,0(sp)
  81bf18:	dec00604 	addi	sp,sp,24
  81bf1c:	f800283a 	ret
  81bf20:	29802204 	addi	r6,r5,136
  81bf24:	00800044 	movi	r2,1
  81bf28:	110e983a 	sll	r7,r2,r4
  81bf2c:	30c04017 	ldw	r3,256(r6)
  81bf30:	2105883a 	add	r2,r4,r4
  81bf34:	1085883a 	add	r2,r2,r2
  81bf38:	1185883a 	add	r2,r2,r6
  81bf3c:	19c6b03a 	or	r3,r3,r7
  81bf40:	14802015 	stw	r18,128(r2)
  81bf44:	14c00015 	stw	r19,0(r2)
  81bf48:	00800084 	movi	r2,2
  81bf4c:	30c04015 	stw	r3,256(r6)
  81bf50:	88bfe31e 	bne	r17,r2,81bee0 <__register_exitproc+0x50>
  81bf54:	30804117 	ldw	r2,260(r6)
  81bf58:	11c4b03a 	or	r2,r2,r7
  81bf5c:	30804115 	stw	r2,260(r6)
  81bf60:	003fdf06 	br	81bee0 <__register_exitproc+0x50>
  81bf64:	008020f4 	movhi	r2,131
  81bf68:	10a5b804 	addi	r2,r2,-26912
  81bf6c:	100b883a 	mov	r5,r2
  81bf70:	80805215 	stw	r2,328(r16)
  81bf74:	003fd606 	br	81bed0 <__register_exitproc+0x40>
  81bf78:	00802034 	movhi	r2,128
  81bf7c:	10834604 	addi	r2,r2,3352
  81bf80:	1000021e 	bne	r2,zero,81bf8c <__register_exitproc+0xfc>
  81bf84:	013fffc4 	movi	r4,-1
  81bf88:	003fdc06 	br	81befc <__register_exitproc+0x6c>
  81bf8c:	01006404 	movi	r4,400
  81bf90:	103ee83a 	callr	r2
  81bf94:	1007883a 	mov	r3,r2
  81bf98:	103ffa26 	beq	r2,zero,81bf84 <__register_exitproc+0xf4>
  81bf9c:	80805217 	ldw	r2,328(r16)
  81bfa0:	180b883a 	mov	r5,r3
  81bfa4:	18000115 	stw	zero,4(r3)
  81bfa8:	18800015 	stw	r2,0(r3)
  81bfac:	80c05215 	stw	r3,328(r16)
  81bfb0:	18006215 	stw	zero,392(r3)
  81bfb4:	18006315 	stw	zero,396(r3)
  81bfb8:	0009883a 	mov	r4,zero
  81bfbc:	883fc826 	beq	r17,zero,81bee0 <__register_exitproc+0x50>
  81bfc0:	003fd706 	br	81bf20 <__register_exitproc+0x90>

0081bfc4 <register_fini>:
  81bfc4:	f800283a 	ret

0081bfc8 <__call_exitprocs>:
  81bfc8:	008020b4 	movhi	r2,130
  81bfcc:	10b96304 	addi	r2,r2,-6772
  81bfd0:	10800017 	ldw	r2,0(r2)
  81bfd4:	defff304 	addi	sp,sp,-52
  81bfd8:	df000b15 	stw	fp,44(sp)
  81bfdc:	d8800115 	stw	r2,4(sp)
  81bfe0:	00802034 	movhi	r2,128
  81bfe4:	10834104 	addi	r2,r2,3332
  81bfe8:	1005003a 	cmpeq	r2,r2,zero
  81bfec:	d8800215 	stw	r2,8(sp)
  81bff0:	d8800117 	ldw	r2,4(sp)
  81bff4:	dd400815 	stw	r21,32(sp)
  81bff8:	dd000715 	stw	r20,28(sp)
  81bffc:	10805204 	addi	r2,r2,328
  81c000:	dfc00c15 	stw	ra,48(sp)
  81c004:	ddc00a15 	stw	r23,40(sp)
  81c008:	dd800915 	stw	r22,36(sp)
  81c00c:	dcc00615 	stw	r19,24(sp)
  81c010:	dc800515 	stw	r18,20(sp)
  81c014:	dc400415 	stw	r17,16(sp)
  81c018:	dc000315 	stw	r16,12(sp)
  81c01c:	282b883a 	mov	r21,r5
  81c020:	2039883a 	mov	fp,r4
  81c024:	d8800015 	stw	r2,0(sp)
  81c028:	2829003a 	cmpeq	r20,r5,zero
  81c02c:	d8800117 	ldw	r2,4(sp)
  81c030:	14405217 	ldw	r17,328(r2)
  81c034:	88001026 	beq	r17,zero,81c078 <__call_exitprocs+0xb0>
  81c038:	ddc00017 	ldw	r23,0(sp)
  81c03c:	88800117 	ldw	r2,4(r17)
  81c040:	8c802204 	addi	r18,r17,136
  81c044:	143fffc4 	addi	r16,r2,-1
  81c048:	80000916 	blt	r16,zero,81c070 <__call_exitprocs+0xa8>
  81c04c:	05bfffc4 	movi	r22,-1
  81c050:	a000151e 	bne	r20,zero,81c0a8 <__call_exitprocs+0xe0>
  81c054:	8409883a 	add	r4,r16,r16
  81c058:	2105883a 	add	r2,r4,r4
  81c05c:	1485883a 	add	r2,r2,r18
  81c060:	10c02017 	ldw	r3,128(r2)
  81c064:	a8c01126 	beq	r21,r3,81c0ac <__call_exitprocs+0xe4>
  81c068:	843fffc4 	addi	r16,r16,-1
  81c06c:	85bff81e 	bne	r16,r22,81c050 <__call_exitprocs+0x88>
  81c070:	d8800217 	ldw	r2,8(sp)
  81c074:	10003126 	beq	r2,zero,81c13c <__call_exitprocs+0x174>
  81c078:	dfc00c17 	ldw	ra,48(sp)
  81c07c:	df000b17 	ldw	fp,44(sp)
  81c080:	ddc00a17 	ldw	r23,40(sp)
  81c084:	dd800917 	ldw	r22,36(sp)
  81c088:	dd400817 	ldw	r21,32(sp)
  81c08c:	dd000717 	ldw	r20,28(sp)
  81c090:	dcc00617 	ldw	r19,24(sp)
  81c094:	dc800517 	ldw	r18,20(sp)
  81c098:	dc400417 	ldw	r17,16(sp)
  81c09c:	dc000317 	ldw	r16,12(sp)
  81c0a0:	dec00d04 	addi	sp,sp,52
  81c0a4:	f800283a 	ret
  81c0a8:	8409883a 	add	r4,r16,r16
  81c0ac:	88c00117 	ldw	r3,4(r17)
  81c0b0:	2105883a 	add	r2,r4,r4
  81c0b4:	1445883a 	add	r2,r2,r17
  81c0b8:	18ffffc4 	addi	r3,r3,-1
  81c0bc:	11800217 	ldw	r6,8(r2)
  81c0c0:	1c001526 	beq	r3,r16,81c118 <__call_exitprocs+0x150>
  81c0c4:	10000215 	stw	zero,8(r2)
  81c0c8:	303fe726 	beq	r6,zero,81c068 <__call_exitprocs+0xa0>
  81c0cc:	00c00044 	movi	r3,1
  81c0d0:	1c06983a 	sll	r3,r3,r16
  81c0d4:	90804017 	ldw	r2,256(r18)
  81c0d8:	8cc00117 	ldw	r19,4(r17)
  81c0dc:	1884703a 	and	r2,r3,r2
  81c0e0:	10001426 	beq	r2,zero,81c134 <__call_exitprocs+0x16c>
  81c0e4:	90804117 	ldw	r2,260(r18)
  81c0e8:	1884703a 	and	r2,r3,r2
  81c0ec:	10000c1e 	bne	r2,zero,81c120 <__call_exitprocs+0x158>
  81c0f0:	2105883a 	add	r2,r4,r4
  81c0f4:	1485883a 	add	r2,r2,r18
  81c0f8:	11400017 	ldw	r5,0(r2)
  81c0fc:	e009883a 	mov	r4,fp
  81c100:	303ee83a 	callr	r6
  81c104:	88800117 	ldw	r2,4(r17)
  81c108:	98bfc81e 	bne	r19,r2,81c02c <__call_exitprocs+0x64>
  81c10c:	b8800017 	ldw	r2,0(r23)
  81c110:	147fd526 	beq	r2,r17,81c068 <__call_exitprocs+0xa0>
  81c114:	003fc506 	br	81c02c <__call_exitprocs+0x64>
  81c118:	8c000115 	stw	r16,4(r17)
  81c11c:	003fea06 	br	81c0c8 <__call_exitprocs+0x100>
  81c120:	2105883a 	add	r2,r4,r4
  81c124:	1485883a 	add	r2,r2,r18
  81c128:	11000017 	ldw	r4,0(r2)
  81c12c:	303ee83a 	callr	r6
  81c130:	003ff406 	br	81c104 <__call_exitprocs+0x13c>
  81c134:	303ee83a 	callr	r6
  81c138:	003ff206 	br	81c104 <__call_exitprocs+0x13c>
  81c13c:	88800117 	ldw	r2,4(r17)
  81c140:	1000081e 	bne	r2,zero,81c164 <__call_exitprocs+0x19c>
  81c144:	89000017 	ldw	r4,0(r17)
  81c148:	20000726 	beq	r4,zero,81c168 <__call_exitprocs+0x1a0>
  81c14c:	b9000015 	stw	r4,0(r23)
  81c150:	8809883a 	mov	r4,r17
  81c154:	0800d040 	call	800d04 <free>
  81c158:	bc400017 	ldw	r17,0(r23)
  81c15c:	883fb71e 	bne	r17,zero,81c03c <__call_exitprocs+0x74>
  81c160:	003fc506 	br	81c078 <__call_exitprocs+0xb0>
  81c164:	89000017 	ldw	r4,0(r17)
  81c168:	882f883a 	mov	r23,r17
  81c16c:	2023883a 	mov	r17,r4
  81c170:	883fb21e 	bne	r17,zero,81c03c <__call_exitprocs+0x74>
  81c174:	003fc006 	br	81c078 <__call_exitprocs+0xb0>

0081c178 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81c178:	defffd04 	addi	sp,sp,-12
  81c17c:	df000215 	stw	fp,8(sp)
  81c180:	df000204 	addi	fp,sp,8
  81c184:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81c188:	e0bfff17 	ldw	r2,-4(fp)
  81c18c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81c190:	e0bffe17 	ldw	r2,-8(fp)
  81c194:	1005003a 	cmpeq	r2,r2,zero
  81c198:	1000021e 	bne	r2,zero,81c1a4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81c19c:	002af070 	cmpltui	zero,zero,43969
  81c1a0:	00000106 	br	81c1a8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81c1a4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81c1a8:	e037883a 	mov	sp,fp
  81c1ac:	df000017 	ldw	fp,0(sp)
  81c1b0:	dec00104 	addi	sp,sp,4
  81c1b4:	f800283a 	ret

0081c1b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81c1b8:	defffd04 	addi	sp,sp,-12
  81c1bc:	dfc00215 	stw	ra,8(sp)
  81c1c0:	df000115 	stw	fp,4(sp)
  81c1c4:	df000104 	addi	fp,sp,4
  81c1c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81c1cc:	008020b4 	movhi	r2,130
  81c1d0:	10807e44 	addi	r2,r2,505
  81c1d4:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81c1d8:	e13fff17 	ldw	r4,-4(fp)
  81c1dc:	081c1780 	call	81c178 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81c1e0:	003fff06 	br	81c1e0 <_exit+0x28>
  81c1e4:	0081bfc4 	movi	r2,1791
